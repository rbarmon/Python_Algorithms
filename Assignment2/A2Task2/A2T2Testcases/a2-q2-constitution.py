import unittest
from assignment2 import CatsTrie

__author__ = "Compiled by Junru (William) Wei, last updated 14/05/2023"

class CatGPTTest(unittest.TestCase):
    
    def test_the_entire_american_constitutio(self):
        # The Constitution of the United States. Source: https://constitutioncenter.org/the-constitution/full-text
        # It was pretty fun discovering a few spelling mistakes within the constitution while parsing this.
        # m = 16, for the words "constitutionally" and "disqualification"
        # n = 7680
        # A total of 21,533 test cases are included, covering all prefixes of all available words in the constitution, in addition to all combinations up to three letters.
        # Update 14/05/2023: My computer ran this in 0.097 seconds
        sentences = [

            "the", "united", "states", "constitution",

            "we", "the", "people", "of", "the", "united", "states", "in", "order", "to", "form", "a", "more", "perfect", "union", "establish", "justice", "insure", "domestic", "tranquility", "provide", "for", "the", "common", "defence", "promote", "the", "general", "welfare", "and", "secure", "the", "blessings", "of", "liberty", "to", "ourselves", "and", "our", "posterity", "do", "ordain", "and", "establish", "this", "constitution", "for", "the", "united", "states", "of", "america", 

            "the", "constitutional", "convention",

            "article", "i",

            "section", "one", "congress",

            "all", "legislative", "powers", "herein", "granted", "shall", "be", "vested", "in", "a", "congress", "of", "the", "united", "states", "which", "shall", "consist", "of", "a", "senate", "and", "house", "of", "representatives", 

            "section", "two", "the", "house", "of", "representatives",

            "the", "house", "of", "representatives", "shall", "be", "composed", "of", "members", "chosen", "every", "second", "year", "by", "the", "people", "of", "the", "several", "states", "and", "the", "electors", "in", "each", "state", "shall", "have", "the", "qualifications", "requisite", "for", "electors", "of", "the", "most", "numerous", "branch", "of", "the", "state", "legislature", 
            "no", "person", "shall", "be", "a", "representative", "who", "shall", "not", "have", "attained", "to", "the", "age", "of", "twenty", "five", "years", "and", "been", "seven", "years", "a", "citizen", "of", "the", "united", "states", "and", "who", "shall", "not", "when", "elected", "be", "an", "inhabitant", "of", "that", "state", "in", "which", "he", "shall", "be", "chosen", 
            "representatives", "and", "direct", "taxes", "shall", "be", "apportioned", "among", "the", "several", "states", "which", "may", "be", "included", "within", "this", "union", "according", "to", "their", "respective", "numbers", "which", "shall", "be", "determined", "by", "adding", "to", "the", "whole", "number", "of", "free", "persons", "including", "those", "bound", "to", "service", "for", "a", "term", "of", "years", "and", "excluding", "indians", "not", "taxed", "three", "fifths", "of", "all", "other", "persons", "the", "actual", "enumeration", "shall", "be", "made", "within", "three", "years", "after", "the", "first", "meeting", "of", "the", "congress", "of", "the", "united", "states", "and", "within", "every", "subsequent", "term", "of", "ten", "years", "in", "such", "manner", "as", "they", "shall", "by", "law", "direct", "the", "number", "of", "representatives", "shall", "not", "exceed", "one", "for", "every", "thirty", "thousand", "but", "each", "state", "shall", "have", "at", "least", "one", "representative", "and", "until", "such", "enumeration", "shall", "be", "made", "the", "state", "of", "new", "hampshire", "shall", "be", "entitled", "to", "chuse", "three", "massachusetts", "eight", "rhode", "island", "and", "providence", "plantations", "one", "connecticut", "five", "new", "york", "six", "new", "jersey", "four", "pennsylvania", "eight", "delaware", "one", "maryland", "six", "virginia", "ten", "north", "carolina", "five", "south", "carolina", "five", "and", "georgia", "three", 
            "when", "vacancies", "happen", "in", "the", "representation", "from", "any", "state", "the", "executive", "authority", "thereof", "shall", "issue", "writs", "of", "election", "to", "fill", "such", "vacancies", 
            "the", "house", "of", "representatives", "shall", "chuse", "their", "speaker", "and", "other", "officers", "and", "shall", "have", "the", "sole", "power", "of", "impeachment", 

            "section", "three", "the", "senate",

            "the", "senate", "of", "the", "united", "states", "shall", "be", "composed", "of", "two", "senators", "from", "each", "state", "chosen", "by", "the", "legislature", "thereof", "for", "six", "years", "and", "each", "senator", "shall", "have", "one", "vote", 
            "immediately", "after", "they", "shall", "be", "assembled", "in", "consequence", "of", "the", "first", "election", "they", "shall", "be", "divided", "as", "equally", "as", "may", "be", "into", "three", "classes", "the", "seats", "of", "the", "senators", "of", "the", "first", "class", "shall", "be", "vacated", "at", "the", "expiration", "of", "the", "second", "year", "of", "the", "second", "class", "at", "the", "expiration", "of", "the", "fourth", "year", "and", "of", "the", "third", "class", "at", "the", "expiration", "of", "the", "sixth", "year", "so", "that", "one", "third", "may", "be", "chosen", "every", "second", "year", "and", "if", "vacancies", "happen", "by", "resignation", "or", "otherwise", "during", "the", "recess", "of", "the", "legislature", "of", "any", "state", "the", "executive", "thereof", "may", "make", "temporary", "appointments", "until", "the", "next", "meeting", "of", "the", "legislature", "which", "shall", "then", "fill", "such", "vacancies", 
            "no", "person", "shall", "be", "a", "senator", "who", "shall", "not", "have", "attained", "to", "the", "age", "of", "thirty", "years", "and", "been", "nine", "years", "a", "citizen", "of", "the", "united", "states", "and", "who", "shall", "not", "when", "elected", "be", "an", "inhabitant", "of", "that", "state", "for", "which", "he", "shall", "be", "chosen", 
            "the", "vice", "president", "of", "the", "united", "states", "shall", "be", "president", "of", "the", "senate", "but", "shall", "have", "no", "vote", "unless", "they", "be", "equally", "divided", 
            "the", "senate", "shall", "chuse", "their", "other", "officers", "and", "also", "a", "president", "pro", "tempore", "in", "the", "absence", "of", "the", "vice", "president", "or", "when", "he", "shall", "exercise", "the", "office", "of", "president", "of", "the", "united", "states", 
            "the", "senate", "shall", "have", "the", "sole", "power", "to", "try", "all", "impeachments", "when", "sitting", "for", "that", "purpose", "they", "shall", "be", "on", "oath", "or", "affirmation", "when", "the", "president", "of", "the", "united", "states", "is", "tried", "the", "chief", "justice", "shall", "preside", "and", "no", "person", "shall", "be", "convicted", "without", "the", "concurrence", "of", "two", "thirds", "of", "the", "members", "present", 
            "judgment", "in", "cases", "of", "impeachment", "shall", "not", "extend", "further", "than", "to", "removal", "from", "office", "and", "disqualification", "to", "hold", "and", "enjoy", "any", "office", "of", "honor", "trust", "or", "profit", "under", "the", "united", "states", "but", "the", "party", "convicted", "shall", "nevertheless", "be", "liable", "and", "subject", "to", "indictment", "trial", "judgment", "and", "punishment", "according", "to", "law", 

            "section", "four", "elections",

            "the", "times", "places", "and", "manner", "of", "holding", "elections", "for", "senators", "and", "representatives", "shall", "be", "prescribed", "in", "each", "state", "by", "the", "legislature", "thereof", "but", "the", "congress", "may", "at", "any", "time", "by", "law", "make", "or", "alter", "such", "regulations", "except", "as", "to", "the", "places", "of", "chusing", "senators", 
            "the", "congress", "shall", "assemble", "at", "least", "once", "in", "every", "year", "and", "such", "meeting", "shall", "be", "on", "the", "first", "monday", "in", "december", "unless", "they", "shall", "by", "law", "appoint", "a", "different", "day", 

            "section", "five", "powers", "and", "duties", "of", "congress",

            "each", "house", "shall", "be", "the", "judge", "of", "the", "elections", "returns", "and", "qualifications", "of", "its", "own", "members", "and", "a", "majority", "of", "each", "shall", "constitute", "a", "quorum", "to", "do", "business", "but", "a", "smaller", "number", "may", "adjourn", "from", "day", "to", "day", "and", "may", "be", "authorized", "to", "compel", "the", "attendance", "of", "absent", "members", "in", "such", "manner", "and", "under", "such", "penalties", "as", "each", "house", "may", "provide", 
            "each", "house", "may", "determine", "the", "rules", "of", "its", "proceedings", "punish", "its", "members", "for", "disorderly", "behaviour", "and", "with", "the", "concurrence", "of", "two", "thirds", "expel", "a", "member", 
            "each", "house", "shall", "keep", "a", "journal", "of", "its", "proceedings", "and", "from", "time", "to", "time", "publish", "the", "same", "excepting", "such", "parts", "as", "may", "in", "their", "judgment", "require", "secrecy", "and", "the", "yeas", "and", "nays", "of", "the", "members", "of", "either", "house", "on", "any", "question", "shall", "at", "the", "desire", "of", "one", "fifth", "of", "those", "present", "be", "entered", "on", "the", "journal", 
            "neither", "house", "during", "the", "session", "of", "congress", "shall", "without", "the", "consent", "of", "the", "other", "adjourn", "for", "more", "than", "three", "days", "nor", "to", "any", "other", "place", "than", "that", "in", "which", "the", "two", "houses", "shall", "be", "sitting", 

            "section", "six", "rights", "and", "disabilities", "of", "members",

            "the", "senators", "and", "representatives", "shall", "receive", "a", "compensation", "for", "their", "services", "to", "be", "ascertained", "by", "law", "and", "paid", "out", "of", "the", "treasury", "of", "the", "united", "states", "they", "shall", "in", "all", "cases", "except", "treason", "felony", "and", "breach", "of", "the", "peace", "be", "privileged", "from", "arrest", "during", "their", "attendance", "at", "the", "session", "of", "their", "respective", "houses", "and", "in", "going", "to", "and", "returning", "from", "the", "same", "and", "for", "any", "speech", "or", "debate", "in", "either", "house", "they", "shall", "not", "be", "questioned", "in", "any", "other", "place", 
            "no", "senator", "or", "representative", "shall", "during", "the", "time", "for", "which", "he", "was", "elected", "be", "appointed", "to", "any", "civil", "office", "under", "the", "authority", "of", "the", "united", "states", "which", "shall", "have", "been", "created", "or", "the", "emoluments", "whereof", "shall", "have", "been", "encreased", "during", "such", "time", "and", "no", "person", "holding", "any", "office", "under", "the", "united", "states", "shall", "be", "a", "member", "of", "either", "house", "during", "his", "continuance", "in", "office", 

            "section", "seven", "legislative", "process",

            "all", "bills", "for", "raising", "revenue", "shall", "originate", "in", "the", "house", "of", "representatives", "but", "the", "senate", "may", "propose", "or", "concur", "with", "amendments", "as", "on", "other", "bills", 
            "every", "bill", "which", "shall", "have", "passed", "the", "house", "of", "representatives", "and", "the", "senate", "shall", "before", "it", "become", "a", "law", "be", "presented", "to", "the", "president", "of", "the", "united", "states", "if", "he", "approve", "he", "shall", "sign", "it", "but", "if", "not", "he", "shall", "return", "it", "with", "his", "objections", "to", "that", "house", "in", "which", "it", "shall", "have", "originated", "who", "shall", "enter", "the", "objections", "at", "large", "on", "their", "journal", "and", "proceed", "to", "reconsider", "it", "if", "after", "such", "reconsideration", "two", "thirds", "of", "that", "house", "shall", "agree", "to", "pass", "the", "bill", "it", "shall", "be", "sent", "together", "with", "the", "objections", "to", "the", "other", "house", "by", "which", "it", "shall", "likewise", "be", "reconsidered", "and", "if", "approved", "by", "two", "thirds", "of", "that", "house", "it", "shall", "become", "a", "law", "but", "in", "all", "such", "cases", "the", "votes", "of", "both", "houses", "shall", "be", "determined", "by", "yeas", "and", "nays", "and", "the", "names", "of", "the", "persons", "voting", "for", "and", "against", "the", "bill", "shall", "be", "entered", "on", "the", "journal", "of", "each", "house", "respectively", "if", "any", "bill", "shall", "not", "be", "returned", "by", "the", "president", "within", "ten", "days", "sundays", "excepted", "after", "it", "shall", "have", "been", "presented", "to", "him", "the", "same", "shall", "be", "a", "law", "in", "like", "manner", "as", "if", "he", "had", "signed", "it", "unless", "the", "congress", "by", "their", "adjournment", "prevent", "its", "return", "in", "which", "case", "it", "shall", "not", "be", "a", "law", 
            "every", "order", "resolution", "or", "vote", "to", "which", "the", "concurrence", "of", "the", "senate", "and", "house", "of", "representatives", "may", "be", "necessary", "except", "on", "a", "question", "of", "adjournment", "shall", "be", "presented", "to", "the", "president", "of", "the", "united", "states", "and", "before", "the", "same", "shall", "take", "effect", "shall", "be", "approved", "by", "him", "or", "being", "disapproved", "by", "him", "shall", "be", "repassed", "by", "two", "thirds", "of", "the", "senate", "and", "house", "of", "representatives", "according", "to", "the", "rules", "and", "limitations", "prescribed", "in", "the", "case", "of", "a", "bill", 

            "section", "eight", "powers", "of", "congress",

            "the", "congress", "shall", "have", "power", "to", "lay", "and", "collect", "taxes", "duties", "imposts", "and", "excises", "to", "pay", "the", "debts", "and", "provide", "for", "the", "common", "defence", "and", "general", "welfare", "of", "the", "united", "states", "but", "all", "duties", "imposts", "and", "excises", "shall", "be", "uniform", "throughout", "the", "united", "states", 
            "to", "borrow", "money", "on", "the", "credit", "of", "the", "united", "states", 
            "to", "regulate", "commerce", "with", "foreign", "nations", "and", "among", "the", "several", "states", "and", "with", "the", "indian", "tribes", 
            "to", "establish", "a", "uniform", "rule", "of", "naturalization", "and", "uniform", "laws", "on", "the", "subject", "of", "bankruptcies", "throughout", "the", "united", "states", 
            "to", "coin", "money", "regulate", "the", "value", "thereof", "and", "of", "foreign", "coin", "and", "fix", "the", "standard", "of", "weights", "and", "measures", 
            "to", "provide", "for", "the", "punishment", "of", "counterfeiting", "the", "securities", "and", "current", "coin", "of", "the", "united", "states", 
            "to", "establish", "post", "offices", "and", "post", "roads", 
            "to", "promote", "the", "progress", "of", "science", "and", "useful", "arts", "by", "securing", "for", "limited", "times", "to", "authors", "and", "inventors", "the", "exclusive", "right", "to", "their", "respective", "writings", "and", "discoveries", 
            "to", "constitute", "tribunals", "inferior", "to", "the", "supreme", "court", 
            "to", "define", "and", "punish", "piracies", "and", "felonies", "committed", "on", "the", "high", "seas", "and", "offenses", "against", "the", "law", "of", "nations", 
            "to", "declare", "war", "grant", "letters", "of", "marque", "and", "reprisal", "and", "make", "rules", "concerning", "captures", "on", "land", "and", "water", 
            "to", "raise", "and", "support", "armies", "but", "no", "appropriation", "of", "money", "to", "that", "use", "shall", "be", "for", "a", "longer", "term", "than", "two", "years", 
            "to", "provide", "and", "maintain", "a", "navy", 
            "to", "make", "rules", "for", "the", "government", "and", "regulation", "of", "the", "land", "and", "naval", "forces", 
            "to", "provide", "for", "calling", "forth", "the", "militia", "to", "execute", "the", "laws", "of", "the", "union", "suppress", "insurrections", "and", "repel", "invasions", 
            "to", "provide", "for", "organizing", "arming", "and", "disciplining", "the", "militia", "and", "for", "governing", "such", "part", "of", "them", "as", "may", "be", "employed", "in", "the", "service", "of", "the", "united", "states", "reserving", "to", "the", "states", "respectively", "the", "appointment", "of", "the", "officers", "and", "the", "authority", "of", "training", "the", "militia", "according", "to", "the", "discipline", "prescribed", "by", "congress", 
            "to", "exercise", "exclusive", "legislation", "in", "all", "cases", "whatsoever", "over", "such", "district", "not", "exceeding", "ten", "miles", "square", "as", "may", "by", "cession", "of", "particular", "states", "and", "the", "acceptance", "of", "congress", "become", "the", "seat", "of", "the", "government", "of", "the", "united", "states", "and", "to", "exercise", "like", "authority", "over", "all", "places", "purchased", "by", "the", "consent", "of", "the", "legislature", "of", "the", "state", "in", "which", "the", "same", "shall", "be", "for", "the", "erection", "of", "forts", "magazines", "arsenals", "dock", "yards", "and", "other", "needful", "buildings", "and",
            "to", "make", "all", "laws", "which", "shall", "be", "necessary", "and", "proper", "for", "carrying", "into", "execution", "the", "foregoing", "powers", "and", "all", "other", "powers", "vested", "by", "this", "constitution", "in", "the", "government", "of", "the", "united", "states", "or", "in", "any", "department", "or", "officer", "thereof", 

            "section", "nine", "powers", "denied", "congress",

            "the", "migration", "or", "importation", "of", "such", "persons", "as", "any", "of", "the", "states", "now", "existing", "shall", "think", "proper", "to", "admit", "shall", "not", "be", "prohibited", "by", "the", "congress", "prior", "to", "the", "year", "one", "thousand", "eight", "hundred", "and", "eight", "but", "a", "tax", "or", "duty", "may", "be", "imposed", "on", "such", "importation", "not", "exceeding", "ten", "dollars", "for", "each", "person", 
            "the", "privilege", "of", "the", "writ", "of", "habeas", "corpus", "shall", "not", "be", "suspended", "unless", "when", "in", "cases", "of", "rebellion", "or", "invasion", "the", "public", "safety", "may", "require", "it", 
            "no", "bill", "of", "attainder", "or", "ex", "post", "facto", "law", "shall", "be", "passed", 
            "no", "capitation", "or", "other", "direct", "tax", "shall", "be", "laid", "unless", "in", "proportion", "to", "the", "census", "or", "enumeration", "herein", "before", "directed", "to", "be", "taken", 
            "no", "tax", "or", "duty", "shall", "be", "laid", "on", "articles", "exported", "from", "any", "state", 
            "no", "preference", "shall", "be", "given", "by", "any", "regulation", "of", "commerce", "or", "revenue", "to", "the", "ports", "of", "one", "state", "over", "those", "of", "another", "nor", "shall", "vessels", "bound", "to", "or", "from", "one", "state", "be", "obliged", "to", "enter", "clear", "or", "pay", "duties", "in", "another", 
            "no", "money", "shall", "be", "drawn", "from", "the", "treasury", "but", "in", "consequence", "of", "appropriations", "made", "by", "law", "and", "a", "regular", "statement", "and", "account", "of", "the", "receipts", "and", "expenditures", "of", "all", "public", "money", "shall", "be", "published", "from", "time", "to", "time", 
            "no", "title", "of", "nobility", "shall", "be", "granted", "by", "the", "united", "states", "and", "no", "person", "holding", "any", "office", "of", "profit", "or", "trust", "under", "them", "shall", "without", "the", "consent", "of", "the", "congress", "accept", "of", "any", "present", "emolument", "office", "or", "title", "of", "any", "kind", "whatever", "from", "any", "king", "prince", "or", "foreign", "state", 

            "section", "ten", "powers", "denied", "to", "the", "states",

            "no", "state", "shall", "enter", "into", "any", "treaty", "alliance", "or", "confederation", "grant", "letters", "of", "marque", "and", "reprisal", "coin", "money", "emit", "bills", "of", "credit", "make", "any", "thing", "but", "gold", "and", "silver", "coin", "a", "tender", "in", "payment", "of", "debts", "pass", "any", "bill", "of", "attainder", "ex", "post", "facto", "law", "or", "law", "impairing", "the", "obligation", "of", "contracts", "or", "grant", "any", "title", "of", "nobility", 
            "no", "state", "shall", "without", "the", "consent", "of", "the", "congress", "lay", "any", "imposts", "or", "duties", "on", "imports", "or", "exports", "except", "what", "may", "be", "absolutely", "necessary", "for", "executing", "its", "inspection", "laws", "and", "the", "net", "produce", "of", "all", "duties", "and", "imposts", "laid", "by", "any", "state", "on", "imports", "or", "exports", "shall", "be", "for", "the", "use", "of", "the", "treasury", "of", "the", "united", "states", "and", "all", "such", "laws", "shall", "be", "subject", "to", "the", "revision", "and", "controul", "of", "the", "congress", 
            "no", "state", "shall", "without", "the", "consent", "of", "congress", "lay", "any", "duty", "of", "tonnage", "keep", "troops", "or", "ships", "of", "war", "in", "time", "of", "peace", "enter", "into", "any", "agreement", "or", "compact", "with", "another", "state", "or", "with", "a", "foreign", "power", "or", "engage", "in", "war", "unless", "actually", "invaded", "or", "in", "such", "imminent", "danger", "as", "will", "not", "admit", "of", "delay", 

            "article", "ii",

            "section", "one",

            "the", "executive", "power", "shall", "be", "vested", "in", "a", "president", "of", "the", "united", "states", "of", "america", 
            "he", "shall", "hold", "his", "office", "during", "the", "term", "of", "four", "years", "and", "together", "with", "the", "vice", "president", "chosen", "for", "the", "same", "term", "be", "elected", "as", "follows", 
            "each", "state", "shall", "appoint", "in", "such", "manner", "as", "the", "legislature", "thereof", "may", "direct", "a", "number", "of", "electors", "equal", "to", "the", "whole", "number", "of", "senators", "and", "representatives", "to", "which", "the", "state", "may", "be", "entitled", "in", "the", "congress", "but", "no", "senator", "or", "representative", "or", "person", "holding", "an", "office", "of", "trust", "or", "profit", "under", "the", "united", "states", "shall", "be", "appointed", "an", "elector", 
            "the", "electors", "shall", "meet", "in", "their", "respective", "states", "and", "vote", "by", "ballot", "for", "two", "persons", "of", "whom", "one", "at", "least", "shall", "not", "be", "an", "inhabitant", "of", "the", "same", "state", "with", "themselves", "and", "they", "shall", "make", "a", "list", "of", "all", "the", "persons", "voted", "for", "and", "of", "the", "number", "of", "votes", "for", "each", "which", "list", "they", "shall", "sign", "and", "certify", "and", "transmit", "sealed", "to", "the", "seat", "of", "the", "government", "of", "the", "united", "states", "directed", "to", "the", "president", "of", "the", "senate", "the", "president", "of", "the", "senate", "shall", "in", "the", "presence", "of", "the", "senate", "and", "house", "of", "representatives", "open", "all", "the", "certificates", "and", "the", "votes", "shall", "then", "be", "counted", "the", "person", "having", "the", "greatest", "number", "of", "votes", "shall", "be", "the", "president", "if", "such", "number", "be", "a", "majority", "of", "the", "whole", "number", "of", "electors", "appointed", "and", "if", "there", "be", "more", "than", "one", "who", "have", "such", "majority", "and", "have", "an", "equal", "number", "of", "votes", "then", "the", "house", "of", "representatives", "shall", "immediately", "chuse", "by", "ballot", "one", "of", "them", "for", "president", "and", "if", "no", "person", "have", "a", "majority", "then", "from", "the", "five", "highest", "on", "the", "list", "the", "said", "house", "shall", "in", "like", "manner", "chuse", "the", "president", "but", "in", "chusing", "the", "president", "the", "votes", "shall", "be", "taken", "by", "states", "the", "representation", "from", "each", "state", "having", "one", "vote", "a", "quorum", "for", "this", "purpose", "shall", "consist", "of", "a", "member", "or", "members", "from", "two", "thirds", "of", "the", "states", "and", "a", "majority", "of", "all", "the", "states", "shall", "be", "necessary", "to", "a", "choice", "in", "every", "case", "after", "the", "choice", "of", "the", "president", "the", "person", "having", "the", "greatest", "number", "of", "votes", "of", "the", "electors", "shall", "be", "the", "vice", "president", "but", "if", "there", "should", "remain", "two", "or", "more", "who", "have", "equal", "votes", "the", "senate", "shall", "chuse", "from", "them", "by", "ballot", "the", "vice", "president", 
            "the", "congress", "may", "determine", "the", "time", "of", "chusing", "the", "electors", "and", "the", "day", "on", "which", "they", "shall", "give", "their", "votes", "which", "day", "shall", "be", "the", "same", "throughout", "the", "united", "states", 
            "no", "person", "except", "a", "natural", "born", "citizen", "or", "a", "citizen", "of", "the", "united", "states", "at", "the", "time", "of", "the", "adoption", "of", "this", "constitution", "shall", "be", "eligible", "to", "the", "office", "of", "president", "neither", "shall", "any", "person", "be", "eligible", "to", "that", "office", "who", "shall", "not", "have", "attained", "to", "the", "age", "of", "thirty", "five", "years", "and", "been", "fourteen", "years", "a", "resident", "within", "the", "united", "states", 
            "in", "case", "of", "the", "removal", "of", "the", "president", "from", "office", "or", "of", "his", "death", "resignation", "or", "inability", "to", "discharge", "the", "powers", "and", "duties", "of", "the", "said", "office", "the", "same", "shall", "devolve", "on", "the", "vice", "president", "and", "the", "congress", "may", "by", "law", "provide", "for", "the", "case", "of", "removal", "death", "resignation", "or", "inability", "both", "of", "the", "president", "and", "vice", "president", "declaring", "what", "officer", "shall", "then", "act", "as", "president", "and", "such", "officer", "shall", "act", "accordingly", "until", "the", "disability", "be", "removed", "or", "a", "president", "shall", "be", "elected", 
            "the", "president", "shall", "at", "stated", "times", "receive", "for", "his", "services", "a", "compensation", "which", "shall", "neither", "be", "increased", "nor", "diminished", "during", "the", "period", "for", "which", "he", "shall", "have", "been", "elected", "and", "he", "shall", "not", "receive", "within", "that", "period", "any", "other", "emolument", "from", "the", "united", "states", "or", "any", "of", "them", 
            "before", "he", "enter", "on", "the", "execution", "of", "his", "office", "he", "shall", "take", "the", "following", "oath", "or", "affirmation", "i", "do", "solemnly", "swear", "or", "affirm", "that", "i", "will", "faithfully", "execute", "the", "office", "of", "president", "of", "the", "united", "states", "and", "will", "to", "the", "best", "of", "my", "ability", "preserve", "protect", "and", "defend", "the", "constitution", "of", "the", "united", "states", 

            "section", "two",

            "the", "president", "shall", "be", "commander", "in", "chief", "of", "the", "army", "and", "navy", "of", "the", "united", "states", "and", "of", "the", "militia", "of", "the", "several", "states", "when", "called", "into", "the", "actual", "service", "of", "the", "united", "states", "he", "may", "require", "the", "opinion", "in", "writing", "of", "the", "principal", "officer", "in", "each", "of", "the", "executive", "departments", "upon", "any", "subject", "relating", "to", "the", "duties", "of", "their", "respective", "offices", "and", "he", "shall", "have", "power", "to", "grant", "reprieves", "and", "pardons", "for", "offenses", "against", "the", "united", "states", "except", "in", "cases", "of", "impeachment", 
            "he", "shall", "have", "power", "by", "and", "with", "the", "advice", "and", "consent", "of", "the", "senate", "to", "make", "treaties", "provided", "two", "thirds", "of", "the", "senators", "present", "concur", "and", "he", "shall", "nominate", "and", "by", "and", "with", "the", "advice", "and", "consent", "of", "the", "senate", "shall", "appoint", "ambassadors", "other", "public", "ministers", "and", "consuls", "judges", "of", "the", "supreme", "court", "and", "all", "other", "officers", "of", "the", "united", "states", "whose", "appointments", "are", "not", "herein", "otherwise", "provided", "for", "and", "which", "shall", "be", "established", "by", "law", "but", "the", "congress", "may", "by", "law", "vest", "the", "appointment", "of", "such", "inferior", "officers", "as", "they", "think", "proper", "in", "the", "president", "alone", "in", "the", "courts", "of", "law", "or", "in", "the", "heads", "of", "departments", 
            "the", "president", "shall", "have", "power", "to", "fill", "up", "all", "vacancies", "that", "may", "happen", "during", "the", "recess", "of", "the", "senate", "by", "granting", "commissions", "which", "shall", "expire", "at", "the", "end", "of", "their", "next", "session", 

            "section", "three",

            "he", "shall", "from", "time", "to", "time", "give", "to", "the", "congress", "information", "of", "the", "state", "of", "the", "union", "and", "recommend", "to", "their", "consideration", "such", "measures", "as", "he", "shall", "judge", "necessary", "and", "expedient", "he", "may", "on", "extraordinary", "occasions", "convene", "both", "houses", "or", "either", "of", "them", "and", "in", "case", "of", "disagreement", "between", "them", "with", "respect", "to", "the", "time", "of", "adjournment", "he", "may", "adjourn", "them", "to", "such", "time", "as", "he", "shall", "think", "proper", "he", "shall", "receive", "ambassadors", "and", "other", "public", "ministers", "he", "shall", "take", "care", "that", "the", "laws", "be", "faithfully", "executed", "and", "shall", "commission", "all", "the", "officers", "of", "the", "united", "states", 

            "section", "four",

            "the", "president", "vice", "president", "and", "all", "civil", "officers", "of", "the", "united", "states", "shall", "be", "removed", "from", "office", "on", "impeachment", "for", "and", "conviction", "of", "treason", "bribery", "or", "other", "high", "crimes", "and", "misdemeanors", 

            "article", "iii",

            "section", "one",

            "the", "judicial", "power", "of", "the", "united", "states", "shall", "be", "vested", "in", "one", "supreme", "court", "and", "in", "such", "inferior", "courts", "as", "the", "congress", "may", "from", "time", "to", "time", "ordain", "and", "establish", "the", "judges", "both", "of", "the", "supreme", "and", "inferior", "courts", "shall", "hold", "their", "offices", "during", "good", "behaviour", "and", "shall", "at", "stated", "times", "receive", "for", "their", "services", "a", "compensation", "which", "shall", "not", "be", "diminished", "during", "their", "continuance", "in", "office", 

            "section", "two",

            "the", "judicial", "power", "shall", "extend", "to", "all", "cases", "in", "law", "and", "equity", "arising", "under", "this", "constitution", "the", "laws", "of", "the", "united", "states", "and", "treaties", "made", "or", "which", "shall", "be", "made", "under", "their", "authority", "to", "all", "cases", "affecting", "ambassadors", "other", "public", "ministers", "and", "consuls", "to", "all", "cases", "of", "admiralty", "and", "maritime", "jurisdiction", "to", "controversies", "to", "which", "the", "united", "states", "shall", "be", "a", "party", "to", "controversies", "between", "two", "or", "more", "states", "between", "a", "state", "and", "citizens", "of", "another", "state", "between", "citizens", "of", "different", "states", "between", "citizens", "of", "the", "same", "state", "claiming", "lands", "under", "grants", "of", "different", "states", "and", "between", "a", "state", "or", "the", "citizens", "thereof", "and", "foreign", "states", "citizens", "or", "subjects", 
            "in", "all", "cases", "affecting", "ambassadors", "other", "public", "ministers", "and", "consuls", "and", "those", "in", "which", "a", "state", "shall", "be", "party", "the", "supreme", "court", "shall", "have", "original", "jurisdiction", "in", "all", "the", "other", "cases", "before", "mentioned", "the", "supreme", "court", "shall", "have", "appellate", "jurisdiction", "both", "as", "to", "law", "and", "fact", "with", "such", "exceptions", "and", "under", "such", "regulations", "as", "the", "congress", "shall", "make", 
            "the", "trial", "of", "all", "crimes", "except", "in", "cases", "of", "impeachment", "shall", "be", "by", "jury", "and", "such", "trial", "shall", "be", "held", "in", "the", "state", "where", "the", "said", "crimes", "shall", "have", "been", "committed", "but", "when", "not", "committed", "within", "any", "state", "the", "trial", "shall", "be", "at", "such", "place", "or", "places", "as", "the", "congress", "may", "by", "law", "have", "directed", 

            "section", "three",

            "treason", "against", "the", "united", "states", "shall", "consist", "only", "in", "levying", "war", "against", "them", "or", "in", "adhering", "to", "their", "enemies", "giving", "them", "aid", "and", "comfort", "no", "person", "shall", "be", "convicted", "of", "treason", "unless", "on", "the", "testimony", "of", "two", "witnesses", "to", "the", "same", "overt", "act", "or", "on", "confession", "in", "open", "court", 
            "the", "congress", "shall", "have", "power", "to", "declare", "the", "punishment", "of", "treason", "but", "no", "attainder", "of", "treason", "shall", "work", "corruption", "of", "blood", "or", "forfeiture", "except", "during", "the", "life", "of", "the", "person", "attainted", 

            "article", "iv",

            "section", "one",

            "full", "faith", "and", "credit", "shall", "be", "given", "in", "each", "state", "to", "the", "public", "acts", "records", "and", "judicial", "proceedings", "of", "every", "other", "state", "and", "the", "congress", "may", "by", "general", "laws", "prescribe", "the", "manner", "in", "which", "such", "acts", "records", "and", "proceedings", "shall", "be", "proved", "and", "the", "effect", "thereof", 

            "section", "two",

            "the", "citizens", "of", "each", "state", "shall", "be", "entitled", "to", "all", "privileges", "and", "immunities", "of", "citizens", "in", "the", "several", "states", 
            "a", "person", "charged", "in", "any", "state", "with", "treason", "felony", "or", "other", "crime", "who", "shall", "flee", "from", "justice", "and", "be", "found", "in", "another", "state", "shall", "on", "demand", "of", "the", "executive", "authority", "of", "the", "state", "from", "which", "he", "fled", "be", "delivered", "up", "to", "be", "removed", "to", "the", "state", "having", "jurisdiction", "of", "the", "crime", 
            "no", "person", "held", "to", "service", "or", "labour", "in", "one", "state", "under", "the", "laws", "thereof", "escaping", "into", "another", "shall", "in", "consequence", "of", "any", "law", "or", "regulation", "therein", "be", "discharged", "from", "such", "service", "or", "labour", "but", "shall", "be", "delivered", "up", "on", "claim", "of", "the", "party", "to", "whom", "such", "service", "or", "labour", "may", "be", "due", 

            "section", "three",

            "new", "states", "may", "be", "admitted", "by", "the", "congress", "into", "this", "union", "but", "no", "new", "state", "shall", "be", "formed", "or", "erected", "within", "the", "jurisdiction", "of", "any", "other", "state", "nor", "any", "state", "be", "formed", "by", "the", "junction", "of", "two", "or", "more", "states", "or", "parts", "of", "states", "without", "the", "consent", "of", "the", "legislatures", "of", "the", "states", "concerned", "as", "well", "as", "of", "the", "congress", 
            "the", "congress", "shall", "have", "power", "to", "dispose", "of", "and", "make", "all", "needful", "rules", "and", "regulations", "respecting", "the", "territory", "or", "other", "property", "belonging", "to", "the", "united", "states", "and", "nothing", "in", "this", "constitution", "shall", "be", "so", "construed", "as", "to", "prejudice", "any", "claims", "of", "the", "united", "states", "or", "of", "any", "particular", "state", 

            "section", "four",

            "the", "united", "states", "shall", "guarantee", "to", "every", "state", "in", "this", "union", "a", "republican", "form", "of", "government", "and", "shall", "protect", "each", "of", "them", "against", "invasion", "and", "on", "application", "of", "the", "legislature", "or", "of", "the", "executive", "when", "the", "legislature", "cannot", "be", "convened", "against", "domestic", "violence", 

            "article", "five",

            "the", "congress", "whenever", "two", "thirds", "of", "both", "houses", "shall", "deem", "it", "necessary", "shall", "propose", "amendments", "to", "this", "constitution", "or", "on", "the", "application", "of", "the", "legislatures", "of", "two", "thirds", "of", "the", "several", "states", "shall", "call", "a", "convention", "for", "proposing", "amendments", "which", "in", "either", "case", "shall", "be", "valid", "to", "all", "intents", "and", "purposes", "as", "part", "of", "this", "constitution", "when", "ratified", "by", "the", "legislatures", "of", "three", "fourths", "of", "the", "several", "states", "or", "by", "conventions", "in", "three", "fourths", "thereof", "as", "the", "one", "or", "the", "other", "mode", "of", "ratification", "may", "be", "proposed", "by", "the", "congress", "provided", "that", "no", "amendment", "which", "may", "be", "made", "prior", "to", "the", "year", "one", "thousand", "eight", "hundred", "and", "eight", "shall", "in", "any", "manner", "affect", "the", "first", "and", "fourth", "clauses", "in", "the", "ninth", "section", "of", "the", "first", "article", "and", "that", "no", "state", "without", "its", "consent", "shall", "be", "deprived", "of", "its", "equal", "suffrage", "in", "the", "senate", 

            "article", "six",

            "all", "debts", "contracted", "and", "engagements", "entered", "into", "before", "the", "adoption", "of", "this", "constitution", "shall", "be", "as", "valid", "against", "the", "united", "states", "under", "this", "constitution", "as", "under", "the", "confederation", 
            "this", "constitution", "and", "the", "laws", "of", "the", "united", "states", "which", "shall", "be", "made", "in", "pursuance", "thereof", "and", "all", "treaties", "made", "or", "which", "shall", "be", "made", "under", "the", "authority", "of", "the", "united", "states", "shall", "be", "the", "supreme", "law", "of", "the", "land", "and", "the", "judges", "in", "every", "state", "shall", "be", "bound", "thereby", "any", "thing", "in", "the", "constitution", "or", "laws", "of", "any", "state", "to", "the", "contrary", "notwithstanding", 
            "the", "senators", "and", "representatives", "before", "mentioned", "and", "the", "members", "of", "the", "several", "state", "legislatures", "and", "all", "executive", "and", "judicial", "officers", "both", "of", "the", "united", "states", "and", "of", "the", "several", "states", "shall", "be", "bound", "by", "oath", "or", "affirmation", "to", "support", "this", "constitution", "but", "no", "religious", "test", "shall", "ever", "be", "required", "as", "a", "qualification", "to", "any", "office", "or", "public", "trust", "under", "the", "united", "states", 

            "article", "seven",

            "the", "ratification", "of", "the", "conventions", "of", "nine", "states", "shall", "be", "sufficient", "for", "the", "establishment", "of", "this", "constitution", "between", "the", "states", "so", "ratifying", "the", "same", 

            "first", "amendment",

            "congress", "shall", "make", "no", "law", "respecting", "an", "establishment", "of", "religion", "or", "prohibiting", "the", "free", "exercise", "thereof", "or", "abridging", "the", "freedom", "of", "speech", "or", "of", "the", "press", "or", "the", "right", "of", "the", "people", "peaceably", "to", "assemble", "and", "to", "petition", "the", "government", "for", "a", "redress", "of", "grievances", 

            "second", "amendment",

            "a", "well", "regulated", "militia", "being", "necessary", "to", "the", "security", "of", "a", "free", "state", "the", "right", "of", "the", "people", "to", "keep", "and", "bear", "arms", "shall", "not", "be", "infringed", 

            "third", "amendment",

            "no", "soldier", "shall", "in", "time", "of", "peace", "be", "quartered", "in", "any", "house", "without", "the", "consent", "of", "the", "owner", "nor", "in", "time", "of", "war", "but", "in", "a", "manner", "to", "be", "prescribed", "by", "law", 

            "fourth", "amendment",

            "the", "right", "of", "the", "people", "to", "be", "secure", "in", "their", "persons", "houses", "papers", "and", "effects", "against", "unreasonable", "searches", "and", "seizures", "shall", "not", "be", "violated", "and", "no", "warrants", "shall", "issue", "but", "upon", "probable", "cause", "supported", "by", "oath", "or", "affirmation", "and", "particularly", "describing", "the", "place", "to", "be", "searched", "and", "the", "persons", "or", "things", "to", "be", "seized", 

            "fifth", "amendment",

            "no", "person", "shall", "be", "held", "to", "answer", "for", "a", "capital", "or", "otherwise", "infamous", "crime", "unless", "on", "a", "presentment", "or", "indictment", "of", "a", "grand", "jury", "except", "in", "cases", "arising", "in", "the", "land", "or", "naval", "forces", "or", "in", "the", "militia", "when", "in", "actual", "service", "in", "time", "of", "war", "or", "public", "danger", "nor", "shall", "any", "person", "be", "subject", "for", "the", "same", "offence", "to", "be", "twice", "put", "in", "jeopardy", "of", "life", "or", "limb", "nor", "shall", "be", "compelled", "in", "any", "criminal", "case", "to", "be", "a", "witness", "against", "himself", "nor", "be", "deprived", "of", "life", "liberty", "or", "property", "without", "due", "process", "of", "law", "nor", "shall", "private", "property", "be", "taken", "for", "public", "use", "without", "just", "compensation", 

            "sixth", "amendment",

            "in", "all", "criminal", "prosecutions", "the", "accused", "shall", "enjoy", "the", "right", "to", "a", "speedy", "and", "public", "trial", "by", "an", "impartial", "jury", "of", "the", "state", "and", "district", "wherein", "the", "crime", "shall", "have", "been", "committed", "which", "district", "shall", "have", "been", "previously", "ascertained", "by", "law", "and", "to", "be", "informed", "of", "the", "nature", "and", "cause", "of", "the", "accusation", "to", "be", "confronted", "with", "the", "witnesses", "against", "him", "to", "have", "compulsory", "process", "for", "obtaining", "witnesses", "in", "his", "favor", "and", "to", "have", "the", "assistance", "of", "counsel", "for", "his", "defence", 

            "seventh", "amendment",

            "in", "suits", "at", "common", "law", "where", "the", "value", "in", "controversy", "shall", "exceed", "twenty", "dollars", "the", "right", "of", "trial", "by", "jury", "shall", "be", "preserved", "and", "no", "fact", "tried", "by", "a", "jury", "shall", "be", "otherwise", "reexamined", "in", "any", "court", "of", "the", "united", "states", "than", "according", "to", "the", "rules", "of", "the", "common", "law", 

            "eighth", "amendment",

            "excessive", "bail", "shall", "not", "be", "required", "nor", "excessive", "fines", "imposed", "nor", "cruel", "and", "unusual", "punishments", "inflicted", 

            "ninth", "amendment",

            "the", "enumeration", "in", "the", "constitution", "of", "certain", "rights", "shall", "not", "be", "construed", "to", "deny", "or", "disparage", "others", "retained", "by", "the", "people", 

            "tenth", "amendment",

            "the", "powers", "not", "delegated", "to", "the", "united", "states", "by", "the", "constitution", "nor", "prohibited", "by", "it", "to", "the", "states", "are", "reserved", "to", "the", "states", "respectively", "or", "to", "the", "people", 

            "eleventh", "amendment",

            "the", "judicial", "power", "of", "the", "united", "states", "shall", "not", "be", "construed", "to", "extend", "to", "any", "suit", "in", "law", "or", "equity", "commenced", "or", "prosecuted", "against", "one", "of", "the", "united", "states", "by", "citizens", "of", "another", "state", "or", "by", "citizens", "or", "subjects", "of", "any", "foreign", "state", 

            "twelfth", "amendment",

            "the", "electors", "shall", "meet", "in", "their", "respective", "states", "and", "vote", "by", "ballot", "for", "president", "and", "vice", "president", "one", "of", "whom", "at", "least", "shall", "not", "be", "an", "inhabitant", "of", "the", "same", "state", "with", "themselves", "they", "shall", "name", "in", "their", "ballots", "the", "person", "voted", "for", "as", "president", "and", "in", "distinct", "ballots", "the", "person", "voted", "for", "as", "vice", "president", "and", "they", "shall", "make", "distinct", "lists", "of", "all", "persons", "voted", "for", "as", "president", "and", "of", "all", "persons", "voted", "for", "as", "vice", "president", "and", "of", "the", "number", "of", "votes", "for", "each", "which", "lists", "they", "shall", "sign", "and", "certify", "and", "transmit", "sealed", "to", "the", "seat", "of", "the", "government", "of", "the", "united", "states", "directed", "to", "the", "president", "of", "the", "senate", "the", "president", "of", "the", "senate", "shall", "in", "the", "presence", "of", "the", "senate", "and", "house", "of", "representatives", "open", "all", "the", "certificates", "and", "the", "votes", "shall", "then", "be", "counted", "the", "person", "having", "the", "greatest", "number", "of", "votes", "for", "president", "shall", "be", "the", "president", "if", "such", "number", "be", "a", "majority", "of", "the", "whole", "number", "of", "electors", "appointed", "and", "if", "no", "person", "have", "such", "majority", "then", "from", "the", "persons", "having", "the", "highest", "numbers", "not", "exceeding", "three", "on", "the", "list", "of", "those", "voted", "for", "as", "president", "the", "house", "of", "representatives", "shall", "choose", "immediately", "by", "ballot", "the", "president", "but", "in", "choosing", "the", "president", "the", "votes", "shall", "be", "taken", "by", "states", "the", "representation", "from", "each", "state", "having", "one", "vote", "a", "quorum", "for", "this", "purpose", "shall", "consist", "of", "a", "member", "or", "members", "from", "two", "thirds", "of", "the", "states", "and", "a", "majority", "of", "all", "the", "states", "shall", "be", "necessary", "to", "a", "choice", "and", "if", "the", "house", "of", "representatives", "shall", "not", "choose", "a", "president", "whenever", "the", "right", "of", "choice", "shall", "devolve", "upon", "them", "before", "the", "fourth", "day", "of", "march", "next", "following", "then", "the", "vice", "president", "shall", "act", "as", "president", "as", "in", "case", "of", "the", "death", "or", "other", "constitutional", "disability", "of", "the", "president", "the", "person", "having", "the", "greatest", "number", "of", "votes", "as", "vice", "president", "shall", "be", "the", "vice", "president", "if", "such", "number", "be", "a", "majority", "of", "the", "whole", "number", "of", "electors", "appointed", "and", "if", "no", "person", "have", "a", "majority", "then", "from", "the", "two", "highest", "numbers", "on", "the", "list", "the", "senate", "shall", "choose", "the", "vice", "president", "a", "quorum", "for", "the", "purpose", "shall", "consist", "of", "two", "thirds", "of", "the", "whole", "number", "of", "senators", "and", "a", "majority", "of", "the", "whole", "number", "shall", "be", "necessary", "to", "a", "choice", "but", "no", "person", "constitutionally", "ineligible", "to", "the", "office", "of", "president", "shall", "be", "eligible", "to", "that", "of", "vice", "president", "of", "the", "united", "states", 

            "thirteen", "amendment",

            "section", "one",

            "neither", "slavery", "nor", "involuntary", "servitude", "except", "as", "a", "punishment", "for", "crime", "whereof", "the", "party", "shall", "have", "been", "duly", "convicted", "shall", "exist", "within", "the", "united", "states", "or", "any", "place", "subject", "to", "their", "jurisdiction", 

            "section", "two",

            "congress", "shall", "have", "power", "to", "enforce", "this", "article", "by", "appropriate", "legislation", 

            "fourteenth", "amendment",

            "section", "one",

            "all", "persons", "born", "or", "naturalized", "in", "the", "united", "states", "and", "subject", "to", "the", "jurisdiction", "thereof", "are", "citizens", "of", "the", "united", "states", "and", "of", "the", "state", "wherein", "they", "reside", "no", "state", "shall", "make", "or", "enforce", "any", "law", "which", "shall", "abridge", "the", "privileges", "or", "immunities", "of", "citizens", "of", "the", "united", "states", "nor", "shall", "any", "state", "deprive", "any", "person", "of", "life", "liberty", "or", "property", "without", "due", "process", "of", "law", "nor", "deny", "to", "any", "person", "within", "its", "jurisdiction", "the", "equal", "protection", "of", "the", "laws", 

            "section", "two",

            "representatives", "shall", "be", "apportioned", "among", "the", "several", "states", "according", "to", "their", "respective", "numbers", "counting", "the", "whole", "number", "of", "persons", "in", "each", "state", "excluding", "indians", "not", "taxed", "but", "when", "the", "right", "to", "vote", "at", "any", "election", "for", "the", "choice", "of", "electors", "for", "president", "and", "vice", "president", "of", "the", "united", "states", "representatives", "in", "congress", "the", "executive", "and", "judicial", "officers", "of", "a", "state", "or", "the", "members", "of", "the", "legislature", "thereof", "is", "denied", "to", "any", "of", "the", "male", "inhabitants", "of", "such", "state", "being", "twenty", "one", "years", "of", "age", "and", "citizens", "of", "the", "united", "states", "or", "in", "any", "way", "abridged", "except", "for", "participation", "in", "rebellion", "or", "other", "crime", "the", "basis", "of", "representation", "therein", "shall", "be", "reduced", "in", "the", "proportion", "which", "the", "number", "of", "such", "male", "citizens", "shall", "bear", "to", "the", "whole", "number", "of", "male", "citizens", "twenty", "one", "years", "of", "age", "in", "such", "state", 

            "section", "three",

            "no", "person", "shall", "be", "a", "senator", "or", "representative", "in", "congress", "or", "elector", "of", "president", "and", "vice", "president", "or", "hold", "any", "office", "civil", "or", "military", "under", "the", "united", "states", "or", "under", "any", "state", "who", "having", "previously", "taken", "an", "oath", "as", "a", "member", "of", "congress", "or", "as", "an", "officer", "of", "the", "united", "states", "or", "as", "a", "member", "of", "any", "state", "legislature", "or", "as", "an", "executive", "or", "judicial", "officer", "of", "any", "state", "to", "support", "the", "constitution", "of", "the", "united", "states", "shall", "have", "engaged", "in", "insurrection", "or", "rebellion", "against", "the", "same", "or", "given", "aid", "or", "comfort", "to", "the", "enemies", "thereof", "but", "congress", "may", "by", "a", "vote", "of", "two", "thirds", "of", "each", "house", "remove", "such", "disability", 

            "section", "four",

            "the", "validity", "of", "the", "public", "debt", "of", "the", "united", "states", "authorized", "by", "law", "including", "debts", "incurred", "for", "payment", "of", "pensions", "and", "bounties", "for", "services", "in", "suppressing", "insurrection", "or", "rebellion", "shall", "not", "be", "questioned", "but", "neither", "the", "united", "states", "nor", "any", "state", "shall", "assume", "or", "pay", "any", "debt", "or", "obligation", "incurred", "in", "aid", "of", "insurrection", "or", "rebellion", "against", "the", "united", "states", "or", "any", "claim", "for", "the", "loss", "or", "emancipation", "of", "any", "slave", "but", "all", "such", "debts", "obligations", "and", "claims", "shall", "be", "held", "illegal", "and", "void", 

            "section", "five",

            "the", "congress", "shall", "have", "the", "power", "to", "enforce", "by", "appropriate", "legislation", "the", "provisions", "of", "this", "article", 

            "fifteenth", "amendment",

            "section", "one",

            "the", "right", "of", "citizens", "of", "the", "united", "states", "to", "vote", "shall", "not", "be", "denied", "or", "abridged", "by", "the", "united", "states", "or", "by", "any", "state", "on", "account", "of", "race", "color", "or", "previous", "condition", "of", "servitude", 

            "section", "two",

            "the", "congress", "shall", "have", "the", "power", "to", "enforce", "this", "article", "by", "appropriate", "legislation", 

            "sixteenth", "amendment",

            "the", "congress", "shall", "have", "power", "to", "lay", "and", "collect", "taxes", "on", "incomes", "from", "whatever", "source", "derived", "without", "apportionment", "among", "the", "several", "states", "and", "without", "regard", "to", "any", "census", "or", "enumeration", 

            "seventeenth", "amendment",

            "the", "senate", "of", "the", "united", "states", "shall", "be", "composed", "of", "two", "senators", "from", "each", "state", "elected", "by", "the", "people", "thereof", "for", "six", "years", "and", "each", "senator", "shall", "have", "one", "vote", "the", "electors", "in", "each", "state", "shall", "have", "the", "qualifications", "requisite", "for", "electors", "of", "the", "most", "numerous", "branch", "of", "the", "state", "legislatures", 
            "when", "vacancies", "happen", "in", "the", "representation", "of", "any", "state", "in", "the", "senate", "the", "executive", "authority", "of", "such", "state", "shall", "issue", "writs", "of", "election", "to", "fill", "such", "vacancies", "provided", "that", "the", "legislature", "of", "any", "state", "may", "empower", "the", "executive", "thereof", "to", "make", "temporary", "appointments", "until", "the", "people", "fill", "the", "vacancies", "by", "election", "as", "the", "legislature", "may", "direct", 
            "this", "amendment", "shall", "not", "be", "so", "construed", "as", "to", "affect", "the", "election", "or", "term", "of", "any", "senator", "chosen", "before", "it", "becomes", "valid", "as", "part", "of", "the", "constitution", 

            "eighteenth", "amendment",

            "section", "one",

            "after", "one", "year", "from", "the", "ratification", "of", "this", "article", "the", "manufacture", "sale", "or", "transportation", "of", "intoxicating", "liquors", "within", "the", "importation", "thereof", "into", "or", "the", "exportation", "thereof", "from", "the", "united", "states", "and", "all", "territory", "subject", "to", "the", "jurisdiction", "thereof", "for", "beverage", "purposes", "is", "hereby", "prohibited", 

            "section", "two",

            "the", "congress", "and", "the", "several", "states", "shall", "have", "concurrent", "power", "to", "enforce", "this", "article", "by", "appropriate", "legislation", 

            "section", "three",

            "this", "article", "shall", "be", "inoperative", "unless", "it", "shall", "have", "been", "ratified", "as", "an", "amendment", "to", "the", "constitution", "by", "the", "legislatures", "of", "the", "several", "states", "as", "provided", "in", "the", "constitution", "within", "seven", "years", "from", "the", "date", "of", "the", "submission", "hereof", "to", "the", "states", "by", "the", "congress", 

            "nineteenth", "amendment",

            "the", "right", "of", "citizens", "of", "the", "united", "states", "to", "vote", "shall", "not", "be", "denied", "or", "abridged", "by", "the", "united", "states", "or", "by", "any", "state", "on", "account", "of", "sex", 
            "congress", "shall", "have", "power", "to", "enforce", "this", "article", "by", "appropriate", "legislation", 

            "twentieth", "amendment",

            "section", "one",

            "the", "terms", "of", "the", "president", "and", "the", "vice", "president", "shall", "end", "at", "noon", "on", "the", "twentieth", "day", "of", "january", "and", "the", "terms", "of", "senators", "and", "representatives", "at", "noon", "on", "the", "third", "day", "of", "january", "of", "the", "years", "in", "which", "such", "terms", "would", "have", "ended", "if", "this", "article", "had", "not", "been", "ratified", "and", "the", "terms", "of", "their", "successors", "shall", "then", "begin", 

            "section", "two",

            "the", "congress", "shall", "assemble", "at", "least", "once", "in", "every", "year", "and", "such", "meeting", "shall", "begin", "at", "noon", "on", "the", "third", "day", "of", "january", "unless", "they", "shall", "by", "law", "appoint", "a", "different", "day", 

            "section", "three",

            "if", "at", "the", "time", "fixed", "for", "the", "beginning", "of", "the", "term", "of", "the", "president", "the", "president", "elect", "shall", "have", "died", "the", "vice", "president", "elect", "shall", "become", "president", "if", "a", "president", "shall", "not", "have", "been", "chosen", "before", "the", "time", "fixed", "for", "the", "beginning", "of", "his", "term", "or", "if", "the", "president", "elect", "shall", "have", "failed", "to", "qualify", "then", "the", "vice", "president", "elect", "shall", "act", "as", "president", "until", "a", "president", "shall", "have", "qualified", "and", "the", "congress", "may", "by", "law", "provide", "for", "the", "case", "wherein", "neither", "a", "president", "elect", "nor", "a", "vice", "president", "shall", "have", "qualified", "declaring", "who", "shall", "then", "act", "as", "president", "or", "the", "manner", "in", "which", "one", "who", "is", "to", "act", "shall", "be", "selected", "and", "such", "person", "shall", "act", "accordingly", "until", "a", "president", "or", "vice", "president", "shall", "have", "qualified", 

            "section", "four",

            "the", "congress", "may", "by", "law", "provide", "for", "the", "case", "of", "the", "death", "of", "any", "of", "the", "persons", "from", "whom", "the", "house", "of", "representatives", "may", "choose", "a", "president", "whenever", "the", "right", "of", "choice", "shall", "have", "devolved", "upon", "them", "and", "for", "the", "case", "of", "the", "death", "of", "any", "of", "the", "persons", "from", "whom", "the", "senate", "may", "choose", "a", "vice", "president", "whenever", "the", "right", "of", "choice", "shall", "have", "devolved", "upon", "them", 

            "section", "five",

            "sections", "one", "andtwoshall", "take", "effect", "on", "the", "fifteenth", "day", "of", "october", "following", "the", "ratification", "of", "this", "article", 

            "section", "six",

            "this", "article", "shall", "be", "inoperative", "unless", "it", "shall", "have", "been", "ratified", "as", "an", "amendment", "to", "the", "constitution", "by", "the", "legislatures", "of", "three", "fourths", "of", "the", "several", "states", "within", "seven", "years", "from", "the", "date", "of", "its", "submission", 

            "twenty", "first", "amendment",

            "section", "one",

            "the", "eighteenth", "article", "of", "amendment", "to", "the", "constitution", "of", "the", "united", "states", "is", "hereby", "repealed", 

            "section", "two",

            "the", "transportation", "or", "importation", "into", "any", "state", "territory", "or", "possession", "of", "the", "united", "states", "for", "delivery", "or", "use", "therein", "of", "intoxicating", "liquors", "in", "violation", "of", "the", "laws", "thereof", "is", "hereby", "prohibited", 

            "section", "three",

            "this", "article", "shall", "be", "inoperative", "unless", "it", "shall", "have", "been", "ratified", "as", "an", "amendment", "to", "the", "constitution", "by", "conventions", "in", "the", "several", "states", "as", "provided", "in", "the", "constitution", "within", "seven", "years", "from", "the", "date", "of", "the", "submission", "hereof", "to", "the", "states", "by", "the", "congress", 

            "twenty", "second", "amendment",

            "section", "one",

            "no", "person", "shall", "be", "elected", "to", "the", "office", "of", "the", "president", "more", "than", "twice", "and", "no", "person", "who", "has", "held", "the", "office", "of", "president", "or", "acted", "as", "president", "for", "more", "than", "two", "years", "of", "a", "term", "to", "which", "some", "other", "person", "was", "elected", "president", "shall", "be", "elected", "to", "the", "office", "of", "president", "more", "than", "once", "but", "this", "article", "shall", "not", "apply", "to", "any", "person", "holding", "the", "office", "of", "president", "when", "this", "article", "was", "proposed", "by", "congress", "and", "shall", "not", "prevent", "any", "person", "who", "may", "be", "holding", "the", "office", "of", "president", "or", "acting", "as", "president", "during", "the", "term", "within", "which", "this", "article", "becomes", "operative", "from", "holding", "the", "office", "of", "president", "or", "acting", "as", "president", "during", "the", "remainder", "of", "such", "term", 

            "section", "two",

            "this", "article", "shall", "be", "inoperative", "unless", "it", "shall", "have", "been", "ratified", "as", "an", "amendment", "to", "the", "constitution", "by", "the", "legislatures", "of", "three", "fourths", "of", "the", "several", "states", "within", "seven", "years", "from", "the", "date", "of", "its", "submission", "to", "the", "states", "by", "the", "congress", 

            "twenty", "third", "amendment",

            "section", "one",

            "the", "district", "constituting", "the", "seat", "of", "government", "of", "the", "united", "states", "shall", "appoint", "in", "such", "manner", "as", "congress", "may", "direct", 
            "a", "number", "of", "electors", "of", "president", "and", "vice", "president", "equal", "to", "the", "whole", "number", "of", "senators", "and", "representatives", "in", "congress", "to", "which", "the", "district", "would", "be", "entitled", "if", "it", "were", "a", "state", "but", "in", "no", "event", "more", "than", "the", "least", "populous", "state", "they", "shall", "be", "in", "addition", "to", "those", "appointed", "by", "the", "states", "but", "they", "shall", "be", "considered", "for", "the", "purposes", "of", "the", "election", "of", "president", "and", "vice", "president", "to", "be", "electors", "appointed", "by", "a", "state", "and", "they", "shall", "meet", "in", "the", "district", "and", "perform", "such", "duties", "as", "provided", "by", "the", "twelfth", "article", "of", "amendment", 

            "section", "two",

            "the", "congress", "shall", "have", "power", "to", "enforce", "this", "article", "by", "appropriate", "legislation", 

            "twenty", "fourth", "amendment",

            "section", "one",

            "the", "right", "of", "citizens", "of", "the", "united", "states", "to", "vote", "in", "any", "primary", "or", "other", "election", "for", "president", "or", "vice", "president", "for", "electors", "for", "president", "or", "vice", "president", "or", "for", "senator", "or", "representative", "in", "congress", "shall", "not", "be", "denied", "or", "abridged", "by", "the", "united", "states", "or", "any", "state", "by", "reason", "of", "failure", "to", "pay", "poll", "tax", "or", "other", "tax", 

            "section", "two",

            "the", "congress", "shall", "have", "power", "to", "enforce", "this", "article", "by", "appropriate", "legislation", 

            "twenty", "fifth", "amendment",

            "section", "one",

            "in", "case", "of", "the", "removal", "of", "the", "president", "from", "office", "or", "of", "his", "death", "or", "resignation", "the", "vice", "president", "shall", "become", "president", 

            "section", "two",

            "whenever", "there", "is", "a", "vacancy", "in", "the", "office", "of", "the", "vice", "president", "the", "president", "shall", "nominate", "a", "vice", "president", "who", "shall", "take", "office", "upon", "confirmation", "by", "a", "majority", "vote", "of", "both", "houses", "of", "congress", 

            "section", "three",

            "whenever", "the", "president", "transmits", "to", "the", "president", "pro", "tempore", "of", "the", "senate", "and", "the", "speaker", "of", "the", "house", "of", "representatives", "his", "written", "declaration", "that", "he", "is", "unable", "to", "discharge", "the", "powers", "and", "duties", "of", "his", "office", "and", "until", "he", "transmits", "to", "them", "a", "written", "declaration", "to", "the", "contrary", "such", "powers", "and", "duties", "shall", "be", "discharged", "by", "the", "vice", "president", "as", "acting", "president", 

            "section", "four",

            "whenever", "the", "vice", "president", "and", "a", "majority", "of", "either", "the", "principal", "officers", "of", "the", "executive", "departments", "or", "of", "such", "other", "body", "as", "congress", "may", "by", "law", "provide", "transmit", "to", "the", "president", "pro", "tempore", "of", "the", "senate", "and", "the", "speaker", "of", "the", "house", "of", "representatives", "their", "written", "declaration", "that", "the", "president", "is", "unable", "to", "discharge", "the", "powers", "and", "duties", "of", "his", "office", "the", "vice", "president", "shall", "immediately", "assume", "the", "powers", "and", "duties", "of", "the", "office", "as", "acting", "president", 
            "thereafter", "when", "the", "president", "transmits", "to", "the", "president", "pro", "tempore", "of", "the", "senate", "and", "the", "speaker", "of", "the", "house", "of", "representatives", "his", "written", "declaration", "that", "no", "inability", "exists", "he", "shall", "resume", "the", "powers", "and", "duties", "of", "his", "office", "unless", "the", "vice", "president", "and", "a", "majority", "of", "either", "the", "principal", "officers", "of", "the", "executive", "department", "or", "of", "such", "other", "body", "as", "congress", "may", "by", "law", "provide", "transmit", "within", "four", "days", "to", "the", "president", "pro", "tempore", "of", "the", "senate", "and", "the", "speaker", "of", "the", "house", "of", "representatives", "their", "written", "declaration", "that", "the", "president", "is", "unable", "to", "discharge", "the", "powers", "and", "duties", "of", "his", "office", "thereupon", "congress", "shall", "decide", "the", "issue", "assembling", "within", "forty", "eight", "hours", "for", "that", "purpose", "if", "not", "in", "session", "if", "the", "congress", "within", "twenty", "one", "days", "after", "receipt", "of", "the", "latter", "written", "declaration", "or", "if", "congress", "is", "not", "in", "session", "within", "twenty", "one", "days", "after", "congress", "is", "required", "to", "assemble", "determines", "by", "two", "thirds", "vote", "of", "both", "houses", "that", "the", "president", "is", "unable", "to", "discharge", "the", "powers", "and", "duties", "of", "his", "office", "the", "vice", "president", "shall", "continue", "to", "discharge", "the", "same", "as", "acting", "president", "otherwise", "the", "president", "shall", "resume", "the", "powers", "and", "duties", "of", "his", "office", 

            "twenty", "sixth", "amendment",

            "section", "one",

            "the", "right", "of", "citizens", "of", "the", "united", "states", "who", "are", "eighteen", "years", "of", "age", "or", "older", "to", "vote", "shall", "not", "be", "denied", "or", "abridged", "by", "the", "united", "states", "or", "by", "any", "state", "on", "account", "of", "age", 

            "section", "two",

            "the", "congress", "shall", "have", "power", "to", "enforce", "this", "article", "by", "appropriate", "legislation", 

            "twenty", "seventh", "amendment",

            "no", "law", "varying", "the", "compensation", "for", "the", "services", "of", "the", "senators", "and", "representatives", "shall", "take", "effect", "until", "an", "election", "of", "representatives", "shall", "have", "intervened", 
        ]
        trie = CatsTrie(sentences)
        self.assertTrue(trie.autoComplete("") == "the")
        self.assertTrue(trie.autoComplete("a") == "and")
        self.assertTrue(trie.autoComplete("aa") == None)
        self.assertTrue(trie.autoComplete("aaa") == None)
        self.assertTrue(trie.autoComplete("aab") == None)
        self.assertTrue(trie.autoComplete("aac") == None)
        self.assertTrue(trie.autoComplete("aad") == None)
        self.assertTrue(trie.autoComplete("aae") == None)
        self.assertTrue(trie.autoComplete("aaf") == None)
        self.assertTrue(trie.autoComplete("aag") == None)
        self.assertTrue(trie.autoComplete("aah") == None)
        self.assertTrue(trie.autoComplete("aai") == None)
        self.assertTrue(trie.autoComplete("aaj") == None)
        self.assertTrue(trie.autoComplete("aak") == None)
        self.assertTrue(trie.autoComplete("aal") == None)
        self.assertTrue(trie.autoComplete("aam") == None)
        self.assertTrue(trie.autoComplete("aan") == None)
        self.assertTrue(trie.autoComplete("aao") == None)
        self.assertTrue(trie.autoComplete("aap") == None)
        self.assertTrue(trie.autoComplete("aaq") == None)
        self.assertTrue(trie.autoComplete("aar") == None)
        self.assertTrue(trie.autoComplete("aas") == None)
        self.assertTrue(trie.autoComplete("aat") == None)
        self.assertTrue(trie.autoComplete("aau") == None)
        self.assertTrue(trie.autoComplete("aav") == None)
        self.assertTrue(trie.autoComplete("aaw") == None)
        self.assertTrue(trie.autoComplete("aax") == None)
        self.assertTrue(trie.autoComplete("aay") == None)
        self.assertTrue(trie.autoComplete("aaz") == None)
        self.assertTrue(trie.autoComplete("ab") == "abridged")
        self.assertTrue(trie.autoComplete("aba") == None)
        self.assertTrue(trie.autoComplete("abb") == None)
        self.assertTrue(trie.autoComplete("abc") == None)
        self.assertTrue(trie.autoComplete("abd") == None)
        self.assertTrue(trie.autoComplete("abe") == None)
        self.assertTrue(trie.autoComplete("abf") == None)
        self.assertTrue(trie.autoComplete("abg") == None)
        self.assertTrue(trie.autoComplete("abh") == None)
        self.assertTrue(trie.autoComplete("abi") == "ability")
        self.assertTrue(trie.autoComplete("abil") == "ability")
        self.assertTrue(trie.autoComplete("abili") == "ability")
        self.assertTrue(trie.autoComplete("abilit") == "ability")
        self.assertTrue(trie.autoComplete("ability") == "ability")
        self.assertTrue(trie.autoComplete("abj") == None)
        self.assertTrue(trie.autoComplete("abk") == None)
        self.assertTrue(trie.autoComplete("abl") == None)
        self.assertTrue(trie.autoComplete("abm") == None)
        self.assertTrue(trie.autoComplete("abn") == None)
        self.assertTrue(trie.autoComplete("abo") == None)
        self.assertTrue(trie.autoComplete("abp") == None)
        self.assertTrue(trie.autoComplete("abq") == None)
        self.assertTrue(trie.autoComplete("abr") == "abridged")
        self.assertTrue(trie.autoComplete("abri") == "abridged")
        self.assertTrue(trie.autoComplete("abrid") == "abridged")
        self.assertTrue(trie.autoComplete("abridg") == "abridged")
        self.assertTrue(trie.autoComplete("abridge") == "abridged")
        self.assertTrue(trie.autoComplete("abridged") == "abridged")
        self.assertTrue(trie.autoComplete("abridgi") == "abridging")
        self.assertTrue(trie.autoComplete("abridgin") == "abridging")
        self.assertTrue(trie.autoComplete("abridging") == "abridging")
        self.assertTrue(trie.autoComplete("abs") == "absence")
        self.assertTrue(trie.autoComplete("abse") == "absence")
        self.assertTrue(trie.autoComplete("absen") == "absence")
        self.assertTrue(trie.autoComplete("absenc") == "absence")
        self.assertTrue(trie.autoComplete("absence") == "absence")
        self.assertTrue(trie.autoComplete("absent") == "absent")
        self.assertTrue(trie.autoComplete("abso") == "absolutely")
        self.assertTrue(trie.autoComplete("absol") == "absolutely")
        self.assertTrue(trie.autoComplete("absolu") == "absolutely")
        self.assertTrue(trie.autoComplete("absolut") == "absolutely")
        self.assertTrue(trie.autoComplete("absolute") == "absolutely")
        self.assertTrue(trie.autoComplete("absolutel") == "absolutely")
        self.assertTrue(trie.autoComplete("absolutely") == "absolutely")
        self.assertTrue(trie.autoComplete("abt") == None)
        self.assertTrue(trie.autoComplete("abu") == None)
        self.assertTrue(trie.autoComplete("abv") == None)
        self.assertTrue(trie.autoComplete("abw") == None)
        self.assertTrue(trie.autoComplete("abx") == None)
        self.assertTrue(trie.autoComplete("aby") == None)
        self.assertTrue(trie.autoComplete("abz") == None)
        self.assertTrue(trie.autoComplete("ac") == "act")
        self.assertTrue(trie.autoComplete("aca") == None)
        self.assertTrue(trie.autoComplete("acb") == None)
        self.assertTrue(trie.autoComplete("acc") == "according")
        self.assertTrue(trie.autoComplete("acce") == "accept")
        self.assertTrue(trie.autoComplete("accep") == "accept")
        self.assertTrue(trie.autoComplete("accept") == "accept")
        self.assertTrue(trie.autoComplete("accepta") == "acceptance")
        self.assertTrue(trie.autoComplete("acceptan") == "acceptance")
        self.assertTrue(trie.autoComplete("acceptanc") == "acceptance")
        self.assertTrue(trie.autoComplete("acceptance") == "acceptance")
        self.assertTrue(trie.autoComplete("acco") == "according")
        self.assertTrue(trie.autoComplete("accor") == "according")
        self.assertTrue(trie.autoComplete("accord") == "according")
        self.assertTrue(trie.autoComplete("accordi") == "according")
        self.assertTrue(trie.autoComplete("accordin") == "according")
        self.assertTrue(trie.autoComplete("according") == "according")
        self.assertTrue(trie.autoComplete("accordingl") == "accordingly")
        self.assertTrue(trie.autoComplete("accordingly") == "accordingly")
        self.assertTrue(trie.autoComplete("accou") == "account")
        self.assertTrue(trie.autoComplete("accoun") == "account")
        self.assertTrue(trie.autoComplete("account") == "account")
        self.assertTrue(trie.autoComplete("accu") == "accusation")
        self.assertTrue(trie.autoComplete("accus") == "accusation")
        self.assertTrue(trie.autoComplete("accusa") == "accusation")
        self.assertTrue(trie.autoComplete("accusat") == "accusation")
        self.assertTrue(trie.autoComplete("accusati") == "accusation")
        self.assertTrue(trie.autoComplete("accusatio") == "accusation")
        self.assertTrue(trie.autoComplete("accusation") == "accusation")
        self.assertTrue(trie.autoComplete("accuse") == "accused")
        self.assertTrue(trie.autoComplete("accused") == "accused")
        self.assertTrue(trie.autoComplete("acd") == None)
        self.assertTrue(trie.autoComplete("ace") == None)
        self.assertTrue(trie.autoComplete("acf") == None)
        self.assertTrue(trie.autoComplete("acg") == None)
        self.assertTrue(trie.autoComplete("ach") == None)
        self.assertTrue(trie.autoComplete("aci") == None)
        self.assertTrue(trie.autoComplete("acj") == None)
        self.assertTrue(trie.autoComplete("ack") == None)
        self.assertTrue(trie.autoComplete("acl") == None)
        self.assertTrue(trie.autoComplete("acm") == None)
        self.assertTrue(trie.autoComplete("acn") == None)
        self.assertTrue(trie.autoComplete("aco") == None)
        self.assertTrue(trie.autoComplete("acp") == None)
        self.assertTrue(trie.autoComplete("acq") == None)
        self.assertTrue(trie.autoComplete("acr") == None)
        self.assertTrue(trie.autoComplete("acs") == None)
        self.assertTrue(trie.autoComplete("act") == "act")
        self.assertTrue(trie.autoComplete("acte") == "acted")
        self.assertTrue(trie.autoComplete("acted") == "acted")
        self.assertTrue(trie.autoComplete("acti") == "acting")
        self.assertTrue(trie.autoComplete("actin") == "acting")
        self.assertTrue(trie.autoComplete("acting") == "acting")
        self.assertTrue(trie.autoComplete("acts") == "acts")
        self.assertTrue(trie.autoComplete("actu") == "actual")
        self.assertTrue(trie.autoComplete("actua") == "actual")
        self.assertTrue(trie.autoComplete("actual") == "actual")
        self.assertTrue(trie.autoComplete("actuall") == "actually")
        self.assertTrue(trie.autoComplete("actually") == "actually")
        self.assertTrue(trie.autoComplete("acu") == None)
        self.assertTrue(trie.autoComplete("acv") == None)
        self.assertTrue(trie.autoComplete("acw") == None)
        self.assertTrue(trie.autoComplete("acx") == None)
        self.assertTrue(trie.autoComplete("acy") == None)
        self.assertTrue(trie.autoComplete("acz") == None)
        self.assertTrue(trie.autoComplete("ad") == "adjourn")
        self.assertTrue(trie.autoComplete("ada") == None)
        self.assertTrue(trie.autoComplete("adb") == None)
        self.assertTrue(trie.autoComplete("adc") == None)
        self.assertTrue(trie.autoComplete("add") == "adding")
        self.assertTrue(trie.autoComplete("addi") == "adding")
        self.assertTrue(trie.autoComplete("addin") == "adding")
        self.assertTrue(trie.autoComplete("adding") == "adding")
        self.assertTrue(trie.autoComplete("addit") == "addition")
        self.assertTrue(trie.autoComplete("additi") == "addition")
        self.assertTrue(trie.autoComplete("additio") == "addition")
        self.assertTrue(trie.autoComplete("addition") == "addition")
        self.assertTrue(trie.autoComplete("ade") == None)
        self.assertTrue(trie.autoComplete("adf") == None)
        self.assertTrue(trie.autoComplete("adg") == None)
        self.assertTrue(trie.autoComplete("adh") == "adhering")
        self.assertTrue(trie.autoComplete("adhe") == "adhering")
        self.assertTrue(trie.autoComplete("adher") == "adhering")
        self.assertTrue(trie.autoComplete("adheri") == "adhering")
        self.assertTrue(trie.autoComplete("adherin") == "adhering")
        self.assertTrue(trie.autoComplete("adhering") == "adhering")
        self.assertTrue(trie.autoComplete("adi") == None)
        self.assertTrue(trie.autoComplete("adj") == "adjourn")
        self.assertTrue(trie.autoComplete("adjo") == "adjourn")
        self.assertTrue(trie.autoComplete("adjou") == "adjourn")
        self.assertTrue(trie.autoComplete("adjour") == "adjourn")
        self.assertTrue(trie.autoComplete("adjourn") == "adjourn")
        self.assertTrue(trie.autoComplete("adjournm") == "adjournment")
        self.assertTrue(trie.autoComplete("adjournme") == "adjournment")
        self.assertTrue(trie.autoComplete("adjournmen") == "adjournment")
        self.assertTrue(trie.autoComplete("adjournment") == "adjournment")
        self.assertTrue(trie.autoComplete("adk") == None)
        self.assertTrue(trie.autoComplete("adl") == None)
        self.assertTrue(trie.autoComplete("adm") == "admit")
        self.assertTrue(trie.autoComplete("admi") == "admit")
        self.assertTrue(trie.autoComplete("admir") == "admiralty")
        self.assertTrue(trie.autoComplete("admira") == "admiralty")
        self.assertTrue(trie.autoComplete("admiral") == "admiralty")
        self.assertTrue(trie.autoComplete("admiralt") == "admiralty")
        self.assertTrue(trie.autoComplete("admiralty") == "admiralty")
        self.assertTrue(trie.autoComplete("admit") == "admit")
        self.assertTrue(trie.autoComplete("admitt") == "admitted")
        self.assertTrue(trie.autoComplete("admitte") == "admitted")
        self.assertTrue(trie.autoComplete("admitted") == "admitted")
        self.assertTrue(trie.autoComplete("adn") == None)
        self.assertTrue(trie.autoComplete("ado") == "adoption")
        self.assertTrue(trie.autoComplete("adop") == "adoption")
        self.assertTrue(trie.autoComplete("adopt") == "adoption")
        self.assertTrue(trie.autoComplete("adopti") == "adoption")
        self.assertTrue(trie.autoComplete("adoptio") == "adoption")
        self.assertTrue(trie.autoComplete("adoption") == "adoption")
        self.assertTrue(trie.autoComplete("adp") == None)
        self.assertTrue(trie.autoComplete("adq") == None)
        self.assertTrue(trie.autoComplete("adr") == None)
        self.assertTrue(trie.autoComplete("ads") == None)
        self.assertTrue(trie.autoComplete("adt") == None)
        self.assertTrue(trie.autoComplete("adu") == None)
        self.assertTrue(trie.autoComplete("adv") == "advice")
        self.assertTrue(trie.autoComplete("advi") == "advice")
        self.assertTrue(trie.autoComplete("advic") == "advice")
        self.assertTrue(trie.autoComplete("advice") == "advice")
        self.assertTrue(trie.autoComplete("adw") == None)
        self.assertTrue(trie.autoComplete("adx") == None)
        self.assertTrue(trie.autoComplete("ady") == None)
        self.assertTrue(trie.autoComplete("adz") == None)
        self.assertTrue(trie.autoComplete("ae") == None)
        self.assertTrue(trie.autoComplete("aea") == None)
        self.assertTrue(trie.autoComplete("aeb") == None)
        self.assertTrue(trie.autoComplete("aec") == None)
        self.assertTrue(trie.autoComplete("aed") == None)
        self.assertTrue(trie.autoComplete("aee") == None)
        self.assertTrue(trie.autoComplete("aef") == None)
        self.assertTrue(trie.autoComplete("aeg") == None)
        self.assertTrue(trie.autoComplete("aeh") == None)
        self.assertTrue(trie.autoComplete("aei") == None)
        self.assertTrue(trie.autoComplete("aej") == None)
        self.assertTrue(trie.autoComplete("aek") == None)
        self.assertTrue(trie.autoComplete("ael") == None)
        self.assertTrue(trie.autoComplete("aem") == None)
        self.assertTrue(trie.autoComplete("aen") == None)
        self.assertTrue(trie.autoComplete("aeo") == None)
        self.assertTrue(trie.autoComplete("aep") == None)
        self.assertTrue(trie.autoComplete("aeq") == None)
        self.assertTrue(trie.autoComplete("aer") == None)
        self.assertTrue(trie.autoComplete("aes") == None)
        self.assertTrue(trie.autoComplete("aet") == None)
        self.assertTrue(trie.autoComplete("aeu") == None)
        self.assertTrue(trie.autoComplete("aev") == None)
        self.assertTrue(trie.autoComplete("aew") == None)
        self.assertTrue(trie.autoComplete("aex") == None)
        self.assertTrue(trie.autoComplete("aey") == None)
        self.assertTrue(trie.autoComplete("aez") == None)
        self.assertTrue(trie.autoComplete("af") == "after")
        self.assertTrue(trie.autoComplete("afa") == None)
        self.assertTrue(trie.autoComplete("afb") == None)
        self.assertTrue(trie.autoComplete("afc") == None)
        self.assertTrue(trie.autoComplete("afd") == None)
        self.assertTrue(trie.autoComplete("afe") == None)
        self.assertTrue(trie.autoComplete("aff") == "affirmation")
        self.assertTrue(trie.autoComplete("affe") == "affect")
        self.assertTrue(trie.autoComplete("affec") == "affect")
        self.assertTrue(trie.autoComplete("affect") == "affect")
        self.assertTrue(trie.autoComplete("affecti") == "affecting")
        self.assertTrue(trie.autoComplete("affectin") == "affecting")
        self.assertTrue(trie.autoComplete("affecting") == "affecting")
        self.assertTrue(trie.autoComplete("affi") == "affirmation")
        self.assertTrue(trie.autoComplete("affir") == "affirmation")
        self.assertTrue(trie.autoComplete("affirm") == "affirmation")
        self.assertTrue(trie.autoComplete("affirma") == "affirmation")
        self.assertTrue(trie.autoComplete("affirmat") == "affirmation")
        self.assertTrue(trie.autoComplete("affirmati") == "affirmation")
        self.assertTrue(trie.autoComplete("affirmatio") == "affirmation")
        self.assertTrue(trie.autoComplete("affirmation") == "affirmation")
        self.assertTrue(trie.autoComplete("afg") == None)
        self.assertTrue(trie.autoComplete("afh") == None)
        self.assertTrue(trie.autoComplete("afi") == None)
        self.assertTrue(trie.autoComplete("afj") == None)
        self.assertTrue(trie.autoComplete("afk") == None)
        self.assertTrue(trie.autoComplete("afl") == None)
        self.assertTrue(trie.autoComplete("afm") == None)
        self.assertTrue(trie.autoComplete("afn") == None)
        self.assertTrue(trie.autoComplete("afo") == None)
        self.assertTrue(trie.autoComplete("afp") == None)
        self.assertTrue(trie.autoComplete("afq") == None)
        self.assertTrue(trie.autoComplete("afr") == None)
        self.assertTrue(trie.autoComplete("afs") == None)
        self.assertTrue(trie.autoComplete("aft") == "after")
        self.assertTrue(trie.autoComplete("afte") == "after")
        self.assertTrue(trie.autoComplete("after") == "after")
        self.assertTrue(trie.autoComplete("afu") == None)
        self.assertTrue(trie.autoComplete("afv") == None)
        self.assertTrue(trie.autoComplete("afw") == None)
        self.assertTrue(trie.autoComplete("afx") == None)
        self.assertTrue(trie.autoComplete("afy") == None)
        self.assertTrue(trie.autoComplete("afz") == None)
        self.assertTrue(trie.autoComplete("ag") == "against")
        self.assertTrue(trie.autoComplete("aga") == "against")
        self.assertTrue(trie.autoComplete("agai") == "against")
        self.assertTrue(trie.autoComplete("again") == "against")
        self.assertTrue(trie.autoComplete("agains") == "against")
        self.assertTrue(trie.autoComplete("against") == "against")
        self.assertTrue(trie.autoComplete("agb") == None)
        self.assertTrue(trie.autoComplete("agc") == None)
        self.assertTrue(trie.autoComplete("agd") == None)
        self.assertTrue(trie.autoComplete("age") == "age")
        self.assertTrue(trie.autoComplete("agf") == None)
        self.assertTrue(trie.autoComplete("agg") == None)
        self.assertTrue(trie.autoComplete("agh") == None)
        self.assertTrue(trie.autoComplete("agi") == None)
        self.assertTrue(trie.autoComplete("agj") == None)
        self.assertTrue(trie.autoComplete("agk") == None)
        self.assertTrue(trie.autoComplete("agl") == None)
        self.assertTrue(trie.autoComplete("agm") == None)
        self.assertTrue(trie.autoComplete("agn") == None)
        self.assertTrue(trie.autoComplete("ago") == None)
        self.assertTrue(trie.autoComplete("agp") == None)
        self.assertTrue(trie.autoComplete("agq") == None)
        self.assertTrue(trie.autoComplete("agr") == "agree")
        self.assertTrue(trie.autoComplete("agre") == "agree")
        self.assertTrue(trie.autoComplete("agree") == "agree")
        self.assertTrue(trie.autoComplete("agreem") == "agreement")
        self.assertTrue(trie.autoComplete("agreeme") == "agreement")
        self.assertTrue(trie.autoComplete("agreemen") == "agreement")
        self.assertTrue(trie.autoComplete("agreement") == "agreement")
        self.assertTrue(trie.autoComplete("ags") == None)
        self.assertTrue(trie.autoComplete("agt") == None)
        self.assertTrue(trie.autoComplete("agu") == None)
        self.assertTrue(trie.autoComplete("agv") == None)
        self.assertTrue(trie.autoComplete("agw") == None)
        self.assertTrue(trie.autoComplete("agx") == None)
        self.assertTrue(trie.autoComplete("agy") == None)
        self.assertTrue(trie.autoComplete("agz") == None)
        self.assertTrue(trie.autoComplete("ah") == None)
        self.assertTrue(trie.autoComplete("aha") == None)
        self.assertTrue(trie.autoComplete("ahb") == None)
        self.assertTrue(trie.autoComplete("ahc") == None)
        self.assertTrue(trie.autoComplete("ahd") == None)
        self.assertTrue(trie.autoComplete("ahe") == None)
        self.assertTrue(trie.autoComplete("ahf") == None)
        self.assertTrue(trie.autoComplete("ahg") == None)
        self.assertTrue(trie.autoComplete("ahh") == None)
        self.assertTrue(trie.autoComplete("ahi") == None)
        self.assertTrue(trie.autoComplete("ahj") == None)
        self.assertTrue(trie.autoComplete("ahk") == None)
        self.assertTrue(trie.autoComplete("ahl") == None)
        self.assertTrue(trie.autoComplete("ahm") == None)
        self.assertTrue(trie.autoComplete("ahn") == None)
        self.assertTrue(trie.autoComplete("aho") == None)
        self.assertTrue(trie.autoComplete("ahp") == None)
        self.assertTrue(trie.autoComplete("ahq") == None)
        self.assertTrue(trie.autoComplete("ahr") == None)
        self.assertTrue(trie.autoComplete("ahs") == None)
        self.assertTrue(trie.autoComplete("aht") == None)
        self.assertTrue(trie.autoComplete("ahu") == None)
        self.assertTrue(trie.autoComplete("ahv") == None)
        self.assertTrue(trie.autoComplete("ahw") == None)
        self.assertTrue(trie.autoComplete("ahx") == None)
        self.assertTrue(trie.autoComplete("ahy") == None)
        self.assertTrue(trie.autoComplete("ahz") == None)
        self.assertTrue(trie.autoComplete("ai") == "aid")
        self.assertTrue(trie.autoComplete("aia") == None)
        self.assertTrue(trie.autoComplete("aib") == None)
        self.assertTrue(trie.autoComplete("aic") == None)
        self.assertTrue(trie.autoComplete("aid") == "aid")
        self.assertTrue(trie.autoComplete("aie") == None)
        self.assertTrue(trie.autoComplete("aif") == None)
        self.assertTrue(trie.autoComplete("aig") == None)
        self.assertTrue(trie.autoComplete("aih") == None)
        self.assertTrue(trie.autoComplete("aii") == None)
        self.assertTrue(trie.autoComplete("aij") == None)
        self.assertTrue(trie.autoComplete("aik") == None)
        self.assertTrue(trie.autoComplete("ail") == None)
        self.assertTrue(trie.autoComplete("aim") == None)
        self.assertTrue(trie.autoComplete("ain") == None)
        self.assertTrue(trie.autoComplete("aio") == None)
        self.assertTrue(trie.autoComplete("aip") == None)
        self.assertTrue(trie.autoComplete("aiq") == None)
        self.assertTrue(trie.autoComplete("air") == None)
        self.assertTrue(trie.autoComplete("ais") == None)
        self.assertTrue(trie.autoComplete("ait") == None)
        self.assertTrue(trie.autoComplete("aiu") == None)
        self.assertTrue(trie.autoComplete("aiv") == None)
        self.assertTrue(trie.autoComplete("aiw") == None)
        self.assertTrue(trie.autoComplete("aix") == None)
        self.assertTrue(trie.autoComplete("aiy") == None)
        self.assertTrue(trie.autoComplete("aiz") == None)
        self.assertTrue(trie.autoComplete("aj") == None)
        self.assertTrue(trie.autoComplete("aja") == None)
        self.assertTrue(trie.autoComplete("ajb") == None)
        self.assertTrue(trie.autoComplete("ajc") == None)
        self.assertTrue(trie.autoComplete("ajd") == None)
        self.assertTrue(trie.autoComplete("aje") == None)
        self.assertTrue(trie.autoComplete("ajf") == None)
        self.assertTrue(trie.autoComplete("ajg") == None)
        self.assertTrue(trie.autoComplete("ajh") == None)
        self.assertTrue(trie.autoComplete("aji") == None)
        self.assertTrue(trie.autoComplete("ajj") == None)
        self.assertTrue(trie.autoComplete("ajk") == None)
        self.assertTrue(trie.autoComplete("ajl") == None)
        self.assertTrue(trie.autoComplete("ajm") == None)
        self.assertTrue(trie.autoComplete("ajn") == None)
        self.assertTrue(trie.autoComplete("ajo") == None)
        self.assertTrue(trie.autoComplete("ajp") == None)
        self.assertTrue(trie.autoComplete("ajq") == None)
        self.assertTrue(trie.autoComplete("ajr") == None)
        self.assertTrue(trie.autoComplete("ajs") == None)
        self.assertTrue(trie.autoComplete("ajt") == None)
        self.assertTrue(trie.autoComplete("aju") == None)
        self.assertTrue(trie.autoComplete("ajv") == None)
        self.assertTrue(trie.autoComplete("ajw") == None)
        self.assertTrue(trie.autoComplete("ajx") == None)
        self.assertTrue(trie.autoComplete("ajy") == None)
        self.assertTrue(trie.autoComplete("ajz") == None)
        self.assertTrue(trie.autoComplete("ak") == None)
        self.assertTrue(trie.autoComplete("aka") == None)
        self.assertTrue(trie.autoComplete("akb") == None)
        self.assertTrue(trie.autoComplete("akc") == None)
        self.assertTrue(trie.autoComplete("akd") == None)
        self.assertTrue(trie.autoComplete("ake") == None)
        self.assertTrue(trie.autoComplete("akf") == None)
        self.assertTrue(trie.autoComplete("akg") == None)
        self.assertTrue(trie.autoComplete("akh") == None)
        self.assertTrue(trie.autoComplete("aki") == None)
        self.assertTrue(trie.autoComplete("akj") == None)
        self.assertTrue(trie.autoComplete("akk") == None)
        self.assertTrue(trie.autoComplete("akl") == None)
        self.assertTrue(trie.autoComplete("akm") == None)
        self.assertTrue(trie.autoComplete("akn") == None)
        self.assertTrue(trie.autoComplete("ako") == None)
        self.assertTrue(trie.autoComplete("akp") == None)
        self.assertTrue(trie.autoComplete("akq") == None)
        self.assertTrue(trie.autoComplete("akr") == None)
        self.assertTrue(trie.autoComplete("aks") == None)
        self.assertTrue(trie.autoComplete("akt") == None)
        self.assertTrue(trie.autoComplete("aku") == None)
        self.assertTrue(trie.autoComplete("akv") == None)
        self.assertTrue(trie.autoComplete("akw") == None)
        self.assertTrue(trie.autoComplete("akx") == None)
        self.assertTrue(trie.autoComplete("aky") == None)
        self.assertTrue(trie.autoComplete("akz") == None)
        self.assertTrue(trie.autoComplete("al") == "all")
        self.assertTrue(trie.autoComplete("ala") == None)
        self.assertTrue(trie.autoComplete("alb") == None)
        self.assertTrue(trie.autoComplete("alc") == None)
        self.assertTrue(trie.autoComplete("ald") == None)
        self.assertTrue(trie.autoComplete("ale") == None)
        self.assertTrue(trie.autoComplete("alf") == None)
        self.assertTrue(trie.autoComplete("alg") == None)
        self.assertTrue(trie.autoComplete("alh") == None)
        self.assertTrue(trie.autoComplete("ali") == None)
        self.assertTrue(trie.autoComplete("alj") == None)
        self.assertTrue(trie.autoComplete("alk") == None)
        self.assertTrue(trie.autoComplete("all") == "all")
        self.assertTrue(trie.autoComplete("alli") == "alliance")
        self.assertTrue(trie.autoComplete("allia") == "alliance")
        self.assertTrue(trie.autoComplete("allian") == "alliance")
        self.assertTrue(trie.autoComplete("allianc") == "alliance")
        self.assertTrue(trie.autoComplete("alliance") == "alliance")
        self.assertTrue(trie.autoComplete("alm") == None)
        self.assertTrue(trie.autoComplete("aln") == None)
        self.assertTrue(trie.autoComplete("alo") == "alone")
        self.assertTrue(trie.autoComplete("alon") == "alone")
        self.assertTrue(trie.autoComplete("alone") == "alone")
        self.assertTrue(trie.autoComplete("alp") == None)
        self.assertTrue(trie.autoComplete("alq") == None)
        self.assertTrue(trie.autoComplete("alr") == None)
        self.assertTrue(trie.autoComplete("als") == "also")
        self.assertTrue(trie.autoComplete("also") == "also")
        self.assertTrue(trie.autoComplete("alt") == "alter")
        self.assertTrue(trie.autoComplete("alte") == "alter")
        self.assertTrue(trie.autoComplete("alter") == "alter")
        self.assertTrue(trie.autoComplete("alu") == None)
        self.assertTrue(trie.autoComplete("alv") == None)
        self.assertTrue(trie.autoComplete("alw") == None)
        self.assertTrue(trie.autoComplete("alx") == None)
        self.assertTrue(trie.autoComplete("aly") == None)
        self.assertTrue(trie.autoComplete("alz") == None)
        self.assertTrue(trie.autoComplete("am") == "amendment")
        self.assertTrue(trie.autoComplete("ama") == None)
        self.assertTrue(trie.autoComplete("amb") == "ambassadors")
        self.assertTrue(trie.autoComplete("amba") == "ambassadors")
        self.assertTrue(trie.autoComplete("ambas") == "ambassadors")
        self.assertTrue(trie.autoComplete("ambass") == "ambassadors")
        self.assertTrue(trie.autoComplete("ambassa") == "ambassadors")
        self.assertTrue(trie.autoComplete("ambassad") == "ambassadors")
        self.assertTrue(trie.autoComplete("ambassado") == "ambassadors")
        self.assertTrue(trie.autoComplete("ambassador") == "ambassadors")
        self.assertTrue(trie.autoComplete("ambassadors") == "ambassadors")
        self.assertTrue(trie.autoComplete("amc") == None)
        self.assertTrue(trie.autoComplete("amd") == None)
        self.assertTrue(trie.autoComplete("ame") == "amendment")
        self.assertTrue(trie.autoComplete("amen") == "amendment")
        self.assertTrue(trie.autoComplete("amend") == "amendment")
        self.assertTrue(trie.autoComplete("amendm") == "amendment")
        self.assertTrue(trie.autoComplete("amendme") == "amendment")
        self.assertTrue(trie.autoComplete("amendmen") == "amendment")
        self.assertTrue(trie.autoComplete("amendment") == "amendment")
        self.assertTrue(trie.autoComplete("amendments") == "amendments")
        self.assertTrue(trie.autoComplete("amer") == "america")
        self.assertTrue(trie.autoComplete("ameri") == "america")
        self.assertTrue(trie.autoComplete("americ") == "america")
        self.assertTrue(trie.autoComplete("america") == "america")
        self.assertTrue(trie.autoComplete("amf") == None)
        self.assertTrue(trie.autoComplete("amg") == None)
        self.assertTrue(trie.autoComplete("amh") == None)
        self.assertTrue(trie.autoComplete("ami") == None)
        self.assertTrue(trie.autoComplete("amj") == None)
        self.assertTrue(trie.autoComplete("amk") == None)
        self.assertTrue(trie.autoComplete("aml") == None)
        self.assertTrue(trie.autoComplete("amm") == None)
        self.assertTrue(trie.autoComplete("amn") == None)
        self.assertTrue(trie.autoComplete("amo") == "among")
        self.assertTrue(trie.autoComplete("amon") == "among")
        self.assertTrue(trie.autoComplete("among") == "among")
        self.assertTrue(trie.autoComplete("amp") == None)
        self.assertTrue(trie.autoComplete("amq") == None)
        self.assertTrue(trie.autoComplete("amr") == None)
        self.assertTrue(trie.autoComplete("ams") == None)
        self.assertTrue(trie.autoComplete("amt") == None)
        self.assertTrue(trie.autoComplete("amu") == None)
        self.assertTrue(trie.autoComplete("amv") == None)
        self.assertTrue(trie.autoComplete("amw") == None)
        self.assertTrue(trie.autoComplete("amx") == None)
        self.assertTrue(trie.autoComplete("amy") == None)
        self.assertTrue(trie.autoComplete("amz") == None)
        self.assertTrue(trie.autoComplete("an") == "and")
        self.assertTrue(trie.autoComplete("ana") == None)
        self.assertTrue(trie.autoComplete("anb") == None)
        self.assertTrue(trie.autoComplete("anc") == None)
        self.assertTrue(trie.autoComplete("and") == "and")
        self.assertTrue(trie.autoComplete("andt") == "andtwoshall")
        self.assertTrue(trie.autoComplete("andtw") == "andtwoshall")
        self.assertTrue(trie.autoComplete("andtwo") == "andtwoshall")
        self.assertTrue(trie.autoComplete("andtwos") == "andtwoshall")
        self.assertTrue(trie.autoComplete("andtwosh") == "andtwoshall")
        self.assertTrue(trie.autoComplete("andtwosha") == "andtwoshall")
        self.assertTrue(trie.autoComplete("andtwoshal") == "andtwoshall")
        self.assertTrue(trie.autoComplete("andtwoshall") == "andtwoshall")
        self.assertTrue(trie.autoComplete("ane") == None)
        self.assertTrue(trie.autoComplete("anf") == None)
        self.assertTrue(trie.autoComplete("ang") == None)
        self.assertTrue(trie.autoComplete("anh") == None)
        self.assertTrue(trie.autoComplete("ani") == None)
        self.assertTrue(trie.autoComplete("anj") == None)
        self.assertTrue(trie.autoComplete("ank") == None)
        self.assertTrue(trie.autoComplete("anl") == None)
        self.assertTrue(trie.autoComplete("anm") == None)
        self.assertTrue(trie.autoComplete("ann") == None)
        self.assertTrue(trie.autoComplete("ano") == "another")
        self.assertTrue(trie.autoComplete("anot") == "another")
        self.assertTrue(trie.autoComplete("anoth") == "another")
        self.assertTrue(trie.autoComplete("anothe") == "another")
        self.assertTrue(trie.autoComplete("another") == "another")
        self.assertTrue(trie.autoComplete("anp") == None)
        self.assertTrue(trie.autoComplete("anq") == None)
        self.assertTrue(trie.autoComplete("anr") == None)
        self.assertTrue(trie.autoComplete("ans") == "answer")
        self.assertTrue(trie.autoComplete("answ") == "answer")
        self.assertTrue(trie.autoComplete("answe") == "answer")
        self.assertTrue(trie.autoComplete("answer") == "answer")
        self.assertTrue(trie.autoComplete("ant") == None)
        self.assertTrue(trie.autoComplete("anu") == None)
        self.assertTrue(trie.autoComplete("anv") == None)
        self.assertTrue(trie.autoComplete("anw") == None)
        self.assertTrue(trie.autoComplete("anx") == None)
        self.assertTrue(trie.autoComplete("any") == "any")
        self.assertTrue(trie.autoComplete("anz") == None)
        self.assertTrue(trie.autoComplete("ao") == None)
        self.assertTrue(trie.autoComplete("aoa") == None)
        self.assertTrue(trie.autoComplete("aob") == None)
        self.assertTrue(trie.autoComplete("aoc") == None)
        self.assertTrue(trie.autoComplete("aod") == None)
        self.assertTrue(trie.autoComplete("aoe") == None)
        self.assertTrue(trie.autoComplete("aof") == None)
        self.assertTrue(trie.autoComplete("aog") == None)
        self.assertTrue(trie.autoComplete("aoh") == None)
        self.assertTrue(trie.autoComplete("aoi") == None)
        self.assertTrue(trie.autoComplete("aoj") == None)
        self.assertTrue(trie.autoComplete("aok") == None)
        self.assertTrue(trie.autoComplete("aol") == None)
        self.assertTrue(trie.autoComplete("aom") == None)
        self.assertTrue(trie.autoComplete("aon") == None)
        self.assertTrue(trie.autoComplete("aoo") == None)
        self.assertTrue(trie.autoComplete("aop") == None)
        self.assertTrue(trie.autoComplete("aoq") == None)
        self.assertTrue(trie.autoComplete("aor") == None)
        self.assertTrue(trie.autoComplete("aos") == None)
        self.assertTrue(trie.autoComplete("aot") == None)
        self.assertTrue(trie.autoComplete("aou") == None)
        self.assertTrue(trie.autoComplete("aov") == None)
        self.assertTrue(trie.autoComplete("aow") == None)
        self.assertTrue(trie.autoComplete("aox") == None)
        self.assertTrue(trie.autoComplete("aoy") == None)
        self.assertTrue(trie.autoComplete("aoz") == None)
        self.assertTrue(trie.autoComplete("ap") == "appropriate")
        self.assertTrue(trie.autoComplete("apa") == None)
        self.assertTrue(trie.autoComplete("apb") == None)
        self.assertTrue(trie.autoComplete("apc") == None)
        self.assertTrue(trie.autoComplete("apd") == None)
        self.assertTrue(trie.autoComplete("ape") == None)
        self.assertTrue(trie.autoComplete("apf") == None)
        self.assertTrue(trie.autoComplete("apg") == None)
        self.assertTrue(trie.autoComplete("aph") == None)
        self.assertTrue(trie.autoComplete("api") == None)
        self.assertTrue(trie.autoComplete("apj") == None)
        self.assertTrue(trie.autoComplete("apk") == None)
        self.assertTrue(trie.autoComplete("apl") == None)
        self.assertTrue(trie.autoComplete("apm") == None)
        self.assertTrue(trie.autoComplete("apn") == None)
        self.assertTrue(trie.autoComplete("apo") == None)
        self.assertTrue(trie.autoComplete("app") == "appropriate")
        self.assertTrue(trie.autoComplete("appe") == "appellate")
        self.assertTrue(trie.autoComplete("appel") == "appellate")
        self.assertTrue(trie.autoComplete("appell") == "appellate")
        self.assertTrue(trie.autoComplete("appella") == "appellate")
        self.assertTrue(trie.autoComplete("appellat") == "appellate")
        self.assertTrue(trie.autoComplete("appellate") == "appellate")
        self.assertTrue(trie.autoComplete("appl") == "application")
        self.assertTrue(trie.autoComplete("appli") == "application")
        self.assertTrue(trie.autoComplete("applic") == "application")
        self.assertTrue(trie.autoComplete("applica") == "application")
        self.assertTrue(trie.autoComplete("applicat") == "application")
        self.assertTrue(trie.autoComplete("applicati") == "application")
        self.assertTrue(trie.autoComplete("applicatio") == "application")
        self.assertTrue(trie.autoComplete("application") == "application")
        self.assertTrue(trie.autoComplete("apply") == "apply")
        self.assertTrue(trie.autoComplete("appo") == "appointed")
        self.assertTrue(trie.autoComplete("appoi") == "appointed")
        self.assertTrue(trie.autoComplete("appoin") == "appointed")
        self.assertTrue(trie.autoComplete("appoint") == "appointed")
        self.assertTrue(trie.autoComplete("appointe") == "appointed")
        self.assertTrue(trie.autoComplete("appointed") == "appointed")
        self.assertTrue(trie.autoComplete("appointm") == "appointments")
        self.assertTrue(trie.autoComplete("appointme") == "appointments")
        self.assertTrue(trie.autoComplete("appointmen") == "appointments")
        self.assertTrue(trie.autoComplete("appointment") == "appointments")
        self.assertTrue(trie.autoComplete("appointments") == "appointments")
        self.assertTrue(trie.autoComplete("appor") == "apportioned")
        self.assertTrue(trie.autoComplete("apport") == "apportioned")
        self.assertTrue(trie.autoComplete("apporti") == "apportioned")
        self.assertTrue(trie.autoComplete("apportio") == "apportioned")
        self.assertTrue(trie.autoComplete("apportion") == "apportioned")
        self.assertTrue(trie.autoComplete("apportione") == "apportioned")
        self.assertTrue(trie.autoComplete("apportioned") == "apportioned")
        self.assertTrue(trie.autoComplete("apportionm") == "apportionment")
        self.assertTrue(trie.autoComplete("apportionme") == "apportionment")
        self.assertTrue(trie.autoComplete("apportionmen") == "apportionment")
        self.assertTrue(trie.autoComplete("apportionment") == "apportionment")
        self.assertTrue(trie.autoComplete("appr") == "appropriate")
        self.assertTrue(trie.autoComplete("appro") == "appropriate")
        self.assertTrue(trie.autoComplete("approp") == "appropriate")
        self.assertTrue(trie.autoComplete("appropr") == "appropriate")
        self.assertTrue(trie.autoComplete("appropri") == "appropriate")
        self.assertTrue(trie.autoComplete("appropria") == "appropriate")
        self.assertTrue(trie.autoComplete("appropriat") == "appropriate")
        self.assertTrue(trie.autoComplete("appropriate") == "appropriate")
        self.assertTrue(trie.autoComplete("appropriati") == "appropriation")
        self.assertTrue(trie.autoComplete("appropriatio") == "appropriation")
        self.assertTrue(trie.autoComplete("appropriation") == "appropriation")
        self.assertTrue(trie.autoComplete("appropriations") == "appropriations")
        self.assertTrue(trie.autoComplete("approv") == "approved")
        self.assertTrue(trie.autoComplete("approve") == "approved")
        self.assertTrue(trie.autoComplete("approved") == "approved")
        self.assertTrue(trie.autoComplete("apq") == None)
        self.assertTrue(trie.autoComplete("apr") == None)
        self.assertTrue(trie.autoComplete("aps") == None)
        self.assertTrue(trie.autoComplete("apt") == None)
        self.assertTrue(trie.autoComplete("apu") == None)
        self.assertTrue(trie.autoComplete("apv") == None)
        self.assertTrue(trie.autoComplete("apw") == None)
        self.assertTrue(trie.autoComplete("apx") == None)
        self.assertTrue(trie.autoComplete("apy") == None)
        self.assertTrue(trie.autoComplete("apz") == None)
        self.assertTrue(trie.autoComplete("aq") == None)
        self.assertTrue(trie.autoComplete("aqa") == None)
        self.assertTrue(trie.autoComplete("aqb") == None)
        self.assertTrue(trie.autoComplete("aqc") == None)
        self.assertTrue(trie.autoComplete("aqd") == None)
        self.assertTrue(trie.autoComplete("aqe") == None)
        self.assertTrue(trie.autoComplete("aqf") == None)
        self.assertTrue(trie.autoComplete("aqg") == None)
        self.assertTrue(trie.autoComplete("aqh") == None)
        self.assertTrue(trie.autoComplete("aqi") == None)
        self.assertTrue(trie.autoComplete("aqj") == None)
        self.assertTrue(trie.autoComplete("aqk") == None)
        self.assertTrue(trie.autoComplete("aql") == None)
        self.assertTrue(trie.autoComplete("aqm") == None)
        self.assertTrue(trie.autoComplete("aqn") == None)
        self.assertTrue(trie.autoComplete("aqo") == None)
        self.assertTrue(trie.autoComplete("aqp") == None)
        self.assertTrue(trie.autoComplete("aqq") == None)
        self.assertTrue(trie.autoComplete("aqr") == None)
        self.assertTrue(trie.autoComplete("aqs") == None)
        self.assertTrue(trie.autoComplete("aqt") == None)
        self.assertTrue(trie.autoComplete("aqu") == None)
        self.assertTrue(trie.autoComplete("aqv") == None)
        self.assertTrue(trie.autoComplete("aqw") == None)
        self.assertTrue(trie.autoComplete("aqx") == None)
        self.assertTrue(trie.autoComplete("aqy") == None)
        self.assertTrue(trie.autoComplete("aqz") == None)
        self.assertTrue(trie.autoComplete("ar") == "article")
        self.assertTrue(trie.autoComplete("ara") == None)
        self.assertTrue(trie.autoComplete("arb") == None)
        self.assertTrue(trie.autoComplete("arc") == None)
        self.assertTrue(trie.autoComplete("ard") == None)
        self.assertTrue(trie.autoComplete("are") == "are")
        self.assertTrue(trie.autoComplete("arf") == None)
        self.assertTrue(trie.autoComplete("arg") == None)
        self.assertTrue(trie.autoComplete("arh") == None)
        self.assertTrue(trie.autoComplete("ari") == "arising")
        self.assertTrue(trie.autoComplete("aris") == "arising")
        self.assertTrue(trie.autoComplete("arisi") == "arising")
        self.assertTrue(trie.autoComplete("arisin") == "arising")
        self.assertTrue(trie.autoComplete("arising") == "arising")
        self.assertTrue(trie.autoComplete("arj") == None)
        self.assertTrue(trie.autoComplete("ark") == None)
        self.assertTrue(trie.autoComplete("arl") == None)
        self.assertTrue(trie.autoComplete("arm") == "armies")
        self.assertTrue(trie.autoComplete("armi") == "armies")
        self.assertTrue(trie.autoComplete("armie") == "armies")
        self.assertTrue(trie.autoComplete("armies") == "armies")
        self.assertTrue(trie.autoComplete("armin") == "arming")
        self.assertTrue(trie.autoComplete("arming") == "arming")
        self.assertTrue(trie.autoComplete("arms") == "arms")
        self.assertTrue(trie.autoComplete("army") == "army")
        self.assertTrue(trie.autoComplete("arn") == None)
        self.assertTrue(trie.autoComplete("aro") == None)
        self.assertTrue(trie.autoComplete("arp") == None)
        self.assertTrue(trie.autoComplete("arq") == None)
        self.assertTrue(trie.autoComplete("arr") == "arrest")
        self.assertTrue(trie.autoComplete("arre") == "arrest")
        self.assertTrue(trie.autoComplete("arres") == "arrest")
        self.assertTrue(trie.autoComplete("arrest") == "arrest")
        self.assertTrue(trie.autoComplete("ars") == "arsenals")
        self.assertTrue(trie.autoComplete("arse") == "arsenals")
        self.assertTrue(trie.autoComplete("arsen") == "arsenals")
        self.assertTrue(trie.autoComplete("arsena") == "arsenals")
        self.assertTrue(trie.autoComplete("arsenal") == "arsenals")
        self.assertTrue(trie.autoComplete("arsenals") == "arsenals")
        self.assertTrue(trie.autoComplete("art") == "article")
        self.assertTrue(trie.autoComplete("arti") == "article")
        self.assertTrue(trie.autoComplete("artic") == "article")
        self.assertTrue(trie.autoComplete("articl") == "article")
        self.assertTrue(trie.autoComplete("article") == "article")
        self.assertTrue(trie.autoComplete("articles") == "articles")
        self.assertTrue(trie.autoComplete("arts") == "arts")
        self.assertTrue(trie.autoComplete("aru") == None)
        self.assertTrue(trie.autoComplete("arv") == None)
        self.assertTrue(trie.autoComplete("arw") == None)
        self.assertTrue(trie.autoComplete("arx") == None)
        self.assertTrue(trie.autoComplete("ary") == None)
        self.assertTrue(trie.autoComplete("arz") == None)
        self.assertTrue(trie.autoComplete("as") == "as")
        self.assertTrue(trie.autoComplete("asa") == None)
        self.assertTrue(trie.autoComplete("asb") == None)
        self.assertTrue(trie.autoComplete("asc") == "ascertained")
        self.assertTrue(trie.autoComplete("asce") == "ascertained")
        self.assertTrue(trie.autoComplete("ascer") == "ascertained")
        self.assertTrue(trie.autoComplete("ascert") == "ascertained")
        self.assertTrue(trie.autoComplete("ascerta") == "ascertained")
        self.assertTrue(trie.autoComplete("ascertai") == "ascertained")
        self.assertTrue(trie.autoComplete("ascertain") == "ascertained")
        self.assertTrue(trie.autoComplete("ascertaine") == "ascertained")
        self.assertTrue(trie.autoComplete("ascertained") == "ascertained")
        self.assertTrue(trie.autoComplete("asd") == None)
        self.assertTrue(trie.autoComplete("ase") == None)
        self.assertTrue(trie.autoComplete("asf") == None)
        self.assertTrue(trie.autoComplete("asg") == None)
        self.assertTrue(trie.autoComplete("ash") == None)
        self.assertTrue(trie.autoComplete("asi") == None)
        self.assertTrue(trie.autoComplete("asj") == None)
        self.assertTrue(trie.autoComplete("ask") == None)
        self.assertTrue(trie.autoComplete("asl") == None)
        self.assertTrue(trie.autoComplete("asm") == None)
        self.assertTrue(trie.autoComplete("asn") == None)
        self.assertTrue(trie.autoComplete("aso") == None)
        self.assertTrue(trie.autoComplete("asp") == None)
        self.assertTrue(trie.autoComplete("asq") == None)
        self.assertTrue(trie.autoComplete("asr") == None)
        self.assertTrue(trie.autoComplete("ass") == "assemble")
        self.assertTrue(trie.autoComplete("asse") == "assemble")
        self.assertTrue(trie.autoComplete("assem") == "assemble")
        self.assertTrue(trie.autoComplete("assemb") == "assemble")
        self.assertTrue(trie.autoComplete("assembl") == "assemble")
        self.assertTrue(trie.autoComplete("assemble") == "assemble")
        self.assertTrue(trie.autoComplete("assembled") == "assembled")
        self.assertTrue(trie.autoComplete("assembli") == "assembling")
        self.assertTrue(trie.autoComplete("assemblin") == "assembling")
        self.assertTrue(trie.autoComplete("assembling") == "assembling")
        self.assertTrue(trie.autoComplete("assi") == "assistance")
        self.assertTrue(trie.autoComplete("assis") == "assistance")
        self.assertTrue(trie.autoComplete("assist") == "assistance")
        self.assertTrue(trie.autoComplete("assista") == "assistance")
        self.assertTrue(trie.autoComplete("assistan") == "assistance")
        self.assertTrue(trie.autoComplete("assistanc") == "assistance")
        self.assertTrue(trie.autoComplete("assistance") == "assistance")
        self.assertTrue(trie.autoComplete("assu") == "assume")
        self.assertTrue(trie.autoComplete("assum") == "assume")
        self.assertTrue(trie.autoComplete("assume") == "assume")
        self.assertTrue(trie.autoComplete("ast") == None)
        self.assertTrue(trie.autoComplete("asu") == None)
        self.assertTrue(trie.autoComplete("asv") == None)
        self.assertTrue(trie.autoComplete("asw") == None)
        self.assertTrue(trie.autoComplete("asx") == None)
        self.assertTrue(trie.autoComplete("asy") == None)
        self.assertTrue(trie.autoComplete("asz") == None)
        self.assertTrue(trie.autoComplete("at") == "at")
        self.assertTrue(trie.autoComplete("ata") == None)
        self.assertTrue(trie.autoComplete("atb") == None)
        self.assertTrue(trie.autoComplete("atc") == None)
        self.assertTrue(trie.autoComplete("atd") == None)
        self.assertTrue(trie.autoComplete("ate") == None)
        self.assertTrue(trie.autoComplete("atf") == None)
        self.assertTrue(trie.autoComplete("atg") == None)
        self.assertTrue(trie.autoComplete("ath") == None)
        self.assertTrue(trie.autoComplete("ati") == None)
        self.assertTrue(trie.autoComplete("atj") == None)
        self.assertTrue(trie.autoComplete("atk") == None)
        self.assertTrue(trie.autoComplete("atl") == None)
        self.assertTrue(trie.autoComplete("atm") == None)
        self.assertTrue(trie.autoComplete("atn") == None)
        self.assertTrue(trie.autoComplete("ato") == None)
        self.assertTrue(trie.autoComplete("atp") == None)
        self.assertTrue(trie.autoComplete("atq") == None)
        self.assertTrue(trie.autoComplete("atr") == None)
        self.assertTrue(trie.autoComplete("ats") == None)
        self.assertTrue(trie.autoComplete("att") == "attainder")
        self.assertTrue(trie.autoComplete("atta") == "attainder")
        self.assertTrue(trie.autoComplete("attai") == "attainder")
        self.assertTrue(trie.autoComplete("attain") == "attainder")
        self.assertTrue(trie.autoComplete("attaind") == "attainder")
        self.assertTrue(trie.autoComplete("attainde") == "attainder")
        self.assertTrue(trie.autoComplete("attainder") == "attainder")
        self.assertTrue(trie.autoComplete("attaine") == "attained")
        self.assertTrue(trie.autoComplete("attained") == "attained")
        self.assertTrue(trie.autoComplete("attaint") == "attainted")
        self.assertTrue(trie.autoComplete("attainte") == "attainted")
        self.assertTrue(trie.autoComplete("attainted") == "attainted")
        self.assertTrue(trie.autoComplete("atte") == "attendance")
        self.assertTrue(trie.autoComplete("atten") == "attendance")
        self.assertTrue(trie.autoComplete("attend") == "attendance")
        self.assertTrue(trie.autoComplete("attenda") == "attendance")
        self.assertTrue(trie.autoComplete("attendan") == "attendance")
        self.assertTrue(trie.autoComplete("attendanc") == "attendance")
        self.assertTrue(trie.autoComplete("attendance") == "attendance")
        self.assertTrue(trie.autoComplete("atu") == None)
        self.assertTrue(trie.autoComplete("atv") == None)
        self.assertTrue(trie.autoComplete("atw") == None)
        self.assertTrue(trie.autoComplete("atx") == None)
        self.assertTrue(trie.autoComplete("aty") == None)
        self.assertTrue(trie.autoComplete("atz") == None)
        self.assertTrue(trie.autoComplete("au") == "authority")
        self.assertTrue(trie.autoComplete("aua") == None)
        self.assertTrue(trie.autoComplete("aub") == None)
        self.assertTrue(trie.autoComplete("auc") == None)
        self.assertTrue(trie.autoComplete("aud") == None)
        self.assertTrue(trie.autoComplete("aue") == None)
        self.assertTrue(trie.autoComplete("auf") == None)
        self.assertTrue(trie.autoComplete("aug") == None)
        self.assertTrue(trie.autoComplete("auh") == None)
        self.assertTrue(trie.autoComplete("aui") == None)
        self.assertTrue(trie.autoComplete("auj") == None)
        self.assertTrue(trie.autoComplete("auk") == None)
        self.assertTrue(trie.autoComplete("aul") == None)
        self.assertTrue(trie.autoComplete("aum") == None)
        self.assertTrue(trie.autoComplete("aun") == None)
        self.assertTrue(trie.autoComplete("auo") == None)
        self.assertTrue(trie.autoComplete("aup") == None)
        self.assertTrue(trie.autoComplete("auq") == None)
        self.assertTrue(trie.autoComplete("aur") == None)
        self.assertTrue(trie.autoComplete("aus") == None)
        self.assertTrue(trie.autoComplete("aut") == "authority")
        self.assertTrue(trie.autoComplete("auth") == "authority")
        self.assertTrue(trie.autoComplete("autho") == "authority")
        self.assertTrue(trie.autoComplete("author") == "authority")
        self.assertTrue(trie.autoComplete("authori") == "authority")
        self.assertTrue(trie.autoComplete("authorit") == "authority")
        self.assertTrue(trie.autoComplete("authority") == "authority")
        self.assertTrue(trie.autoComplete("authoriz") == "authorized")
        self.assertTrue(trie.autoComplete("authorize") == "authorized")
        self.assertTrue(trie.autoComplete("authorized") == "authorized")
        self.assertTrue(trie.autoComplete("authors") == "authors")
        self.assertTrue(trie.autoComplete("auu") == None)
        self.assertTrue(trie.autoComplete("auv") == None)
        self.assertTrue(trie.autoComplete("auw") == None)
        self.assertTrue(trie.autoComplete("aux") == None)
        self.assertTrue(trie.autoComplete("auy") == None)
        self.assertTrue(trie.autoComplete("auz") == None)
        self.assertTrue(trie.autoComplete("av") == None)
        self.assertTrue(trie.autoComplete("ava") == None)
        self.assertTrue(trie.autoComplete("avb") == None)
        self.assertTrue(trie.autoComplete("avc") == None)
        self.assertTrue(trie.autoComplete("avd") == None)
        self.assertTrue(trie.autoComplete("ave") == None)
        self.assertTrue(trie.autoComplete("avf") == None)
        self.assertTrue(trie.autoComplete("avg") == None)
        self.assertTrue(trie.autoComplete("avh") == None)
        self.assertTrue(trie.autoComplete("avi") == None)
        self.assertTrue(trie.autoComplete("avj") == None)
        self.assertTrue(trie.autoComplete("avk") == None)
        self.assertTrue(trie.autoComplete("avl") == None)
        self.assertTrue(trie.autoComplete("avm") == None)
        self.assertTrue(trie.autoComplete("avn") == None)
        self.assertTrue(trie.autoComplete("avo") == None)
        self.assertTrue(trie.autoComplete("avp") == None)
        self.assertTrue(trie.autoComplete("avq") == None)
        self.assertTrue(trie.autoComplete("avr") == None)
        self.assertTrue(trie.autoComplete("avs") == None)
        self.assertTrue(trie.autoComplete("avt") == None)
        self.assertTrue(trie.autoComplete("avu") == None)
        self.assertTrue(trie.autoComplete("avv") == None)
        self.assertTrue(trie.autoComplete("avw") == None)
        self.assertTrue(trie.autoComplete("avx") == None)
        self.assertTrue(trie.autoComplete("avy") == None)
        self.assertTrue(trie.autoComplete("avz") == None)
        self.assertTrue(trie.autoComplete("aw") == None)
        self.assertTrue(trie.autoComplete("awa") == None)
        self.assertTrue(trie.autoComplete("awb") == None)
        self.assertTrue(trie.autoComplete("awc") == None)
        self.assertTrue(trie.autoComplete("awd") == None)
        self.assertTrue(trie.autoComplete("awe") == None)
        self.assertTrue(trie.autoComplete("awf") == None)
        self.assertTrue(trie.autoComplete("awg") == None)
        self.assertTrue(trie.autoComplete("awh") == None)
        self.assertTrue(trie.autoComplete("awi") == None)
        self.assertTrue(trie.autoComplete("awj") == None)
        self.assertTrue(trie.autoComplete("awk") == None)
        self.assertTrue(trie.autoComplete("awl") == None)
        self.assertTrue(trie.autoComplete("awm") == None)
        self.assertTrue(trie.autoComplete("awn") == None)
        self.assertTrue(trie.autoComplete("awo") == None)
        self.assertTrue(trie.autoComplete("awp") == None)
        self.assertTrue(trie.autoComplete("awq") == None)
        self.assertTrue(trie.autoComplete("awr") == None)
        self.assertTrue(trie.autoComplete("aws") == None)
        self.assertTrue(trie.autoComplete("awt") == None)
        self.assertTrue(trie.autoComplete("awu") == None)
        self.assertTrue(trie.autoComplete("awv") == None)
        self.assertTrue(trie.autoComplete("aww") == None)
        self.assertTrue(trie.autoComplete("awx") == None)
        self.assertTrue(trie.autoComplete("awy") == None)
        self.assertTrue(trie.autoComplete("awz") == None)
        self.assertTrue(trie.autoComplete("ax") == None)
        self.assertTrue(trie.autoComplete("axa") == None)
        self.assertTrue(trie.autoComplete("axb") == None)
        self.assertTrue(trie.autoComplete("axc") == None)
        self.assertTrue(trie.autoComplete("axd") == None)
        self.assertTrue(trie.autoComplete("axe") == None)
        self.assertTrue(trie.autoComplete("axf") == None)
        self.assertTrue(trie.autoComplete("axg") == None)
        self.assertTrue(trie.autoComplete("axh") == None)
        self.assertTrue(trie.autoComplete("axi") == None)
        self.assertTrue(trie.autoComplete("axj") == None)
        self.assertTrue(trie.autoComplete("axk") == None)
        self.assertTrue(trie.autoComplete("axl") == None)
        self.assertTrue(trie.autoComplete("axm") == None)
        self.assertTrue(trie.autoComplete("axn") == None)
        self.assertTrue(trie.autoComplete("axo") == None)
        self.assertTrue(trie.autoComplete("axp") == None)
        self.assertTrue(trie.autoComplete("axq") == None)
        self.assertTrue(trie.autoComplete("axr") == None)
        self.assertTrue(trie.autoComplete("axs") == None)
        self.assertTrue(trie.autoComplete("axt") == None)
        self.assertTrue(trie.autoComplete("axu") == None)
        self.assertTrue(trie.autoComplete("axv") == None)
        self.assertTrue(trie.autoComplete("axw") == None)
        self.assertTrue(trie.autoComplete("axx") == None)
        self.assertTrue(trie.autoComplete("axy") == None)
        self.assertTrue(trie.autoComplete("axz") == None)
        self.assertTrue(trie.autoComplete("ay") == None)
        self.assertTrue(trie.autoComplete("aya") == None)
        self.assertTrue(trie.autoComplete("ayb") == None)
        self.assertTrue(trie.autoComplete("ayc") == None)
        self.assertTrue(trie.autoComplete("ayd") == None)
        self.assertTrue(trie.autoComplete("aye") == None)
        self.assertTrue(trie.autoComplete("ayf") == None)
        self.assertTrue(trie.autoComplete("ayg") == None)
        self.assertTrue(trie.autoComplete("ayh") == None)
        self.assertTrue(trie.autoComplete("ayi") == None)
        self.assertTrue(trie.autoComplete("ayj") == None)
        self.assertTrue(trie.autoComplete("ayk") == None)
        self.assertTrue(trie.autoComplete("ayl") == None)
        self.assertTrue(trie.autoComplete("aym") == None)
        self.assertTrue(trie.autoComplete("ayn") == None)
        self.assertTrue(trie.autoComplete("ayo") == None)
        self.assertTrue(trie.autoComplete("ayp") == None)
        self.assertTrue(trie.autoComplete("ayq") == None)
        self.assertTrue(trie.autoComplete("ayr") == None)
        self.assertTrue(trie.autoComplete("ays") == None)
        self.assertTrue(trie.autoComplete("ayt") == None)
        self.assertTrue(trie.autoComplete("ayu") == None)
        self.assertTrue(trie.autoComplete("ayv") == None)
        self.assertTrue(trie.autoComplete("ayw") == None)
        self.assertTrue(trie.autoComplete("ayx") == None)
        self.assertTrue(trie.autoComplete("ayy") == None)
        self.assertTrue(trie.autoComplete("ayz") == None)
        self.assertTrue(trie.autoComplete("az") == None)
        self.assertTrue(trie.autoComplete("aza") == None)
        self.assertTrue(trie.autoComplete("azb") == None)
        self.assertTrue(trie.autoComplete("azc") == None)
        self.assertTrue(trie.autoComplete("azd") == None)
        self.assertTrue(trie.autoComplete("aze") == None)
        self.assertTrue(trie.autoComplete("azf") == None)
        self.assertTrue(trie.autoComplete("azg") == None)
        self.assertTrue(trie.autoComplete("azh") == None)
        self.assertTrue(trie.autoComplete("azi") == None)
        self.assertTrue(trie.autoComplete("azj") == None)
        self.assertTrue(trie.autoComplete("azk") == None)
        self.assertTrue(trie.autoComplete("azl") == None)
        self.assertTrue(trie.autoComplete("azm") == None)
        self.assertTrue(trie.autoComplete("azn") == None)
        self.assertTrue(trie.autoComplete("azo") == None)
        self.assertTrue(trie.autoComplete("azp") == None)
        self.assertTrue(trie.autoComplete("azq") == None)
        self.assertTrue(trie.autoComplete("azr") == None)
        self.assertTrue(trie.autoComplete("azs") == None)
        self.assertTrue(trie.autoComplete("azt") == None)
        self.assertTrue(trie.autoComplete("azu") == None)
        self.assertTrue(trie.autoComplete("azv") == None)
        self.assertTrue(trie.autoComplete("azw") == None)
        self.assertTrue(trie.autoComplete("azx") == None)
        self.assertTrue(trie.autoComplete("azy") == None)
        self.assertTrue(trie.autoComplete("azz") == None)
        self.assertTrue(trie.autoComplete("b") == "be")
        self.assertTrue(trie.autoComplete("ba") == "ballot")
        self.assertTrue(trie.autoComplete("baa") == None)
        self.assertTrue(trie.autoComplete("bab") == None)
        self.assertTrue(trie.autoComplete("bac") == None)
        self.assertTrue(trie.autoComplete("bad") == None)
        self.assertTrue(trie.autoComplete("bae") == None)
        self.assertTrue(trie.autoComplete("baf") == None)
        self.assertTrue(trie.autoComplete("bag") == None)
        self.assertTrue(trie.autoComplete("bah") == None)
        self.assertTrue(trie.autoComplete("bai") == "bail")
        self.assertTrue(trie.autoComplete("bail") == "bail")
        self.assertTrue(trie.autoComplete("baj") == None)
        self.assertTrue(trie.autoComplete("bak") == None)
        self.assertTrue(trie.autoComplete("bal") == "ballot")
        self.assertTrue(trie.autoComplete("ball") == "ballot")
        self.assertTrue(trie.autoComplete("ballo") == "ballot")
        self.assertTrue(trie.autoComplete("ballot") == "ballot")
        self.assertTrue(trie.autoComplete("ballots") == "ballots")
        self.assertTrue(trie.autoComplete("bam") == None)
        self.assertTrue(trie.autoComplete("ban") == "bankruptcies")
        self.assertTrue(trie.autoComplete("bank") == "bankruptcies")
        self.assertTrue(trie.autoComplete("bankr") == "bankruptcies")
        self.assertTrue(trie.autoComplete("bankru") == "bankruptcies")
        self.assertTrue(trie.autoComplete("bankrup") == "bankruptcies")
        self.assertTrue(trie.autoComplete("bankrupt") == "bankruptcies")
        self.assertTrue(trie.autoComplete("bankruptc") == "bankruptcies")
        self.assertTrue(trie.autoComplete("bankruptci") == "bankruptcies")
        self.assertTrue(trie.autoComplete("bankruptcie") == "bankruptcies")
        self.assertTrue(trie.autoComplete("bankruptcies") == "bankruptcies")
        self.assertTrue(trie.autoComplete("bao") == None)
        self.assertTrue(trie.autoComplete("bap") == None)
        self.assertTrue(trie.autoComplete("baq") == None)
        self.assertTrue(trie.autoComplete("bar") == None)
        self.assertTrue(trie.autoComplete("bas") == "basis")
        self.assertTrue(trie.autoComplete("basi") == "basis")
        self.assertTrue(trie.autoComplete("basis") == "basis")
        self.assertTrue(trie.autoComplete("bat") == None)
        self.assertTrue(trie.autoComplete("bau") == None)
        self.assertTrue(trie.autoComplete("bav") == None)
        self.assertTrue(trie.autoComplete("baw") == None)
        self.assertTrue(trie.autoComplete("bax") == None)
        self.assertTrue(trie.autoComplete("bay") == None)
        self.assertTrue(trie.autoComplete("baz") == None)
        self.assertTrue(trie.autoComplete("bb") == None)
        self.assertTrue(trie.autoComplete("bba") == None)
        self.assertTrue(trie.autoComplete("bbb") == None)
        self.assertTrue(trie.autoComplete("bbc") == None)
        self.assertTrue(trie.autoComplete("bbd") == None)
        self.assertTrue(trie.autoComplete("bbe") == None)
        self.assertTrue(trie.autoComplete("bbf") == None)
        self.assertTrue(trie.autoComplete("bbg") == None)
        self.assertTrue(trie.autoComplete("bbh") == None)
        self.assertTrue(trie.autoComplete("bbi") == None)
        self.assertTrue(trie.autoComplete("bbj") == None)
        self.assertTrue(trie.autoComplete("bbk") == None)
        self.assertTrue(trie.autoComplete("bbl") == None)
        self.assertTrue(trie.autoComplete("bbm") == None)
        self.assertTrue(trie.autoComplete("bbn") == None)
        self.assertTrue(trie.autoComplete("bbo") == None)
        self.assertTrue(trie.autoComplete("bbp") == None)
        self.assertTrue(trie.autoComplete("bbq") == None)
        self.assertTrue(trie.autoComplete("bbr") == None)
        self.assertTrue(trie.autoComplete("bbs") == None)
        self.assertTrue(trie.autoComplete("bbt") == None)
        self.assertTrue(trie.autoComplete("bbu") == None)
        self.assertTrue(trie.autoComplete("bbv") == None)
        self.assertTrue(trie.autoComplete("bbw") == None)
        self.assertTrue(trie.autoComplete("bbx") == None)
        self.assertTrue(trie.autoComplete("bby") == None)
        self.assertTrue(trie.autoComplete("bbz") == None)
        self.assertTrue(trie.autoComplete("bc") == None)
        self.assertTrue(trie.autoComplete("bca") == None)
        self.assertTrue(trie.autoComplete("bcb") == None)
        self.assertTrue(trie.autoComplete("bcc") == None)
        self.assertTrue(trie.autoComplete("bcd") == None)
        self.assertTrue(trie.autoComplete("bce") == None)
        self.assertTrue(trie.autoComplete("bcf") == None)
        self.assertTrue(trie.autoComplete("bcg") == None)
        self.assertTrue(trie.autoComplete("bch") == None)
        self.assertTrue(trie.autoComplete("bci") == None)
        self.assertTrue(trie.autoComplete("bcj") == None)
        self.assertTrue(trie.autoComplete("bck") == None)
        self.assertTrue(trie.autoComplete("bcl") == None)
        self.assertTrue(trie.autoComplete("bcm") == None)
        self.assertTrue(trie.autoComplete("bcn") == None)
        self.assertTrue(trie.autoComplete("bco") == None)
        self.assertTrue(trie.autoComplete("bcp") == None)
        self.assertTrue(trie.autoComplete("bcq") == None)
        self.assertTrue(trie.autoComplete("bcr") == None)
        self.assertTrue(trie.autoComplete("bcs") == None)
        self.assertTrue(trie.autoComplete("bct") == None)
        self.assertTrue(trie.autoComplete("bcu") == None)
        self.assertTrue(trie.autoComplete("bcv") == None)
        self.assertTrue(trie.autoComplete("bcw") == None)
        self.assertTrue(trie.autoComplete("bcx") == None)
        self.assertTrue(trie.autoComplete("bcy") == None)
        self.assertTrue(trie.autoComplete("bcz") == None)
        self.assertTrue(trie.autoComplete("bd") == None)
        self.assertTrue(trie.autoComplete("bda") == None)
        self.assertTrue(trie.autoComplete("bdb") == None)
        self.assertTrue(trie.autoComplete("bdc") == None)
        self.assertTrue(trie.autoComplete("bdd") == None)
        self.assertTrue(trie.autoComplete("bde") == None)
        self.assertTrue(trie.autoComplete("bdf") == None)
        self.assertTrue(trie.autoComplete("bdg") == None)
        self.assertTrue(trie.autoComplete("bdh") == None)
        self.assertTrue(trie.autoComplete("bdi") == None)
        self.assertTrue(trie.autoComplete("bdj") == None)
        self.assertTrue(trie.autoComplete("bdk") == None)
        self.assertTrue(trie.autoComplete("bdl") == None)
        self.assertTrue(trie.autoComplete("bdm") == None)
        self.assertTrue(trie.autoComplete("bdn") == None)
        self.assertTrue(trie.autoComplete("bdo") == None)
        self.assertTrue(trie.autoComplete("bdp") == None)
        self.assertTrue(trie.autoComplete("bdq") == None)
        self.assertTrue(trie.autoComplete("bdr") == None)
        self.assertTrue(trie.autoComplete("bds") == None)
        self.assertTrue(trie.autoComplete("bdt") == None)
        self.assertTrue(trie.autoComplete("bdu") == None)
        self.assertTrue(trie.autoComplete("bdv") == None)
        self.assertTrue(trie.autoComplete("bdw") == None)
        self.assertTrue(trie.autoComplete("bdx") == None)
        self.assertTrue(trie.autoComplete("bdy") == None)
        self.assertTrue(trie.autoComplete("bdz") == None)
        self.assertTrue(trie.autoComplete("be") == "be")
        self.assertTrue(trie.autoComplete("bea") == "bear")
        self.assertTrue(trie.autoComplete("bear") == "bear")
        self.assertTrue(trie.autoComplete("beb") == None)
        self.assertTrue(trie.autoComplete("bec") == "become")
        self.assertTrue(trie.autoComplete("beco") == "become")
        self.assertTrue(trie.autoComplete("becom") == "become")
        self.assertTrue(trie.autoComplete("become") == "become")
        self.assertTrue(trie.autoComplete("becomes") == "becomes")
        self.assertTrue(trie.autoComplete("bed") == None)
        self.assertTrue(trie.autoComplete("bee") == "been")
        self.assertTrue(trie.autoComplete("been") == "been")
        self.assertTrue(trie.autoComplete("bef") == "before")
        self.assertTrue(trie.autoComplete("befo") == "before")
        self.assertTrue(trie.autoComplete("befor") == "before")
        self.assertTrue(trie.autoComplete("before") == "before")
        self.assertTrue(trie.autoComplete("beg") == "begin")
        self.assertTrue(trie.autoComplete("begi") == "begin")
        self.assertTrue(trie.autoComplete("begin") == "begin")
        self.assertTrue(trie.autoComplete("beginn") == "beginning")
        self.assertTrue(trie.autoComplete("beginni") == "beginning")
        self.assertTrue(trie.autoComplete("beginnin") == "beginning")
        self.assertTrue(trie.autoComplete("beginning") == "beginning")
        self.assertTrue(trie.autoComplete("beh") == "behaviour")
        self.assertTrue(trie.autoComplete("beha") == "behaviour")
        self.assertTrue(trie.autoComplete("behav") == "behaviour")
        self.assertTrue(trie.autoComplete("behavi") == "behaviour")
        self.assertTrue(trie.autoComplete("behavio") == "behaviour")
        self.assertTrue(trie.autoComplete("behaviou") == "behaviour")
        self.assertTrue(trie.autoComplete("behaviour") == "behaviour")
        self.assertTrue(trie.autoComplete("bei") == "being")
        self.assertTrue(trie.autoComplete("bein") == "being")
        self.assertTrue(trie.autoComplete("being") == "being")
        self.assertTrue(trie.autoComplete("bej") == None)
        self.assertTrue(trie.autoComplete("bek") == None)
        self.assertTrue(trie.autoComplete("bel") == "belonging")
        self.assertTrue(trie.autoComplete("belo") == "belonging")
        self.assertTrue(trie.autoComplete("belon") == "belonging")
        self.assertTrue(trie.autoComplete("belong") == "belonging")
        self.assertTrue(trie.autoComplete("belongi") == "belonging")
        self.assertTrue(trie.autoComplete("belongin") == "belonging")
        self.assertTrue(trie.autoComplete("belonging") == "belonging")
        self.assertTrue(trie.autoComplete("bem") == None)
        self.assertTrue(trie.autoComplete("ben") == None)
        self.assertTrue(trie.autoComplete("beo") == None)
        self.assertTrue(trie.autoComplete("bep") == None)
        self.assertTrue(trie.autoComplete("beq") == None)
        self.assertTrue(trie.autoComplete("ber") == None)
        self.assertTrue(trie.autoComplete("bes") == "best")
        self.assertTrue(trie.autoComplete("best") == "best")
        self.assertTrue(trie.autoComplete("bet") == "between")
        self.assertTrue(trie.autoComplete("betw") == "between")
        self.assertTrue(trie.autoComplete("betwe") == "between")
        self.assertTrue(trie.autoComplete("betwee") == "between")
        self.assertTrue(trie.autoComplete("between") == "between")
        self.assertTrue(trie.autoComplete("beu") == None)
        self.assertTrue(trie.autoComplete("bev") == "beverage")
        self.assertTrue(trie.autoComplete("beve") == "beverage")
        self.assertTrue(trie.autoComplete("bever") == "beverage")
        self.assertTrue(trie.autoComplete("bevera") == "beverage")
        self.assertTrue(trie.autoComplete("beverag") == "beverage")
        self.assertTrue(trie.autoComplete("beverage") == "beverage")
        self.assertTrue(trie.autoComplete("bew") == None)
        self.assertTrue(trie.autoComplete("bex") == None)
        self.assertTrue(trie.autoComplete("bey") == None)
        self.assertTrue(trie.autoComplete("bez") == None)
        self.assertTrue(trie.autoComplete("bf") == None)
        self.assertTrue(trie.autoComplete("bfa") == None)
        self.assertTrue(trie.autoComplete("bfb") == None)
        self.assertTrue(trie.autoComplete("bfc") == None)
        self.assertTrue(trie.autoComplete("bfd") == None)
        self.assertTrue(trie.autoComplete("bfe") == None)
        self.assertTrue(trie.autoComplete("bff") == None)
        self.assertTrue(trie.autoComplete("bfg") == None)
        self.assertTrue(trie.autoComplete("bfh") == None)
        self.assertTrue(trie.autoComplete("bfi") == None)
        self.assertTrue(trie.autoComplete("bfj") == None)
        self.assertTrue(trie.autoComplete("bfk") == None)
        self.assertTrue(trie.autoComplete("bfl") == None)
        self.assertTrue(trie.autoComplete("bfm") == None)
        self.assertTrue(trie.autoComplete("bfn") == None)
        self.assertTrue(trie.autoComplete("bfo") == None)
        self.assertTrue(trie.autoComplete("bfp") == None)
        self.assertTrue(trie.autoComplete("bfq") == None)
        self.assertTrue(trie.autoComplete("bfr") == None)
        self.assertTrue(trie.autoComplete("bfs") == None)
        self.assertTrue(trie.autoComplete("bft") == None)
        self.assertTrue(trie.autoComplete("bfu") == None)
        self.assertTrue(trie.autoComplete("bfv") == None)
        self.assertTrue(trie.autoComplete("bfw") == None)
        self.assertTrue(trie.autoComplete("bfx") == None)
        self.assertTrue(trie.autoComplete("bfy") == None)
        self.assertTrue(trie.autoComplete("bfz") == None)
        self.assertTrue(trie.autoComplete("bg") == None)
        self.assertTrue(trie.autoComplete("bga") == None)
        self.assertTrue(trie.autoComplete("bgb") == None)
        self.assertTrue(trie.autoComplete("bgc") == None)
        self.assertTrue(trie.autoComplete("bgd") == None)
        self.assertTrue(trie.autoComplete("bge") == None)
        self.assertTrue(trie.autoComplete("bgf") == None)
        self.assertTrue(trie.autoComplete("bgg") == None)
        self.assertTrue(trie.autoComplete("bgh") == None)
        self.assertTrue(trie.autoComplete("bgi") == None)
        self.assertTrue(trie.autoComplete("bgj") == None)
        self.assertTrue(trie.autoComplete("bgk") == None)
        self.assertTrue(trie.autoComplete("bgl") == None)
        self.assertTrue(trie.autoComplete("bgm") == None)
        self.assertTrue(trie.autoComplete("bgn") == None)
        self.assertTrue(trie.autoComplete("bgo") == None)
        self.assertTrue(trie.autoComplete("bgp") == None)
        self.assertTrue(trie.autoComplete("bgq") == None)
        self.assertTrue(trie.autoComplete("bgr") == None)
        self.assertTrue(trie.autoComplete("bgs") == None)
        self.assertTrue(trie.autoComplete("bgt") == None)
        self.assertTrue(trie.autoComplete("bgu") == None)
        self.assertTrue(trie.autoComplete("bgv") == None)
        self.assertTrue(trie.autoComplete("bgw") == None)
        self.assertTrue(trie.autoComplete("bgx") == None)
        self.assertTrue(trie.autoComplete("bgy") == None)
        self.assertTrue(trie.autoComplete("bgz") == None)
        self.assertTrue(trie.autoComplete("bh") == None)
        self.assertTrue(trie.autoComplete("bha") == None)
        self.assertTrue(trie.autoComplete("bhb") == None)
        self.assertTrue(trie.autoComplete("bhc") == None)
        self.assertTrue(trie.autoComplete("bhd") == None)
        self.assertTrue(trie.autoComplete("bhe") == None)
        self.assertTrue(trie.autoComplete("bhf") == None)
        self.assertTrue(trie.autoComplete("bhg") == None)
        self.assertTrue(trie.autoComplete("bhh") == None)
        self.assertTrue(trie.autoComplete("bhi") == None)
        self.assertTrue(trie.autoComplete("bhj") == None)
        self.assertTrue(trie.autoComplete("bhk") == None)
        self.assertTrue(trie.autoComplete("bhl") == None)
        self.assertTrue(trie.autoComplete("bhm") == None)
        self.assertTrue(trie.autoComplete("bhn") == None)
        self.assertTrue(trie.autoComplete("bho") == None)
        self.assertTrue(trie.autoComplete("bhp") == None)
        self.assertTrue(trie.autoComplete("bhq") == None)
        self.assertTrue(trie.autoComplete("bhr") == None)
        self.assertTrue(trie.autoComplete("bhs") == None)
        self.assertTrue(trie.autoComplete("bht") == None)
        self.assertTrue(trie.autoComplete("bhu") == None)
        self.assertTrue(trie.autoComplete("bhv") == None)
        self.assertTrue(trie.autoComplete("bhw") == None)
        self.assertTrue(trie.autoComplete("bhx") == None)
        self.assertTrue(trie.autoComplete("bhy") == None)
        self.assertTrue(trie.autoComplete("bhz") == None)
        self.assertTrue(trie.autoComplete("bi") == "bill")
        self.assertTrue(trie.autoComplete("bia") == None)
        self.assertTrue(trie.autoComplete("bib") == None)
        self.assertTrue(trie.autoComplete("bic") == None)
        self.assertTrue(trie.autoComplete("bid") == None)
        self.assertTrue(trie.autoComplete("bie") == None)
        self.assertTrue(trie.autoComplete("bif") == None)
        self.assertTrue(trie.autoComplete("big") == None)
        self.assertTrue(trie.autoComplete("bih") == None)
        self.assertTrue(trie.autoComplete("bii") == None)
        self.assertTrue(trie.autoComplete("bij") == None)
        self.assertTrue(trie.autoComplete("bik") == None)
        self.assertTrue(trie.autoComplete("bil") == "bill")
        self.assertTrue(trie.autoComplete("bill") == "bill")
        self.assertTrue(trie.autoComplete("bills") == "bills")
        self.assertTrue(trie.autoComplete("bim") == None)
        self.assertTrue(trie.autoComplete("bin") == None)
        self.assertTrue(trie.autoComplete("bio") == None)
        self.assertTrue(trie.autoComplete("bip") == None)
        self.assertTrue(trie.autoComplete("biq") == None)
        self.assertTrue(trie.autoComplete("bir") == None)
        self.assertTrue(trie.autoComplete("bis") == None)
        self.assertTrue(trie.autoComplete("bit") == None)
        self.assertTrue(trie.autoComplete("biu") == None)
        self.assertTrue(trie.autoComplete("biv") == None)
        self.assertTrue(trie.autoComplete("biw") == None)
        self.assertTrue(trie.autoComplete("bix") == None)
        self.assertTrue(trie.autoComplete("biy") == None)
        self.assertTrue(trie.autoComplete("biz") == None)
        self.assertTrue(trie.autoComplete("bj") == None)
        self.assertTrue(trie.autoComplete("bja") == None)
        self.assertTrue(trie.autoComplete("bjb") == None)
        self.assertTrue(trie.autoComplete("bjc") == None)
        self.assertTrue(trie.autoComplete("bjd") == None)
        self.assertTrue(trie.autoComplete("bje") == None)
        self.assertTrue(trie.autoComplete("bjf") == None)
        self.assertTrue(trie.autoComplete("bjg") == None)
        self.assertTrue(trie.autoComplete("bjh") == None)
        self.assertTrue(trie.autoComplete("bji") == None)
        self.assertTrue(trie.autoComplete("bjj") == None)
        self.assertTrue(trie.autoComplete("bjk") == None)
        self.assertTrue(trie.autoComplete("bjl") == None)
        self.assertTrue(trie.autoComplete("bjm") == None)
        self.assertTrue(trie.autoComplete("bjn") == None)
        self.assertTrue(trie.autoComplete("bjo") == None)
        self.assertTrue(trie.autoComplete("bjp") == None)
        self.assertTrue(trie.autoComplete("bjq") == None)
        self.assertTrue(trie.autoComplete("bjr") == None)
        self.assertTrue(trie.autoComplete("bjs") == None)
        self.assertTrue(trie.autoComplete("bjt") == None)
        self.assertTrue(trie.autoComplete("bju") == None)
        self.assertTrue(trie.autoComplete("bjv") == None)
        self.assertTrue(trie.autoComplete("bjw") == None)
        self.assertTrue(trie.autoComplete("bjx") == None)
        self.assertTrue(trie.autoComplete("bjy") == None)
        self.assertTrue(trie.autoComplete("bjz") == None)
        self.assertTrue(trie.autoComplete("bk") == None)
        self.assertTrue(trie.autoComplete("bka") == None)
        self.assertTrue(trie.autoComplete("bkb") == None)
        self.assertTrue(trie.autoComplete("bkc") == None)
        self.assertTrue(trie.autoComplete("bkd") == None)
        self.assertTrue(trie.autoComplete("bke") == None)
        self.assertTrue(trie.autoComplete("bkf") == None)
        self.assertTrue(trie.autoComplete("bkg") == None)
        self.assertTrue(trie.autoComplete("bkh") == None)
        self.assertTrue(trie.autoComplete("bki") == None)
        self.assertTrue(trie.autoComplete("bkj") == None)
        self.assertTrue(trie.autoComplete("bkk") == None)
        self.assertTrue(trie.autoComplete("bkl") == None)
        self.assertTrue(trie.autoComplete("bkm") == None)
        self.assertTrue(trie.autoComplete("bkn") == None)
        self.assertTrue(trie.autoComplete("bko") == None)
        self.assertTrue(trie.autoComplete("bkp") == None)
        self.assertTrue(trie.autoComplete("bkq") == None)
        self.assertTrue(trie.autoComplete("bkr") == None)
        self.assertTrue(trie.autoComplete("bks") == None)
        self.assertTrue(trie.autoComplete("bkt") == None)
        self.assertTrue(trie.autoComplete("bku") == None)
        self.assertTrue(trie.autoComplete("bkv") == None)
        self.assertTrue(trie.autoComplete("bkw") == None)
        self.assertTrue(trie.autoComplete("bkx") == None)
        self.assertTrue(trie.autoComplete("bky") == None)
        self.assertTrue(trie.autoComplete("bkz") == None)
        self.assertTrue(trie.autoComplete("bl") == "blessings")
        self.assertTrue(trie.autoComplete("bla") == None)
        self.assertTrue(trie.autoComplete("blb") == None)
        self.assertTrue(trie.autoComplete("blc") == None)
        self.assertTrue(trie.autoComplete("bld") == None)
        self.assertTrue(trie.autoComplete("ble") == "blessings")
        self.assertTrue(trie.autoComplete("bles") == "blessings")
        self.assertTrue(trie.autoComplete("bless") == "blessings")
        self.assertTrue(trie.autoComplete("blessi") == "blessings")
        self.assertTrue(trie.autoComplete("blessin") == "blessings")
        self.assertTrue(trie.autoComplete("blessing") == "blessings")
        self.assertTrue(trie.autoComplete("blessings") == "blessings")
        self.assertTrue(trie.autoComplete("blf") == None)
        self.assertTrue(trie.autoComplete("blg") == None)
        self.assertTrue(trie.autoComplete("blh") == None)
        self.assertTrue(trie.autoComplete("bli") == None)
        self.assertTrue(trie.autoComplete("blj") == None)
        self.assertTrue(trie.autoComplete("blk") == None)
        self.assertTrue(trie.autoComplete("bll") == None)
        self.assertTrue(trie.autoComplete("blm") == None)
        self.assertTrue(trie.autoComplete("bln") == None)
        self.assertTrue(trie.autoComplete("blo") == "blood")
        self.assertTrue(trie.autoComplete("bloo") == "blood")
        self.assertTrue(trie.autoComplete("blood") == "blood")
        self.assertTrue(trie.autoComplete("blp") == None)
        self.assertTrue(trie.autoComplete("blq") == None)
        self.assertTrue(trie.autoComplete("blr") == None)
        self.assertTrue(trie.autoComplete("bls") == None)
        self.assertTrue(trie.autoComplete("blt") == None)
        self.assertTrue(trie.autoComplete("blu") == None)
        self.assertTrue(trie.autoComplete("blv") == None)
        self.assertTrue(trie.autoComplete("blw") == None)
        self.assertTrue(trie.autoComplete("blx") == None)
        self.assertTrue(trie.autoComplete("bly") == None)
        self.assertTrue(trie.autoComplete("blz") == None)
        self.assertTrue(trie.autoComplete("bm") == None)
        self.assertTrue(trie.autoComplete("bma") == None)
        self.assertTrue(trie.autoComplete("bmb") == None)
        self.assertTrue(trie.autoComplete("bmc") == None)
        self.assertTrue(trie.autoComplete("bmd") == None)
        self.assertTrue(trie.autoComplete("bme") == None)
        self.assertTrue(trie.autoComplete("bmf") == None)
        self.assertTrue(trie.autoComplete("bmg") == None)
        self.assertTrue(trie.autoComplete("bmh") == None)
        self.assertTrue(trie.autoComplete("bmi") == None)
        self.assertTrue(trie.autoComplete("bmj") == None)
        self.assertTrue(trie.autoComplete("bmk") == None)
        self.assertTrue(trie.autoComplete("bml") == None)
        self.assertTrue(trie.autoComplete("bmm") == None)
        self.assertTrue(trie.autoComplete("bmn") == None)
        self.assertTrue(trie.autoComplete("bmo") == None)
        self.assertTrue(trie.autoComplete("bmp") == None)
        self.assertTrue(trie.autoComplete("bmq") == None)
        self.assertTrue(trie.autoComplete("bmr") == None)
        self.assertTrue(trie.autoComplete("bms") == None)
        self.assertTrue(trie.autoComplete("bmt") == None)
        self.assertTrue(trie.autoComplete("bmu") == None)
        self.assertTrue(trie.autoComplete("bmv") == None)
        self.assertTrue(trie.autoComplete("bmw") == None)
        self.assertTrue(trie.autoComplete("bmx") == None)
        self.assertTrue(trie.autoComplete("bmy") == None)
        self.assertTrue(trie.autoComplete("bmz") == None)
        self.assertTrue(trie.autoComplete("bn") == None)
        self.assertTrue(trie.autoComplete("bna") == None)
        self.assertTrue(trie.autoComplete("bnb") == None)
        self.assertTrue(trie.autoComplete("bnc") == None)
        self.assertTrue(trie.autoComplete("bnd") == None)
        self.assertTrue(trie.autoComplete("bne") == None)
        self.assertTrue(trie.autoComplete("bnf") == None)
        self.assertTrue(trie.autoComplete("bng") == None)
        self.assertTrue(trie.autoComplete("bnh") == None)
        self.assertTrue(trie.autoComplete("bni") == None)
        self.assertTrue(trie.autoComplete("bnj") == None)
        self.assertTrue(trie.autoComplete("bnk") == None)
        self.assertTrue(trie.autoComplete("bnl") == None)
        self.assertTrue(trie.autoComplete("bnm") == None)
        self.assertTrue(trie.autoComplete("bnn") == None)
        self.assertTrue(trie.autoComplete("bno") == None)
        self.assertTrue(trie.autoComplete("bnp") == None)
        self.assertTrue(trie.autoComplete("bnq") == None)
        self.assertTrue(trie.autoComplete("bnr") == None)
        self.assertTrue(trie.autoComplete("bns") == None)
        self.assertTrue(trie.autoComplete("bnt") == None)
        self.assertTrue(trie.autoComplete("bnu") == None)
        self.assertTrue(trie.autoComplete("bnv") == None)
        self.assertTrue(trie.autoComplete("bnw") == None)
        self.assertTrue(trie.autoComplete("bnx") == None)
        self.assertTrue(trie.autoComplete("bny") == None)
        self.assertTrue(trie.autoComplete("bnz") == None)
        self.assertTrue(trie.autoComplete("bo") == "both")
        self.assertTrue(trie.autoComplete("boa") == None)
        self.assertTrue(trie.autoComplete("bob") == None)
        self.assertTrue(trie.autoComplete("boc") == None)
        self.assertTrue(trie.autoComplete("bod") == "body")
        self.assertTrue(trie.autoComplete("body") == "body")
        self.assertTrue(trie.autoComplete("boe") == None)
        self.assertTrue(trie.autoComplete("bof") == None)
        self.assertTrue(trie.autoComplete("bog") == None)
        self.assertTrue(trie.autoComplete("boh") == None)
        self.assertTrue(trie.autoComplete("boi") == None)
        self.assertTrue(trie.autoComplete("boj") == None)
        self.assertTrue(trie.autoComplete("bok") == None)
        self.assertTrue(trie.autoComplete("bol") == None)
        self.assertTrue(trie.autoComplete("bom") == None)
        self.assertTrue(trie.autoComplete("bon") == None)
        self.assertTrue(trie.autoComplete("boo") == None)
        self.assertTrue(trie.autoComplete("bop") == None)
        self.assertTrue(trie.autoComplete("boq") == None)
        self.assertTrue(trie.autoComplete("bor") == "born")
        self.assertTrue(trie.autoComplete("born") == "born")
        self.assertTrue(trie.autoComplete("borr") == "borrow")
        self.assertTrue(trie.autoComplete("borro") == "borrow")
        self.assertTrue(trie.autoComplete("borrow") == "borrow")
        self.assertTrue(trie.autoComplete("bos") == None)
        self.assertTrue(trie.autoComplete("bot") == "both")
        self.assertTrue(trie.autoComplete("both") == "both")
        self.assertTrue(trie.autoComplete("bou") == "bound")
        self.assertTrue(trie.autoComplete("boun") == "bound")
        self.assertTrue(trie.autoComplete("bound") == "bound")
        self.assertTrue(trie.autoComplete("bount") == "bounties")
        self.assertTrue(trie.autoComplete("bounti") == "bounties")
        self.assertTrue(trie.autoComplete("bountie") == "bounties")
        self.assertTrue(trie.autoComplete("bounties") == "bounties")
        self.assertTrue(trie.autoComplete("bov") == None)
        self.assertTrue(trie.autoComplete("bow") == None)
        self.assertTrue(trie.autoComplete("box") == None)
        self.assertTrue(trie.autoComplete("boy") == None)
        self.assertTrue(trie.autoComplete("boz") == None)
        self.assertTrue(trie.autoComplete("bp") == None)
        self.assertTrue(trie.autoComplete("bpa") == None)
        self.assertTrue(trie.autoComplete("bpb") == None)
        self.assertTrue(trie.autoComplete("bpc") == None)
        self.assertTrue(trie.autoComplete("bpd") == None)
        self.assertTrue(trie.autoComplete("bpe") == None)
        self.assertTrue(trie.autoComplete("bpf") == None)
        self.assertTrue(trie.autoComplete("bpg") == None)
        self.assertTrue(trie.autoComplete("bph") == None)
        self.assertTrue(trie.autoComplete("bpi") == None)
        self.assertTrue(trie.autoComplete("bpj") == None)
        self.assertTrue(trie.autoComplete("bpk") == None)
        self.assertTrue(trie.autoComplete("bpl") == None)
        self.assertTrue(trie.autoComplete("bpm") == None)
        self.assertTrue(trie.autoComplete("bpn") == None)
        self.assertTrue(trie.autoComplete("bpo") == None)
        self.assertTrue(trie.autoComplete("bpp") == None)
        self.assertTrue(trie.autoComplete("bpq") == None)
        self.assertTrue(trie.autoComplete("bpr") == None)
        self.assertTrue(trie.autoComplete("bps") == None)
        self.assertTrue(trie.autoComplete("bpt") == None)
        self.assertTrue(trie.autoComplete("bpu") == None)
        self.assertTrue(trie.autoComplete("bpv") == None)
        self.assertTrue(trie.autoComplete("bpw") == None)
        self.assertTrue(trie.autoComplete("bpx") == None)
        self.assertTrue(trie.autoComplete("bpy") == None)
        self.assertTrue(trie.autoComplete("bpz") == None)
        self.assertTrue(trie.autoComplete("bq") == None)
        self.assertTrue(trie.autoComplete("bqa") == None)
        self.assertTrue(trie.autoComplete("bqb") == None)
        self.assertTrue(trie.autoComplete("bqc") == None)
        self.assertTrue(trie.autoComplete("bqd") == None)
        self.assertTrue(trie.autoComplete("bqe") == None)
        self.assertTrue(trie.autoComplete("bqf") == None)
        self.assertTrue(trie.autoComplete("bqg") == None)
        self.assertTrue(trie.autoComplete("bqh") == None)
        self.assertTrue(trie.autoComplete("bqi") == None)
        self.assertTrue(trie.autoComplete("bqj") == None)
        self.assertTrue(trie.autoComplete("bqk") == None)
        self.assertTrue(trie.autoComplete("bql") == None)
        self.assertTrue(trie.autoComplete("bqm") == None)
        self.assertTrue(trie.autoComplete("bqn") == None)
        self.assertTrue(trie.autoComplete("bqo") == None)
        self.assertTrue(trie.autoComplete("bqp") == None)
        self.assertTrue(trie.autoComplete("bqq") == None)
        self.assertTrue(trie.autoComplete("bqr") == None)
        self.assertTrue(trie.autoComplete("bqs") == None)
        self.assertTrue(trie.autoComplete("bqt") == None)
        self.assertTrue(trie.autoComplete("bqu") == None)
        self.assertTrue(trie.autoComplete("bqv") == None)
        self.assertTrue(trie.autoComplete("bqw") == None)
        self.assertTrue(trie.autoComplete("bqx") == None)
        self.assertTrue(trie.autoComplete("bqy") == None)
        self.assertTrue(trie.autoComplete("bqz") == None)
        self.assertTrue(trie.autoComplete("br") == "branch")
        self.assertTrue(trie.autoComplete("bra") == "branch")
        self.assertTrue(trie.autoComplete("bran") == "branch")
        self.assertTrue(trie.autoComplete("branc") == "branch")
        self.assertTrue(trie.autoComplete("branch") == "branch")
        self.assertTrue(trie.autoComplete("brb") == None)
        self.assertTrue(trie.autoComplete("brc") == None)
        self.assertTrue(trie.autoComplete("brd") == None)
        self.assertTrue(trie.autoComplete("bre") == "breach")
        self.assertTrue(trie.autoComplete("brea") == "breach")
        self.assertTrue(trie.autoComplete("breac") == "breach")
        self.assertTrue(trie.autoComplete("breach") == "breach")
        self.assertTrue(trie.autoComplete("brf") == None)
        self.assertTrue(trie.autoComplete("brg") == None)
        self.assertTrue(trie.autoComplete("brh") == None)
        self.assertTrue(trie.autoComplete("bri") == "bribery")
        self.assertTrue(trie.autoComplete("brib") == "bribery")
        self.assertTrue(trie.autoComplete("bribe") == "bribery")
        self.assertTrue(trie.autoComplete("briber") == "bribery")
        self.assertTrue(trie.autoComplete("bribery") == "bribery")
        self.assertTrue(trie.autoComplete("brj") == None)
        self.assertTrue(trie.autoComplete("brk") == None)
        self.assertTrue(trie.autoComplete("brl") == None)
        self.assertTrue(trie.autoComplete("brm") == None)
        self.assertTrue(trie.autoComplete("brn") == None)
        self.assertTrue(trie.autoComplete("bro") == None)
        self.assertTrue(trie.autoComplete("brp") == None)
        self.assertTrue(trie.autoComplete("brq") == None)
        self.assertTrue(trie.autoComplete("brr") == None)
        self.assertTrue(trie.autoComplete("brs") == None)
        self.assertTrue(trie.autoComplete("brt") == None)
        self.assertTrue(trie.autoComplete("bru") == None)
        self.assertTrue(trie.autoComplete("brv") == None)
        self.assertTrue(trie.autoComplete("brw") == None)
        self.assertTrue(trie.autoComplete("brx") == None)
        self.assertTrue(trie.autoComplete("bry") == None)
        self.assertTrue(trie.autoComplete("brz") == None)
        self.assertTrue(trie.autoComplete("bs") == None)
        self.assertTrue(trie.autoComplete("bsa") == None)
        self.assertTrue(trie.autoComplete("bsb") == None)
        self.assertTrue(trie.autoComplete("bsc") == None)
        self.assertTrue(trie.autoComplete("bsd") == None)
        self.assertTrue(trie.autoComplete("bse") == None)
        self.assertTrue(trie.autoComplete("bsf") == None)
        self.assertTrue(trie.autoComplete("bsg") == None)
        self.assertTrue(trie.autoComplete("bsh") == None)
        self.assertTrue(trie.autoComplete("bsi") == None)
        self.assertTrue(trie.autoComplete("bsj") == None)
        self.assertTrue(trie.autoComplete("bsk") == None)
        self.assertTrue(trie.autoComplete("bsl") == None)
        self.assertTrue(trie.autoComplete("bsm") == None)
        self.assertTrue(trie.autoComplete("bsn") == None)
        self.assertTrue(trie.autoComplete("bso") == None)
        self.assertTrue(trie.autoComplete("bsp") == None)
        self.assertTrue(trie.autoComplete("bsq") == None)
        self.assertTrue(trie.autoComplete("bsr") == None)
        self.assertTrue(trie.autoComplete("bss") == None)
        self.assertTrue(trie.autoComplete("bst") == None)
        self.assertTrue(trie.autoComplete("bsu") == None)
        self.assertTrue(trie.autoComplete("bsv") == None)
        self.assertTrue(trie.autoComplete("bsw") == None)
        self.assertTrue(trie.autoComplete("bsx") == None)
        self.assertTrue(trie.autoComplete("bsy") == None)
        self.assertTrue(trie.autoComplete("bsz") == None)
        self.assertTrue(trie.autoComplete("bt") == None)
        self.assertTrue(trie.autoComplete("bta") == None)
        self.assertTrue(trie.autoComplete("btb") == None)
        self.assertTrue(trie.autoComplete("btc") == None)
        self.assertTrue(trie.autoComplete("btd") == None)
        self.assertTrue(trie.autoComplete("bte") == None)
        self.assertTrue(trie.autoComplete("btf") == None)
        self.assertTrue(trie.autoComplete("btg") == None)
        self.assertTrue(trie.autoComplete("bth") == None)
        self.assertTrue(trie.autoComplete("bti") == None)
        self.assertTrue(trie.autoComplete("btj") == None)
        self.assertTrue(trie.autoComplete("btk") == None)
        self.assertTrue(trie.autoComplete("btl") == None)
        self.assertTrue(trie.autoComplete("btm") == None)
        self.assertTrue(trie.autoComplete("btn") == None)
        self.assertTrue(trie.autoComplete("bto") == None)
        self.assertTrue(trie.autoComplete("btp") == None)
        self.assertTrue(trie.autoComplete("btq") == None)
        self.assertTrue(trie.autoComplete("btr") == None)
        self.assertTrue(trie.autoComplete("bts") == None)
        self.assertTrue(trie.autoComplete("btt") == None)
        self.assertTrue(trie.autoComplete("btu") == None)
        self.assertTrue(trie.autoComplete("btv") == None)
        self.assertTrue(trie.autoComplete("btw") == None)
        self.assertTrue(trie.autoComplete("btx") == None)
        self.assertTrue(trie.autoComplete("bty") == None)
        self.assertTrue(trie.autoComplete("btz") == None)
        self.assertTrue(trie.autoComplete("bu") == "but")
        self.assertTrue(trie.autoComplete("bua") == None)
        self.assertTrue(trie.autoComplete("bub") == None)
        self.assertTrue(trie.autoComplete("buc") == None)
        self.assertTrue(trie.autoComplete("bud") == None)
        self.assertTrue(trie.autoComplete("bue") == None)
        self.assertTrue(trie.autoComplete("buf") == None)
        self.assertTrue(trie.autoComplete("bug") == None)
        self.assertTrue(trie.autoComplete("buh") == None)
        self.assertTrue(trie.autoComplete("bui") == "buildings")
        self.assertTrue(trie.autoComplete("buil") == "buildings")
        self.assertTrue(trie.autoComplete("build") == "buildings")
        self.assertTrue(trie.autoComplete("buildi") == "buildings")
        self.assertTrue(trie.autoComplete("buildin") == "buildings")
        self.assertTrue(trie.autoComplete("building") == "buildings")
        self.assertTrue(trie.autoComplete("buildings") == "buildings")
        self.assertTrue(trie.autoComplete("buj") == None)
        self.assertTrue(trie.autoComplete("buk") == None)
        self.assertTrue(trie.autoComplete("bul") == None)
        self.assertTrue(trie.autoComplete("bum") == None)
        self.assertTrue(trie.autoComplete("bun") == None)
        self.assertTrue(trie.autoComplete("buo") == None)
        self.assertTrue(trie.autoComplete("bup") == None)
        self.assertTrue(trie.autoComplete("buq") == None)
        self.assertTrue(trie.autoComplete("bur") == None)
        self.assertTrue(trie.autoComplete("bus") == "business")
        self.assertTrue(trie.autoComplete("busi") == "business")
        self.assertTrue(trie.autoComplete("busin") == "business")
        self.assertTrue(trie.autoComplete("busine") == "business")
        self.assertTrue(trie.autoComplete("busines") == "business")
        self.assertTrue(trie.autoComplete("business") == "business")
        self.assertTrue(trie.autoComplete("but") == "but")
        self.assertTrue(trie.autoComplete("buu") == None)
        self.assertTrue(trie.autoComplete("buv") == None)
        self.assertTrue(trie.autoComplete("buw") == None)
        self.assertTrue(trie.autoComplete("bux") == None)
        self.assertTrue(trie.autoComplete("buy") == None)
        self.assertTrue(trie.autoComplete("buz") == None)
        self.assertTrue(trie.autoComplete("bv") == None)
        self.assertTrue(trie.autoComplete("bva") == None)
        self.assertTrue(trie.autoComplete("bvb") == None)
        self.assertTrue(trie.autoComplete("bvc") == None)
        self.assertTrue(trie.autoComplete("bvd") == None)
        self.assertTrue(trie.autoComplete("bve") == None)
        self.assertTrue(trie.autoComplete("bvf") == None)
        self.assertTrue(trie.autoComplete("bvg") == None)
        self.assertTrue(trie.autoComplete("bvh") == None)
        self.assertTrue(trie.autoComplete("bvi") == None)
        self.assertTrue(trie.autoComplete("bvj") == None)
        self.assertTrue(trie.autoComplete("bvk") == None)
        self.assertTrue(trie.autoComplete("bvl") == None)
        self.assertTrue(trie.autoComplete("bvm") == None)
        self.assertTrue(trie.autoComplete("bvn") == None)
        self.assertTrue(trie.autoComplete("bvo") == None)
        self.assertTrue(trie.autoComplete("bvp") == None)
        self.assertTrue(trie.autoComplete("bvq") == None)
        self.assertTrue(trie.autoComplete("bvr") == None)
        self.assertTrue(trie.autoComplete("bvs") == None)
        self.assertTrue(trie.autoComplete("bvt") == None)
        self.assertTrue(trie.autoComplete("bvu") == None)
        self.assertTrue(trie.autoComplete("bvv") == None)
        self.assertTrue(trie.autoComplete("bvw") == None)
        self.assertTrue(trie.autoComplete("bvx") == None)
        self.assertTrue(trie.autoComplete("bvy") == None)
        self.assertTrue(trie.autoComplete("bvz") == None)
        self.assertTrue(trie.autoComplete("bw") == None)
        self.assertTrue(trie.autoComplete("bwa") == None)
        self.assertTrue(trie.autoComplete("bwb") == None)
        self.assertTrue(trie.autoComplete("bwc") == None)
        self.assertTrue(trie.autoComplete("bwd") == None)
        self.assertTrue(trie.autoComplete("bwe") == None)
        self.assertTrue(trie.autoComplete("bwf") == None)
        self.assertTrue(trie.autoComplete("bwg") == None)
        self.assertTrue(trie.autoComplete("bwh") == None)
        self.assertTrue(trie.autoComplete("bwi") == None)
        self.assertTrue(trie.autoComplete("bwj") == None)
        self.assertTrue(trie.autoComplete("bwk") == None)
        self.assertTrue(trie.autoComplete("bwl") == None)
        self.assertTrue(trie.autoComplete("bwm") == None)
        self.assertTrue(trie.autoComplete("bwn") == None)
        self.assertTrue(trie.autoComplete("bwo") == None)
        self.assertTrue(trie.autoComplete("bwp") == None)
        self.assertTrue(trie.autoComplete("bwq") == None)
        self.assertTrue(trie.autoComplete("bwr") == None)
        self.assertTrue(trie.autoComplete("bws") == None)
        self.assertTrue(trie.autoComplete("bwt") == None)
        self.assertTrue(trie.autoComplete("bwu") == None)
        self.assertTrue(trie.autoComplete("bwv") == None)
        self.assertTrue(trie.autoComplete("bww") == None)
        self.assertTrue(trie.autoComplete("bwx") == None)
        self.assertTrue(trie.autoComplete("bwy") == None)
        self.assertTrue(trie.autoComplete("bwz") == None)
        self.assertTrue(trie.autoComplete("bx") == None)
        self.assertTrue(trie.autoComplete("bxa") == None)
        self.assertTrue(trie.autoComplete("bxb") == None)
        self.assertTrue(trie.autoComplete("bxc") == None)
        self.assertTrue(trie.autoComplete("bxd") == None)
        self.assertTrue(trie.autoComplete("bxe") == None)
        self.assertTrue(trie.autoComplete("bxf") == None)
        self.assertTrue(trie.autoComplete("bxg") == None)
        self.assertTrue(trie.autoComplete("bxh") == None)
        self.assertTrue(trie.autoComplete("bxi") == None)
        self.assertTrue(trie.autoComplete("bxj") == None)
        self.assertTrue(trie.autoComplete("bxk") == None)
        self.assertTrue(trie.autoComplete("bxl") == None)
        self.assertTrue(trie.autoComplete("bxm") == None)
        self.assertTrue(trie.autoComplete("bxn") == None)
        self.assertTrue(trie.autoComplete("bxo") == None)
        self.assertTrue(trie.autoComplete("bxp") == None)
        self.assertTrue(trie.autoComplete("bxq") == None)
        self.assertTrue(trie.autoComplete("bxr") == None)
        self.assertTrue(trie.autoComplete("bxs") == None)
        self.assertTrue(trie.autoComplete("bxt") == None)
        self.assertTrue(trie.autoComplete("bxu") == None)
        self.assertTrue(trie.autoComplete("bxv") == None)
        self.assertTrue(trie.autoComplete("bxw") == None)
        self.assertTrue(trie.autoComplete("bxx") == None)
        self.assertTrue(trie.autoComplete("bxy") == None)
        self.assertTrue(trie.autoComplete("bxz") == None)
        self.assertTrue(trie.autoComplete("by") == "by")
        self.assertTrue(trie.autoComplete("bya") == None)
        self.assertTrue(trie.autoComplete("byb") == None)
        self.assertTrue(trie.autoComplete("byc") == None)
        self.assertTrue(trie.autoComplete("byd") == None)
        self.assertTrue(trie.autoComplete("bye") == None)
        self.assertTrue(trie.autoComplete("byf") == None)
        self.assertTrue(trie.autoComplete("byg") == None)
        self.assertTrue(trie.autoComplete("byh") == None)
        self.assertTrue(trie.autoComplete("byi") == None)
        self.assertTrue(trie.autoComplete("byj") == None)
        self.assertTrue(trie.autoComplete("byk") == None)
        self.assertTrue(trie.autoComplete("byl") == None)
        self.assertTrue(trie.autoComplete("bym") == None)
        self.assertTrue(trie.autoComplete("byn") == None)
        self.assertTrue(trie.autoComplete("byo") == None)
        self.assertTrue(trie.autoComplete("byp") == None)
        self.assertTrue(trie.autoComplete("byq") == None)
        self.assertTrue(trie.autoComplete("byr") == None)
        self.assertTrue(trie.autoComplete("bys") == None)
        self.assertTrue(trie.autoComplete("byt") == None)
        self.assertTrue(trie.autoComplete("byu") == None)
        self.assertTrue(trie.autoComplete("byv") == None)
        self.assertTrue(trie.autoComplete("byw") == None)
        self.assertTrue(trie.autoComplete("byx") == None)
        self.assertTrue(trie.autoComplete("byy") == None)
        self.assertTrue(trie.autoComplete("byz") == None)
        self.assertTrue(trie.autoComplete("bz") == None)
        self.assertTrue(trie.autoComplete("bza") == None)
        self.assertTrue(trie.autoComplete("bzb") == None)
        self.assertTrue(trie.autoComplete("bzc") == None)
        self.assertTrue(trie.autoComplete("bzd") == None)
        self.assertTrue(trie.autoComplete("bze") == None)
        self.assertTrue(trie.autoComplete("bzf") == None)
        self.assertTrue(trie.autoComplete("bzg") == None)
        self.assertTrue(trie.autoComplete("bzh") == None)
        self.assertTrue(trie.autoComplete("bzi") == None)
        self.assertTrue(trie.autoComplete("bzj") == None)
        self.assertTrue(trie.autoComplete("bzk") == None)
        self.assertTrue(trie.autoComplete("bzl") == None)
        self.assertTrue(trie.autoComplete("bzm") == None)
        self.assertTrue(trie.autoComplete("bzn") == None)
        self.assertTrue(trie.autoComplete("bzo") == None)
        self.assertTrue(trie.autoComplete("bzp") == None)
        self.assertTrue(trie.autoComplete("bzq") == None)
        self.assertTrue(trie.autoComplete("bzr") == None)
        self.assertTrue(trie.autoComplete("bzs") == None)
        self.assertTrue(trie.autoComplete("bzt") == None)
        self.assertTrue(trie.autoComplete("bzu") == None)
        self.assertTrue(trie.autoComplete("bzv") == None)
        self.assertTrue(trie.autoComplete("bzw") == None)
        self.assertTrue(trie.autoComplete("bzx") == None)
        self.assertTrue(trie.autoComplete("bzy") == None)
        self.assertTrue(trie.autoComplete("bzz") == None)
        self.assertTrue(trie.autoComplete("c") == "congress")
        self.assertTrue(trie.autoComplete("ca") == "case")
        self.assertTrue(trie.autoComplete("caa") == None)
        self.assertTrue(trie.autoComplete("cab") == None)
        self.assertTrue(trie.autoComplete("cac") == None)
        self.assertTrue(trie.autoComplete("cad") == None)
        self.assertTrue(trie.autoComplete("cae") == None)
        self.assertTrue(trie.autoComplete("caf") == None)
        self.assertTrue(trie.autoComplete("cag") == None)
        self.assertTrue(trie.autoComplete("cah") == None)
        self.assertTrue(trie.autoComplete("cai") == None)
        self.assertTrue(trie.autoComplete("caj") == None)
        self.assertTrue(trie.autoComplete("cak") == None)
        self.assertTrue(trie.autoComplete("cal") == "call")
        self.assertTrue(trie.autoComplete("call") == "call")
        self.assertTrue(trie.autoComplete("calle") == "called")
        self.assertTrue(trie.autoComplete("called") == "called")
        self.assertTrue(trie.autoComplete("calli") == "calling")
        self.assertTrue(trie.autoComplete("callin") == "calling")
        self.assertTrue(trie.autoComplete("calling") == "calling")
        self.assertTrue(trie.autoComplete("cam") == None)
        self.assertTrue(trie.autoComplete("can") == "cannot")
        self.assertTrue(trie.autoComplete("cann") == "cannot")
        self.assertTrue(trie.autoComplete("canno") == "cannot")
        self.assertTrue(trie.autoComplete("cannot") == "cannot")
        self.assertTrue(trie.autoComplete("cao") == None)
        self.assertTrue(trie.autoComplete("cap") == "capital")
        self.assertTrue(trie.autoComplete("capi") == "capital")
        self.assertTrue(trie.autoComplete("capit") == "capital")
        self.assertTrue(trie.autoComplete("capita") == "capital")
        self.assertTrue(trie.autoComplete("capital") == "capital")
        self.assertTrue(trie.autoComplete("capitat") == "capitation")
        self.assertTrue(trie.autoComplete("capitati") == "capitation")
        self.assertTrue(trie.autoComplete("capitatio") == "capitation")
        self.assertTrue(trie.autoComplete("capitation") == "capitation")
        self.assertTrue(trie.autoComplete("capt") == "captures")
        self.assertTrue(trie.autoComplete("captu") == "captures")
        self.assertTrue(trie.autoComplete("captur") == "captures")
        self.assertTrue(trie.autoComplete("capture") == "captures")
        self.assertTrue(trie.autoComplete("captures") == "captures")
        self.assertTrue(trie.autoComplete("caq") == None)
        self.assertTrue(trie.autoComplete("car") == "carolina")
        self.assertTrue(trie.autoComplete("care") == "care")
        self.assertTrue(trie.autoComplete("caro") == "carolina")
        self.assertTrue(trie.autoComplete("carol") == "carolina")
        self.assertTrue(trie.autoComplete("caroli") == "carolina")
        self.assertTrue(trie.autoComplete("carolin") == "carolina")
        self.assertTrue(trie.autoComplete("carolina") == "carolina")
        self.assertTrue(trie.autoComplete("carr") == "carrying")
        self.assertTrue(trie.autoComplete("carry") == "carrying")
        self.assertTrue(trie.autoComplete("carryi") == "carrying")
        self.assertTrue(trie.autoComplete("carryin") == "carrying")
        self.assertTrue(trie.autoComplete("carrying") == "carrying")
        self.assertTrue(trie.autoComplete("cas") == "case")
        self.assertTrue(trie.autoComplete("case") == "case")
        self.assertTrue(trie.autoComplete("cases") == "cases")
        self.assertTrue(trie.autoComplete("cat") == None)
        self.assertTrue(trie.autoComplete("cau") == "cause")
        self.assertTrue(trie.autoComplete("caus") == "cause")
        self.assertTrue(trie.autoComplete("cause") == "cause")
        self.assertTrue(trie.autoComplete("cav") == None)
        self.assertTrue(trie.autoComplete("caw") == None)
        self.assertTrue(trie.autoComplete("cax") == None)
        self.assertTrue(trie.autoComplete("cay") == None)
        self.assertTrue(trie.autoComplete("caz") == None)
        self.assertTrue(trie.autoComplete("cb") == None)
        self.assertTrue(trie.autoComplete("cba") == None)
        self.assertTrue(trie.autoComplete("cbb") == None)
        self.assertTrue(trie.autoComplete("cbc") == None)
        self.assertTrue(trie.autoComplete("cbd") == None)
        self.assertTrue(trie.autoComplete("cbe") == None)
        self.assertTrue(trie.autoComplete("cbf") == None)
        self.assertTrue(trie.autoComplete("cbg") == None)
        self.assertTrue(trie.autoComplete("cbh") == None)
        self.assertTrue(trie.autoComplete("cbi") == None)
        self.assertTrue(trie.autoComplete("cbj") == None)
        self.assertTrue(trie.autoComplete("cbk") == None)
        self.assertTrue(trie.autoComplete("cbl") == None)
        self.assertTrue(trie.autoComplete("cbm") == None)
        self.assertTrue(trie.autoComplete("cbn") == None)
        self.assertTrue(trie.autoComplete("cbo") == None)
        self.assertTrue(trie.autoComplete("cbp") == None)
        self.assertTrue(trie.autoComplete("cbq") == None)
        self.assertTrue(trie.autoComplete("cbr") == None)
        self.assertTrue(trie.autoComplete("cbs") == None)
        self.assertTrue(trie.autoComplete("cbt") == None)
        self.assertTrue(trie.autoComplete("cbu") == None)
        self.assertTrue(trie.autoComplete("cbv") == None)
        self.assertTrue(trie.autoComplete("cbw") == None)
        self.assertTrue(trie.autoComplete("cbx") == None)
        self.assertTrue(trie.autoComplete("cby") == None)
        self.assertTrue(trie.autoComplete("cbz") == None)
        self.assertTrue(trie.autoComplete("cc") == None)
        self.assertTrue(trie.autoComplete("cca") == None)
        self.assertTrue(trie.autoComplete("ccb") == None)
        self.assertTrue(trie.autoComplete("ccc") == None)
        self.assertTrue(trie.autoComplete("ccd") == None)
        self.assertTrue(trie.autoComplete("cce") == None)
        self.assertTrue(trie.autoComplete("ccf") == None)
        self.assertTrue(trie.autoComplete("ccg") == None)
        self.assertTrue(trie.autoComplete("cch") == None)
        self.assertTrue(trie.autoComplete("cci") == None)
        self.assertTrue(trie.autoComplete("ccj") == None)
        self.assertTrue(trie.autoComplete("cck") == None)
        self.assertTrue(trie.autoComplete("ccl") == None)
        self.assertTrue(trie.autoComplete("ccm") == None)
        self.assertTrue(trie.autoComplete("ccn") == None)
        self.assertTrue(trie.autoComplete("cco") == None)
        self.assertTrue(trie.autoComplete("ccp") == None)
        self.assertTrue(trie.autoComplete("ccq") == None)
        self.assertTrue(trie.autoComplete("ccr") == None)
        self.assertTrue(trie.autoComplete("ccs") == None)
        self.assertTrue(trie.autoComplete("cct") == None)
        self.assertTrue(trie.autoComplete("ccu") == None)
        self.assertTrue(trie.autoComplete("ccv") == None)
        self.assertTrue(trie.autoComplete("ccw") == None)
        self.assertTrue(trie.autoComplete("ccx") == None)
        self.assertTrue(trie.autoComplete("ccy") == None)
        self.assertTrue(trie.autoComplete("ccz") == None)
        self.assertTrue(trie.autoComplete("cd") == None)
        self.assertTrue(trie.autoComplete("cda") == None)
        self.assertTrue(trie.autoComplete("cdb") == None)
        self.assertTrue(trie.autoComplete("cdc") == None)
        self.assertTrue(trie.autoComplete("cdd") == None)
        self.assertTrue(trie.autoComplete("cde") == None)
        self.assertTrue(trie.autoComplete("cdf") == None)
        self.assertTrue(trie.autoComplete("cdg") == None)
        self.assertTrue(trie.autoComplete("cdh") == None)
        self.assertTrue(trie.autoComplete("cdi") == None)
        self.assertTrue(trie.autoComplete("cdj") == None)
        self.assertTrue(trie.autoComplete("cdk") == None)
        self.assertTrue(trie.autoComplete("cdl") == None)
        self.assertTrue(trie.autoComplete("cdm") == None)
        self.assertTrue(trie.autoComplete("cdn") == None)
        self.assertTrue(trie.autoComplete("cdo") == None)
        self.assertTrue(trie.autoComplete("cdp") == None)
        self.assertTrue(trie.autoComplete("cdq") == None)
        self.assertTrue(trie.autoComplete("cdr") == None)
        self.assertTrue(trie.autoComplete("cds") == None)
        self.assertTrue(trie.autoComplete("cdt") == None)
        self.assertTrue(trie.autoComplete("cdu") == None)
        self.assertTrue(trie.autoComplete("cdv") == None)
        self.assertTrue(trie.autoComplete("cdw") == None)
        self.assertTrue(trie.autoComplete("cdx") == None)
        self.assertTrue(trie.autoComplete("cdy") == None)
        self.assertTrue(trie.autoComplete("cdz") == None)
        self.assertTrue(trie.autoComplete("ce") == "census")
        self.assertTrue(trie.autoComplete("cea") == None)
        self.assertTrue(trie.autoComplete("ceb") == None)
        self.assertTrue(trie.autoComplete("cec") == None)
        self.assertTrue(trie.autoComplete("ced") == None)
        self.assertTrue(trie.autoComplete("cee") == None)
        self.assertTrue(trie.autoComplete("cef") == None)
        self.assertTrue(trie.autoComplete("ceg") == None)
        self.assertTrue(trie.autoComplete("ceh") == None)
        self.assertTrue(trie.autoComplete("cei") == None)
        self.assertTrue(trie.autoComplete("cej") == None)
        self.assertTrue(trie.autoComplete("cek") == None)
        self.assertTrue(trie.autoComplete("cel") == None)
        self.assertTrue(trie.autoComplete("cem") == None)
        self.assertTrue(trie.autoComplete("cen") == "census")
        self.assertTrue(trie.autoComplete("cens") == "census")
        self.assertTrue(trie.autoComplete("censu") == "census")
        self.assertTrue(trie.autoComplete("census") == "census")
        self.assertTrue(trie.autoComplete("ceo") == None)
        self.assertTrue(trie.autoComplete("cep") == None)
        self.assertTrue(trie.autoComplete("ceq") == None)
        self.assertTrue(trie.autoComplete("cer") == "certificates")
        self.assertTrue(trie.autoComplete("cert") == "certificates")
        self.assertTrue(trie.autoComplete("certa") == "certain")
        self.assertTrue(trie.autoComplete("certai") == "certain")
        self.assertTrue(trie.autoComplete("certain") == "certain")
        self.assertTrue(trie.autoComplete("certi") == "certificates")
        self.assertTrue(trie.autoComplete("certif") == "certificates")
        self.assertTrue(trie.autoComplete("certifi") == "certificates")
        self.assertTrue(trie.autoComplete("certific") == "certificates")
        self.assertTrue(trie.autoComplete("certifica") == "certificates")
        self.assertTrue(trie.autoComplete("certificat") == "certificates")
        self.assertTrue(trie.autoComplete("certificate") == "certificates")
        self.assertTrue(trie.autoComplete("certificates") == "certificates")
        self.assertTrue(trie.autoComplete("certify") == "certify")
        self.assertTrue(trie.autoComplete("ces") == "cession")
        self.assertTrue(trie.autoComplete("cess") == "cession")
        self.assertTrue(trie.autoComplete("cessi") == "cession")
        self.assertTrue(trie.autoComplete("cessio") == "cession")
        self.assertTrue(trie.autoComplete("cession") == "cession")
        self.assertTrue(trie.autoComplete("cet") == None)
        self.assertTrue(trie.autoComplete("ceu") == None)
        self.assertTrue(trie.autoComplete("cev") == None)
        self.assertTrue(trie.autoComplete("cew") == None)
        self.assertTrue(trie.autoComplete("cex") == None)
        self.assertTrue(trie.autoComplete("cey") == None)
        self.assertTrue(trie.autoComplete("cez") == None)
        self.assertTrue(trie.autoComplete("cf") == None)
        self.assertTrue(trie.autoComplete("cfa") == None)
        self.assertTrue(trie.autoComplete("cfb") == None)
        self.assertTrue(trie.autoComplete("cfc") == None)
        self.assertTrue(trie.autoComplete("cfd") == None)
        self.assertTrue(trie.autoComplete("cfe") == None)
        self.assertTrue(trie.autoComplete("cff") == None)
        self.assertTrue(trie.autoComplete("cfg") == None)
        self.assertTrue(trie.autoComplete("cfh") == None)
        self.assertTrue(trie.autoComplete("cfi") == None)
        self.assertTrue(trie.autoComplete("cfj") == None)
        self.assertTrue(trie.autoComplete("cfk") == None)
        self.assertTrue(trie.autoComplete("cfl") == None)
        self.assertTrue(trie.autoComplete("cfm") == None)
        self.assertTrue(trie.autoComplete("cfn") == None)
        self.assertTrue(trie.autoComplete("cfo") == None)
        self.assertTrue(trie.autoComplete("cfp") == None)
        self.assertTrue(trie.autoComplete("cfq") == None)
        self.assertTrue(trie.autoComplete("cfr") == None)
        self.assertTrue(trie.autoComplete("cfs") == None)
        self.assertTrue(trie.autoComplete("cft") == None)
        self.assertTrue(trie.autoComplete("cfu") == None)
        self.assertTrue(trie.autoComplete("cfv") == None)
        self.assertTrue(trie.autoComplete("cfw") == None)
        self.assertTrue(trie.autoComplete("cfx") == None)
        self.assertTrue(trie.autoComplete("cfy") == None)
        self.assertTrue(trie.autoComplete("cfz") == None)
        self.assertTrue(trie.autoComplete("cg") == None)
        self.assertTrue(trie.autoComplete("cga") == None)
        self.assertTrue(trie.autoComplete("cgb") == None)
        self.assertTrue(trie.autoComplete("cgc") == None)
        self.assertTrue(trie.autoComplete("cgd") == None)
        self.assertTrue(trie.autoComplete("cge") == None)
        self.assertTrue(trie.autoComplete("cgf") == None)
        self.assertTrue(trie.autoComplete("cgg") == None)
        self.assertTrue(trie.autoComplete("cgh") == None)
        self.assertTrue(trie.autoComplete("cgi") == None)
        self.assertTrue(trie.autoComplete("cgj") == None)
        self.assertTrue(trie.autoComplete("cgk") == None)
        self.assertTrue(trie.autoComplete("cgl") == None)
        self.assertTrue(trie.autoComplete("cgm") == None)
        self.assertTrue(trie.autoComplete("cgn") == None)
        self.assertTrue(trie.autoComplete("cgo") == None)
        self.assertTrue(trie.autoComplete("cgp") == None)
        self.assertTrue(trie.autoComplete("cgq") == None)
        self.assertTrue(trie.autoComplete("cgr") == None)
        self.assertTrue(trie.autoComplete("cgs") == None)
        self.assertTrue(trie.autoComplete("cgt") == None)
        self.assertTrue(trie.autoComplete("cgu") == None)
        self.assertTrue(trie.autoComplete("cgv") == None)
        self.assertTrue(trie.autoComplete("cgw") == None)
        self.assertTrue(trie.autoComplete("cgx") == None)
        self.assertTrue(trie.autoComplete("cgy") == None)
        self.assertTrue(trie.autoComplete("cgz") == None)
        self.assertTrue(trie.autoComplete("ch") == "choice")
        self.assertTrue(trie.autoComplete("cha") == "charged")
        self.assertTrue(trie.autoComplete("char") == "charged")
        self.assertTrue(trie.autoComplete("charg") == "charged")
        self.assertTrue(trie.autoComplete("charge") == "charged")
        self.assertTrue(trie.autoComplete("charged") == "charged")
        self.assertTrue(trie.autoComplete("chb") == None)
        self.assertTrue(trie.autoComplete("chc") == None)
        self.assertTrue(trie.autoComplete("chd") == None)
        self.assertTrue(trie.autoComplete("che") == None)
        self.assertTrue(trie.autoComplete("chf") == None)
        self.assertTrue(trie.autoComplete("chg") == None)
        self.assertTrue(trie.autoComplete("chh") == None)
        self.assertTrue(trie.autoComplete("chi") == "chief")
        self.assertTrue(trie.autoComplete("chie") == "chief")
        self.assertTrue(trie.autoComplete("chief") == "chief")
        self.assertTrue(trie.autoComplete("chj") == None)
        self.assertTrue(trie.autoComplete("chk") == None)
        self.assertTrue(trie.autoComplete("chl") == None)
        self.assertTrue(trie.autoComplete("chm") == None)
        self.assertTrue(trie.autoComplete("chn") == None)
        self.assertTrue(trie.autoComplete("cho") == "choice")
        self.assertTrue(trie.autoComplete("choi") == "choice")
        self.assertTrue(trie.autoComplete("choic") == "choice")
        self.assertTrue(trie.autoComplete("choice") == "choice")
        self.assertTrue(trie.autoComplete("choo") == "choose")
        self.assertTrue(trie.autoComplete("choos") == "choose")
        self.assertTrue(trie.autoComplete("choose") == "choose")
        self.assertTrue(trie.autoComplete("choosi") == "choosing")
        self.assertTrue(trie.autoComplete("choosin") == "choosing")
        self.assertTrue(trie.autoComplete("choosing") == "choosing")
        self.assertTrue(trie.autoComplete("chos") == "chosen")
        self.assertTrue(trie.autoComplete("chose") == "chosen")
        self.assertTrue(trie.autoComplete("chosen") == "chosen")
        self.assertTrue(trie.autoComplete("chp") == None)
        self.assertTrue(trie.autoComplete("chq") == None)
        self.assertTrue(trie.autoComplete("chr") == None)
        self.assertTrue(trie.autoComplete("chs") == None)
        self.assertTrue(trie.autoComplete("cht") == None)
        self.assertTrue(trie.autoComplete("chu") == "chuse")
        self.assertTrue(trie.autoComplete("chus") == "chuse")
        self.assertTrue(trie.autoComplete("chuse") == "chuse")
        self.assertTrue(trie.autoComplete("chusi") == "chusing")
        self.assertTrue(trie.autoComplete("chusin") == "chusing")
        self.assertTrue(trie.autoComplete("chusing") == "chusing")
        self.assertTrue(trie.autoComplete("chv") == None)
        self.assertTrue(trie.autoComplete("chw") == None)
        self.assertTrue(trie.autoComplete("chx") == None)
        self.assertTrue(trie.autoComplete("chy") == None)
        self.assertTrue(trie.autoComplete("chz") == None)
        self.assertTrue(trie.autoComplete("ci") == "citizens")
        self.assertTrue(trie.autoComplete("cia") == None)
        self.assertTrue(trie.autoComplete("cib") == None)
        self.assertTrue(trie.autoComplete("cic") == None)
        self.assertTrue(trie.autoComplete("cid") == None)
        self.assertTrue(trie.autoComplete("cie") == None)
        self.assertTrue(trie.autoComplete("cif") == None)
        self.assertTrue(trie.autoComplete("cig") == None)
        self.assertTrue(trie.autoComplete("cih") == None)
        self.assertTrue(trie.autoComplete("cii") == None)
        self.assertTrue(trie.autoComplete("cij") == None)
        self.assertTrue(trie.autoComplete("cik") == None)
        self.assertTrue(trie.autoComplete("cil") == None)
        self.assertTrue(trie.autoComplete("cim") == None)
        self.assertTrue(trie.autoComplete("cin") == None)
        self.assertTrue(trie.autoComplete("cio") == None)
        self.assertTrue(trie.autoComplete("cip") == None)
        self.assertTrue(trie.autoComplete("ciq") == None)
        self.assertTrue(trie.autoComplete("cir") == None)
        self.assertTrue(trie.autoComplete("cis") == None)
        self.assertTrue(trie.autoComplete("cit") == "citizens")
        self.assertTrue(trie.autoComplete("citi") == "citizens")
        self.assertTrue(trie.autoComplete("citiz") == "citizens")
        self.assertTrue(trie.autoComplete("citize") == "citizens")
        self.assertTrue(trie.autoComplete("citizen") == "citizens")
        self.assertTrue(trie.autoComplete("citizens") == "citizens")
        self.assertTrue(trie.autoComplete("ciu") == None)
        self.assertTrue(trie.autoComplete("civ") == "civil")
        self.assertTrue(trie.autoComplete("civi") == "civil")
        self.assertTrue(trie.autoComplete("civil") == "civil")
        self.assertTrue(trie.autoComplete("ciw") == None)
        self.assertTrue(trie.autoComplete("cix") == None)
        self.assertTrue(trie.autoComplete("ciy") == None)
        self.assertTrue(trie.autoComplete("ciz") == None)
        self.assertTrue(trie.autoComplete("cj") == None)
        self.assertTrue(trie.autoComplete("cja") == None)
        self.assertTrue(trie.autoComplete("cjb") == None)
        self.assertTrue(trie.autoComplete("cjc") == None)
        self.assertTrue(trie.autoComplete("cjd") == None)
        self.assertTrue(trie.autoComplete("cje") == None)
        self.assertTrue(trie.autoComplete("cjf") == None)
        self.assertTrue(trie.autoComplete("cjg") == None)
        self.assertTrue(trie.autoComplete("cjh") == None)
        self.assertTrue(trie.autoComplete("cji") == None)
        self.assertTrue(trie.autoComplete("cjj") == None)
        self.assertTrue(trie.autoComplete("cjk") == None)
        self.assertTrue(trie.autoComplete("cjl") == None)
        self.assertTrue(trie.autoComplete("cjm") == None)
        self.assertTrue(trie.autoComplete("cjn") == None)
        self.assertTrue(trie.autoComplete("cjo") == None)
        self.assertTrue(trie.autoComplete("cjp") == None)
        self.assertTrue(trie.autoComplete("cjq") == None)
        self.assertTrue(trie.autoComplete("cjr") == None)
        self.assertTrue(trie.autoComplete("cjs") == None)
        self.assertTrue(trie.autoComplete("cjt") == None)
        self.assertTrue(trie.autoComplete("cju") == None)
        self.assertTrue(trie.autoComplete("cjv") == None)
        self.assertTrue(trie.autoComplete("cjw") == None)
        self.assertTrue(trie.autoComplete("cjx") == None)
        self.assertTrue(trie.autoComplete("cjy") == None)
        self.assertTrue(trie.autoComplete("cjz") == None)
        self.assertTrue(trie.autoComplete("ck") == None)
        self.assertTrue(trie.autoComplete("cka") == None)
        self.assertTrue(trie.autoComplete("ckb") == None)
        self.assertTrue(trie.autoComplete("ckc") == None)
        self.assertTrue(trie.autoComplete("ckd") == None)
        self.assertTrue(trie.autoComplete("cke") == None)
        self.assertTrue(trie.autoComplete("ckf") == None)
        self.assertTrue(trie.autoComplete("ckg") == None)
        self.assertTrue(trie.autoComplete("ckh") == None)
        self.assertTrue(trie.autoComplete("cki") == None)
        self.assertTrue(trie.autoComplete("ckj") == None)
        self.assertTrue(trie.autoComplete("ckk") == None)
        self.assertTrue(trie.autoComplete("ckl") == None)
        self.assertTrue(trie.autoComplete("ckm") == None)
        self.assertTrue(trie.autoComplete("ckn") == None)
        self.assertTrue(trie.autoComplete("cko") == None)
        self.assertTrue(trie.autoComplete("ckp") == None)
        self.assertTrue(trie.autoComplete("ckq") == None)
        self.assertTrue(trie.autoComplete("ckr") == None)
        self.assertTrue(trie.autoComplete("cks") == None)
        self.assertTrue(trie.autoComplete("ckt") == None)
        self.assertTrue(trie.autoComplete("cku") == None)
        self.assertTrue(trie.autoComplete("ckv") == None)
        self.assertTrue(trie.autoComplete("ckw") == None)
        self.assertTrue(trie.autoComplete("ckx") == None)
        self.assertTrue(trie.autoComplete("cky") == None)
        self.assertTrue(trie.autoComplete("ckz") == None)
        self.assertTrue(trie.autoComplete("cl") == "class")
        self.assertTrue(trie.autoComplete("cla") == "class")
        self.assertTrue(trie.autoComplete("clai") == "claim")
        self.assertTrue(trie.autoComplete("claim") == "claim")
        self.assertTrue(trie.autoComplete("claimi") == "claiming")
        self.assertTrue(trie.autoComplete("claimin") == "claiming")
        self.assertTrue(trie.autoComplete("claiming") == "claiming")
        self.assertTrue(trie.autoComplete("claims") == "claims")
        self.assertTrue(trie.autoComplete("clas") == "class")
        self.assertTrue(trie.autoComplete("class") == "class")
        self.assertTrue(trie.autoComplete("classe") == "classes")
        self.assertTrue(trie.autoComplete("classes") == "classes")
        self.assertTrue(trie.autoComplete("clau") == "clauses")
        self.assertTrue(trie.autoComplete("claus") == "clauses")
        self.assertTrue(trie.autoComplete("clause") == "clauses")
        self.assertTrue(trie.autoComplete("clauses") == "clauses")
        self.assertTrue(trie.autoComplete("clb") == None)
        self.assertTrue(trie.autoComplete("clc") == None)
        self.assertTrue(trie.autoComplete("cld") == None)
        self.assertTrue(trie.autoComplete("cle") == "clear")
        self.assertTrue(trie.autoComplete("clea") == "clear")
        self.assertTrue(trie.autoComplete("clear") == "clear")
        self.assertTrue(trie.autoComplete("clf") == None)
        self.assertTrue(trie.autoComplete("clg") == None)
        self.assertTrue(trie.autoComplete("clh") == None)
        self.assertTrue(trie.autoComplete("cli") == None)
        self.assertTrue(trie.autoComplete("clj") == None)
        self.assertTrue(trie.autoComplete("clk") == None)
        self.assertTrue(trie.autoComplete("cll") == None)
        self.assertTrue(trie.autoComplete("clm") == None)
        self.assertTrue(trie.autoComplete("cln") == None)
        self.assertTrue(trie.autoComplete("clo") == None)
        self.assertTrue(trie.autoComplete("clp") == None)
        self.assertTrue(trie.autoComplete("clq") == None)
        self.assertTrue(trie.autoComplete("clr") == None)
        self.assertTrue(trie.autoComplete("cls") == None)
        self.assertTrue(trie.autoComplete("clt") == None)
        self.assertTrue(trie.autoComplete("clu") == None)
        self.assertTrue(trie.autoComplete("clv") == None)
        self.assertTrue(trie.autoComplete("clw") == None)
        self.assertTrue(trie.autoComplete("clx") == None)
        self.assertTrue(trie.autoComplete("cly") == None)
        self.assertTrue(trie.autoComplete("clz") == None)
        self.assertTrue(trie.autoComplete("cm") == None)
        self.assertTrue(trie.autoComplete("cma") == None)
        self.assertTrue(trie.autoComplete("cmb") == None)
        self.assertTrue(trie.autoComplete("cmc") == None)
        self.assertTrue(trie.autoComplete("cmd") == None)
        self.assertTrue(trie.autoComplete("cme") == None)
        self.assertTrue(trie.autoComplete("cmf") == None)
        self.assertTrue(trie.autoComplete("cmg") == None)
        self.assertTrue(trie.autoComplete("cmh") == None)
        self.assertTrue(trie.autoComplete("cmi") == None)
        self.assertTrue(trie.autoComplete("cmj") == None)
        self.assertTrue(trie.autoComplete("cmk") == None)
        self.assertTrue(trie.autoComplete("cml") == None)
        self.assertTrue(trie.autoComplete("cmm") == None)
        self.assertTrue(trie.autoComplete("cmn") == None)
        self.assertTrue(trie.autoComplete("cmo") == None)
        self.assertTrue(trie.autoComplete("cmp") == None)
        self.assertTrue(trie.autoComplete("cmq") == None)
        self.assertTrue(trie.autoComplete("cmr") == None)
        self.assertTrue(trie.autoComplete("cms") == None)
        self.assertTrue(trie.autoComplete("cmt") == None)
        self.assertTrue(trie.autoComplete("cmu") == None)
        self.assertTrue(trie.autoComplete("cmv") == None)
        self.assertTrue(trie.autoComplete("cmw") == None)
        self.assertTrue(trie.autoComplete("cmx") == None)
        self.assertTrue(trie.autoComplete("cmy") == None)
        self.assertTrue(trie.autoComplete("cmz") == None)
        self.assertTrue(trie.autoComplete("cn") == None)
        self.assertTrue(trie.autoComplete("cna") == None)
        self.assertTrue(trie.autoComplete("cnb") == None)
        self.assertTrue(trie.autoComplete("cnc") == None)
        self.assertTrue(trie.autoComplete("cnd") == None)
        self.assertTrue(trie.autoComplete("cne") == None)
        self.assertTrue(trie.autoComplete("cnf") == None)
        self.assertTrue(trie.autoComplete("cng") == None)
        self.assertTrue(trie.autoComplete("cnh") == None)
        self.assertTrue(trie.autoComplete("cni") == None)
        self.assertTrue(trie.autoComplete("cnj") == None)
        self.assertTrue(trie.autoComplete("cnk") == None)
        self.assertTrue(trie.autoComplete("cnl") == None)
        self.assertTrue(trie.autoComplete("cnm") == None)
        self.assertTrue(trie.autoComplete("cnn") == None)
        self.assertTrue(trie.autoComplete("cno") == None)
        self.assertTrue(trie.autoComplete("cnp") == None)
        self.assertTrue(trie.autoComplete("cnq") == None)
        self.assertTrue(trie.autoComplete("cnr") == None)
        self.assertTrue(trie.autoComplete("cns") == None)
        self.assertTrue(trie.autoComplete("cnt") == None)
        self.assertTrue(trie.autoComplete("cnu") == None)
        self.assertTrue(trie.autoComplete("cnv") == None)
        self.assertTrue(trie.autoComplete("cnw") == None)
        self.assertTrue(trie.autoComplete("cnx") == None)
        self.assertTrue(trie.autoComplete("cny") == None)
        self.assertTrue(trie.autoComplete("cnz") == None)
        self.assertTrue(trie.autoComplete("co") == "congress")
        self.assertTrue(trie.autoComplete("coa") == None)
        self.assertTrue(trie.autoComplete("cob") == None)
        self.assertTrue(trie.autoComplete("coc") == None)
        self.assertTrue(trie.autoComplete("cod") == None)
        self.assertTrue(trie.autoComplete("coe") == None)
        self.assertTrue(trie.autoComplete("cof") == None)
        self.assertTrue(trie.autoComplete("cog") == None)
        self.assertTrue(trie.autoComplete("coh") == None)
        self.assertTrue(trie.autoComplete("coi") == "coin")
        self.assertTrue(trie.autoComplete("coin") == "coin")
        self.assertTrue(trie.autoComplete("coj") == None)
        self.assertTrue(trie.autoComplete("cok") == None)
        self.assertTrue(trie.autoComplete("col") == "collect")
        self.assertTrue(trie.autoComplete("coll") == "collect")
        self.assertTrue(trie.autoComplete("colle") == "collect")
        self.assertTrue(trie.autoComplete("collec") == "collect")
        self.assertTrue(trie.autoComplete("collect") == "collect")
        self.assertTrue(trie.autoComplete("colo") == "color")
        self.assertTrue(trie.autoComplete("color") == "color")
        self.assertTrue(trie.autoComplete("com") == "compensation")
        self.assertTrue(trie.autoComplete("comf") == "comfort")
        self.assertTrue(trie.autoComplete("comfo") == "comfort")
        self.assertTrue(trie.autoComplete("comfor") == "comfort")
        self.assertTrue(trie.autoComplete("comfort") == "comfort")
        self.assertTrue(trie.autoComplete("comm") == "committed")
        self.assertTrue(trie.autoComplete("comma") == "commander")
        self.assertTrue(trie.autoComplete("comman") == "commander")
        self.assertTrue(trie.autoComplete("command") == "commander")
        self.assertTrue(trie.autoComplete("commande") == "commander")
        self.assertTrue(trie.autoComplete("commander") == "commander")
        self.assertTrue(trie.autoComplete("comme") == "commerce")
        self.assertTrue(trie.autoComplete("commen") == "commenced")
        self.assertTrue(trie.autoComplete("commenc") == "commenced")
        self.assertTrue(trie.autoComplete("commence") == "commenced")
        self.assertTrue(trie.autoComplete("commenced") == "commenced")
        self.assertTrue(trie.autoComplete("commer") == "commerce")
        self.assertTrue(trie.autoComplete("commerc") == "commerce")
        self.assertTrue(trie.autoComplete("commerce") == "commerce")
        self.assertTrue(trie.autoComplete("commi") == "committed")
        self.assertTrue(trie.autoComplete("commis") == "commission")
        self.assertTrue(trie.autoComplete("commiss") == "commission")
        self.assertTrue(trie.autoComplete("commissi") == "commission")
        self.assertTrue(trie.autoComplete("commissio") == "commission")
        self.assertTrue(trie.autoComplete("commission") == "commission")
        self.assertTrue(trie.autoComplete("commissions") == "commissions")
        self.assertTrue(trie.autoComplete("commit") == "committed")
        self.assertTrue(trie.autoComplete("committ") == "committed")
        self.assertTrue(trie.autoComplete("committe") == "committed")
        self.assertTrue(trie.autoComplete("committed") == "committed")
        self.assertTrue(trie.autoComplete("commo") == "common")
        self.assertTrue(trie.autoComplete("common") == "common")
        self.assertTrue(trie.autoComplete("comp") == "compensation")
        self.assertTrue(trie.autoComplete("compa") == "compact")
        self.assertTrue(trie.autoComplete("compac") == "compact")
        self.assertTrue(trie.autoComplete("compact") == "compact")
        self.assertTrue(trie.autoComplete("compe") == "compensation")
        self.assertTrue(trie.autoComplete("compel") == "compel")
        self.assertTrue(trie.autoComplete("compell") == "compelled")
        self.assertTrue(trie.autoComplete("compelle") == "compelled")
        self.assertTrue(trie.autoComplete("compelled") == "compelled")
        self.assertTrue(trie.autoComplete("compen") == "compensation")
        self.assertTrue(trie.autoComplete("compens") == "compensation")
        self.assertTrue(trie.autoComplete("compensa") == "compensation")
        self.assertTrue(trie.autoComplete("compensat") == "compensation")
        self.assertTrue(trie.autoComplete("compensati") == "compensation")
        self.assertTrue(trie.autoComplete("compensatio") == "compensation")
        self.assertTrue(trie.autoComplete("compensation") == "compensation")
        self.assertTrue(trie.autoComplete("compo") == "composed")
        self.assertTrue(trie.autoComplete("compos") == "composed")
        self.assertTrue(trie.autoComplete("compose") == "composed")
        self.assertTrue(trie.autoComplete("composed") == "composed")
        self.assertTrue(trie.autoComplete("compu") == "compulsory")
        self.assertTrue(trie.autoComplete("compul") == "compulsory")
        self.assertTrue(trie.autoComplete("compuls") == "compulsory")
        self.assertTrue(trie.autoComplete("compulso") == "compulsory")
        self.assertTrue(trie.autoComplete("compulsor") == "compulsory")
        self.assertTrue(trie.autoComplete("compulsory") == "compulsory")
        self.assertTrue(trie.autoComplete("con") == "congress")
        self.assertTrue(trie.autoComplete("conc") == "concurrence")
        self.assertTrue(trie.autoComplete("conce") == "concerned")
        self.assertTrue(trie.autoComplete("concer") == "concerned")
        self.assertTrue(trie.autoComplete("concern") == "concerned")
        self.assertTrue(trie.autoComplete("concerne") == "concerned")
        self.assertTrue(trie.autoComplete("concerned") == "concerned")
        self.assertTrue(trie.autoComplete("concerni") == "concerning")
        self.assertTrue(trie.autoComplete("concernin") == "concerning")
        self.assertTrue(trie.autoComplete("concerning") == "concerning")
        self.assertTrue(trie.autoComplete("concu") == "concurrence")
        self.assertTrue(trie.autoComplete("concur") == "concurrence")
        self.assertTrue(trie.autoComplete("concurr") == "concurrence")
        self.assertTrue(trie.autoComplete("concurre") == "concurrence")
        self.assertTrue(trie.autoComplete("concurren") == "concurrence")
        self.assertTrue(trie.autoComplete("concurrenc") == "concurrence")
        self.assertTrue(trie.autoComplete("concurrence") == "concurrence")
        self.assertTrue(trie.autoComplete("concurrent") == "concurrent")
        self.assertTrue(trie.autoComplete("cond") == "condition")
        self.assertTrue(trie.autoComplete("condi") == "condition")
        self.assertTrue(trie.autoComplete("condit") == "condition")
        self.assertTrue(trie.autoComplete("conditi") == "condition")
        self.assertTrue(trie.autoComplete("conditio") == "condition")
        self.assertTrue(trie.autoComplete("condition") == "condition")
        self.assertTrue(trie.autoComplete("conf") == "confederation")
        self.assertTrue(trie.autoComplete("confe") == "confederation")
        self.assertTrue(trie.autoComplete("confed") == "confederation")
        self.assertTrue(trie.autoComplete("confede") == "confederation")
        self.assertTrue(trie.autoComplete("confeder") == "confederation")
        self.assertTrue(trie.autoComplete("confedera") == "confederation")
        self.assertTrue(trie.autoComplete("confederat") == "confederation")
        self.assertTrue(trie.autoComplete("confederati") == "confederation")
        self.assertTrue(trie.autoComplete("confederatio") == "confederation")
        self.assertTrue(trie.autoComplete("confederation") == "confederation")
        self.assertTrue(trie.autoComplete("confes") == "confession")
        self.assertTrue(trie.autoComplete("confess") == "confession")
        self.assertTrue(trie.autoComplete("confessi") == "confession")
        self.assertTrue(trie.autoComplete("confessio") == "confession")
        self.assertTrue(trie.autoComplete("confession") == "confession")
        self.assertTrue(trie.autoComplete("confi") == "confirmation")
        self.assertTrue(trie.autoComplete("confir") == "confirmation")
        self.assertTrue(trie.autoComplete("confirm") == "confirmation")
        self.assertTrue(trie.autoComplete("confirma") == "confirmation")
        self.assertTrue(trie.autoComplete("confirmat") == "confirmation")
        self.assertTrue(trie.autoComplete("confirmati") == "confirmation")
        self.assertTrue(trie.autoComplete("confirmatio") == "confirmation")
        self.assertTrue(trie.autoComplete("confirmation") == "confirmation")
        self.assertTrue(trie.autoComplete("confr") == "confronted")
        self.assertTrue(trie.autoComplete("confro") == "confronted")
        self.assertTrue(trie.autoComplete("confron") == "confronted")
        self.assertTrue(trie.autoComplete("confront") == "confronted")
        self.assertTrue(trie.autoComplete("confronte") == "confronted")
        self.assertTrue(trie.autoComplete("confronted") == "confronted")
        self.assertTrue(trie.autoComplete("cong") == "congress")
        self.assertTrue(trie.autoComplete("congr") == "congress")
        self.assertTrue(trie.autoComplete("congre") == "congress")
        self.assertTrue(trie.autoComplete("congres") == "congress")
        self.assertTrue(trie.autoComplete("congress") == "congress")
        self.assertTrue(trie.autoComplete("conn") == "connecticut")
        self.assertTrue(trie.autoComplete("conne") == "connecticut")
        self.assertTrue(trie.autoComplete("connec") == "connecticut")
        self.assertTrue(trie.autoComplete("connect") == "connecticut")
        self.assertTrue(trie.autoComplete("connecti") == "connecticut")
        self.assertTrue(trie.autoComplete("connectic") == "connecticut")
        self.assertTrue(trie.autoComplete("connecticu") == "connecticut")
        self.assertTrue(trie.autoComplete("connecticut") == "connecticut")
        self.assertTrue(trie.autoComplete("cons") == "constitution")
        self.assertTrue(trie.autoComplete("conse") == "consent")
        self.assertTrue(trie.autoComplete("consen") == "consent")
        self.assertTrue(trie.autoComplete("consent") == "consent")
        self.assertTrue(trie.autoComplete("conseq") == "consequence")
        self.assertTrue(trie.autoComplete("consequ") == "consequence")
        self.assertTrue(trie.autoComplete("conseque") == "consequence")
        self.assertTrue(trie.autoComplete("consequen") == "consequence")
        self.assertTrue(trie.autoComplete("consequenc") == "consequence")
        self.assertTrue(trie.autoComplete("consequence") == "consequence")
        self.assertTrue(trie.autoComplete("consi") == "consist")
        self.assertTrue(trie.autoComplete("consid") == "consideration")
        self.assertTrue(trie.autoComplete("conside") == "consideration")
        self.assertTrue(trie.autoComplete("consider") == "consideration")
        self.assertTrue(trie.autoComplete("considera") == "consideration")
        self.assertTrue(trie.autoComplete("considerat") == "consideration")
        self.assertTrue(trie.autoComplete("considerati") == "consideration")
        self.assertTrue(trie.autoComplete("consideratio") == "consideration")
        self.assertTrue(trie.autoComplete("consideration") == "consideration")
        self.assertTrue(trie.autoComplete("considere") == "considered")
        self.assertTrue(trie.autoComplete("considered") == "considered")
        self.assertTrue(trie.autoComplete("consis") == "consist")
        self.assertTrue(trie.autoComplete("consist") == "consist")
        self.assertTrue(trie.autoComplete("const") == "constitution")
        self.assertTrue(trie.autoComplete("consti") == "constitution")
        self.assertTrue(trie.autoComplete("constit") == "constitution")
        self.assertTrue(trie.autoComplete("constitu") == "constitution")
        self.assertTrue(trie.autoComplete("constitut") == "constitution")
        self.assertTrue(trie.autoComplete("constitute") == "constitute")
        self.assertTrue(trie.autoComplete("constituti") == "constitution")
        self.assertTrue(trie.autoComplete("constitutin") == "constituting")
        self.assertTrue(trie.autoComplete("constituting") == "constituting")
        self.assertTrue(trie.autoComplete("constitutio") == "constitution")
        self.assertTrue(trie.autoComplete("constitution") == "constitution")
        self.assertTrue(trie.autoComplete("constitutiona") == "constitutional")
        self.assertTrue(trie.autoComplete("constitutional") == "constitutional")
        self.assertTrue(trie.autoComplete("constitutionall") == "constitutionally")
        self.assertTrue(trie.autoComplete("constitutionally") == "constitutionally")
        self.assertTrue(trie.autoComplete("constr") == "construed")
        self.assertTrue(trie.autoComplete("constru") == "construed")
        self.assertTrue(trie.autoComplete("construe") == "construed")
        self.assertTrue(trie.autoComplete("construed") == "construed")
        self.assertTrue(trie.autoComplete("consu") == "consuls")
        self.assertTrue(trie.autoComplete("consul") == "consuls")
        self.assertTrue(trie.autoComplete("consuls") == "consuls")
        self.assertTrue(trie.autoComplete("cont") == "continuance")
        self.assertTrue(trie.autoComplete("conti") == "continuance")
        self.assertTrue(trie.autoComplete("contin") == "continuance")
        self.assertTrue(trie.autoComplete("continu") == "continuance")
        self.assertTrue(trie.autoComplete("continua") == "continuance")
        self.assertTrue(trie.autoComplete("continuan") == "continuance")
        self.assertTrue(trie.autoComplete("continuanc") == "continuance")
        self.assertTrue(trie.autoComplete("continuance") == "continuance")
        self.assertTrue(trie.autoComplete("continue") == "continue")
        self.assertTrue(trie.autoComplete("contr") == "contrary")
        self.assertTrue(trie.autoComplete("contra") == "contrary")
        self.assertTrue(trie.autoComplete("contrac") == "contracted")
        self.assertTrue(trie.autoComplete("contract") == "contracted")
        self.assertTrue(trie.autoComplete("contracte") == "contracted")
        self.assertTrue(trie.autoComplete("contracted") == "contracted")
        self.assertTrue(trie.autoComplete("contracts") == "contracts")
        self.assertTrue(trie.autoComplete("contrar") == "contrary")
        self.assertTrue(trie.autoComplete("contrary") == "contrary")
        self.assertTrue(trie.autoComplete("contro") == "controversies")
        self.assertTrue(trie.autoComplete("controu") == "controul")
        self.assertTrue(trie.autoComplete("controul") == "controul")
        self.assertTrue(trie.autoComplete("controv") == "controversies")
        self.assertTrue(trie.autoComplete("controve") == "controversies")
        self.assertTrue(trie.autoComplete("controver") == "controversies")
        self.assertTrue(trie.autoComplete("controvers") == "controversies")
        self.assertTrue(trie.autoComplete("controversi") == "controversies")
        self.assertTrue(trie.autoComplete("controversie") == "controversies")
        self.assertTrue(trie.autoComplete("controversies") == "controversies")
        self.assertTrue(trie.autoComplete("controversy") == "controversy")
        self.assertTrue(trie.autoComplete("conv") == "convicted")
        self.assertTrue(trie.autoComplete("conve") == "conventions")
        self.assertTrue(trie.autoComplete("conven") == "conventions")
        self.assertTrue(trie.autoComplete("convene") == "convene")
        self.assertTrue(trie.autoComplete("convened") == "convened")
        self.assertTrue(trie.autoComplete("convent") == "conventions")
        self.assertTrue(trie.autoComplete("conventi") == "conventions")
        self.assertTrue(trie.autoComplete("conventio") == "conventions")
        self.assertTrue(trie.autoComplete("convention") == "conventions")
        self.assertTrue(trie.autoComplete("conventions") == "conventions")
        self.assertTrue(trie.autoComplete("convi") == "convicted")
        self.assertTrue(trie.autoComplete("convic") == "convicted")
        self.assertTrue(trie.autoComplete("convict") == "convicted")
        self.assertTrue(trie.autoComplete("convicte") == "convicted")
        self.assertTrue(trie.autoComplete("convicted") == "convicted")
        self.assertTrue(trie.autoComplete("convicti") == "conviction")
        self.assertTrue(trie.autoComplete("convictio") == "conviction")
        self.assertTrue(trie.autoComplete("conviction") == "conviction")
        self.assertTrue(trie.autoComplete("coo") == None)
        self.assertTrue(trie.autoComplete("cop") == None)
        self.assertTrue(trie.autoComplete("coq") == None)
        self.assertTrue(trie.autoComplete("cor") == "corpus")
        self.assertTrue(trie.autoComplete("corp") == "corpus")
        self.assertTrue(trie.autoComplete("corpu") == "corpus")
        self.assertTrue(trie.autoComplete("corpus") == "corpus")
        self.assertTrue(trie.autoComplete("corr") == "corruption")
        self.assertTrue(trie.autoComplete("corru") == "corruption")
        self.assertTrue(trie.autoComplete("corrup") == "corruption")
        self.assertTrue(trie.autoComplete("corrupt") == "corruption")
        self.assertTrue(trie.autoComplete("corrupti") == "corruption")
        self.assertTrue(trie.autoComplete("corruptio") == "corruption")
        self.assertTrue(trie.autoComplete("corruption") == "corruption")
        self.assertTrue(trie.autoComplete("cos") == None)
        self.assertTrue(trie.autoComplete("cot") == None)
        self.assertTrue(trie.autoComplete("cou") == "court")
        self.assertTrue(trie.autoComplete("coun") == "counted")
        self.assertTrue(trie.autoComplete("couns") == "counsel")
        self.assertTrue(trie.autoComplete("counse") == "counsel")
        self.assertTrue(trie.autoComplete("counsel") == "counsel")
        self.assertTrue(trie.autoComplete("count") == "counted")
        self.assertTrue(trie.autoComplete("counte") == "counted")
        self.assertTrue(trie.autoComplete("counted") == "counted")
        self.assertTrue(trie.autoComplete("counter") == "counterfeiting")
        self.assertTrue(trie.autoComplete("counterf") == "counterfeiting")
        self.assertTrue(trie.autoComplete("counterfe") == "counterfeiting")
        self.assertTrue(trie.autoComplete("counterfei") == "counterfeiting")
        self.assertTrue(trie.autoComplete("counterfeit") == "counterfeiting")
        self.assertTrue(trie.autoComplete("counterfeiti") == "counterfeiting")
        self.assertTrue(trie.autoComplete("counterfeitin") == "counterfeiting")
        self.assertTrue(trie.autoComplete("counterfeiting") == "counterfeiting")
        self.assertTrue(trie.autoComplete("counti") == "counting")
        self.assertTrue(trie.autoComplete("countin") == "counting")
        self.assertTrue(trie.autoComplete("counting") == "counting")
        self.assertTrue(trie.autoComplete("cour") == "court")
        self.assertTrue(trie.autoComplete("court") == "court")
        self.assertTrue(trie.autoComplete("courts") == "courts")
        self.assertTrue(trie.autoComplete("cov") == None)
        self.assertTrue(trie.autoComplete("cow") == None)
        self.assertTrue(trie.autoComplete("cox") == None)
        self.assertTrue(trie.autoComplete("coy") == None)
        self.assertTrue(trie.autoComplete("coz") == None)
        self.assertTrue(trie.autoComplete("cp") == None)
        self.assertTrue(trie.autoComplete("cpa") == None)
        self.assertTrue(trie.autoComplete("cpb") == None)
        self.assertTrue(trie.autoComplete("cpc") == None)
        self.assertTrue(trie.autoComplete("cpd") == None)
        self.assertTrue(trie.autoComplete("cpe") == None)
        self.assertTrue(trie.autoComplete("cpf") == None)
        self.assertTrue(trie.autoComplete("cpg") == None)
        self.assertTrue(trie.autoComplete("cph") == None)
        self.assertTrue(trie.autoComplete("cpi") == None)
        self.assertTrue(trie.autoComplete("cpj") == None)
        self.assertTrue(trie.autoComplete("cpk") == None)
        self.assertTrue(trie.autoComplete("cpl") == None)
        self.assertTrue(trie.autoComplete("cpm") == None)
        self.assertTrue(trie.autoComplete("cpn") == None)
        self.assertTrue(trie.autoComplete("cpo") == None)
        self.assertTrue(trie.autoComplete("cpp") == None)
        self.assertTrue(trie.autoComplete("cpq") == None)
        self.assertTrue(trie.autoComplete("cpr") == None)
        self.assertTrue(trie.autoComplete("cps") == None)
        self.assertTrue(trie.autoComplete("cpt") == None)
        self.assertTrue(trie.autoComplete("cpu") == None)
        self.assertTrue(trie.autoComplete("cpv") == None)
        self.assertTrue(trie.autoComplete("cpw") == None)
        self.assertTrue(trie.autoComplete("cpx") == None)
        self.assertTrue(trie.autoComplete("cpy") == None)
        self.assertTrue(trie.autoComplete("cpz") == None)
        self.assertTrue(trie.autoComplete("cq") == None)
        self.assertTrue(trie.autoComplete("cqa") == None)
        self.assertTrue(trie.autoComplete("cqb") == None)
        self.assertTrue(trie.autoComplete("cqc") == None)
        self.assertTrue(trie.autoComplete("cqd") == None)
        self.assertTrue(trie.autoComplete("cqe") == None)
        self.assertTrue(trie.autoComplete("cqf") == None)
        self.assertTrue(trie.autoComplete("cqg") == None)
        self.assertTrue(trie.autoComplete("cqh") == None)
        self.assertTrue(trie.autoComplete("cqi") == None)
        self.assertTrue(trie.autoComplete("cqj") == None)
        self.assertTrue(trie.autoComplete("cqk") == None)
        self.assertTrue(trie.autoComplete("cql") == None)
        self.assertTrue(trie.autoComplete("cqm") == None)
        self.assertTrue(trie.autoComplete("cqn") == None)
        self.assertTrue(trie.autoComplete("cqo") == None)
        self.assertTrue(trie.autoComplete("cqp") == None)
        self.assertTrue(trie.autoComplete("cqq") == None)
        self.assertTrue(trie.autoComplete("cqr") == None)
        self.assertTrue(trie.autoComplete("cqs") == None)
        self.assertTrue(trie.autoComplete("cqt") == None)
        self.assertTrue(trie.autoComplete("cqu") == None)
        self.assertTrue(trie.autoComplete("cqv") == None)
        self.assertTrue(trie.autoComplete("cqw") == None)
        self.assertTrue(trie.autoComplete("cqx") == None)
        self.assertTrue(trie.autoComplete("cqy") == None)
        self.assertTrue(trie.autoComplete("cqz") == None)
        self.assertTrue(trie.autoComplete("cr") == "crime")
        self.assertTrue(trie.autoComplete("cra") == None)
        self.assertTrue(trie.autoComplete("crb") == None)
        self.assertTrue(trie.autoComplete("crc") == None)
        self.assertTrue(trie.autoComplete("crd") == None)
        self.assertTrue(trie.autoComplete("cre") == "credit")
        self.assertTrue(trie.autoComplete("crea") == "created")
        self.assertTrue(trie.autoComplete("creat") == "created")
        self.assertTrue(trie.autoComplete("create") == "created")
        self.assertTrue(trie.autoComplete("created") == "created")
        self.assertTrue(trie.autoComplete("cred") == "credit")
        self.assertTrue(trie.autoComplete("credi") == "credit")
        self.assertTrue(trie.autoComplete("credit") == "credit")
        self.assertTrue(trie.autoComplete("crf") == None)
        self.assertTrue(trie.autoComplete("crg") == None)
        self.assertTrue(trie.autoComplete("crh") == None)
        self.assertTrue(trie.autoComplete("cri") == "crime")
        self.assertTrue(trie.autoComplete("crim") == "crime")
        self.assertTrue(trie.autoComplete("crime") == "crime")
        self.assertTrue(trie.autoComplete("crimes") == "crimes")
        self.assertTrue(trie.autoComplete("crimi") == "criminal")
        self.assertTrue(trie.autoComplete("crimin") == "criminal")
        self.assertTrue(trie.autoComplete("crimina") == "criminal")
        self.assertTrue(trie.autoComplete("criminal") == "criminal")
        self.assertTrue(trie.autoComplete("crj") == None)
        self.assertTrue(trie.autoComplete("crk") == None)
        self.assertTrue(trie.autoComplete("crl") == None)
        self.assertTrue(trie.autoComplete("crm") == None)
        self.assertTrue(trie.autoComplete("crn") == None)
        self.assertTrue(trie.autoComplete("cro") == None)
        self.assertTrue(trie.autoComplete("crp") == None)
        self.assertTrue(trie.autoComplete("crq") == None)
        self.assertTrue(trie.autoComplete("crr") == None)
        self.assertTrue(trie.autoComplete("crs") == None)
        self.assertTrue(trie.autoComplete("crt") == None)
        self.assertTrue(trie.autoComplete("cru") == "cruel")
        self.assertTrue(trie.autoComplete("crue") == "cruel")
        self.assertTrue(trie.autoComplete("cruel") == "cruel")
        self.assertTrue(trie.autoComplete("crv") == None)
        self.assertTrue(trie.autoComplete("crw") == None)
        self.assertTrue(trie.autoComplete("crx") == None)
        self.assertTrue(trie.autoComplete("cry") == None)
        self.assertTrue(trie.autoComplete("crz") == None)
        self.assertTrue(trie.autoComplete("cs") == None)
        self.assertTrue(trie.autoComplete("csa") == None)
        self.assertTrue(trie.autoComplete("csb") == None)
        self.assertTrue(trie.autoComplete("csc") == None)
        self.assertTrue(trie.autoComplete("csd") == None)
        self.assertTrue(trie.autoComplete("cse") == None)
        self.assertTrue(trie.autoComplete("csf") == None)
        self.assertTrue(trie.autoComplete("csg") == None)
        self.assertTrue(trie.autoComplete("csh") == None)
        self.assertTrue(trie.autoComplete("csi") == None)
        self.assertTrue(trie.autoComplete("csj") == None)
        self.assertTrue(trie.autoComplete("csk") == None)
        self.assertTrue(trie.autoComplete("csl") == None)
        self.assertTrue(trie.autoComplete("csm") == None)
        self.assertTrue(trie.autoComplete("csn") == None)
        self.assertTrue(trie.autoComplete("cso") == None)
        self.assertTrue(trie.autoComplete("csp") == None)
        self.assertTrue(trie.autoComplete("csq") == None)
        self.assertTrue(trie.autoComplete("csr") == None)
        self.assertTrue(trie.autoComplete("css") == None)
        self.assertTrue(trie.autoComplete("cst") == None)
        self.assertTrue(trie.autoComplete("csu") == None)
        self.assertTrue(trie.autoComplete("csv") == None)
        self.assertTrue(trie.autoComplete("csw") == None)
        self.assertTrue(trie.autoComplete("csx") == None)
        self.assertTrue(trie.autoComplete("csy") == None)
        self.assertTrue(trie.autoComplete("csz") == None)
        self.assertTrue(trie.autoComplete("ct") == None)
        self.assertTrue(trie.autoComplete("cta") == None)
        self.assertTrue(trie.autoComplete("ctb") == None)
        self.assertTrue(trie.autoComplete("ctc") == None)
        self.assertTrue(trie.autoComplete("ctd") == None)
        self.assertTrue(trie.autoComplete("cte") == None)
        self.assertTrue(trie.autoComplete("ctf") == None)
        self.assertTrue(trie.autoComplete("ctg") == None)
        self.assertTrue(trie.autoComplete("cth") == None)
        self.assertTrue(trie.autoComplete("cti") == None)
        self.assertTrue(trie.autoComplete("ctj") == None)
        self.assertTrue(trie.autoComplete("ctk") == None)
        self.assertTrue(trie.autoComplete("ctl") == None)
        self.assertTrue(trie.autoComplete("ctm") == None)
        self.assertTrue(trie.autoComplete("ctn") == None)
        self.assertTrue(trie.autoComplete("cto") == None)
        self.assertTrue(trie.autoComplete("ctp") == None)
        self.assertTrue(trie.autoComplete("ctq") == None)
        self.assertTrue(trie.autoComplete("ctr") == None)
        self.assertTrue(trie.autoComplete("cts") == None)
        self.assertTrue(trie.autoComplete("ctt") == None)
        self.assertTrue(trie.autoComplete("ctu") == None)
        self.assertTrue(trie.autoComplete("ctv") == None)
        self.assertTrue(trie.autoComplete("ctw") == None)
        self.assertTrue(trie.autoComplete("ctx") == None)
        self.assertTrue(trie.autoComplete("cty") == None)
        self.assertTrue(trie.autoComplete("ctz") == None)
        self.assertTrue(trie.autoComplete("cu") == "current")
        self.assertTrue(trie.autoComplete("cua") == None)
        self.assertTrue(trie.autoComplete("cub") == None)
        self.assertTrue(trie.autoComplete("cuc") == None)
        self.assertTrue(trie.autoComplete("cud") == None)
        self.assertTrue(trie.autoComplete("cue") == None)
        self.assertTrue(trie.autoComplete("cuf") == None)
        self.assertTrue(trie.autoComplete("cug") == None)
        self.assertTrue(trie.autoComplete("cuh") == None)
        self.assertTrue(trie.autoComplete("cui") == None)
        self.assertTrue(trie.autoComplete("cuj") == None)
        self.assertTrue(trie.autoComplete("cuk") == None)
        self.assertTrue(trie.autoComplete("cul") == None)
        self.assertTrue(trie.autoComplete("cum") == None)
        self.assertTrue(trie.autoComplete("cun") == None)
        self.assertTrue(trie.autoComplete("cuo") == None)
        self.assertTrue(trie.autoComplete("cup") == None)
        self.assertTrue(trie.autoComplete("cuq") == None)
        self.assertTrue(trie.autoComplete("cur") == "current")
        self.assertTrue(trie.autoComplete("curr") == "current")
        self.assertTrue(trie.autoComplete("curre") == "current")
        self.assertTrue(trie.autoComplete("curren") == "current")
        self.assertTrue(trie.autoComplete("current") == "current")
        self.assertTrue(trie.autoComplete("cus") == None)
        self.assertTrue(trie.autoComplete("cut") == None)
        self.assertTrue(trie.autoComplete("cuu") == None)
        self.assertTrue(trie.autoComplete("cuv") == None)
        self.assertTrue(trie.autoComplete("cuw") == None)
        self.assertTrue(trie.autoComplete("cux") == None)
        self.assertTrue(trie.autoComplete("cuy") == None)
        self.assertTrue(trie.autoComplete("cuz") == None)
        self.assertTrue(trie.autoComplete("cv") == None)
        self.assertTrue(trie.autoComplete("cva") == None)
        self.assertTrue(trie.autoComplete("cvb") == None)
        self.assertTrue(trie.autoComplete("cvc") == None)
        self.assertTrue(trie.autoComplete("cvd") == None)
        self.assertTrue(trie.autoComplete("cve") == None)
        self.assertTrue(trie.autoComplete("cvf") == None)
        self.assertTrue(trie.autoComplete("cvg") == None)
        self.assertTrue(trie.autoComplete("cvh") == None)
        self.assertTrue(trie.autoComplete("cvi") == None)
        self.assertTrue(trie.autoComplete("cvj") == None)
        self.assertTrue(trie.autoComplete("cvk") == None)
        self.assertTrue(trie.autoComplete("cvl") == None)
        self.assertTrue(trie.autoComplete("cvm") == None)
        self.assertTrue(trie.autoComplete("cvn") == None)
        self.assertTrue(trie.autoComplete("cvo") == None)
        self.assertTrue(trie.autoComplete("cvp") == None)
        self.assertTrue(trie.autoComplete("cvq") == None)
        self.assertTrue(trie.autoComplete("cvr") == None)
        self.assertTrue(trie.autoComplete("cvs") == None)
        self.assertTrue(trie.autoComplete("cvt") == None)
        self.assertTrue(trie.autoComplete("cvu") == None)
        self.assertTrue(trie.autoComplete("cvv") == None)
        self.assertTrue(trie.autoComplete("cvw") == None)
        self.assertTrue(trie.autoComplete("cvx") == None)
        self.assertTrue(trie.autoComplete("cvy") == None)
        self.assertTrue(trie.autoComplete("cvz") == None)
        self.assertTrue(trie.autoComplete("cw") == None)
        self.assertTrue(trie.autoComplete("cwa") == None)
        self.assertTrue(trie.autoComplete("cwb") == None)
        self.assertTrue(trie.autoComplete("cwc") == None)
        self.assertTrue(trie.autoComplete("cwd") == None)
        self.assertTrue(trie.autoComplete("cwe") == None)
        self.assertTrue(trie.autoComplete("cwf") == None)
        self.assertTrue(trie.autoComplete("cwg") == None)
        self.assertTrue(trie.autoComplete("cwh") == None)
        self.assertTrue(trie.autoComplete("cwi") == None)
        self.assertTrue(trie.autoComplete("cwj") == None)
        self.assertTrue(trie.autoComplete("cwk") == None)
        self.assertTrue(trie.autoComplete("cwl") == None)
        self.assertTrue(trie.autoComplete("cwm") == None)
        self.assertTrue(trie.autoComplete("cwn") == None)
        self.assertTrue(trie.autoComplete("cwo") == None)
        self.assertTrue(trie.autoComplete("cwp") == None)
        self.assertTrue(trie.autoComplete("cwq") == None)
        self.assertTrue(trie.autoComplete("cwr") == None)
        self.assertTrue(trie.autoComplete("cws") == None)
        self.assertTrue(trie.autoComplete("cwt") == None)
        self.assertTrue(trie.autoComplete("cwu") == None)
        self.assertTrue(trie.autoComplete("cwv") == None)
        self.assertTrue(trie.autoComplete("cww") == None)
        self.assertTrue(trie.autoComplete("cwx") == None)
        self.assertTrue(trie.autoComplete("cwy") == None)
        self.assertTrue(trie.autoComplete("cwz") == None)
        self.assertTrue(trie.autoComplete("cx") == None)
        self.assertTrue(trie.autoComplete("cxa") == None)
        self.assertTrue(trie.autoComplete("cxb") == None)
        self.assertTrue(trie.autoComplete("cxc") == None)
        self.assertTrue(trie.autoComplete("cxd") == None)
        self.assertTrue(trie.autoComplete("cxe") == None)
        self.assertTrue(trie.autoComplete("cxf") == None)
        self.assertTrue(trie.autoComplete("cxg") == None)
        self.assertTrue(trie.autoComplete("cxh") == None)
        self.assertTrue(trie.autoComplete("cxi") == None)
        self.assertTrue(trie.autoComplete("cxj") == None)
        self.assertTrue(trie.autoComplete("cxk") == None)
        self.assertTrue(trie.autoComplete("cxl") == None)
        self.assertTrue(trie.autoComplete("cxm") == None)
        self.assertTrue(trie.autoComplete("cxn") == None)
        self.assertTrue(trie.autoComplete("cxo") == None)
        self.assertTrue(trie.autoComplete("cxp") == None)
        self.assertTrue(trie.autoComplete("cxq") == None)
        self.assertTrue(trie.autoComplete("cxr") == None)
        self.assertTrue(trie.autoComplete("cxs") == None)
        self.assertTrue(trie.autoComplete("cxt") == None)
        self.assertTrue(trie.autoComplete("cxu") == None)
        self.assertTrue(trie.autoComplete("cxv") == None)
        self.assertTrue(trie.autoComplete("cxw") == None)
        self.assertTrue(trie.autoComplete("cxx") == None)
        self.assertTrue(trie.autoComplete("cxy") == None)
        self.assertTrue(trie.autoComplete("cxz") == None)
        self.assertTrue(trie.autoComplete("cy") == None)
        self.assertTrue(trie.autoComplete("cya") == None)
        self.assertTrue(trie.autoComplete("cyb") == None)
        self.assertTrue(trie.autoComplete("cyc") == None)
        self.assertTrue(trie.autoComplete("cyd") == None)
        self.assertTrue(trie.autoComplete("cye") == None)
        self.assertTrue(trie.autoComplete("cyf") == None)
        self.assertTrue(trie.autoComplete("cyg") == None)
        self.assertTrue(trie.autoComplete("cyh") == None)
        self.assertTrue(trie.autoComplete("cyi") == None)
        self.assertTrue(trie.autoComplete("cyj") == None)
        self.assertTrue(trie.autoComplete("cyk") == None)
        self.assertTrue(trie.autoComplete("cyl") == None)
        self.assertTrue(trie.autoComplete("cym") == None)
        self.assertTrue(trie.autoComplete("cyn") == None)
        self.assertTrue(trie.autoComplete("cyo") == None)
        self.assertTrue(trie.autoComplete("cyp") == None)
        self.assertTrue(trie.autoComplete("cyq") == None)
        self.assertTrue(trie.autoComplete("cyr") == None)
        self.assertTrue(trie.autoComplete("cys") == None)
        self.assertTrue(trie.autoComplete("cyt") == None)
        self.assertTrue(trie.autoComplete("cyu") == None)
        self.assertTrue(trie.autoComplete("cyv") == None)
        self.assertTrue(trie.autoComplete("cyw") == None)
        self.assertTrue(trie.autoComplete("cyx") == None)
        self.assertTrue(trie.autoComplete("cyy") == None)
        self.assertTrue(trie.autoComplete("cyz") == None)
        self.assertTrue(trie.autoComplete("cz") == None)
        self.assertTrue(trie.autoComplete("cza") == None)
        self.assertTrue(trie.autoComplete("czb") == None)
        self.assertTrue(trie.autoComplete("czc") == None)
        self.assertTrue(trie.autoComplete("czd") == None)
        self.assertTrue(trie.autoComplete("cze") == None)
        self.assertTrue(trie.autoComplete("czf") == None)
        self.assertTrue(trie.autoComplete("czg") == None)
        self.assertTrue(trie.autoComplete("czh") == None)
        self.assertTrue(trie.autoComplete("czi") == None)
        self.assertTrue(trie.autoComplete("czj") == None)
        self.assertTrue(trie.autoComplete("czk") == None)
        self.assertTrue(trie.autoComplete("czl") == None)
        self.assertTrue(trie.autoComplete("czm") == None)
        self.assertTrue(trie.autoComplete("czn") == None)
        self.assertTrue(trie.autoComplete("czo") == None)
        self.assertTrue(trie.autoComplete("czp") == None)
        self.assertTrue(trie.autoComplete("czq") == None)
        self.assertTrue(trie.autoComplete("czr") == None)
        self.assertTrue(trie.autoComplete("czs") == None)
        self.assertTrue(trie.autoComplete("czt") == None)
        self.assertTrue(trie.autoComplete("czu") == None)
        self.assertTrue(trie.autoComplete("czv") == None)
        self.assertTrue(trie.autoComplete("czw") == None)
        self.assertTrue(trie.autoComplete("czx") == None)
        self.assertTrue(trie.autoComplete("czy") == None)
        self.assertTrue(trie.autoComplete("czz") == None)
        self.assertTrue(trie.autoComplete("d") == "duties")
        self.assertTrue(trie.autoComplete("da") == "day")
        self.assertTrue(trie.autoComplete("daa") == None)
        self.assertTrue(trie.autoComplete("dab") == None)
        self.assertTrue(trie.autoComplete("dac") == None)
        self.assertTrue(trie.autoComplete("dad") == None)
        self.assertTrue(trie.autoComplete("dae") == None)
        self.assertTrue(trie.autoComplete("daf") == None)
        self.assertTrue(trie.autoComplete("dag") == None)
        self.assertTrue(trie.autoComplete("dah") == None)
        self.assertTrue(trie.autoComplete("dai") == None)
        self.assertTrue(trie.autoComplete("daj") == None)
        self.assertTrue(trie.autoComplete("dak") == None)
        self.assertTrue(trie.autoComplete("dal") == None)
        self.assertTrue(trie.autoComplete("dam") == None)
        self.assertTrue(trie.autoComplete("dan") == "danger")
        self.assertTrue(trie.autoComplete("dang") == "danger")
        self.assertTrue(trie.autoComplete("dange") == "danger")
        self.assertTrue(trie.autoComplete("danger") == "danger")
        self.assertTrue(trie.autoComplete("dao") == None)
        self.assertTrue(trie.autoComplete("dap") == None)
        self.assertTrue(trie.autoComplete("daq") == None)
        self.assertTrue(trie.autoComplete("dar") == None)
        self.assertTrue(trie.autoComplete("das") == None)
        self.assertTrue(trie.autoComplete("dat") == "date")
        self.assertTrue(trie.autoComplete("date") == "date")
        self.assertTrue(trie.autoComplete("dau") == None)
        self.assertTrue(trie.autoComplete("dav") == None)
        self.assertTrue(trie.autoComplete("daw") == None)
        self.assertTrue(trie.autoComplete("dax") == None)
        self.assertTrue(trie.autoComplete("day") == "day")
        self.assertTrue(trie.autoComplete("days") == "days")
        self.assertTrue(trie.autoComplete("daz") == None)
        self.assertTrue(trie.autoComplete("db") == None)
        self.assertTrue(trie.autoComplete("dba") == None)
        self.assertTrue(trie.autoComplete("dbb") == None)
        self.assertTrue(trie.autoComplete("dbc") == None)
        self.assertTrue(trie.autoComplete("dbd") == None)
        self.assertTrue(trie.autoComplete("dbe") == None)
        self.assertTrue(trie.autoComplete("dbf") == None)
        self.assertTrue(trie.autoComplete("dbg") == None)
        self.assertTrue(trie.autoComplete("dbh") == None)
        self.assertTrue(trie.autoComplete("dbi") == None)
        self.assertTrue(trie.autoComplete("dbj") == None)
        self.assertTrue(trie.autoComplete("dbk") == None)
        self.assertTrue(trie.autoComplete("dbl") == None)
        self.assertTrue(trie.autoComplete("dbm") == None)
        self.assertTrue(trie.autoComplete("dbn") == None)
        self.assertTrue(trie.autoComplete("dbo") == None)
        self.assertTrue(trie.autoComplete("dbp") == None)
        self.assertTrue(trie.autoComplete("dbq") == None)
        self.assertTrue(trie.autoComplete("dbr") == None)
        self.assertTrue(trie.autoComplete("dbs") == None)
        self.assertTrue(trie.autoComplete("dbt") == None)
        self.assertTrue(trie.autoComplete("dbu") == None)
        self.assertTrue(trie.autoComplete("dbv") == None)
        self.assertTrue(trie.autoComplete("dbw") == None)
        self.assertTrue(trie.autoComplete("dbx") == None)
        self.assertTrue(trie.autoComplete("dby") == None)
        self.assertTrue(trie.autoComplete("dbz") == None)
        self.assertTrue(trie.autoComplete("dc") == None)
        self.assertTrue(trie.autoComplete("dca") == None)
        self.assertTrue(trie.autoComplete("dcb") == None)
        self.assertTrue(trie.autoComplete("dcc") == None)
        self.assertTrue(trie.autoComplete("dcd") == None)
        self.assertTrue(trie.autoComplete("dce") == None)
        self.assertTrue(trie.autoComplete("dcf") == None)
        self.assertTrue(trie.autoComplete("dcg") == None)
        self.assertTrue(trie.autoComplete("dch") == None)
        self.assertTrue(trie.autoComplete("dci") == None)
        self.assertTrue(trie.autoComplete("dcj") == None)
        self.assertTrue(trie.autoComplete("dck") == None)
        self.assertTrue(trie.autoComplete("dcl") == None)
        self.assertTrue(trie.autoComplete("dcm") == None)
        self.assertTrue(trie.autoComplete("dcn") == None)
        self.assertTrue(trie.autoComplete("dco") == None)
        self.assertTrue(trie.autoComplete("dcp") == None)
        self.assertTrue(trie.autoComplete("dcq") == None)
        self.assertTrue(trie.autoComplete("dcr") == None)
        self.assertTrue(trie.autoComplete("dcs") == None)
        self.assertTrue(trie.autoComplete("dct") == None)
        self.assertTrue(trie.autoComplete("dcu") == None)
        self.assertTrue(trie.autoComplete("dcv") == None)
        self.assertTrue(trie.autoComplete("dcw") == None)
        self.assertTrue(trie.autoComplete("dcx") == None)
        self.assertTrue(trie.autoComplete("dcy") == None)
        self.assertTrue(trie.autoComplete("dcz") == None)
        self.assertTrue(trie.autoComplete("dd") == None)
        self.assertTrue(trie.autoComplete("dda") == None)
        self.assertTrue(trie.autoComplete("ddb") == None)
        self.assertTrue(trie.autoComplete("ddc") == None)
        self.assertTrue(trie.autoComplete("ddd") == None)
        self.assertTrue(trie.autoComplete("dde") == None)
        self.assertTrue(trie.autoComplete("ddf") == None)
        self.assertTrue(trie.autoComplete("ddg") == None)
        self.assertTrue(trie.autoComplete("ddh") == None)
        self.assertTrue(trie.autoComplete("ddi") == None)
        self.assertTrue(trie.autoComplete("ddj") == None)
        self.assertTrue(trie.autoComplete("ddk") == None)
        self.assertTrue(trie.autoComplete("ddl") == None)
        self.assertTrue(trie.autoComplete("ddm") == None)
        self.assertTrue(trie.autoComplete("ddn") == None)
        self.assertTrue(trie.autoComplete("ddo") == None)
        self.assertTrue(trie.autoComplete("ddp") == None)
        self.assertTrue(trie.autoComplete("ddq") == None)
        self.assertTrue(trie.autoComplete("ddr") == None)
        self.assertTrue(trie.autoComplete("dds") == None)
        self.assertTrue(trie.autoComplete("ddt") == None)
        self.assertTrue(trie.autoComplete("ddu") == None)
        self.assertTrue(trie.autoComplete("ddv") == None)
        self.assertTrue(trie.autoComplete("ddw") == None)
        self.assertTrue(trie.autoComplete("ddx") == None)
        self.assertTrue(trie.autoComplete("ddy") == None)
        self.assertTrue(trie.autoComplete("ddz") == None)
        self.assertTrue(trie.autoComplete("de") == "denied")
        self.assertTrue(trie.autoComplete("dea") == "death")
        self.assertTrue(trie.autoComplete("deat") == "death")
        self.assertTrue(trie.autoComplete("death") == "death")
        self.assertTrue(trie.autoComplete("deb") == "debts")
        self.assertTrue(trie.autoComplete("deba") == "debate")
        self.assertTrue(trie.autoComplete("debat") == "debate")
        self.assertTrue(trie.autoComplete("debate") == "debate")
        self.assertTrue(trie.autoComplete("debt") == "debts")
        self.assertTrue(trie.autoComplete("debts") == "debts")
        self.assertTrue(trie.autoComplete("dec") == "declaration")
        self.assertTrue(trie.autoComplete("dece") == "december")
        self.assertTrue(trie.autoComplete("decem") == "december")
        self.assertTrue(trie.autoComplete("decemb") == "december")
        self.assertTrue(trie.autoComplete("decembe") == "december")
        self.assertTrue(trie.autoComplete("december") == "december")
        self.assertTrue(trie.autoComplete("deci") == "decide")
        self.assertTrue(trie.autoComplete("decid") == "decide")
        self.assertTrue(trie.autoComplete("decide") == "decide")
        self.assertTrue(trie.autoComplete("decl") == "declaration")
        self.assertTrue(trie.autoComplete("decla") == "declaration")
        self.assertTrue(trie.autoComplete("declar") == "declaration")
        self.assertTrue(trie.autoComplete("declara") == "declaration")
        self.assertTrue(trie.autoComplete("declarat") == "declaration")
        self.assertTrue(trie.autoComplete("declarati") == "declaration")
        self.assertTrue(trie.autoComplete("declaratio") == "declaration")
        self.assertTrue(trie.autoComplete("declaration") == "declaration")
        self.assertTrue(trie.autoComplete("declare") == "declare")
        self.assertTrue(trie.autoComplete("declari") == "declaring")
        self.assertTrue(trie.autoComplete("declarin") == "declaring")
        self.assertTrue(trie.autoComplete("declaring") == "declaring")
        self.assertTrue(trie.autoComplete("ded") == None)
        self.assertTrue(trie.autoComplete("dee") == "deem")
        self.assertTrue(trie.autoComplete("deem") == "deem")
        self.assertTrue(trie.autoComplete("def") == "defence")
        self.assertTrue(trie.autoComplete("defe") == "defence")
        self.assertTrue(trie.autoComplete("defen") == "defence")
        self.assertTrue(trie.autoComplete("defenc") == "defence")
        self.assertTrue(trie.autoComplete("defence") == "defence")
        self.assertTrue(trie.autoComplete("defend") == "defend")
        self.assertTrue(trie.autoComplete("defi") == "define")
        self.assertTrue(trie.autoComplete("defin") == "define")
        self.assertTrue(trie.autoComplete("define") == "define")
        self.assertTrue(trie.autoComplete("deg") == None)
        self.assertTrue(trie.autoComplete("deh") == None)
        self.assertTrue(trie.autoComplete("dei") == None)
        self.assertTrue(trie.autoComplete("dej") == None)
        self.assertTrue(trie.autoComplete("dek") == None)
        self.assertTrue(trie.autoComplete("del") == "delivered")
        self.assertTrue(trie.autoComplete("dela") == "delaware")
        self.assertTrue(trie.autoComplete("delaw") == "delaware")
        self.assertTrue(trie.autoComplete("delawa") == "delaware")
        self.assertTrue(trie.autoComplete("delawar") == "delaware")
        self.assertTrue(trie.autoComplete("delaware") == "delaware")
        self.assertTrue(trie.autoComplete("delay") == "delay")
        self.assertTrue(trie.autoComplete("dele") == "delegated")
        self.assertTrue(trie.autoComplete("deleg") == "delegated")
        self.assertTrue(trie.autoComplete("delega") == "delegated")
        self.assertTrue(trie.autoComplete("delegat") == "delegated")
        self.assertTrue(trie.autoComplete("delegate") == "delegated")
        self.assertTrue(trie.autoComplete("delegated") == "delegated")
        self.assertTrue(trie.autoComplete("deli") == "delivered")
        self.assertTrue(trie.autoComplete("deliv") == "delivered")
        self.assertTrue(trie.autoComplete("delive") == "delivered")
        self.assertTrue(trie.autoComplete("deliver") == "delivered")
        self.assertTrue(trie.autoComplete("delivere") == "delivered")
        self.assertTrue(trie.autoComplete("delivered") == "delivered")
        self.assertTrue(trie.autoComplete("delivery") == "delivery")
        self.assertTrue(trie.autoComplete("dem") == "demand")
        self.assertTrue(trie.autoComplete("dema") == "demand")
        self.assertTrue(trie.autoComplete("deman") == "demand")
        self.assertTrue(trie.autoComplete("demand") == "demand")
        self.assertTrue(trie.autoComplete("den") == "denied")
        self.assertTrue(trie.autoComplete("deni") == "denied")
        self.assertTrue(trie.autoComplete("denie") == "denied")
        self.assertTrue(trie.autoComplete("denied") == "denied")
        self.assertTrue(trie.autoComplete("deny") == "deny")
        self.assertTrue(trie.autoComplete("deo") == None)
        self.assertTrue(trie.autoComplete("dep") == "departments")
        self.assertTrue(trie.autoComplete("depa") == "departments")
        self.assertTrue(trie.autoComplete("depar") == "departments")
        self.assertTrue(trie.autoComplete("depart") == "departments")
        self.assertTrue(trie.autoComplete("departm") == "departments")
        self.assertTrue(trie.autoComplete("departme") == "departments")
        self.assertTrue(trie.autoComplete("departmen") == "departments")
        self.assertTrue(trie.autoComplete("department") == "departments")
        self.assertTrue(trie.autoComplete("departments") == "departments")
        self.assertTrue(trie.autoComplete("depr") == "deprived")
        self.assertTrue(trie.autoComplete("depri") == "deprived")
        self.assertTrue(trie.autoComplete("depriv") == "deprived")
        self.assertTrue(trie.autoComplete("deprive") == "deprived")
        self.assertTrue(trie.autoComplete("deprived") == "deprived")
        self.assertTrue(trie.autoComplete("deq") == None)
        self.assertTrue(trie.autoComplete("der") == "derived")
        self.assertTrue(trie.autoComplete("deri") == "derived")
        self.assertTrue(trie.autoComplete("deriv") == "derived")
        self.assertTrue(trie.autoComplete("derive") == "derived")
        self.assertTrue(trie.autoComplete("derived") == "derived")
        self.assertTrue(trie.autoComplete("des") == "describing")
        self.assertTrue(trie.autoComplete("desc") == "describing")
        self.assertTrue(trie.autoComplete("descr") == "describing")
        self.assertTrue(trie.autoComplete("descri") == "describing")
        self.assertTrue(trie.autoComplete("describ") == "describing")
        self.assertTrue(trie.autoComplete("describi") == "describing")
        self.assertTrue(trie.autoComplete("describin") == "describing")
        self.assertTrue(trie.autoComplete("describing") == "describing")
        self.assertTrue(trie.autoComplete("desi") == "desire")
        self.assertTrue(trie.autoComplete("desir") == "desire")
        self.assertTrue(trie.autoComplete("desire") == "desire")
        self.assertTrue(trie.autoComplete("det") == "determine")
        self.assertTrue(trie.autoComplete("dete") == "determine")
        self.assertTrue(trie.autoComplete("deter") == "determine")
        self.assertTrue(trie.autoComplete("determ") == "determine")
        self.assertTrue(trie.autoComplete("determi") == "determine")
        self.assertTrue(trie.autoComplete("determin") == "determine")
        self.assertTrue(trie.autoComplete("determine") == "determine")
        self.assertTrue(trie.autoComplete("determined") == "determined")
        self.assertTrue(trie.autoComplete("determines") == "determines")
        self.assertTrue(trie.autoComplete("deu") == None)
        self.assertTrue(trie.autoComplete("dev") == "devolve")
        self.assertTrue(trie.autoComplete("devo") == "devolve")
        self.assertTrue(trie.autoComplete("devol") == "devolve")
        self.assertTrue(trie.autoComplete("devolv") == "devolve")
        self.assertTrue(trie.autoComplete("devolve") == "devolve")
        self.assertTrue(trie.autoComplete("devolved") == "devolved")
        self.assertTrue(trie.autoComplete("dew") == None)
        self.assertTrue(trie.autoComplete("dex") == None)
        self.assertTrue(trie.autoComplete("dey") == None)
        self.assertTrue(trie.autoComplete("dez") == None)
        self.assertTrue(trie.autoComplete("df") == None)
        self.assertTrue(trie.autoComplete("dfa") == None)
        self.assertTrue(trie.autoComplete("dfb") == None)
        self.assertTrue(trie.autoComplete("dfc") == None)
        self.assertTrue(trie.autoComplete("dfd") == None)
        self.assertTrue(trie.autoComplete("dfe") == None)
        self.assertTrue(trie.autoComplete("dff") == None)
        self.assertTrue(trie.autoComplete("dfg") == None)
        self.assertTrue(trie.autoComplete("dfh") == None)
        self.assertTrue(trie.autoComplete("dfi") == None)
        self.assertTrue(trie.autoComplete("dfj") == None)
        self.assertTrue(trie.autoComplete("dfk") == None)
        self.assertTrue(trie.autoComplete("dfl") == None)
        self.assertTrue(trie.autoComplete("dfm") == None)
        self.assertTrue(trie.autoComplete("dfn") == None)
        self.assertTrue(trie.autoComplete("dfo") == None)
        self.assertTrue(trie.autoComplete("dfp") == None)
        self.assertTrue(trie.autoComplete("dfq") == None)
        self.assertTrue(trie.autoComplete("dfr") == None)
        self.assertTrue(trie.autoComplete("dfs") == None)
        self.assertTrue(trie.autoComplete("dft") == None)
        self.assertTrue(trie.autoComplete("dfu") == None)
        self.assertTrue(trie.autoComplete("dfv") == None)
        self.assertTrue(trie.autoComplete("dfw") == None)
        self.assertTrue(trie.autoComplete("dfx") == None)
        self.assertTrue(trie.autoComplete("dfy") == None)
        self.assertTrue(trie.autoComplete("dfz") == None)
        self.assertTrue(trie.autoComplete("dg") == None)
        self.assertTrue(trie.autoComplete("dga") == None)
        self.assertTrue(trie.autoComplete("dgb") == None)
        self.assertTrue(trie.autoComplete("dgc") == None)
        self.assertTrue(trie.autoComplete("dgd") == None)
        self.assertTrue(trie.autoComplete("dge") == None)
        self.assertTrue(trie.autoComplete("dgf") == None)
        self.assertTrue(trie.autoComplete("dgg") == None)
        self.assertTrue(trie.autoComplete("dgh") == None)
        self.assertTrue(trie.autoComplete("dgi") == None)
        self.assertTrue(trie.autoComplete("dgj") == None)
        self.assertTrue(trie.autoComplete("dgk") == None)
        self.assertTrue(trie.autoComplete("dgl") == None)
        self.assertTrue(trie.autoComplete("dgm") == None)
        self.assertTrue(trie.autoComplete("dgn") == None)
        self.assertTrue(trie.autoComplete("dgo") == None)
        self.assertTrue(trie.autoComplete("dgp") == None)
        self.assertTrue(trie.autoComplete("dgq") == None)
        self.assertTrue(trie.autoComplete("dgr") == None)
        self.assertTrue(trie.autoComplete("dgs") == None)
        self.assertTrue(trie.autoComplete("dgt") == None)
        self.assertTrue(trie.autoComplete("dgu") == None)
        self.assertTrue(trie.autoComplete("dgv") == None)
        self.assertTrue(trie.autoComplete("dgw") == None)
        self.assertTrue(trie.autoComplete("dgx") == None)
        self.assertTrue(trie.autoComplete("dgy") == None)
        self.assertTrue(trie.autoComplete("dgz") == None)
        self.assertTrue(trie.autoComplete("dh") == None)
        self.assertTrue(trie.autoComplete("dha") == None)
        self.assertTrue(trie.autoComplete("dhb") == None)
        self.assertTrue(trie.autoComplete("dhc") == None)
        self.assertTrue(trie.autoComplete("dhd") == None)
        self.assertTrue(trie.autoComplete("dhe") == None)
        self.assertTrue(trie.autoComplete("dhf") == None)
        self.assertTrue(trie.autoComplete("dhg") == None)
        self.assertTrue(trie.autoComplete("dhh") == None)
        self.assertTrue(trie.autoComplete("dhi") == None)
        self.assertTrue(trie.autoComplete("dhj") == None)
        self.assertTrue(trie.autoComplete("dhk") == None)
        self.assertTrue(trie.autoComplete("dhl") == None)
        self.assertTrue(trie.autoComplete("dhm") == None)
        self.assertTrue(trie.autoComplete("dhn") == None)
        self.assertTrue(trie.autoComplete("dho") == None)
        self.assertTrue(trie.autoComplete("dhp") == None)
        self.assertTrue(trie.autoComplete("dhq") == None)
        self.assertTrue(trie.autoComplete("dhr") == None)
        self.assertTrue(trie.autoComplete("dhs") == None)
        self.assertTrue(trie.autoComplete("dht") == None)
        self.assertTrue(trie.autoComplete("dhu") == None)
        self.assertTrue(trie.autoComplete("dhv") == None)
        self.assertTrue(trie.autoComplete("dhw") == None)
        self.assertTrue(trie.autoComplete("dhx") == None)
        self.assertTrue(trie.autoComplete("dhy") == None)
        self.assertTrue(trie.autoComplete("dhz") == None)
        self.assertTrue(trie.autoComplete("di") == "direct")
        self.assertTrue(trie.autoComplete("dia") == None)
        self.assertTrue(trie.autoComplete("dib") == None)
        self.assertTrue(trie.autoComplete("dic") == None)
        self.assertTrue(trie.autoComplete("did") == None)
        self.assertTrue(trie.autoComplete("die") == "died")
        self.assertTrue(trie.autoComplete("died") == "died")
        self.assertTrue(trie.autoComplete("dif") == "different")
        self.assertTrue(trie.autoComplete("diff") == "different")
        self.assertTrue(trie.autoComplete("diffe") == "different")
        self.assertTrue(trie.autoComplete("differ") == "different")
        self.assertTrue(trie.autoComplete("differe") == "different")
        self.assertTrue(trie.autoComplete("differen") == "different")
        self.assertTrue(trie.autoComplete("different") == "different")
        self.assertTrue(trie.autoComplete("dig") == None)
        self.assertTrue(trie.autoComplete("dih") == None)
        self.assertTrue(trie.autoComplete("dii") == None)
        self.assertTrue(trie.autoComplete("dij") == None)
        self.assertTrue(trie.autoComplete("dik") == None)
        self.assertTrue(trie.autoComplete("dil") == None)
        self.assertTrue(trie.autoComplete("dim") == "diminished")
        self.assertTrue(trie.autoComplete("dimi") == "diminished")
        self.assertTrue(trie.autoComplete("dimin") == "diminished")
        self.assertTrue(trie.autoComplete("dimini") == "diminished")
        self.assertTrue(trie.autoComplete("diminis") == "diminished")
        self.assertTrue(trie.autoComplete("diminish") == "diminished")
        self.assertTrue(trie.autoComplete("diminishe") == "diminished")
        self.assertTrue(trie.autoComplete("diminished") == "diminished")
        self.assertTrue(trie.autoComplete("din") == None)
        self.assertTrue(trie.autoComplete("dio") == None)
        self.assertTrue(trie.autoComplete("dip") == None)
        self.assertTrue(trie.autoComplete("diq") == None)
        self.assertTrue(trie.autoComplete("dir") == "direct")
        self.assertTrue(trie.autoComplete("dire") == "direct")
        self.assertTrue(trie.autoComplete("direc") == "direct")
        self.assertTrue(trie.autoComplete("direct") == "direct")
        self.assertTrue(trie.autoComplete("directe") == "directed")
        self.assertTrue(trie.autoComplete("directed") == "directed")
        self.assertTrue(trie.autoComplete("dis") == "discharge")
        self.assertTrue(trie.autoComplete("disa") == "disability")
        self.assertTrue(trie.autoComplete("disab") == "disability")
        self.assertTrue(trie.autoComplete("disabi") == "disability")
        self.assertTrue(trie.autoComplete("disabil") == "disability")
        self.assertTrue(trie.autoComplete("disabili") == "disability")
        self.assertTrue(trie.autoComplete("disabilit") == "disability")
        self.assertTrue(trie.autoComplete("disabiliti") == "disabilities")
        self.assertTrue(trie.autoComplete("disabilitie") == "disabilities")
        self.assertTrue(trie.autoComplete("disabilities") == "disabilities")
        self.assertTrue(trie.autoComplete("disability") == "disability")
        self.assertTrue(trie.autoComplete("disag") == "disagreement")
        self.assertTrue(trie.autoComplete("disagr") == "disagreement")
        self.assertTrue(trie.autoComplete("disagre") == "disagreement")
        self.assertTrue(trie.autoComplete("disagree") == "disagreement")
        self.assertTrue(trie.autoComplete("disagreem") == "disagreement")
        self.assertTrue(trie.autoComplete("disagreeme") == "disagreement")
        self.assertTrue(trie.autoComplete("disagreemen") == "disagreement")
        self.assertTrue(trie.autoComplete("disagreement") == "disagreement")
        self.assertTrue(trie.autoComplete("disap") == "disapproved")
        self.assertTrue(trie.autoComplete("disapp") == "disapproved")
        self.assertTrue(trie.autoComplete("disappr") == "disapproved")
        self.assertTrue(trie.autoComplete("disappro") == "disapproved")
        self.assertTrue(trie.autoComplete("disapprov") == "disapproved")
        self.assertTrue(trie.autoComplete("disapprove") == "disapproved")
        self.assertTrue(trie.autoComplete("disapproved") == "disapproved")
        self.assertTrue(trie.autoComplete("disc") == "discharge")
        self.assertTrue(trie.autoComplete("disch") == "discharge")
        self.assertTrue(trie.autoComplete("discha") == "discharge")
        self.assertTrue(trie.autoComplete("dischar") == "discharge")
        self.assertTrue(trie.autoComplete("discharg") == "discharge")
        self.assertTrue(trie.autoComplete("discharge") == "discharge")
        self.assertTrue(trie.autoComplete("discharged") == "discharged")
        self.assertTrue(trie.autoComplete("disci") == "discipline")
        self.assertTrue(trie.autoComplete("discip") == "discipline")
        self.assertTrue(trie.autoComplete("discipl") == "discipline")
        self.assertTrue(trie.autoComplete("discipli") == "discipline")
        self.assertTrue(trie.autoComplete("disciplin") == "discipline")
        self.assertTrue(trie.autoComplete("discipline") == "discipline")
        self.assertTrue(trie.autoComplete("disciplini") == "disciplining")
        self.assertTrue(trie.autoComplete("disciplinin") == "disciplining")
        self.assertTrue(trie.autoComplete("disciplining") == "disciplining")
        self.assertTrue(trie.autoComplete("disco") == "discoveries")
        self.assertTrue(trie.autoComplete("discov") == "discoveries")
        self.assertTrue(trie.autoComplete("discove") == "discoveries")
        self.assertTrue(trie.autoComplete("discover") == "discoveries")
        self.assertTrue(trie.autoComplete("discoveri") == "discoveries")
        self.assertTrue(trie.autoComplete("discoverie") == "discoveries")
        self.assertTrue(trie.autoComplete("discoveries") == "discoveries")
        self.assertTrue(trie.autoComplete("diso") == "disorderly")
        self.assertTrue(trie.autoComplete("disor") == "disorderly")
        self.assertTrue(trie.autoComplete("disord") == "disorderly")
        self.assertTrue(trie.autoComplete("disorde") == "disorderly")
        self.assertTrue(trie.autoComplete("disorder") == "disorderly")
        self.assertTrue(trie.autoComplete("disorderl") == "disorderly")
        self.assertTrue(trie.autoComplete("disorderly") == "disorderly")
        self.assertTrue(trie.autoComplete("disp") == "disparage")
        self.assertTrue(trie.autoComplete("dispa") == "disparage")
        self.assertTrue(trie.autoComplete("dispar") == "disparage")
        self.assertTrue(trie.autoComplete("dispara") == "disparage")
        self.assertTrue(trie.autoComplete("disparag") == "disparage")
        self.assertTrue(trie.autoComplete("disparage") == "disparage")
        self.assertTrue(trie.autoComplete("dispo") == "dispose")
        self.assertTrue(trie.autoComplete("dispos") == "dispose")
        self.assertTrue(trie.autoComplete("dispose") == "dispose")
        self.assertTrue(trie.autoComplete("disq") == "disqualification")
        self.assertTrue(trie.autoComplete("disqu") == "disqualification")
        self.assertTrue(trie.autoComplete("disqua") == "disqualification")
        self.assertTrue(trie.autoComplete("disqual") == "disqualification")
        self.assertTrue(trie.autoComplete("disquali") == "disqualification")
        self.assertTrue(trie.autoComplete("disqualif") == "disqualification")
        self.assertTrue(trie.autoComplete("disqualifi") == "disqualification")
        self.assertTrue(trie.autoComplete("disqualific") == "disqualification")
        self.assertTrue(trie.autoComplete("disqualifica") == "disqualification")
        self.assertTrue(trie.autoComplete("disqualificat") == "disqualification")
        self.assertTrue(trie.autoComplete("disqualificati") == "disqualification")
        self.assertTrue(trie.autoComplete("disqualificatio") == "disqualification")
        self.assertTrue(trie.autoComplete("disqualification") == "disqualification")
        self.assertTrue(trie.autoComplete("dist") == "district")
        self.assertTrue(trie.autoComplete("disti") == "distinct")
        self.assertTrue(trie.autoComplete("distin") == "distinct")
        self.assertTrue(trie.autoComplete("distinc") == "distinct")
        self.assertTrue(trie.autoComplete("distinct") == "distinct")
        self.assertTrue(trie.autoComplete("distr") == "district")
        self.assertTrue(trie.autoComplete("distri") == "district")
        self.assertTrue(trie.autoComplete("distric") == "district")
        self.assertTrue(trie.autoComplete("district") == "district")
        self.assertTrue(trie.autoComplete("dit") == None)
        self.assertTrue(trie.autoComplete("diu") == None)
        self.assertTrue(trie.autoComplete("div") == "divided")
        self.assertTrue(trie.autoComplete("divi") == "divided")
        self.assertTrue(trie.autoComplete("divid") == "divided")
        self.assertTrue(trie.autoComplete("divide") == "divided")
        self.assertTrue(trie.autoComplete("divided") == "divided")
        self.assertTrue(trie.autoComplete("diw") == None)
        self.assertTrue(trie.autoComplete("dix") == None)
        self.assertTrue(trie.autoComplete("diy") == None)
        self.assertTrue(trie.autoComplete("diz") == None)
        self.assertTrue(trie.autoComplete("dj") == None)
        self.assertTrue(trie.autoComplete("dja") == None)
        self.assertTrue(trie.autoComplete("djb") == None)
        self.assertTrue(trie.autoComplete("djc") == None)
        self.assertTrue(trie.autoComplete("djd") == None)
        self.assertTrue(trie.autoComplete("dje") == None)
        self.assertTrue(trie.autoComplete("djf") == None)
        self.assertTrue(trie.autoComplete("djg") == None)
        self.assertTrue(trie.autoComplete("djh") == None)
        self.assertTrue(trie.autoComplete("dji") == None)
        self.assertTrue(trie.autoComplete("djj") == None)
        self.assertTrue(trie.autoComplete("djk") == None)
        self.assertTrue(trie.autoComplete("djl") == None)
        self.assertTrue(trie.autoComplete("djm") == None)
        self.assertTrue(trie.autoComplete("djn") == None)
        self.assertTrue(trie.autoComplete("djo") == None)
        self.assertTrue(trie.autoComplete("djp") == None)
        self.assertTrue(trie.autoComplete("djq") == None)
        self.assertTrue(trie.autoComplete("djr") == None)
        self.assertTrue(trie.autoComplete("djs") == None)
        self.assertTrue(trie.autoComplete("djt") == None)
        self.assertTrue(trie.autoComplete("dju") == None)
        self.assertTrue(trie.autoComplete("djv") == None)
        self.assertTrue(trie.autoComplete("djw") == None)
        self.assertTrue(trie.autoComplete("djx") == None)
        self.assertTrue(trie.autoComplete("djy") == None)
        self.assertTrue(trie.autoComplete("djz") == None)
        self.assertTrue(trie.autoComplete("dk") == None)
        self.assertTrue(trie.autoComplete("dka") == None)
        self.assertTrue(trie.autoComplete("dkb") == None)
        self.assertTrue(trie.autoComplete("dkc") == None)
        self.assertTrue(trie.autoComplete("dkd") == None)
        self.assertTrue(trie.autoComplete("dke") == None)
        self.assertTrue(trie.autoComplete("dkf") == None)
        self.assertTrue(trie.autoComplete("dkg") == None)
        self.assertTrue(trie.autoComplete("dkh") == None)
        self.assertTrue(trie.autoComplete("dki") == None)
        self.assertTrue(trie.autoComplete("dkj") == None)
        self.assertTrue(trie.autoComplete("dkk") == None)
        self.assertTrue(trie.autoComplete("dkl") == None)
        self.assertTrue(trie.autoComplete("dkm") == None)
        self.assertTrue(trie.autoComplete("dkn") == None)
        self.assertTrue(trie.autoComplete("dko") == None)
        self.assertTrue(trie.autoComplete("dkp") == None)
        self.assertTrue(trie.autoComplete("dkq") == None)
        self.assertTrue(trie.autoComplete("dkr") == None)
        self.assertTrue(trie.autoComplete("dks") == None)
        self.assertTrue(trie.autoComplete("dkt") == None)
        self.assertTrue(trie.autoComplete("dku") == None)
        self.assertTrue(trie.autoComplete("dkv") == None)
        self.assertTrue(trie.autoComplete("dkw") == None)
        self.assertTrue(trie.autoComplete("dkx") == None)
        self.assertTrue(trie.autoComplete("dky") == None)
        self.assertTrue(trie.autoComplete("dkz") == None)
        self.assertTrue(trie.autoComplete("dl") == None)
        self.assertTrue(trie.autoComplete("dla") == None)
        self.assertTrue(trie.autoComplete("dlb") == None)
        self.assertTrue(trie.autoComplete("dlc") == None)
        self.assertTrue(trie.autoComplete("dld") == None)
        self.assertTrue(trie.autoComplete("dle") == None)
        self.assertTrue(trie.autoComplete("dlf") == None)
        self.assertTrue(trie.autoComplete("dlg") == None)
        self.assertTrue(trie.autoComplete("dlh") == None)
        self.assertTrue(trie.autoComplete("dli") == None)
        self.assertTrue(trie.autoComplete("dlj") == None)
        self.assertTrue(trie.autoComplete("dlk") == None)
        self.assertTrue(trie.autoComplete("dll") == None)
        self.assertTrue(trie.autoComplete("dlm") == None)
        self.assertTrue(trie.autoComplete("dln") == None)
        self.assertTrue(trie.autoComplete("dlo") == None)
        self.assertTrue(trie.autoComplete("dlp") == None)
        self.assertTrue(trie.autoComplete("dlq") == None)
        self.assertTrue(trie.autoComplete("dlr") == None)
        self.assertTrue(trie.autoComplete("dls") == None)
        self.assertTrue(trie.autoComplete("dlt") == None)
        self.assertTrue(trie.autoComplete("dlu") == None)
        self.assertTrue(trie.autoComplete("dlv") == None)
        self.assertTrue(trie.autoComplete("dlw") == None)
        self.assertTrue(trie.autoComplete("dlx") == None)
        self.assertTrue(trie.autoComplete("dly") == None)
        self.assertTrue(trie.autoComplete("dlz") == None)
        self.assertTrue(trie.autoComplete("dm") == None)
        self.assertTrue(trie.autoComplete("dma") == None)
        self.assertTrue(trie.autoComplete("dmb") == None)
        self.assertTrue(trie.autoComplete("dmc") == None)
        self.assertTrue(trie.autoComplete("dmd") == None)
        self.assertTrue(trie.autoComplete("dme") == None)
        self.assertTrue(trie.autoComplete("dmf") == None)
        self.assertTrue(trie.autoComplete("dmg") == None)
        self.assertTrue(trie.autoComplete("dmh") == None)
        self.assertTrue(trie.autoComplete("dmi") == None)
        self.assertTrue(trie.autoComplete("dmj") == None)
        self.assertTrue(trie.autoComplete("dmk") == None)
        self.assertTrue(trie.autoComplete("dml") == None)
        self.assertTrue(trie.autoComplete("dmm") == None)
        self.assertTrue(trie.autoComplete("dmn") == None)
        self.assertTrue(trie.autoComplete("dmo") == None)
        self.assertTrue(trie.autoComplete("dmp") == None)
        self.assertTrue(trie.autoComplete("dmq") == None)
        self.assertTrue(trie.autoComplete("dmr") == None)
        self.assertTrue(trie.autoComplete("dms") == None)
        self.assertTrue(trie.autoComplete("dmt") == None)
        self.assertTrue(trie.autoComplete("dmu") == None)
        self.assertTrue(trie.autoComplete("dmv") == None)
        self.assertTrue(trie.autoComplete("dmw") == None)
        self.assertTrue(trie.autoComplete("dmx") == None)
        self.assertTrue(trie.autoComplete("dmy") == None)
        self.assertTrue(trie.autoComplete("dmz") == None)
        self.assertTrue(trie.autoComplete("dn") == None)
        self.assertTrue(trie.autoComplete("dna") == None)
        self.assertTrue(trie.autoComplete("dnb") == None)
        self.assertTrue(trie.autoComplete("dnc") == None)
        self.assertTrue(trie.autoComplete("dnd") == None)
        self.assertTrue(trie.autoComplete("dne") == None)
        self.assertTrue(trie.autoComplete("dnf") == None)
        self.assertTrue(trie.autoComplete("dng") == None)
        self.assertTrue(trie.autoComplete("dnh") == None)
        self.assertTrue(trie.autoComplete("dni") == None)
        self.assertTrue(trie.autoComplete("dnj") == None)
        self.assertTrue(trie.autoComplete("dnk") == None)
        self.assertTrue(trie.autoComplete("dnl") == None)
        self.assertTrue(trie.autoComplete("dnm") == None)
        self.assertTrue(trie.autoComplete("dnn") == None)
        self.assertTrue(trie.autoComplete("dno") == None)
        self.assertTrue(trie.autoComplete("dnp") == None)
        self.assertTrue(trie.autoComplete("dnq") == None)
        self.assertTrue(trie.autoComplete("dnr") == None)
        self.assertTrue(trie.autoComplete("dns") == None)
        self.assertTrue(trie.autoComplete("dnt") == None)
        self.assertTrue(trie.autoComplete("dnu") == None)
        self.assertTrue(trie.autoComplete("dnv") == None)
        self.assertTrue(trie.autoComplete("dnw") == None)
        self.assertTrue(trie.autoComplete("dnx") == None)
        self.assertTrue(trie.autoComplete("dny") == None)
        self.assertTrue(trie.autoComplete("dnz") == None)
        self.assertTrue(trie.autoComplete("do") == "do")
        self.assertTrue(trie.autoComplete("doa") == None)
        self.assertTrue(trie.autoComplete("dob") == None)
        self.assertTrue(trie.autoComplete("doc") == "dock")
        self.assertTrue(trie.autoComplete("dock") == "dock")
        self.assertTrue(trie.autoComplete("dod") == None)
        self.assertTrue(trie.autoComplete("doe") == None)
        self.assertTrue(trie.autoComplete("dof") == None)
        self.assertTrue(trie.autoComplete("dog") == None)
        self.assertTrue(trie.autoComplete("doh") == None)
        self.assertTrue(trie.autoComplete("doi") == None)
        self.assertTrue(trie.autoComplete("doj") == None)
        self.assertTrue(trie.autoComplete("dok") == None)
        self.assertTrue(trie.autoComplete("dol") == "dollars")
        self.assertTrue(trie.autoComplete("doll") == "dollars")
        self.assertTrue(trie.autoComplete("dolla") == "dollars")
        self.assertTrue(trie.autoComplete("dollar") == "dollars")
        self.assertTrue(trie.autoComplete("dollars") == "dollars")
        self.assertTrue(trie.autoComplete("dom") == "domestic")
        self.assertTrue(trie.autoComplete("dome") == "domestic")
        self.assertTrue(trie.autoComplete("domes") == "domestic")
        self.assertTrue(trie.autoComplete("domest") == "domestic")
        self.assertTrue(trie.autoComplete("domesti") == "domestic")
        self.assertTrue(trie.autoComplete("domestic") == "domestic")
        self.assertTrue(trie.autoComplete("don") == None)
        self.assertTrue(trie.autoComplete("doo") == None)
        self.assertTrue(trie.autoComplete("dop") == None)
        self.assertTrue(trie.autoComplete("doq") == None)
        self.assertTrue(trie.autoComplete("dor") == None)
        self.assertTrue(trie.autoComplete("dos") == None)
        self.assertTrue(trie.autoComplete("dot") == None)
        self.assertTrue(trie.autoComplete("dou") == None)
        self.assertTrue(trie.autoComplete("dov") == None)
        self.assertTrue(trie.autoComplete("dow") == None)
        self.assertTrue(trie.autoComplete("dox") == None)
        self.assertTrue(trie.autoComplete("doy") == None)
        self.assertTrue(trie.autoComplete("doz") == None)
        self.assertTrue(trie.autoComplete("dp") == None)
        self.assertTrue(trie.autoComplete("dpa") == None)
        self.assertTrue(trie.autoComplete("dpb") == None)
        self.assertTrue(trie.autoComplete("dpc") == None)
        self.assertTrue(trie.autoComplete("dpd") == None)
        self.assertTrue(trie.autoComplete("dpe") == None)
        self.assertTrue(trie.autoComplete("dpf") == None)
        self.assertTrue(trie.autoComplete("dpg") == None)
        self.assertTrue(trie.autoComplete("dph") == None)
        self.assertTrue(trie.autoComplete("dpi") == None)
        self.assertTrue(trie.autoComplete("dpj") == None)
        self.assertTrue(trie.autoComplete("dpk") == None)
        self.assertTrue(trie.autoComplete("dpl") == None)
        self.assertTrue(trie.autoComplete("dpm") == None)
        self.assertTrue(trie.autoComplete("dpn") == None)
        self.assertTrue(trie.autoComplete("dpo") == None)
        self.assertTrue(trie.autoComplete("dpp") == None)
        self.assertTrue(trie.autoComplete("dpq") == None)
        self.assertTrue(trie.autoComplete("dpr") == None)
        self.assertTrue(trie.autoComplete("dps") == None)
        self.assertTrue(trie.autoComplete("dpt") == None)
        self.assertTrue(trie.autoComplete("dpu") == None)
        self.assertTrue(trie.autoComplete("dpv") == None)
        self.assertTrue(trie.autoComplete("dpw") == None)
        self.assertTrue(trie.autoComplete("dpx") == None)
        self.assertTrue(trie.autoComplete("dpy") == None)
        self.assertTrue(trie.autoComplete("dpz") == None)
        self.assertTrue(trie.autoComplete("dq") == None)
        self.assertTrue(trie.autoComplete("dqa") == None)
        self.assertTrue(trie.autoComplete("dqb") == None)
        self.assertTrue(trie.autoComplete("dqc") == None)
        self.assertTrue(trie.autoComplete("dqd") == None)
        self.assertTrue(trie.autoComplete("dqe") == None)
        self.assertTrue(trie.autoComplete("dqf") == None)
        self.assertTrue(trie.autoComplete("dqg") == None)
        self.assertTrue(trie.autoComplete("dqh") == None)
        self.assertTrue(trie.autoComplete("dqi") == None)
        self.assertTrue(trie.autoComplete("dqj") == None)
        self.assertTrue(trie.autoComplete("dqk") == None)
        self.assertTrue(trie.autoComplete("dql") == None)
        self.assertTrue(trie.autoComplete("dqm") == None)
        self.assertTrue(trie.autoComplete("dqn") == None)
        self.assertTrue(trie.autoComplete("dqo") == None)
        self.assertTrue(trie.autoComplete("dqp") == None)
        self.assertTrue(trie.autoComplete("dqq") == None)
        self.assertTrue(trie.autoComplete("dqr") == None)
        self.assertTrue(trie.autoComplete("dqs") == None)
        self.assertTrue(trie.autoComplete("dqt") == None)
        self.assertTrue(trie.autoComplete("dqu") == None)
        self.assertTrue(trie.autoComplete("dqv") == None)
        self.assertTrue(trie.autoComplete("dqw") == None)
        self.assertTrue(trie.autoComplete("dqx") == None)
        self.assertTrue(trie.autoComplete("dqy") == None)
        self.assertTrue(trie.autoComplete("dqz") == None)
        self.assertTrue(trie.autoComplete("dr") == "drawn")
        self.assertTrue(trie.autoComplete("dra") == "drawn")
        self.assertTrue(trie.autoComplete("draw") == "drawn")
        self.assertTrue(trie.autoComplete("drawn") == "drawn")
        self.assertTrue(trie.autoComplete("drb") == None)
        self.assertTrue(trie.autoComplete("drc") == None)
        self.assertTrue(trie.autoComplete("drd") == None)
        self.assertTrue(trie.autoComplete("dre") == None)
        self.assertTrue(trie.autoComplete("drf") == None)
        self.assertTrue(trie.autoComplete("drg") == None)
        self.assertTrue(trie.autoComplete("drh") == None)
        self.assertTrue(trie.autoComplete("dri") == None)
        self.assertTrue(trie.autoComplete("drj") == None)
        self.assertTrue(trie.autoComplete("drk") == None)
        self.assertTrue(trie.autoComplete("drl") == None)
        self.assertTrue(trie.autoComplete("drm") == None)
        self.assertTrue(trie.autoComplete("drn") == None)
        self.assertTrue(trie.autoComplete("dro") == None)
        self.assertTrue(trie.autoComplete("drp") == None)
        self.assertTrue(trie.autoComplete("drq") == None)
        self.assertTrue(trie.autoComplete("drr") == None)
        self.assertTrue(trie.autoComplete("drs") == None)
        self.assertTrue(trie.autoComplete("drt") == None)
        self.assertTrue(trie.autoComplete("dru") == None)
        self.assertTrue(trie.autoComplete("drv") == None)
        self.assertTrue(trie.autoComplete("drw") == None)
        self.assertTrue(trie.autoComplete("drx") == None)
        self.assertTrue(trie.autoComplete("dry") == None)
        self.assertTrue(trie.autoComplete("drz") == None)
        self.assertTrue(trie.autoComplete("ds") == None)
        self.assertTrue(trie.autoComplete("dsa") == None)
        self.assertTrue(trie.autoComplete("dsb") == None)
        self.assertTrue(trie.autoComplete("dsc") == None)
        self.assertTrue(trie.autoComplete("dsd") == None)
        self.assertTrue(trie.autoComplete("dse") == None)
        self.assertTrue(trie.autoComplete("dsf") == None)
        self.assertTrue(trie.autoComplete("dsg") == None)
        self.assertTrue(trie.autoComplete("dsh") == None)
        self.assertTrue(trie.autoComplete("dsi") == None)
        self.assertTrue(trie.autoComplete("dsj") == None)
        self.assertTrue(trie.autoComplete("dsk") == None)
        self.assertTrue(trie.autoComplete("dsl") == None)
        self.assertTrue(trie.autoComplete("dsm") == None)
        self.assertTrue(trie.autoComplete("dsn") == None)
        self.assertTrue(trie.autoComplete("dso") == None)
        self.assertTrue(trie.autoComplete("dsp") == None)
        self.assertTrue(trie.autoComplete("dsq") == None)
        self.assertTrue(trie.autoComplete("dsr") == None)
        self.assertTrue(trie.autoComplete("dss") == None)
        self.assertTrue(trie.autoComplete("dst") == None)
        self.assertTrue(trie.autoComplete("dsu") == None)
        self.assertTrue(trie.autoComplete("dsv") == None)
        self.assertTrue(trie.autoComplete("dsw") == None)
        self.assertTrue(trie.autoComplete("dsx") == None)
        self.assertTrue(trie.autoComplete("dsy") == None)
        self.assertTrue(trie.autoComplete("dsz") == None)
        self.assertTrue(trie.autoComplete("dt") == None)
        self.assertTrue(trie.autoComplete("dta") == None)
        self.assertTrue(trie.autoComplete("dtb") == None)
        self.assertTrue(trie.autoComplete("dtc") == None)
        self.assertTrue(trie.autoComplete("dtd") == None)
        self.assertTrue(trie.autoComplete("dte") == None)
        self.assertTrue(trie.autoComplete("dtf") == None)
        self.assertTrue(trie.autoComplete("dtg") == None)
        self.assertTrue(trie.autoComplete("dth") == None)
        self.assertTrue(trie.autoComplete("dti") == None)
        self.assertTrue(trie.autoComplete("dtj") == None)
        self.assertTrue(trie.autoComplete("dtk") == None)
        self.assertTrue(trie.autoComplete("dtl") == None)
        self.assertTrue(trie.autoComplete("dtm") == None)
        self.assertTrue(trie.autoComplete("dtn") == None)
        self.assertTrue(trie.autoComplete("dto") == None)
        self.assertTrue(trie.autoComplete("dtp") == None)
        self.assertTrue(trie.autoComplete("dtq") == None)
        self.assertTrue(trie.autoComplete("dtr") == None)
        self.assertTrue(trie.autoComplete("dts") == None)
        self.assertTrue(trie.autoComplete("dtt") == None)
        self.assertTrue(trie.autoComplete("dtu") == None)
        self.assertTrue(trie.autoComplete("dtv") == None)
        self.assertTrue(trie.autoComplete("dtw") == None)
        self.assertTrue(trie.autoComplete("dtx") == None)
        self.assertTrue(trie.autoComplete("dty") == None)
        self.assertTrue(trie.autoComplete("dtz") == None)
        self.assertTrue(trie.autoComplete("du") == "duties")
        self.assertTrue(trie.autoComplete("dua") == None)
        self.assertTrue(trie.autoComplete("dub") == None)
        self.assertTrue(trie.autoComplete("duc") == None)
        self.assertTrue(trie.autoComplete("dud") == None)
        self.assertTrue(trie.autoComplete("due") == "due")
        self.assertTrue(trie.autoComplete("duf") == None)
        self.assertTrue(trie.autoComplete("dug") == None)
        self.assertTrue(trie.autoComplete("duh") == None)
        self.assertTrue(trie.autoComplete("dui") == None)
        self.assertTrue(trie.autoComplete("duj") == None)
        self.assertTrue(trie.autoComplete("duk") == None)
        self.assertTrue(trie.autoComplete("dul") == "duly")
        self.assertTrue(trie.autoComplete("duly") == "duly")
        self.assertTrue(trie.autoComplete("dum") == None)
        self.assertTrue(trie.autoComplete("dun") == None)
        self.assertTrue(trie.autoComplete("duo") == None)
        self.assertTrue(trie.autoComplete("dup") == None)
        self.assertTrue(trie.autoComplete("duq") == None)
        self.assertTrue(trie.autoComplete("dur") == "during")
        self.assertTrue(trie.autoComplete("duri") == "during")
        self.assertTrue(trie.autoComplete("durin") == "during")
        self.assertTrue(trie.autoComplete("during") == "during")
        self.assertTrue(trie.autoComplete("dus") == None)
        self.assertTrue(trie.autoComplete("dut") == "duties")
        self.assertTrue(trie.autoComplete("duti") == "duties")
        self.assertTrue(trie.autoComplete("dutie") == "duties")
        self.assertTrue(trie.autoComplete("duties") == "duties")
        self.assertTrue(trie.autoComplete("duty") == "duty")
        self.assertTrue(trie.autoComplete("duu") == None)
        self.assertTrue(trie.autoComplete("duv") == None)
        self.assertTrue(trie.autoComplete("duw") == None)
        self.assertTrue(trie.autoComplete("dux") == None)
        self.assertTrue(trie.autoComplete("duy") == None)
        self.assertTrue(trie.autoComplete("duz") == None)
        self.assertTrue(trie.autoComplete("dv") == None)
        self.assertTrue(trie.autoComplete("dva") == None)
        self.assertTrue(trie.autoComplete("dvb") == None)
        self.assertTrue(trie.autoComplete("dvc") == None)
        self.assertTrue(trie.autoComplete("dvd") == None)
        self.assertTrue(trie.autoComplete("dve") == None)
        self.assertTrue(trie.autoComplete("dvf") == None)
        self.assertTrue(trie.autoComplete("dvg") == None)
        self.assertTrue(trie.autoComplete("dvh") == None)
        self.assertTrue(trie.autoComplete("dvi") == None)
        self.assertTrue(trie.autoComplete("dvj") == None)
        self.assertTrue(trie.autoComplete("dvk") == None)
        self.assertTrue(trie.autoComplete("dvl") == None)
        self.assertTrue(trie.autoComplete("dvm") == None)
        self.assertTrue(trie.autoComplete("dvn") == None)
        self.assertTrue(trie.autoComplete("dvo") == None)
        self.assertTrue(trie.autoComplete("dvp") == None)
        self.assertTrue(trie.autoComplete("dvq") == None)
        self.assertTrue(trie.autoComplete("dvr") == None)
        self.assertTrue(trie.autoComplete("dvs") == None)
        self.assertTrue(trie.autoComplete("dvt") == None)
        self.assertTrue(trie.autoComplete("dvu") == None)
        self.assertTrue(trie.autoComplete("dvv") == None)
        self.assertTrue(trie.autoComplete("dvw") == None)
        self.assertTrue(trie.autoComplete("dvx") == None)
        self.assertTrue(trie.autoComplete("dvy") == None)
        self.assertTrue(trie.autoComplete("dvz") == None)
        self.assertTrue(trie.autoComplete("dw") == None)
        self.assertTrue(trie.autoComplete("dwa") == None)
        self.assertTrue(trie.autoComplete("dwb") == None)
        self.assertTrue(trie.autoComplete("dwc") == None)
        self.assertTrue(trie.autoComplete("dwd") == None)
        self.assertTrue(trie.autoComplete("dwe") == None)
        self.assertTrue(trie.autoComplete("dwf") == None)
        self.assertTrue(trie.autoComplete("dwg") == None)
        self.assertTrue(trie.autoComplete("dwh") == None)
        self.assertTrue(trie.autoComplete("dwi") == None)
        self.assertTrue(trie.autoComplete("dwj") == None)
        self.assertTrue(trie.autoComplete("dwk") == None)
        self.assertTrue(trie.autoComplete("dwl") == None)
        self.assertTrue(trie.autoComplete("dwm") == None)
        self.assertTrue(trie.autoComplete("dwn") == None)
        self.assertTrue(trie.autoComplete("dwo") == None)
        self.assertTrue(trie.autoComplete("dwp") == None)
        self.assertTrue(trie.autoComplete("dwq") == None)
        self.assertTrue(trie.autoComplete("dwr") == None)
        self.assertTrue(trie.autoComplete("dws") == None)
        self.assertTrue(trie.autoComplete("dwt") == None)
        self.assertTrue(trie.autoComplete("dwu") == None)
        self.assertTrue(trie.autoComplete("dwv") == None)
        self.assertTrue(trie.autoComplete("dww") == None)
        self.assertTrue(trie.autoComplete("dwx") == None)
        self.assertTrue(trie.autoComplete("dwy") == None)
        self.assertTrue(trie.autoComplete("dwz") == None)
        self.assertTrue(trie.autoComplete("dx") == None)
        self.assertTrue(trie.autoComplete("dxa") == None)
        self.assertTrue(trie.autoComplete("dxb") == None)
        self.assertTrue(trie.autoComplete("dxc") == None)
        self.assertTrue(trie.autoComplete("dxd") == None)
        self.assertTrue(trie.autoComplete("dxe") == None)
        self.assertTrue(trie.autoComplete("dxf") == None)
        self.assertTrue(trie.autoComplete("dxg") == None)
        self.assertTrue(trie.autoComplete("dxh") == None)
        self.assertTrue(trie.autoComplete("dxi") == None)
        self.assertTrue(trie.autoComplete("dxj") == None)
        self.assertTrue(trie.autoComplete("dxk") == None)
        self.assertTrue(trie.autoComplete("dxl") == None)
        self.assertTrue(trie.autoComplete("dxm") == None)
        self.assertTrue(trie.autoComplete("dxn") == None)
        self.assertTrue(trie.autoComplete("dxo") == None)
        self.assertTrue(trie.autoComplete("dxp") == None)
        self.assertTrue(trie.autoComplete("dxq") == None)
        self.assertTrue(trie.autoComplete("dxr") == None)
        self.assertTrue(trie.autoComplete("dxs") == None)
        self.assertTrue(trie.autoComplete("dxt") == None)
        self.assertTrue(trie.autoComplete("dxu") == None)
        self.assertTrue(trie.autoComplete("dxv") == None)
        self.assertTrue(trie.autoComplete("dxw") == None)
        self.assertTrue(trie.autoComplete("dxx") == None)
        self.assertTrue(trie.autoComplete("dxy") == None)
        self.assertTrue(trie.autoComplete("dxz") == None)
        self.assertTrue(trie.autoComplete("dy") == None)
        self.assertTrue(trie.autoComplete("dya") == None)
        self.assertTrue(trie.autoComplete("dyb") == None)
        self.assertTrue(trie.autoComplete("dyc") == None)
        self.assertTrue(trie.autoComplete("dyd") == None)
        self.assertTrue(trie.autoComplete("dye") == None)
        self.assertTrue(trie.autoComplete("dyf") == None)
        self.assertTrue(trie.autoComplete("dyg") == None)
        self.assertTrue(trie.autoComplete("dyh") == None)
        self.assertTrue(trie.autoComplete("dyi") == None)
        self.assertTrue(trie.autoComplete("dyj") == None)
        self.assertTrue(trie.autoComplete("dyk") == None)
        self.assertTrue(trie.autoComplete("dyl") == None)
        self.assertTrue(trie.autoComplete("dym") == None)
        self.assertTrue(trie.autoComplete("dyn") == None)
        self.assertTrue(trie.autoComplete("dyo") == None)
        self.assertTrue(trie.autoComplete("dyp") == None)
        self.assertTrue(trie.autoComplete("dyq") == None)
        self.assertTrue(trie.autoComplete("dyr") == None)
        self.assertTrue(trie.autoComplete("dys") == None)
        self.assertTrue(trie.autoComplete("dyt") == None)
        self.assertTrue(trie.autoComplete("dyu") == None)
        self.assertTrue(trie.autoComplete("dyv") == None)
        self.assertTrue(trie.autoComplete("dyw") == None)
        self.assertTrue(trie.autoComplete("dyx") == None)
        self.assertTrue(trie.autoComplete("dyy") == None)
        self.assertTrue(trie.autoComplete("dyz") == None)
        self.assertTrue(trie.autoComplete("dz") == None)
        self.assertTrue(trie.autoComplete("dza") == None)
        self.assertTrue(trie.autoComplete("dzb") == None)
        self.assertTrue(trie.autoComplete("dzc") == None)
        self.assertTrue(trie.autoComplete("dzd") == None)
        self.assertTrue(trie.autoComplete("dze") == None)
        self.assertTrue(trie.autoComplete("dzf") == None)
        self.assertTrue(trie.autoComplete("dzg") == None)
        self.assertTrue(trie.autoComplete("dzh") == None)
        self.assertTrue(trie.autoComplete("dzi") == None)
        self.assertTrue(trie.autoComplete("dzj") == None)
        self.assertTrue(trie.autoComplete("dzk") == None)
        self.assertTrue(trie.autoComplete("dzl") == None)
        self.assertTrue(trie.autoComplete("dzm") == None)
        self.assertTrue(trie.autoComplete("dzn") == None)
        self.assertTrue(trie.autoComplete("dzo") == None)
        self.assertTrue(trie.autoComplete("dzp") == None)
        self.assertTrue(trie.autoComplete("dzq") == None)
        self.assertTrue(trie.autoComplete("dzr") == None)
        self.assertTrue(trie.autoComplete("dzs") == None)
        self.assertTrue(trie.autoComplete("dzt") == None)
        self.assertTrue(trie.autoComplete("dzu") == None)
        self.assertTrue(trie.autoComplete("dzv") == None)
        self.assertTrue(trie.autoComplete("dzw") == None)
        self.assertTrue(trie.autoComplete("dzx") == None)
        self.assertTrue(trie.autoComplete("dzy") == None)
        self.assertTrue(trie.autoComplete("dzz") == None)
        self.assertTrue(trie.autoComplete("e") == "each")
        self.assertTrue(trie.autoComplete("ea") == "each")
        self.assertTrue(trie.autoComplete("eaa") == None)
        self.assertTrue(trie.autoComplete("eab") == None)
        self.assertTrue(trie.autoComplete("eac") == "each")
        self.assertTrue(trie.autoComplete("each") == "each")
        self.assertTrue(trie.autoComplete("ead") == None)
        self.assertTrue(trie.autoComplete("eae") == None)
        self.assertTrue(trie.autoComplete("eaf") == None)
        self.assertTrue(trie.autoComplete("eag") == None)
        self.assertTrue(trie.autoComplete("eah") == None)
        self.assertTrue(trie.autoComplete("eai") == None)
        self.assertTrue(trie.autoComplete("eaj") == None)
        self.assertTrue(trie.autoComplete("eak") == None)
        self.assertTrue(trie.autoComplete("eal") == None)
        self.assertTrue(trie.autoComplete("eam") == None)
        self.assertTrue(trie.autoComplete("ean") == None)
        self.assertTrue(trie.autoComplete("eao") == None)
        self.assertTrue(trie.autoComplete("eap") == None)
        self.assertTrue(trie.autoComplete("eaq") == None)
        self.assertTrue(trie.autoComplete("ear") == None)
        self.assertTrue(trie.autoComplete("eas") == None)
        self.assertTrue(trie.autoComplete("eat") == None)
        self.assertTrue(trie.autoComplete("eau") == None)
        self.assertTrue(trie.autoComplete("eav") == None)
        self.assertTrue(trie.autoComplete("eaw") == None)
        self.assertTrue(trie.autoComplete("eax") == None)
        self.assertTrue(trie.autoComplete("eay") == None)
        self.assertTrue(trie.autoComplete("eaz") == None)
        self.assertTrue(trie.autoComplete("eb") == None)
        self.assertTrue(trie.autoComplete("eba") == None)
        self.assertTrue(trie.autoComplete("ebb") == None)
        self.assertTrue(trie.autoComplete("ebc") == None)
        self.assertTrue(trie.autoComplete("ebd") == None)
        self.assertTrue(trie.autoComplete("ebe") == None)
        self.assertTrue(trie.autoComplete("ebf") == None)
        self.assertTrue(trie.autoComplete("ebg") == None)
        self.assertTrue(trie.autoComplete("ebh") == None)
        self.assertTrue(trie.autoComplete("ebi") == None)
        self.assertTrue(trie.autoComplete("ebj") == None)
        self.assertTrue(trie.autoComplete("ebk") == None)
        self.assertTrue(trie.autoComplete("ebl") == None)
        self.assertTrue(trie.autoComplete("ebm") == None)
        self.assertTrue(trie.autoComplete("ebn") == None)
        self.assertTrue(trie.autoComplete("ebo") == None)
        self.assertTrue(trie.autoComplete("ebp") == None)
        self.assertTrue(trie.autoComplete("ebq") == None)
        self.assertTrue(trie.autoComplete("ebr") == None)
        self.assertTrue(trie.autoComplete("ebs") == None)
        self.assertTrue(trie.autoComplete("ebt") == None)
        self.assertTrue(trie.autoComplete("ebu") == None)
        self.assertTrue(trie.autoComplete("ebv") == None)
        self.assertTrue(trie.autoComplete("ebw") == None)
        self.assertTrue(trie.autoComplete("ebx") == None)
        self.assertTrue(trie.autoComplete("eby") == None)
        self.assertTrue(trie.autoComplete("ebz") == None)
        self.assertTrue(trie.autoComplete("ec") == None)
        self.assertTrue(trie.autoComplete("eca") == None)
        self.assertTrue(trie.autoComplete("ecb") == None)
        self.assertTrue(trie.autoComplete("ecc") == None)
        self.assertTrue(trie.autoComplete("ecd") == None)
        self.assertTrue(trie.autoComplete("ece") == None)
        self.assertTrue(trie.autoComplete("ecf") == None)
        self.assertTrue(trie.autoComplete("ecg") == None)
        self.assertTrue(trie.autoComplete("ech") == None)
        self.assertTrue(trie.autoComplete("eci") == None)
        self.assertTrue(trie.autoComplete("ecj") == None)
        self.assertTrue(trie.autoComplete("eck") == None)
        self.assertTrue(trie.autoComplete("ecl") == None)
        self.assertTrue(trie.autoComplete("ecm") == None)
        self.assertTrue(trie.autoComplete("ecn") == None)
        self.assertTrue(trie.autoComplete("eco") == None)
        self.assertTrue(trie.autoComplete("ecp") == None)
        self.assertTrue(trie.autoComplete("ecq") == None)
        self.assertTrue(trie.autoComplete("ecr") == None)
        self.assertTrue(trie.autoComplete("ecs") == None)
        self.assertTrue(trie.autoComplete("ect") == None)
        self.assertTrue(trie.autoComplete("ecu") == None)
        self.assertTrue(trie.autoComplete("ecv") == None)
        self.assertTrue(trie.autoComplete("ecw") == None)
        self.assertTrue(trie.autoComplete("ecx") == None)
        self.assertTrue(trie.autoComplete("ecy") == None)
        self.assertTrue(trie.autoComplete("ecz") == None)
        self.assertTrue(trie.autoComplete("ed") == None)
        self.assertTrue(trie.autoComplete("eda") == None)
        self.assertTrue(trie.autoComplete("edb") == None)
        self.assertTrue(trie.autoComplete("edc") == None)
        self.assertTrue(trie.autoComplete("edd") == None)
        self.assertTrue(trie.autoComplete("ede") == None)
        self.assertTrue(trie.autoComplete("edf") == None)
        self.assertTrue(trie.autoComplete("edg") == None)
        self.assertTrue(trie.autoComplete("edh") == None)
        self.assertTrue(trie.autoComplete("edi") == None)
        self.assertTrue(trie.autoComplete("edj") == None)
        self.assertTrue(trie.autoComplete("edk") == None)
        self.assertTrue(trie.autoComplete("edl") == None)
        self.assertTrue(trie.autoComplete("edm") == None)
        self.assertTrue(trie.autoComplete("edn") == None)
        self.assertTrue(trie.autoComplete("edo") == None)
        self.assertTrue(trie.autoComplete("edp") == None)
        self.assertTrue(trie.autoComplete("edq") == None)
        self.assertTrue(trie.autoComplete("edr") == None)
        self.assertTrue(trie.autoComplete("eds") == None)
        self.assertTrue(trie.autoComplete("edt") == None)
        self.assertTrue(trie.autoComplete("edu") == None)
        self.assertTrue(trie.autoComplete("edv") == None)
        self.assertTrue(trie.autoComplete("edw") == None)
        self.assertTrue(trie.autoComplete("edx") == None)
        self.assertTrue(trie.autoComplete("edy") == None)
        self.assertTrue(trie.autoComplete("edz") == None)
        self.assertTrue(trie.autoComplete("ee") == None)
        self.assertTrue(trie.autoComplete("eea") == None)
        self.assertTrue(trie.autoComplete("eeb") == None)
        self.assertTrue(trie.autoComplete("eec") == None)
        self.assertTrue(trie.autoComplete("eed") == None)
        self.assertTrue(trie.autoComplete("eee") == None)
        self.assertTrue(trie.autoComplete("eef") == None)
        self.assertTrue(trie.autoComplete("eeg") == None)
        self.assertTrue(trie.autoComplete("eeh") == None)
        self.assertTrue(trie.autoComplete("eei") == None)
        self.assertTrue(trie.autoComplete("eej") == None)
        self.assertTrue(trie.autoComplete("eek") == None)
        self.assertTrue(trie.autoComplete("eel") == None)
        self.assertTrue(trie.autoComplete("eem") == None)
        self.assertTrue(trie.autoComplete("een") == None)
        self.assertTrue(trie.autoComplete("eeo") == None)
        self.assertTrue(trie.autoComplete("eep") == None)
        self.assertTrue(trie.autoComplete("eeq") == None)
        self.assertTrue(trie.autoComplete("eer") == None)
        self.assertTrue(trie.autoComplete("ees") == None)
        self.assertTrue(trie.autoComplete("eet") == None)
        self.assertTrue(trie.autoComplete("eeu") == None)
        self.assertTrue(trie.autoComplete("eev") == None)
        self.assertTrue(trie.autoComplete("eew") == None)
        self.assertTrue(trie.autoComplete("eex") == None)
        self.assertTrue(trie.autoComplete("eey") == None)
        self.assertTrue(trie.autoComplete("eez") == None)
        self.assertTrue(trie.autoComplete("ef") == "effect")
        self.assertTrue(trie.autoComplete("efa") == None)
        self.assertTrue(trie.autoComplete("efb") == None)
        self.assertTrue(trie.autoComplete("efc") == None)
        self.assertTrue(trie.autoComplete("efd") == None)
        self.assertTrue(trie.autoComplete("efe") == None)
        self.assertTrue(trie.autoComplete("eff") == "effect")
        self.assertTrue(trie.autoComplete("effe") == "effect")
        self.assertTrue(trie.autoComplete("effec") == "effect")
        self.assertTrue(trie.autoComplete("effect") == "effect")
        self.assertTrue(trie.autoComplete("effects") == "effects")
        self.assertTrue(trie.autoComplete("efg") == None)
        self.assertTrue(trie.autoComplete("efh") == None)
        self.assertTrue(trie.autoComplete("efi") == None)
        self.assertTrue(trie.autoComplete("efj") == None)
        self.assertTrue(trie.autoComplete("efk") == None)
        self.assertTrue(trie.autoComplete("efl") == None)
        self.assertTrue(trie.autoComplete("efm") == None)
        self.assertTrue(trie.autoComplete("efn") == None)
        self.assertTrue(trie.autoComplete("efo") == None)
        self.assertTrue(trie.autoComplete("efp") == None)
        self.assertTrue(trie.autoComplete("efq") == None)
        self.assertTrue(trie.autoComplete("efr") == None)
        self.assertTrue(trie.autoComplete("efs") == None)
        self.assertTrue(trie.autoComplete("eft") == None)
        self.assertTrue(trie.autoComplete("efu") == None)
        self.assertTrue(trie.autoComplete("efv") == None)
        self.assertTrue(trie.autoComplete("efw") == None)
        self.assertTrue(trie.autoComplete("efx") == None)
        self.assertTrue(trie.autoComplete("efy") == None)
        self.assertTrue(trie.autoComplete("efz") == None)
        self.assertTrue(trie.autoComplete("eg") == None)
        self.assertTrue(trie.autoComplete("ega") == None)
        self.assertTrue(trie.autoComplete("egb") == None)
        self.assertTrue(trie.autoComplete("egc") == None)
        self.assertTrue(trie.autoComplete("egd") == None)
        self.assertTrue(trie.autoComplete("ege") == None)
        self.assertTrue(trie.autoComplete("egf") == None)
        self.assertTrue(trie.autoComplete("egg") == None)
        self.assertTrue(trie.autoComplete("egh") == None)
        self.assertTrue(trie.autoComplete("egi") == None)
        self.assertTrue(trie.autoComplete("egj") == None)
        self.assertTrue(trie.autoComplete("egk") == None)
        self.assertTrue(trie.autoComplete("egl") == None)
        self.assertTrue(trie.autoComplete("egm") == None)
        self.assertTrue(trie.autoComplete("egn") == None)
        self.assertTrue(trie.autoComplete("ego") == None)
        self.assertTrue(trie.autoComplete("egp") == None)
        self.assertTrue(trie.autoComplete("egq") == None)
        self.assertTrue(trie.autoComplete("egr") == None)
        self.assertTrue(trie.autoComplete("egs") == None)
        self.assertTrue(trie.autoComplete("egt") == None)
        self.assertTrue(trie.autoComplete("egu") == None)
        self.assertTrue(trie.autoComplete("egv") == None)
        self.assertTrue(trie.autoComplete("egw") == None)
        self.assertTrue(trie.autoComplete("egx") == None)
        self.assertTrue(trie.autoComplete("egy") == None)
        self.assertTrue(trie.autoComplete("egz") == None)
        self.assertTrue(trie.autoComplete("eh") == None)
        self.assertTrue(trie.autoComplete("eha") == None)
        self.assertTrue(trie.autoComplete("ehb") == None)
        self.assertTrue(trie.autoComplete("ehc") == None)
        self.assertTrue(trie.autoComplete("ehd") == None)
        self.assertTrue(trie.autoComplete("ehe") == None)
        self.assertTrue(trie.autoComplete("ehf") == None)
        self.assertTrue(trie.autoComplete("ehg") == None)
        self.assertTrue(trie.autoComplete("ehh") == None)
        self.assertTrue(trie.autoComplete("ehi") == None)
        self.assertTrue(trie.autoComplete("ehj") == None)
        self.assertTrue(trie.autoComplete("ehk") == None)
        self.assertTrue(trie.autoComplete("ehl") == None)
        self.assertTrue(trie.autoComplete("ehm") == None)
        self.assertTrue(trie.autoComplete("ehn") == None)
        self.assertTrue(trie.autoComplete("eho") == None)
        self.assertTrue(trie.autoComplete("ehp") == None)
        self.assertTrue(trie.autoComplete("ehq") == None)
        self.assertTrue(trie.autoComplete("ehr") == None)
        self.assertTrue(trie.autoComplete("ehs") == None)
        self.assertTrue(trie.autoComplete("eht") == None)
        self.assertTrue(trie.autoComplete("ehu") == None)
        self.assertTrue(trie.autoComplete("ehv") == None)
        self.assertTrue(trie.autoComplete("ehw") == None)
        self.assertTrue(trie.autoComplete("ehx") == None)
        self.assertTrue(trie.autoComplete("ehy") == None)
        self.assertTrue(trie.autoComplete("ehz") == None)
        self.assertTrue(trie.autoComplete("ei") == "eight")
        self.assertTrue(trie.autoComplete("eia") == None)
        self.assertTrue(trie.autoComplete("eib") == None)
        self.assertTrue(trie.autoComplete("eic") == None)
        self.assertTrue(trie.autoComplete("eid") == None)
        self.assertTrue(trie.autoComplete("eie") == None)
        self.assertTrue(trie.autoComplete("eif") == None)
        self.assertTrue(trie.autoComplete("eig") == "eight")
        self.assertTrue(trie.autoComplete("eigh") == "eight")
        self.assertTrue(trie.autoComplete("eight") == "eight")
        self.assertTrue(trie.autoComplete("eighte") == "eighteenth")
        self.assertTrue(trie.autoComplete("eightee") == "eighteenth")
        self.assertTrue(trie.autoComplete("eighteen") == "eighteenth")
        self.assertTrue(trie.autoComplete("eighteent") == "eighteenth")
        self.assertTrue(trie.autoComplete("eighteenth") == "eighteenth")
        self.assertTrue(trie.autoComplete("eighth") == "eighth")
        self.assertTrue(trie.autoComplete("eih") == None)
        self.assertTrue(trie.autoComplete("eii") == None)
        self.assertTrue(trie.autoComplete("eij") == None)
        self.assertTrue(trie.autoComplete("eik") == None)
        self.assertTrue(trie.autoComplete("eil") == None)
        self.assertTrue(trie.autoComplete("eim") == None)
        self.assertTrue(trie.autoComplete("ein") == None)
        self.assertTrue(trie.autoComplete("eio") == None)
        self.assertTrue(trie.autoComplete("eip") == None)
        self.assertTrue(trie.autoComplete("eiq") == None)
        self.assertTrue(trie.autoComplete("eir") == None)
        self.assertTrue(trie.autoComplete("eis") == None)
        self.assertTrue(trie.autoComplete("eit") == "either")
        self.assertTrue(trie.autoComplete("eith") == "either")
        self.assertTrue(trie.autoComplete("eithe") == "either")
        self.assertTrue(trie.autoComplete("either") == "either")
        self.assertTrue(trie.autoComplete("eiu") == None)
        self.assertTrue(trie.autoComplete("eiv") == None)
        self.assertTrue(trie.autoComplete("eiw") == None)
        self.assertTrue(trie.autoComplete("eix") == None)
        self.assertTrue(trie.autoComplete("eiy") == None)
        self.assertTrue(trie.autoComplete("eiz") == None)
        self.assertTrue(trie.autoComplete("ej") == None)
        self.assertTrue(trie.autoComplete("eja") == None)
        self.assertTrue(trie.autoComplete("ejb") == None)
        self.assertTrue(trie.autoComplete("ejc") == None)
        self.assertTrue(trie.autoComplete("ejd") == None)
        self.assertTrue(trie.autoComplete("eje") == None)
        self.assertTrue(trie.autoComplete("ejf") == None)
        self.assertTrue(trie.autoComplete("ejg") == None)
        self.assertTrue(trie.autoComplete("ejh") == None)
        self.assertTrue(trie.autoComplete("eji") == None)
        self.assertTrue(trie.autoComplete("ejj") == None)
        self.assertTrue(trie.autoComplete("ejk") == None)
        self.assertTrue(trie.autoComplete("ejl") == None)
        self.assertTrue(trie.autoComplete("ejm") == None)
        self.assertTrue(trie.autoComplete("ejn") == None)
        self.assertTrue(trie.autoComplete("ejo") == None)
        self.assertTrue(trie.autoComplete("ejp") == None)
        self.assertTrue(trie.autoComplete("ejq") == None)
        self.assertTrue(trie.autoComplete("ejr") == None)
        self.assertTrue(trie.autoComplete("ejs") == None)
        self.assertTrue(trie.autoComplete("ejt") == None)
        self.assertTrue(trie.autoComplete("eju") == None)
        self.assertTrue(trie.autoComplete("ejv") == None)
        self.assertTrue(trie.autoComplete("ejw") == None)
        self.assertTrue(trie.autoComplete("ejx") == None)
        self.assertTrue(trie.autoComplete("ejy") == None)
        self.assertTrue(trie.autoComplete("ejz") == None)
        self.assertTrue(trie.autoComplete("ek") == None)
        self.assertTrue(trie.autoComplete("eka") == None)
        self.assertTrue(trie.autoComplete("ekb") == None)
        self.assertTrue(trie.autoComplete("ekc") == None)
        self.assertTrue(trie.autoComplete("ekd") == None)
        self.assertTrue(trie.autoComplete("eke") == None)
        self.assertTrue(trie.autoComplete("ekf") == None)
        self.assertTrue(trie.autoComplete("ekg") == None)
        self.assertTrue(trie.autoComplete("ekh") == None)
        self.assertTrue(trie.autoComplete("eki") == None)
        self.assertTrue(trie.autoComplete("ekj") == None)
        self.assertTrue(trie.autoComplete("ekk") == None)
        self.assertTrue(trie.autoComplete("ekl") == None)
        self.assertTrue(trie.autoComplete("ekm") == None)
        self.assertTrue(trie.autoComplete("ekn") == None)
        self.assertTrue(trie.autoComplete("eko") == None)
        self.assertTrue(trie.autoComplete("ekp") == None)
        self.assertTrue(trie.autoComplete("ekq") == None)
        self.assertTrue(trie.autoComplete("ekr") == None)
        self.assertTrue(trie.autoComplete("eks") == None)
        self.assertTrue(trie.autoComplete("ekt") == None)
        self.assertTrue(trie.autoComplete("eku") == None)
        self.assertTrue(trie.autoComplete("ekv") == None)
        self.assertTrue(trie.autoComplete("ekw") == None)
        self.assertTrue(trie.autoComplete("ekx") == None)
        self.assertTrue(trie.autoComplete("eky") == None)
        self.assertTrue(trie.autoComplete("ekz") == None)
        self.assertTrue(trie.autoComplete("el") == "electors")
        self.assertTrue(trie.autoComplete("ela") == None)
        self.assertTrue(trie.autoComplete("elb") == None)
        self.assertTrue(trie.autoComplete("elc") == None)
        self.assertTrue(trie.autoComplete("eld") == None)
        self.assertTrue(trie.autoComplete("ele") == "electors")
        self.assertTrue(trie.autoComplete("elec") == "electors")
        self.assertTrue(trie.autoComplete("elect") == "electors")
        self.assertTrue(trie.autoComplete("electe") == "elected")
        self.assertTrue(trie.autoComplete("elected") == "elected")
        self.assertTrue(trie.autoComplete("electi") == "election")
        self.assertTrue(trie.autoComplete("electio") == "election")
        self.assertTrue(trie.autoComplete("election") == "election")
        self.assertTrue(trie.autoComplete("elections") == "elections")
        self.assertTrue(trie.autoComplete("electo") == "electors")
        self.assertTrue(trie.autoComplete("elector") == "electors")
        self.assertTrue(trie.autoComplete("electors") == "electors")
        self.assertTrue(trie.autoComplete("elev") == "eleventh")
        self.assertTrue(trie.autoComplete("eleve") == "eleventh")
        self.assertTrue(trie.autoComplete("eleven") == "eleventh")
        self.assertTrue(trie.autoComplete("elevent") == "eleventh")
        self.assertTrue(trie.autoComplete("eleventh") == "eleventh")
        self.assertTrue(trie.autoComplete("elf") == None)
        self.assertTrue(trie.autoComplete("elg") == None)
        self.assertTrue(trie.autoComplete("elh") == None)
        self.assertTrue(trie.autoComplete("eli") == "eligible")
        self.assertTrue(trie.autoComplete("elig") == "eligible")
        self.assertTrue(trie.autoComplete("eligi") == "eligible")
        self.assertTrue(trie.autoComplete("eligib") == "eligible")
        self.assertTrue(trie.autoComplete("eligibl") == "eligible")
        self.assertTrue(trie.autoComplete("eligible") == "eligible")
        self.assertTrue(trie.autoComplete("elj") == None)
        self.assertTrue(trie.autoComplete("elk") == None)
        self.assertTrue(trie.autoComplete("ell") == None)
        self.assertTrue(trie.autoComplete("elm") == None)
        self.assertTrue(trie.autoComplete("eln") == None)
        self.assertTrue(trie.autoComplete("elo") == None)
        self.assertTrue(trie.autoComplete("elp") == None)
        self.assertTrue(trie.autoComplete("elq") == None)
        self.assertTrue(trie.autoComplete("elr") == None)
        self.assertTrue(trie.autoComplete("els") == None)
        self.assertTrue(trie.autoComplete("elt") == None)
        self.assertTrue(trie.autoComplete("elu") == None)
        self.assertTrue(trie.autoComplete("elv") == None)
        self.assertTrue(trie.autoComplete("elw") == None)
        self.assertTrue(trie.autoComplete("elx") == None)
        self.assertTrue(trie.autoComplete("ely") == None)
        self.assertTrue(trie.autoComplete("elz") == None)
        self.assertTrue(trie.autoComplete("em") == "emolument")
        self.assertTrue(trie.autoComplete("ema") == "emancipation")
        self.assertTrue(trie.autoComplete("eman") == "emancipation")
        self.assertTrue(trie.autoComplete("emanc") == "emancipation")
        self.assertTrue(trie.autoComplete("emanci") == "emancipation")
        self.assertTrue(trie.autoComplete("emancip") == "emancipation")
        self.assertTrue(trie.autoComplete("emancipa") == "emancipation")
        self.assertTrue(trie.autoComplete("emancipat") == "emancipation")
        self.assertTrue(trie.autoComplete("emancipati") == "emancipation")
        self.assertTrue(trie.autoComplete("emancipatio") == "emancipation")
        self.assertTrue(trie.autoComplete("emancipation") == "emancipation")
        self.assertTrue(trie.autoComplete("emb") == None)
        self.assertTrue(trie.autoComplete("emc") == None)
        self.assertTrue(trie.autoComplete("emd") == None)
        self.assertTrue(trie.autoComplete("eme") == None)
        self.assertTrue(trie.autoComplete("emf") == None)
        self.assertTrue(trie.autoComplete("emg") == None)
        self.assertTrue(trie.autoComplete("emh") == None)
        self.assertTrue(trie.autoComplete("emi") == "emit")
        self.assertTrue(trie.autoComplete("emit") == "emit")
        self.assertTrue(trie.autoComplete("emj") == None)
        self.assertTrue(trie.autoComplete("emk") == None)
        self.assertTrue(trie.autoComplete("eml") == None)
        self.assertTrue(trie.autoComplete("emm") == None)
        self.assertTrue(trie.autoComplete("emn") == None)
        self.assertTrue(trie.autoComplete("emo") == "emolument")
        self.assertTrue(trie.autoComplete("emol") == "emolument")
        self.assertTrue(trie.autoComplete("emolu") == "emolument")
        self.assertTrue(trie.autoComplete("emolum") == "emolument")
        self.assertTrue(trie.autoComplete("emolume") == "emolument")
        self.assertTrue(trie.autoComplete("emolumen") == "emolument")
        self.assertTrue(trie.autoComplete("emolument") == "emolument")
        self.assertTrue(trie.autoComplete("emoluments") == "emoluments")
        self.assertTrue(trie.autoComplete("emp") == "employed")
        self.assertTrue(trie.autoComplete("empl") == "employed")
        self.assertTrue(trie.autoComplete("emplo") == "employed")
        self.assertTrue(trie.autoComplete("employ") == "employed")
        self.assertTrue(trie.autoComplete("employe") == "employed")
        self.assertTrue(trie.autoComplete("employed") == "employed")
        self.assertTrue(trie.autoComplete("empo") == "empower")
        self.assertTrue(trie.autoComplete("empow") == "empower")
        self.assertTrue(trie.autoComplete("empowe") == "empower")
        self.assertTrue(trie.autoComplete("empower") == "empower")
        self.assertTrue(trie.autoComplete("emq") == None)
        self.assertTrue(trie.autoComplete("emr") == None)
        self.assertTrue(trie.autoComplete("ems") == None)
        self.assertTrue(trie.autoComplete("emt") == None)
        self.assertTrue(trie.autoComplete("emu") == None)
        self.assertTrue(trie.autoComplete("emv") == None)
        self.assertTrue(trie.autoComplete("emw") == None)
        self.assertTrue(trie.autoComplete("emx") == None)
        self.assertTrue(trie.autoComplete("emy") == None)
        self.assertTrue(trie.autoComplete("emz") == None)
        self.assertTrue(trie.autoComplete("en") == "enforce")
        self.assertTrue(trie.autoComplete("ena") == None)
        self.assertTrue(trie.autoComplete("enb") == None)
        self.assertTrue(trie.autoComplete("enc") == "encreased")
        self.assertTrue(trie.autoComplete("encr") == "encreased")
        self.assertTrue(trie.autoComplete("encre") == "encreased")
        self.assertTrue(trie.autoComplete("encrea") == "encreased")
        self.assertTrue(trie.autoComplete("encreas") == "encreased")
        self.assertTrue(trie.autoComplete("encrease") == "encreased")
        self.assertTrue(trie.autoComplete("encreased") == "encreased")
        self.assertTrue(trie.autoComplete("end") == "end")
        self.assertTrue(trie.autoComplete("ende") == "ended")
        self.assertTrue(trie.autoComplete("ended") == "ended")
        self.assertTrue(trie.autoComplete("ene") == "enemies")
        self.assertTrue(trie.autoComplete("enem") == "enemies")
        self.assertTrue(trie.autoComplete("enemi") == "enemies")
        self.assertTrue(trie.autoComplete("enemie") == "enemies")
        self.assertTrue(trie.autoComplete("enemies") == "enemies")
        self.assertTrue(trie.autoComplete("enf") == "enforce")
        self.assertTrue(trie.autoComplete("enfo") == "enforce")
        self.assertTrue(trie.autoComplete("enfor") == "enforce")
        self.assertTrue(trie.autoComplete("enforc") == "enforce")
        self.assertTrue(trie.autoComplete("enforce") == "enforce")
        self.assertTrue(trie.autoComplete("eng") == "engage")
        self.assertTrue(trie.autoComplete("enga") == "engage")
        self.assertTrue(trie.autoComplete("engag") == "engage")
        self.assertTrue(trie.autoComplete("engage") == "engage")
        self.assertTrue(trie.autoComplete("engaged") == "engaged")
        self.assertTrue(trie.autoComplete("engagem") == "engagements")
        self.assertTrue(trie.autoComplete("engageme") == "engagements")
        self.assertTrue(trie.autoComplete("engagemen") == "engagements")
        self.assertTrue(trie.autoComplete("engagement") == "engagements")
        self.assertTrue(trie.autoComplete("engagements") == "engagements")
        self.assertTrue(trie.autoComplete("enh") == None)
        self.assertTrue(trie.autoComplete("eni") == None)
        self.assertTrue(trie.autoComplete("enj") == "enjoy")
        self.assertTrue(trie.autoComplete("enjo") == "enjoy")
        self.assertTrue(trie.autoComplete("enjoy") == "enjoy")
        self.assertTrue(trie.autoComplete("enk") == None)
        self.assertTrue(trie.autoComplete("enl") == None)
        self.assertTrue(trie.autoComplete("enm") == None)
        self.assertTrue(trie.autoComplete("enn") == None)
        self.assertTrue(trie.autoComplete("eno") == None)
        self.assertTrue(trie.autoComplete("enp") == None)
        self.assertTrue(trie.autoComplete("enq") == None)
        self.assertTrue(trie.autoComplete("enr") == None)
        self.assertTrue(trie.autoComplete("ens") == None)
        self.assertTrue(trie.autoComplete("ent") == "enter")
        self.assertTrue(trie.autoComplete("ente") == "enter")
        self.assertTrue(trie.autoComplete("enter") == "enter")
        self.assertTrue(trie.autoComplete("entere") == "entered")
        self.assertTrue(trie.autoComplete("entered") == "entered")
        self.assertTrue(trie.autoComplete("enti") == "entitled")
        self.assertTrue(trie.autoComplete("entit") == "entitled")
        self.assertTrue(trie.autoComplete("entitl") == "entitled")
        self.assertTrue(trie.autoComplete("entitle") == "entitled")
        self.assertTrue(trie.autoComplete("entitled") == "entitled")
        self.assertTrue(trie.autoComplete("enu") == "enumeration")
        self.assertTrue(trie.autoComplete("enum") == "enumeration")
        self.assertTrue(trie.autoComplete("enume") == "enumeration")
        self.assertTrue(trie.autoComplete("enumer") == "enumeration")
        self.assertTrue(trie.autoComplete("enumera") == "enumeration")
        self.assertTrue(trie.autoComplete("enumerat") == "enumeration")
        self.assertTrue(trie.autoComplete("enumerati") == "enumeration")
        self.assertTrue(trie.autoComplete("enumeratio") == "enumeration")
        self.assertTrue(trie.autoComplete("enumeration") == "enumeration")
        self.assertTrue(trie.autoComplete("env") == None)
        self.assertTrue(trie.autoComplete("enw") == None)
        self.assertTrue(trie.autoComplete("enx") == None)
        self.assertTrue(trie.autoComplete("eny") == None)
        self.assertTrue(trie.autoComplete("enz") == None)
        self.assertTrue(trie.autoComplete("eo") == None)
        self.assertTrue(trie.autoComplete("eoa") == None)
        self.assertTrue(trie.autoComplete("eob") == None)
        self.assertTrue(trie.autoComplete("eoc") == None)
        self.assertTrue(trie.autoComplete("eod") == None)
        self.assertTrue(trie.autoComplete("eoe") == None)
        self.assertTrue(trie.autoComplete("eof") == None)
        self.assertTrue(trie.autoComplete("eog") == None)
        self.assertTrue(trie.autoComplete("eoh") == None)
        self.assertTrue(trie.autoComplete("eoi") == None)
        self.assertTrue(trie.autoComplete("eoj") == None)
        self.assertTrue(trie.autoComplete("eok") == None)
        self.assertTrue(trie.autoComplete("eol") == None)
        self.assertTrue(trie.autoComplete("eom") == None)
        self.assertTrue(trie.autoComplete("eon") == None)
        self.assertTrue(trie.autoComplete("eoo") == None)
        self.assertTrue(trie.autoComplete("eop") == None)
        self.assertTrue(trie.autoComplete("eoq") == None)
        self.assertTrue(trie.autoComplete("eor") == None)
        self.assertTrue(trie.autoComplete("eos") == None)
        self.assertTrue(trie.autoComplete("eot") == None)
        self.assertTrue(trie.autoComplete("eou") == None)
        self.assertTrue(trie.autoComplete("eov") == None)
        self.assertTrue(trie.autoComplete("eow") == None)
        self.assertTrue(trie.autoComplete("eox") == None)
        self.assertTrue(trie.autoComplete("eoy") == None)
        self.assertTrue(trie.autoComplete("eoz") == None)
        self.assertTrue(trie.autoComplete("ep") == None)
        self.assertTrue(trie.autoComplete("epa") == None)
        self.assertTrue(trie.autoComplete("epb") == None)
        self.assertTrue(trie.autoComplete("epc") == None)
        self.assertTrue(trie.autoComplete("epd") == None)
        self.assertTrue(trie.autoComplete("epe") == None)
        self.assertTrue(trie.autoComplete("epf") == None)
        self.assertTrue(trie.autoComplete("epg") == None)
        self.assertTrue(trie.autoComplete("eph") == None)
        self.assertTrue(trie.autoComplete("epi") == None)
        self.assertTrue(trie.autoComplete("epj") == None)
        self.assertTrue(trie.autoComplete("epk") == None)
        self.assertTrue(trie.autoComplete("epl") == None)
        self.assertTrue(trie.autoComplete("epm") == None)
        self.assertTrue(trie.autoComplete("epn") == None)
        self.assertTrue(trie.autoComplete("epo") == None)
        self.assertTrue(trie.autoComplete("epp") == None)
        self.assertTrue(trie.autoComplete("epq") == None)
        self.assertTrue(trie.autoComplete("epr") == None)
        self.assertTrue(trie.autoComplete("eps") == None)
        self.assertTrue(trie.autoComplete("ept") == None)
        self.assertTrue(trie.autoComplete("epu") == None)
        self.assertTrue(trie.autoComplete("epv") == None)
        self.assertTrue(trie.autoComplete("epw") == None)
        self.assertTrue(trie.autoComplete("epx") == None)
        self.assertTrue(trie.autoComplete("epy") == None)
        self.assertTrue(trie.autoComplete("epz") == None)
        self.assertTrue(trie.autoComplete("eq") == "equal")
        self.assertTrue(trie.autoComplete("eqa") == None)
        self.assertTrue(trie.autoComplete("eqb") == None)
        self.assertTrue(trie.autoComplete("eqc") == None)
        self.assertTrue(trie.autoComplete("eqd") == None)
        self.assertTrue(trie.autoComplete("eqe") == None)
        self.assertTrue(trie.autoComplete("eqf") == None)
        self.assertTrue(trie.autoComplete("eqg") == None)
        self.assertTrue(trie.autoComplete("eqh") == None)
        self.assertTrue(trie.autoComplete("eqi") == None)
        self.assertTrue(trie.autoComplete("eqj") == None)
        self.assertTrue(trie.autoComplete("eqk") == None)
        self.assertTrue(trie.autoComplete("eql") == None)
        self.assertTrue(trie.autoComplete("eqm") == None)
        self.assertTrue(trie.autoComplete("eqn") == None)
        self.assertTrue(trie.autoComplete("eqo") == None)
        self.assertTrue(trie.autoComplete("eqp") == None)
        self.assertTrue(trie.autoComplete("eqq") == None)
        self.assertTrue(trie.autoComplete("eqr") == None)
        self.assertTrue(trie.autoComplete("eqs") == None)
        self.assertTrue(trie.autoComplete("eqt") == None)
        self.assertTrue(trie.autoComplete("equ") == "equal")
        self.assertTrue(trie.autoComplete("equa") == "equal")
        self.assertTrue(trie.autoComplete("equal") == "equal")
        self.assertTrue(trie.autoComplete("equall") == "equally")
        self.assertTrue(trie.autoComplete("equally") == "equally")
        self.assertTrue(trie.autoComplete("equi") == "equity")
        self.assertTrue(trie.autoComplete("equit") == "equity")
        self.assertTrue(trie.autoComplete("equity") == "equity")
        self.assertTrue(trie.autoComplete("eqv") == None)
        self.assertTrue(trie.autoComplete("eqw") == None)
        self.assertTrue(trie.autoComplete("eqx") == None)
        self.assertTrue(trie.autoComplete("eqy") == None)
        self.assertTrue(trie.autoComplete("eqz") == None)
        self.assertTrue(trie.autoComplete("er") == "erected")
        self.assertTrue(trie.autoComplete("era") == None)
        self.assertTrue(trie.autoComplete("erb") == None)
        self.assertTrue(trie.autoComplete("erc") == None)
        self.assertTrue(trie.autoComplete("erd") == None)
        self.assertTrue(trie.autoComplete("ere") == "erected")
        self.assertTrue(trie.autoComplete("erec") == "erected")
        self.assertTrue(trie.autoComplete("erect") == "erected")
        self.assertTrue(trie.autoComplete("erecte") == "erected")
        self.assertTrue(trie.autoComplete("erected") == "erected")
        self.assertTrue(trie.autoComplete("erecti") == "erection")
        self.assertTrue(trie.autoComplete("erectio") == "erection")
        self.assertTrue(trie.autoComplete("erection") == "erection")
        self.assertTrue(trie.autoComplete("erf") == None)
        self.assertTrue(trie.autoComplete("erg") == None)
        self.assertTrue(trie.autoComplete("erh") == None)
        self.assertTrue(trie.autoComplete("eri") == None)
        self.assertTrue(trie.autoComplete("erj") == None)
        self.assertTrue(trie.autoComplete("erk") == None)
        self.assertTrue(trie.autoComplete("erl") == None)
        self.assertTrue(trie.autoComplete("erm") == None)
        self.assertTrue(trie.autoComplete("ern") == None)
        self.assertTrue(trie.autoComplete("ero") == None)
        self.assertTrue(trie.autoComplete("erp") == None)
        self.assertTrue(trie.autoComplete("erq") == None)
        self.assertTrue(trie.autoComplete("err") == None)
        self.assertTrue(trie.autoComplete("ers") == None)
        self.assertTrue(trie.autoComplete("ert") == None)
        self.assertTrue(trie.autoComplete("eru") == None)
        self.assertTrue(trie.autoComplete("erv") == None)
        self.assertTrue(trie.autoComplete("erw") == None)
        self.assertTrue(trie.autoComplete("erx") == None)
        self.assertTrue(trie.autoComplete("ery") == None)
        self.assertTrue(trie.autoComplete("erz") == None)
        self.assertTrue(trie.autoComplete("es") == "establish")
        self.assertTrue(trie.autoComplete("esa") == None)
        self.assertTrue(trie.autoComplete("esb") == None)
        self.assertTrue(trie.autoComplete("esc") == "escaping")
        self.assertTrue(trie.autoComplete("esca") == "escaping")
        self.assertTrue(trie.autoComplete("escap") == "escaping")
        self.assertTrue(trie.autoComplete("escapi") == "escaping")
        self.assertTrue(trie.autoComplete("escapin") == "escaping")
        self.assertTrue(trie.autoComplete("escaping") == "escaping")
        self.assertTrue(trie.autoComplete("esd") == None)
        self.assertTrue(trie.autoComplete("ese") == None)
        self.assertTrue(trie.autoComplete("esf") == None)
        self.assertTrue(trie.autoComplete("esg") == None)
        self.assertTrue(trie.autoComplete("esh") == None)
        self.assertTrue(trie.autoComplete("esi") == None)
        self.assertTrue(trie.autoComplete("esj") == None)
        self.assertTrue(trie.autoComplete("esk") == None)
        self.assertTrue(trie.autoComplete("esl") == None)
        self.assertTrue(trie.autoComplete("esm") == None)
        self.assertTrue(trie.autoComplete("esn") == None)
        self.assertTrue(trie.autoComplete("eso") == None)
        self.assertTrue(trie.autoComplete("esp") == None)
        self.assertTrue(trie.autoComplete("esq") == None)
        self.assertTrue(trie.autoComplete("esr") == None)
        self.assertTrue(trie.autoComplete("ess") == None)
        self.assertTrue(trie.autoComplete("est") == "establish")
        self.assertTrue(trie.autoComplete("esta") == "establish")
        self.assertTrue(trie.autoComplete("estab") == "establish")
        self.assertTrue(trie.autoComplete("establ") == "establish")
        self.assertTrue(trie.autoComplete("establi") == "establish")
        self.assertTrue(trie.autoComplete("establis") == "establish")
        self.assertTrue(trie.autoComplete("establish") == "establish")
        self.assertTrue(trie.autoComplete("establishe") == "established")
        self.assertTrue(trie.autoComplete("established") == "established")
        self.assertTrue(trie.autoComplete("establishm") == "establishment")
        self.assertTrue(trie.autoComplete("establishme") == "establishment")
        self.assertTrue(trie.autoComplete("establishmen") == "establishment")
        self.assertTrue(trie.autoComplete("establishment") == "establishment")
        self.assertTrue(trie.autoComplete("esu") == None)
        self.assertTrue(trie.autoComplete("esv") == None)
        self.assertTrue(trie.autoComplete("esw") == None)
        self.assertTrue(trie.autoComplete("esx") == None)
        self.assertTrue(trie.autoComplete("esy") == None)
        self.assertTrue(trie.autoComplete("esz") == None)
        self.assertTrue(trie.autoComplete("et") == None)
        self.assertTrue(trie.autoComplete("eta") == None)
        self.assertTrue(trie.autoComplete("etb") == None)
        self.assertTrue(trie.autoComplete("etc") == None)
        self.assertTrue(trie.autoComplete("etd") == None)
        self.assertTrue(trie.autoComplete("ete") == None)
        self.assertTrue(trie.autoComplete("etf") == None)
        self.assertTrue(trie.autoComplete("etg") == None)
        self.assertTrue(trie.autoComplete("eth") == None)
        self.assertTrue(trie.autoComplete("eti") == None)
        self.assertTrue(trie.autoComplete("etj") == None)
        self.assertTrue(trie.autoComplete("etk") == None)
        self.assertTrue(trie.autoComplete("etl") == None)
        self.assertTrue(trie.autoComplete("etm") == None)
        self.assertTrue(trie.autoComplete("etn") == None)
        self.assertTrue(trie.autoComplete("eto") == None)
        self.assertTrue(trie.autoComplete("etp") == None)
        self.assertTrue(trie.autoComplete("etq") == None)
        self.assertTrue(trie.autoComplete("etr") == None)
        self.assertTrue(trie.autoComplete("ets") == None)
        self.assertTrue(trie.autoComplete("ett") == None)
        self.assertTrue(trie.autoComplete("etu") == None)
        self.assertTrue(trie.autoComplete("etv") == None)
        self.assertTrue(trie.autoComplete("etw") == None)
        self.assertTrue(trie.autoComplete("etx") == None)
        self.assertTrue(trie.autoComplete("ety") == None)
        self.assertTrue(trie.autoComplete("etz") == None)
        self.assertTrue(trie.autoComplete("eu") == None)
        self.assertTrue(trie.autoComplete("eua") == None)
        self.assertTrue(trie.autoComplete("eub") == None)
        self.assertTrue(trie.autoComplete("euc") == None)
        self.assertTrue(trie.autoComplete("eud") == None)
        self.assertTrue(trie.autoComplete("eue") == None)
        self.assertTrue(trie.autoComplete("euf") == None)
        self.assertTrue(trie.autoComplete("eug") == None)
        self.assertTrue(trie.autoComplete("euh") == None)
        self.assertTrue(trie.autoComplete("eui") == None)
        self.assertTrue(trie.autoComplete("euj") == None)
        self.assertTrue(trie.autoComplete("euk") == None)
        self.assertTrue(trie.autoComplete("eul") == None)
        self.assertTrue(trie.autoComplete("eum") == None)
        self.assertTrue(trie.autoComplete("eun") == None)
        self.assertTrue(trie.autoComplete("euo") == None)
        self.assertTrue(trie.autoComplete("eup") == None)
        self.assertTrue(trie.autoComplete("euq") == None)
        self.assertTrue(trie.autoComplete("eur") == None)
        self.assertTrue(trie.autoComplete("eus") == None)
        self.assertTrue(trie.autoComplete("eut") == None)
        self.assertTrue(trie.autoComplete("euu") == None)
        self.assertTrue(trie.autoComplete("euv") == None)
        self.assertTrue(trie.autoComplete("euw") == None)
        self.assertTrue(trie.autoComplete("eux") == None)
        self.assertTrue(trie.autoComplete("euy") == None)
        self.assertTrue(trie.autoComplete("euz") == None)
        self.assertTrue(trie.autoComplete("ev") == "every")
        self.assertTrue(trie.autoComplete("eva") == None)
        self.assertTrue(trie.autoComplete("evb") == None)
        self.assertTrue(trie.autoComplete("evc") == None)
        self.assertTrue(trie.autoComplete("evd") == None)
        self.assertTrue(trie.autoComplete("eve") == "every")
        self.assertTrue(trie.autoComplete("even") == "event")
        self.assertTrue(trie.autoComplete("event") == "event")
        self.assertTrue(trie.autoComplete("ever") == "every")
        self.assertTrue(trie.autoComplete("every") == "every")
        self.assertTrue(trie.autoComplete("evf") == None)
        self.assertTrue(trie.autoComplete("evg") == None)
        self.assertTrue(trie.autoComplete("evh") == None)
        self.assertTrue(trie.autoComplete("evi") == None)
        self.assertTrue(trie.autoComplete("evj") == None)
        self.assertTrue(trie.autoComplete("evk") == None)
        self.assertTrue(trie.autoComplete("evl") == None)
        self.assertTrue(trie.autoComplete("evm") == None)
        self.assertTrue(trie.autoComplete("evn") == None)
        self.assertTrue(trie.autoComplete("evo") == None)
        self.assertTrue(trie.autoComplete("evp") == None)
        self.assertTrue(trie.autoComplete("evq") == None)
        self.assertTrue(trie.autoComplete("evr") == None)
        self.assertTrue(trie.autoComplete("evs") == None)
        self.assertTrue(trie.autoComplete("evt") == None)
        self.assertTrue(trie.autoComplete("evu") == None)
        self.assertTrue(trie.autoComplete("evv") == None)
        self.assertTrue(trie.autoComplete("evw") == None)
        self.assertTrue(trie.autoComplete("evx") == None)
        self.assertTrue(trie.autoComplete("evy") == None)
        self.assertTrue(trie.autoComplete("evz") == None)
        self.assertTrue(trie.autoComplete("ew") == None)
        self.assertTrue(trie.autoComplete("ewa") == None)
        self.assertTrue(trie.autoComplete("ewb") == None)
        self.assertTrue(trie.autoComplete("ewc") == None)
        self.assertTrue(trie.autoComplete("ewd") == None)
        self.assertTrue(trie.autoComplete("ewe") == None)
        self.assertTrue(trie.autoComplete("ewf") == None)
        self.assertTrue(trie.autoComplete("ewg") == None)
        self.assertTrue(trie.autoComplete("ewh") == None)
        self.assertTrue(trie.autoComplete("ewi") == None)
        self.assertTrue(trie.autoComplete("ewj") == None)
        self.assertTrue(trie.autoComplete("ewk") == None)
        self.assertTrue(trie.autoComplete("ewl") == None)
        self.assertTrue(trie.autoComplete("ewm") == None)
        self.assertTrue(trie.autoComplete("ewn") == None)
        self.assertTrue(trie.autoComplete("ewo") == None)
        self.assertTrue(trie.autoComplete("ewp") == None)
        self.assertTrue(trie.autoComplete("ewq") == None)
        self.assertTrue(trie.autoComplete("ewr") == None)
        self.assertTrue(trie.autoComplete("ews") == None)
        self.assertTrue(trie.autoComplete("ewt") == None)
        self.assertTrue(trie.autoComplete("ewu") == None)
        self.assertTrue(trie.autoComplete("ewv") == None)
        self.assertTrue(trie.autoComplete("eww") == None)
        self.assertTrue(trie.autoComplete("ewx") == None)
        self.assertTrue(trie.autoComplete("ewy") == None)
        self.assertTrue(trie.autoComplete("ewz") == None)
        self.assertTrue(trie.autoComplete("ex") == "executive")
        self.assertTrue(trie.autoComplete("exa") == None)
        self.assertTrue(trie.autoComplete("exb") == None)
        self.assertTrue(trie.autoComplete("exc") == "except")
        self.assertTrue(trie.autoComplete("exce") == "except")
        self.assertTrue(trie.autoComplete("excee") == "exceeding")
        self.assertTrue(trie.autoComplete("exceed") == "exceeding")
        self.assertTrue(trie.autoComplete("exceedi") == "exceeding")
        self.assertTrue(trie.autoComplete("exceedin") == "exceeding")
        self.assertTrue(trie.autoComplete("exceeding") == "exceeding")
        self.assertTrue(trie.autoComplete("excep") == "except")
        self.assertTrue(trie.autoComplete("except") == "except")
        self.assertTrue(trie.autoComplete("excepte") == "excepted")
        self.assertTrue(trie.autoComplete("excepted") == "excepted")
        self.assertTrue(trie.autoComplete("excepti") == "excepting")
        self.assertTrue(trie.autoComplete("exceptin") == "excepting")
        self.assertTrue(trie.autoComplete("excepting") == "excepting")
        self.assertTrue(trie.autoComplete("exceptio") == "exceptions")
        self.assertTrue(trie.autoComplete("exception") == "exceptions")
        self.assertTrue(trie.autoComplete("exceptions") == "exceptions")
        self.assertTrue(trie.autoComplete("exces") == "excessive")
        self.assertTrue(trie.autoComplete("excess") == "excessive")
        self.assertTrue(trie.autoComplete("excessi") == "excessive")
        self.assertTrue(trie.autoComplete("excessiv") == "excessive")
        self.assertTrue(trie.autoComplete("excessive") == "excessive")
        self.assertTrue(trie.autoComplete("exci") == "excises")
        self.assertTrue(trie.autoComplete("excis") == "excises")
        self.assertTrue(trie.autoComplete("excise") == "excises")
        self.assertTrue(trie.autoComplete("excises") == "excises")
        self.assertTrue(trie.autoComplete("excl") == "excluding")
        self.assertTrue(trie.autoComplete("exclu") == "excluding")
        self.assertTrue(trie.autoComplete("exclud") == "excluding")
        self.assertTrue(trie.autoComplete("excludi") == "excluding")
        self.assertTrue(trie.autoComplete("excludin") == "excluding")
        self.assertTrue(trie.autoComplete("excluding") == "excluding")
        self.assertTrue(trie.autoComplete("exclus") == "exclusive")
        self.assertTrue(trie.autoComplete("exclusi") == "exclusive")
        self.assertTrue(trie.autoComplete("exclusiv") == "exclusive")
        self.assertTrue(trie.autoComplete("exclusive") == "exclusive")
        self.assertTrue(trie.autoComplete("exd") == None)
        self.assertTrue(trie.autoComplete("exe") == "executive")
        self.assertTrue(trie.autoComplete("exec") == "executive")
        self.assertTrue(trie.autoComplete("execu") == "executive")
        self.assertTrue(trie.autoComplete("execut") == "executive")
        self.assertTrue(trie.autoComplete("execute") == "execute")
        self.assertTrue(trie.autoComplete("executed") == "executed")
        self.assertTrue(trie.autoComplete("executi") == "executive")
        self.assertTrue(trie.autoComplete("executin") == "executing")
        self.assertTrue(trie.autoComplete("executing") == "executing")
        self.assertTrue(trie.autoComplete("executio") == "execution")
        self.assertTrue(trie.autoComplete("execution") == "execution")
        self.assertTrue(trie.autoComplete("executiv") == "executive")
        self.assertTrue(trie.autoComplete("executive") == "executive")
        self.assertTrue(trie.autoComplete("exer") == "exercise")
        self.assertTrue(trie.autoComplete("exerc") == "exercise")
        self.assertTrue(trie.autoComplete("exerci") == "exercise")
        self.assertTrue(trie.autoComplete("exercis") == "exercise")
        self.assertTrue(trie.autoComplete("exercise") == "exercise")
        self.assertTrue(trie.autoComplete("exf") == None)
        self.assertTrue(trie.autoComplete("exg") == None)
        self.assertTrue(trie.autoComplete("exh") == None)
        self.assertTrue(trie.autoComplete("exi") == "exist")
        self.assertTrue(trie.autoComplete("exis") == "exist")
        self.assertTrue(trie.autoComplete("exist") == "exist")
        self.assertTrue(trie.autoComplete("existi") == "existing")
        self.assertTrue(trie.autoComplete("existin") == "existing")
        self.assertTrue(trie.autoComplete("existing") == "existing")
        self.assertTrue(trie.autoComplete("exists") == "exists")
        self.assertTrue(trie.autoComplete("exj") == None)
        self.assertTrue(trie.autoComplete("exk") == None)
        self.assertTrue(trie.autoComplete("exl") == None)
        self.assertTrue(trie.autoComplete("exm") == None)
        self.assertTrue(trie.autoComplete("exn") == None)
        self.assertTrue(trie.autoComplete("exo") == None)
        self.assertTrue(trie.autoComplete("exp") == "expiration")
        self.assertTrue(trie.autoComplete("expe") == "expedient")
        self.assertTrue(trie.autoComplete("exped") == "expedient")
        self.assertTrue(trie.autoComplete("expedi") == "expedient")
        self.assertTrue(trie.autoComplete("expedie") == "expedient")
        self.assertTrue(trie.autoComplete("expedien") == "expedient")
        self.assertTrue(trie.autoComplete("expedient") == "expedient")
        self.assertTrue(trie.autoComplete("expel") == "expel")
        self.assertTrue(trie.autoComplete("expen") == "expenditures")
        self.assertTrue(trie.autoComplete("expend") == "expenditures")
        self.assertTrue(trie.autoComplete("expendi") == "expenditures")
        self.assertTrue(trie.autoComplete("expendit") == "expenditures")
        self.assertTrue(trie.autoComplete("expenditu") == "expenditures")
        self.assertTrue(trie.autoComplete("expenditur") == "expenditures")
        self.assertTrue(trie.autoComplete("expenditure") == "expenditures")
        self.assertTrue(trie.autoComplete("expenditures") == "expenditures")
        self.assertTrue(trie.autoComplete("expi") == "expiration")
        self.assertTrue(trie.autoComplete("expir") == "expiration")
        self.assertTrue(trie.autoComplete("expira") == "expiration")
        self.assertTrue(trie.autoComplete("expirat") == "expiration")
        self.assertTrue(trie.autoComplete("expirati") == "expiration")
        self.assertTrue(trie.autoComplete("expiratio") == "expiration")
        self.assertTrue(trie.autoComplete("expiration") == "expiration")
        self.assertTrue(trie.autoComplete("expire") == "expire")
        self.assertTrue(trie.autoComplete("expo") == "exports")
        self.assertTrue(trie.autoComplete("expor") == "exports")
        self.assertTrue(trie.autoComplete("export") == "exports")
        self.assertTrue(trie.autoComplete("exporta") == "exportation")
        self.assertTrue(trie.autoComplete("exportat") == "exportation")
        self.assertTrue(trie.autoComplete("exportati") == "exportation")
        self.assertTrue(trie.autoComplete("exportatio") == "exportation")
        self.assertTrue(trie.autoComplete("exportation") == "exportation")
        self.assertTrue(trie.autoComplete("exporte") == "exported")
        self.assertTrue(trie.autoComplete("exported") == "exported")
        self.assertTrue(trie.autoComplete("exports") == "exports")
        self.assertTrue(trie.autoComplete("exq") == None)
        self.assertTrue(trie.autoComplete("exr") == None)
        self.assertTrue(trie.autoComplete("exs") == None)
        self.assertTrue(trie.autoComplete("ext") == "extend")
        self.assertTrue(trie.autoComplete("exte") == "extend")
        self.assertTrue(trie.autoComplete("exten") == "extend")
        self.assertTrue(trie.autoComplete("extend") == "extend")
        self.assertTrue(trie.autoComplete("extr") == "extraordinary")
        self.assertTrue(trie.autoComplete("extra") == "extraordinary")
        self.assertTrue(trie.autoComplete("extrao") == "extraordinary")
        self.assertTrue(trie.autoComplete("extraor") == "extraordinary")
        self.assertTrue(trie.autoComplete("extraord") == "extraordinary")
        self.assertTrue(trie.autoComplete("extraordi") == "extraordinary")
        self.assertTrue(trie.autoComplete("extraordin") == "extraordinary")
        self.assertTrue(trie.autoComplete("extraordina") == "extraordinary")
        self.assertTrue(trie.autoComplete("extraordinar") == "extraordinary")
        self.assertTrue(trie.autoComplete("extraordinary") == "extraordinary")
        self.assertTrue(trie.autoComplete("exu") == None)
        self.assertTrue(trie.autoComplete("exv") == None)
        self.assertTrue(trie.autoComplete("exw") == None)
        self.assertTrue(trie.autoComplete("exx") == None)
        self.assertTrue(trie.autoComplete("exy") == None)
        self.assertTrue(trie.autoComplete("exz") == None)
        self.assertTrue(trie.autoComplete("ey") == None)
        self.assertTrue(trie.autoComplete("eya") == None)
        self.assertTrue(trie.autoComplete("eyb") == None)
        self.assertTrue(trie.autoComplete("eyc") == None)
        self.assertTrue(trie.autoComplete("eyd") == None)
        self.assertTrue(trie.autoComplete("eye") == None)
        self.assertTrue(trie.autoComplete("eyf") == None)
        self.assertTrue(trie.autoComplete("eyg") == None)
        self.assertTrue(trie.autoComplete("eyh") == None)
        self.assertTrue(trie.autoComplete("eyi") == None)
        self.assertTrue(trie.autoComplete("eyj") == None)
        self.assertTrue(trie.autoComplete("eyk") == None)
        self.assertTrue(trie.autoComplete("eyl") == None)
        self.assertTrue(trie.autoComplete("eym") == None)
        self.assertTrue(trie.autoComplete("eyn") == None)
        self.assertTrue(trie.autoComplete("eyo") == None)
        self.assertTrue(trie.autoComplete("eyp") == None)
        self.assertTrue(trie.autoComplete("eyq") == None)
        self.assertTrue(trie.autoComplete("eyr") == None)
        self.assertTrue(trie.autoComplete("eys") == None)
        self.assertTrue(trie.autoComplete("eyt") == None)
        self.assertTrue(trie.autoComplete("eyu") == None)
        self.assertTrue(trie.autoComplete("eyv") == None)
        self.assertTrue(trie.autoComplete("eyw") == None)
        self.assertTrue(trie.autoComplete("eyx") == None)
        self.assertTrue(trie.autoComplete("eyy") == None)
        self.assertTrue(trie.autoComplete("eyz") == None)
        self.assertTrue(trie.autoComplete("ez") == None)
        self.assertTrue(trie.autoComplete("eza") == None)
        self.assertTrue(trie.autoComplete("ezb") == None)
        self.assertTrue(trie.autoComplete("ezc") == None)
        self.assertTrue(trie.autoComplete("ezd") == None)
        self.assertTrue(trie.autoComplete("eze") == None)
        self.assertTrue(trie.autoComplete("ezf") == None)
        self.assertTrue(trie.autoComplete("ezg") == None)
        self.assertTrue(trie.autoComplete("ezh") == None)
        self.assertTrue(trie.autoComplete("ezi") == None)
        self.assertTrue(trie.autoComplete("ezj") == None)
        self.assertTrue(trie.autoComplete("ezk") == None)
        self.assertTrue(trie.autoComplete("ezl") == None)
        self.assertTrue(trie.autoComplete("ezm") == None)
        self.assertTrue(trie.autoComplete("ezn") == None)
        self.assertTrue(trie.autoComplete("ezo") == None)
        self.assertTrue(trie.autoComplete("ezp") == None)
        self.assertTrue(trie.autoComplete("ezq") == None)
        self.assertTrue(trie.autoComplete("ezr") == None)
        self.assertTrue(trie.autoComplete("ezs") == None)
        self.assertTrue(trie.autoComplete("ezt") == None)
        self.assertTrue(trie.autoComplete("ezu") == None)
        self.assertTrue(trie.autoComplete("ezv") == None)
        self.assertTrue(trie.autoComplete("ezw") == None)
        self.assertTrue(trie.autoComplete("ezx") == None)
        self.assertTrue(trie.autoComplete("ezy") == None)
        self.assertTrue(trie.autoComplete("ezz") == None)
        self.assertTrue(trie.autoComplete("f") == "for")
        self.assertTrue(trie.autoComplete("fa") == "fact")
        self.assertTrue(trie.autoComplete("faa") == None)
        self.assertTrue(trie.autoComplete("fab") == None)
        self.assertTrue(trie.autoComplete("fac") == "fact")
        self.assertTrue(trie.autoComplete("fact") == "fact")
        self.assertTrue(trie.autoComplete("facto") == "facto")
        self.assertTrue(trie.autoComplete("fad") == None)
        self.assertTrue(trie.autoComplete("fae") == None)
        self.assertTrue(trie.autoComplete("faf") == None)
        self.assertTrue(trie.autoComplete("fag") == None)
        self.assertTrue(trie.autoComplete("fah") == None)
        self.assertTrue(trie.autoComplete("fai") == "faithfully")
        self.assertTrue(trie.autoComplete("fail") == "failed")
        self.assertTrue(trie.autoComplete("faile") == "failed")
        self.assertTrue(trie.autoComplete("failed") == "failed")
        self.assertTrue(trie.autoComplete("failu") == "failure")
        self.assertTrue(trie.autoComplete("failur") == "failure")
        self.assertTrue(trie.autoComplete("failure") == "failure")
        self.assertTrue(trie.autoComplete("fait") == "faithfully")
        self.assertTrue(trie.autoComplete("faith") == "faithfully")
        self.assertTrue(trie.autoComplete("faithf") == "faithfully")
        self.assertTrue(trie.autoComplete("faithfu") == "faithfully")
        self.assertTrue(trie.autoComplete("faithful") == "faithfully")
        self.assertTrue(trie.autoComplete("faithfull") == "faithfully")
        self.assertTrue(trie.autoComplete("faithfully") == "faithfully")
        self.assertTrue(trie.autoComplete("faj") == None)
        self.assertTrue(trie.autoComplete("fak") == None)
        self.assertTrue(trie.autoComplete("fal") == None)
        self.assertTrue(trie.autoComplete("fam") == None)
        self.assertTrue(trie.autoComplete("fan") == None)
        self.assertTrue(trie.autoComplete("fao") == None)
        self.assertTrue(trie.autoComplete("fap") == None)
        self.assertTrue(trie.autoComplete("faq") == None)
        self.assertTrue(trie.autoComplete("far") == None)
        self.assertTrue(trie.autoComplete("fas") == None)
        self.assertTrue(trie.autoComplete("fat") == None)
        self.assertTrue(trie.autoComplete("fau") == None)
        self.assertTrue(trie.autoComplete("fav") == "favor")
        self.assertTrue(trie.autoComplete("favo") == "favor")
        self.assertTrue(trie.autoComplete("favor") == "favor")
        self.assertTrue(trie.autoComplete("faw") == None)
        self.assertTrue(trie.autoComplete("fax") == None)
        self.assertTrue(trie.autoComplete("fay") == None)
        self.assertTrue(trie.autoComplete("faz") == None)
        self.assertTrue(trie.autoComplete("fb") == None)
        self.assertTrue(trie.autoComplete("fba") == None)
        self.assertTrue(trie.autoComplete("fbb") == None)
        self.assertTrue(trie.autoComplete("fbc") == None)
        self.assertTrue(trie.autoComplete("fbd") == None)
        self.assertTrue(trie.autoComplete("fbe") == None)
        self.assertTrue(trie.autoComplete("fbf") == None)
        self.assertTrue(trie.autoComplete("fbg") == None)
        self.assertTrue(trie.autoComplete("fbh") == None)
        self.assertTrue(trie.autoComplete("fbi") == None)
        self.assertTrue(trie.autoComplete("fbj") == None)
        self.assertTrue(trie.autoComplete("fbk") == None)
        self.assertTrue(trie.autoComplete("fbl") == None)
        self.assertTrue(trie.autoComplete("fbm") == None)
        self.assertTrue(trie.autoComplete("fbn") == None)
        self.assertTrue(trie.autoComplete("fbo") == None)
        self.assertTrue(trie.autoComplete("fbp") == None)
        self.assertTrue(trie.autoComplete("fbq") == None)
        self.assertTrue(trie.autoComplete("fbr") == None)
        self.assertTrue(trie.autoComplete("fbs") == None)
        self.assertTrue(trie.autoComplete("fbt") == None)
        self.assertTrue(trie.autoComplete("fbu") == None)
        self.assertTrue(trie.autoComplete("fbv") == None)
        self.assertTrue(trie.autoComplete("fbw") == None)
        self.assertTrue(trie.autoComplete("fbx") == None)
        self.assertTrue(trie.autoComplete("fby") == None)
        self.assertTrue(trie.autoComplete("fbz") == None)
        self.assertTrue(trie.autoComplete("fc") == None)
        self.assertTrue(trie.autoComplete("fca") == None)
        self.assertTrue(trie.autoComplete("fcb") == None)
        self.assertTrue(trie.autoComplete("fcc") == None)
        self.assertTrue(trie.autoComplete("fcd") == None)
        self.assertTrue(trie.autoComplete("fce") == None)
        self.assertTrue(trie.autoComplete("fcf") == None)
        self.assertTrue(trie.autoComplete("fcg") == None)
        self.assertTrue(trie.autoComplete("fch") == None)
        self.assertTrue(trie.autoComplete("fci") == None)
        self.assertTrue(trie.autoComplete("fcj") == None)
        self.assertTrue(trie.autoComplete("fck") == None)
        self.assertTrue(trie.autoComplete("fcl") == None)
        self.assertTrue(trie.autoComplete("fcm") == None)
        self.assertTrue(trie.autoComplete("fcn") == None)
        self.assertTrue(trie.autoComplete("fco") == None)
        self.assertTrue(trie.autoComplete("fcp") == None)
        self.assertTrue(trie.autoComplete("fcq") == None)
        self.assertTrue(trie.autoComplete("fcr") == None)
        self.assertTrue(trie.autoComplete("fcs") == None)
        self.assertTrue(trie.autoComplete("fct") == None)
        self.assertTrue(trie.autoComplete("fcu") == None)
        self.assertTrue(trie.autoComplete("fcv") == None)
        self.assertTrue(trie.autoComplete("fcw") == None)
        self.assertTrue(trie.autoComplete("fcx") == None)
        self.assertTrue(trie.autoComplete("fcy") == None)
        self.assertTrue(trie.autoComplete("fcz") == None)
        self.assertTrue(trie.autoComplete("fd") == None)
        self.assertTrue(trie.autoComplete("fda") == None)
        self.assertTrue(trie.autoComplete("fdb") == None)
        self.assertTrue(trie.autoComplete("fdc") == None)
        self.assertTrue(trie.autoComplete("fdd") == None)
        self.assertTrue(trie.autoComplete("fde") == None)
        self.assertTrue(trie.autoComplete("fdf") == None)
        self.assertTrue(trie.autoComplete("fdg") == None)
        self.assertTrue(trie.autoComplete("fdh") == None)
        self.assertTrue(trie.autoComplete("fdi") == None)
        self.assertTrue(trie.autoComplete("fdj") == None)
        self.assertTrue(trie.autoComplete("fdk") == None)
        self.assertTrue(trie.autoComplete("fdl") == None)
        self.assertTrue(trie.autoComplete("fdm") == None)
        self.assertTrue(trie.autoComplete("fdn") == None)
        self.assertTrue(trie.autoComplete("fdo") == None)
        self.assertTrue(trie.autoComplete("fdp") == None)
        self.assertTrue(trie.autoComplete("fdq") == None)
        self.assertTrue(trie.autoComplete("fdr") == None)
        self.assertTrue(trie.autoComplete("fds") == None)
        self.assertTrue(trie.autoComplete("fdt") == None)
        self.assertTrue(trie.autoComplete("fdu") == None)
        self.assertTrue(trie.autoComplete("fdv") == None)
        self.assertTrue(trie.autoComplete("fdw") == None)
        self.assertTrue(trie.autoComplete("fdx") == None)
        self.assertTrue(trie.autoComplete("fdy") == None)
        self.assertTrue(trie.autoComplete("fdz") == None)
        self.assertTrue(trie.autoComplete("fe") == "felony")
        self.assertTrue(trie.autoComplete("fea") == None)
        self.assertTrue(trie.autoComplete("feb") == None)
        self.assertTrue(trie.autoComplete("fec") == None)
        self.assertTrue(trie.autoComplete("fed") == None)
        self.assertTrue(trie.autoComplete("fee") == None)
        self.assertTrue(trie.autoComplete("fef") == None)
        self.assertTrue(trie.autoComplete("feg") == None)
        self.assertTrue(trie.autoComplete("feh") == None)
        self.assertTrue(trie.autoComplete("fei") == None)
        self.assertTrue(trie.autoComplete("fej") == None)
        self.assertTrue(trie.autoComplete("fek") == None)
        self.assertTrue(trie.autoComplete("fel") == "felony")
        self.assertTrue(trie.autoComplete("felo") == "felony")
        self.assertTrue(trie.autoComplete("felon") == "felony")
        self.assertTrue(trie.autoComplete("feloni") == "felonies")
        self.assertTrue(trie.autoComplete("felonie") == "felonies")
        self.assertTrue(trie.autoComplete("felonies") == "felonies")
        self.assertTrue(trie.autoComplete("felony") == "felony")
        self.assertTrue(trie.autoComplete("fem") == None)
        self.assertTrue(trie.autoComplete("fen") == None)
        self.assertTrue(trie.autoComplete("feo") == None)
        self.assertTrue(trie.autoComplete("fep") == None)
        self.assertTrue(trie.autoComplete("feq") == None)
        self.assertTrue(trie.autoComplete("fer") == None)
        self.assertTrue(trie.autoComplete("fes") == None)
        self.assertTrue(trie.autoComplete("fet") == None)
        self.assertTrue(trie.autoComplete("feu") == None)
        self.assertTrue(trie.autoComplete("fev") == None)
        self.assertTrue(trie.autoComplete("few") == None)
        self.assertTrue(trie.autoComplete("fex") == None)
        self.assertTrue(trie.autoComplete("fey") == None)
        self.assertTrue(trie.autoComplete("fez") == None)
        self.assertTrue(trie.autoComplete("ff") == None)
        self.assertTrue(trie.autoComplete("ffa") == None)
        self.assertTrue(trie.autoComplete("ffb") == None)
        self.assertTrue(trie.autoComplete("ffc") == None)
        self.assertTrue(trie.autoComplete("ffd") == None)
        self.assertTrue(trie.autoComplete("ffe") == None)
        self.assertTrue(trie.autoComplete("fff") == None)
        self.assertTrue(trie.autoComplete("ffg") == None)
        self.assertTrue(trie.autoComplete("ffh") == None)
        self.assertTrue(trie.autoComplete("ffi") == None)
        self.assertTrue(trie.autoComplete("ffj") == None)
        self.assertTrue(trie.autoComplete("ffk") == None)
        self.assertTrue(trie.autoComplete("ffl") == None)
        self.assertTrue(trie.autoComplete("ffm") == None)
        self.assertTrue(trie.autoComplete("ffn") == None)
        self.assertTrue(trie.autoComplete("ffo") == None)
        self.assertTrue(trie.autoComplete("ffp") == None)
        self.assertTrue(trie.autoComplete("ffq") == None)
        self.assertTrue(trie.autoComplete("ffr") == None)
        self.assertTrue(trie.autoComplete("ffs") == None)
        self.assertTrue(trie.autoComplete("fft") == None)
        self.assertTrue(trie.autoComplete("ffu") == None)
        self.assertTrue(trie.autoComplete("ffv") == None)
        self.assertTrue(trie.autoComplete("ffw") == None)
        self.assertTrue(trie.autoComplete("ffx") == None)
        self.assertTrue(trie.autoComplete("ffy") == None)
        self.assertTrue(trie.autoComplete("ffz") == None)
        self.assertTrue(trie.autoComplete("fg") == None)
        self.assertTrue(trie.autoComplete("fga") == None)
        self.assertTrue(trie.autoComplete("fgb") == None)
        self.assertTrue(trie.autoComplete("fgc") == None)
        self.assertTrue(trie.autoComplete("fgd") == None)
        self.assertTrue(trie.autoComplete("fge") == None)
        self.assertTrue(trie.autoComplete("fgf") == None)
        self.assertTrue(trie.autoComplete("fgg") == None)
        self.assertTrue(trie.autoComplete("fgh") == None)
        self.assertTrue(trie.autoComplete("fgi") == None)
        self.assertTrue(trie.autoComplete("fgj") == None)
        self.assertTrue(trie.autoComplete("fgk") == None)
        self.assertTrue(trie.autoComplete("fgl") == None)
        self.assertTrue(trie.autoComplete("fgm") == None)
        self.assertTrue(trie.autoComplete("fgn") == None)
        self.assertTrue(trie.autoComplete("fgo") == None)
        self.assertTrue(trie.autoComplete("fgp") == None)
        self.assertTrue(trie.autoComplete("fgq") == None)
        self.assertTrue(trie.autoComplete("fgr") == None)
        self.assertTrue(trie.autoComplete("fgs") == None)
        self.assertTrue(trie.autoComplete("fgt") == None)
        self.assertTrue(trie.autoComplete("fgu") == None)
        self.assertTrue(trie.autoComplete("fgv") == None)
        self.assertTrue(trie.autoComplete("fgw") == None)
        self.assertTrue(trie.autoComplete("fgx") == None)
        self.assertTrue(trie.autoComplete("fgy") == None)
        self.assertTrue(trie.autoComplete("fgz") == None)
        self.assertTrue(trie.autoComplete("fh") == None)
        self.assertTrue(trie.autoComplete("fha") == None)
        self.assertTrue(trie.autoComplete("fhb") == None)
        self.assertTrue(trie.autoComplete("fhc") == None)
        self.assertTrue(trie.autoComplete("fhd") == None)
        self.assertTrue(trie.autoComplete("fhe") == None)
        self.assertTrue(trie.autoComplete("fhf") == None)
        self.assertTrue(trie.autoComplete("fhg") == None)
        self.assertTrue(trie.autoComplete("fhh") == None)
        self.assertTrue(trie.autoComplete("fhi") == None)
        self.assertTrue(trie.autoComplete("fhj") == None)
        self.assertTrue(trie.autoComplete("fhk") == None)
        self.assertTrue(trie.autoComplete("fhl") == None)
        self.assertTrue(trie.autoComplete("fhm") == None)
        self.assertTrue(trie.autoComplete("fhn") == None)
        self.assertTrue(trie.autoComplete("fho") == None)
        self.assertTrue(trie.autoComplete("fhp") == None)
        self.assertTrue(trie.autoComplete("fhq") == None)
        self.assertTrue(trie.autoComplete("fhr") == None)
        self.assertTrue(trie.autoComplete("fhs") == None)
        self.assertTrue(trie.autoComplete("fht") == None)
        self.assertTrue(trie.autoComplete("fhu") == None)
        self.assertTrue(trie.autoComplete("fhv") == None)
        self.assertTrue(trie.autoComplete("fhw") == None)
        self.assertTrue(trie.autoComplete("fhx") == None)
        self.assertTrue(trie.autoComplete("fhy") == None)
        self.assertTrue(trie.autoComplete("fhz") == None)
        self.assertTrue(trie.autoComplete("fi") == "five")
        self.assertTrue(trie.autoComplete("fia") == None)
        self.assertTrue(trie.autoComplete("fib") == None)
        self.assertTrue(trie.autoComplete("fic") == None)
        self.assertTrue(trie.autoComplete("fid") == None)
        self.assertTrue(trie.autoComplete("fie") == None)
        self.assertTrue(trie.autoComplete("fif") == "fifth")
        self.assertTrue(trie.autoComplete("fift") == "fifth")
        self.assertTrue(trie.autoComplete("fifte") == "fifteenth")
        self.assertTrue(trie.autoComplete("fiftee") == "fifteenth")
        self.assertTrue(trie.autoComplete("fifteen") == "fifteenth")
        self.assertTrue(trie.autoComplete("fifteent") == "fifteenth")
        self.assertTrue(trie.autoComplete("fifteenth") == "fifteenth")
        self.assertTrue(trie.autoComplete("fifth") == "fifth")
        self.assertTrue(trie.autoComplete("fifths") == "fifths")
        self.assertTrue(trie.autoComplete("fig") == None)
        self.assertTrue(trie.autoComplete("fih") == None)
        self.assertTrue(trie.autoComplete("fii") == None)
        self.assertTrue(trie.autoComplete("fij") == None)
        self.assertTrue(trie.autoComplete("fik") == None)
        self.assertTrue(trie.autoComplete("fil") == "fill")
        self.assertTrue(trie.autoComplete("fill") == "fill")
        self.assertTrue(trie.autoComplete("fim") == None)
        self.assertTrue(trie.autoComplete("fin") == "fines")
        self.assertTrue(trie.autoComplete("fine") == "fines")
        self.assertTrue(trie.autoComplete("fines") == "fines")
        self.assertTrue(trie.autoComplete("fio") == None)
        self.assertTrue(trie.autoComplete("fip") == None)
        self.assertTrue(trie.autoComplete("fiq") == None)
        self.assertTrue(trie.autoComplete("fir") == "first")
        self.assertTrue(trie.autoComplete("firs") == "first")
        self.assertTrue(trie.autoComplete("first") == "first")
        self.assertTrue(trie.autoComplete("fis") == None)
        self.assertTrue(trie.autoComplete("fit") == None)
        self.assertTrue(trie.autoComplete("fiu") == None)
        self.assertTrue(trie.autoComplete("fiv") == "five")
        self.assertTrue(trie.autoComplete("five") == "five")
        self.assertTrue(trie.autoComplete("fiw") == None)
        self.assertTrue(trie.autoComplete("fix") == "fixed")
        self.assertTrue(trie.autoComplete("fixe") == "fixed")
        self.assertTrue(trie.autoComplete("fixed") == "fixed")
        self.assertTrue(trie.autoComplete("fiy") == None)
        self.assertTrue(trie.autoComplete("fiz") == None)
        self.assertTrue(trie.autoComplete("fj") == None)
        self.assertTrue(trie.autoComplete("fja") == None)
        self.assertTrue(trie.autoComplete("fjb") == None)
        self.assertTrue(trie.autoComplete("fjc") == None)
        self.assertTrue(trie.autoComplete("fjd") == None)
        self.assertTrue(trie.autoComplete("fje") == None)
        self.assertTrue(trie.autoComplete("fjf") == None)
        self.assertTrue(trie.autoComplete("fjg") == None)
        self.assertTrue(trie.autoComplete("fjh") == None)
        self.assertTrue(trie.autoComplete("fji") == None)
        self.assertTrue(trie.autoComplete("fjj") == None)
        self.assertTrue(trie.autoComplete("fjk") == None)
        self.assertTrue(trie.autoComplete("fjl") == None)
        self.assertTrue(trie.autoComplete("fjm") == None)
        self.assertTrue(trie.autoComplete("fjn") == None)
        self.assertTrue(trie.autoComplete("fjo") == None)
        self.assertTrue(trie.autoComplete("fjp") == None)
        self.assertTrue(trie.autoComplete("fjq") == None)
        self.assertTrue(trie.autoComplete("fjr") == None)
        self.assertTrue(trie.autoComplete("fjs") == None)
        self.assertTrue(trie.autoComplete("fjt") == None)
        self.assertTrue(trie.autoComplete("fju") == None)
        self.assertTrue(trie.autoComplete("fjv") == None)
        self.assertTrue(trie.autoComplete("fjw") == None)
        self.assertTrue(trie.autoComplete("fjx") == None)
        self.assertTrue(trie.autoComplete("fjy") == None)
        self.assertTrue(trie.autoComplete("fjz") == None)
        self.assertTrue(trie.autoComplete("fk") == None)
        self.assertTrue(trie.autoComplete("fka") == None)
        self.assertTrue(trie.autoComplete("fkb") == None)
        self.assertTrue(trie.autoComplete("fkc") == None)
        self.assertTrue(trie.autoComplete("fkd") == None)
        self.assertTrue(trie.autoComplete("fke") == None)
        self.assertTrue(trie.autoComplete("fkf") == None)
        self.assertTrue(trie.autoComplete("fkg") == None)
        self.assertTrue(trie.autoComplete("fkh") == None)
        self.assertTrue(trie.autoComplete("fki") == None)
        self.assertTrue(trie.autoComplete("fkj") == None)
        self.assertTrue(trie.autoComplete("fkk") == None)
        self.assertTrue(trie.autoComplete("fkl") == None)
        self.assertTrue(trie.autoComplete("fkm") == None)
        self.assertTrue(trie.autoComplete("fkn") == None)
        self.assertTrue(trie.autoComplete("fko") == None)
        self.assertTrue(trie.autoComplete("fkp") == None)
        self.assertTrue(trie.autoComplete("fkq") == None)
        self.assertTrue(trie.autoComplete("fkr") == None)
        self.assertTrue(trie.autoComplete("fks") == None)
        self.assertTrue(trie.autoComplete("fkt") == None)
        self.assertTrue(trie.autoComplete("fku") == None)
        self.assertTrue(trie.autoComplete("fkv") == None)
        self.assertTrue(trie.autoComplete("fkw") == None)
        self.assertTrue(trie.autoComplete("fkx") == None)
        self.assertTrue(trie.autoComplete("fky") == None)
        self.assertTrue(trie.autoComplete("fkz") == None)
        self.assertTrue(trie.autoComplete("fl") == "fled")
        self.assertTrue(trie.autoComplete("fla") == None)
        self.assertTrue(trie.autoComplete("flb") == None)
        self.assertTrue(trie.autoComplete("flc") == None)
        self.assertTrue(trie.autoComplete("fld") == None)
        self.assertTrue(trie.autoComplete("fle") == "fled")
        self.assertTrue(trie.autoComplete("fled") == "fled")
        self.assertTrue(trie.autoComplete("flee") == "flee")
        self.assertTrue(trie.autoComplete("flf") == None)
        self.assertTrue(trie.autoComplete("flg") == None)
        self.assertTrue(trie.autoComplete("flh") == None)
        self.assertTrue(trie.autoComplete("fli") == None)
        self.assertTrue(trie.autoComplete("flj") == None)
        self.assertTrue(trie.autoComplete("flk") == None)
        self.assertTrue(trie.autoComplete("fll") == None)
        self.assertTrue(trie.autoComplete("flm") == None)
        self.assertTrue(trie.autoComplete("fln") == None)
        self.assertTrue(trie.autoComplete("flo") == None)
        self.assertTrue(trie.autoComplete("flp") == None)
        self.assertTrue(trie.autoComplete("flq") == None)
        self.assertTrue(trie.autoComplete("flr") == None)
        self.assertTrue(trie.autoComplete("fls") == None)
        self.assertTrue(trie.autoComplete("flt") == None)
        self.assertTrue(trie.autoComplete("flu") == None)
        self.assertTrue(trie.autoComplete("flv") == None)
        self.assertTrue(trie.autoComplete("flw") == None)
        self.assertTrue(trie.autoComplete("flx") == None)
        self.assertTrue(trie.autoComplete("fly") == None)
        self.assertTrue(trie.autoComplete("flz") == None)
        self.assertTrue(trie.autoComplete("fm") == None)
        self.assertTrue(trie.autoComplete("fma") == None)
        self.assertTrue(trie.autoComplete("fmb") == None)
        self.assertTrue(trie.autoComplete("fmc") == None)
        self.assertTrue(trie.autoComplete("fmd") == None)
        self.assertTrue(trie.autoComplete("fme") == None)
        self.assertTrue(trie.autoComplete("fmf") == None)
        self.assertTrue(trie.autoComplete("fmg") == None)
        self.assertTrue(trie.autoComplete("fmh") == None)
        self.assertTrue(trie.autoComplete("fmi") == None)
        self.assertTrue(trie.autoComplete("fmj") == None)
        self.assertTrue(trie.autoComplete("fmk") == None)
        self.assertTrue(trie.autoComplete("fml") == None)
        self.assertTrue(trie.autoComplete("fmm") == None)
        self.assertTrue(trie.autoComplete("fmn") == None)
        self.assertTrue(trie.autoComplete("fmo") == None)
        self.assertTrue(trie.autoComplete("fmp") == None)
        self.assertTrue(trie.autoComplete("fmq") == None)
        self.assertTrue(trie.autoComplete("fmr") == None)
        self.assertTrue(trie.autoComplete("fms") == None)
        self.assertTrue(trie.autoComplete("fmt") == None)
        self.assertTrue(trie.autoComplete("fmu") == None)
        self.assertTrue(trie.autoComplete("fmv") == None)
        self.assertTrue(trie.autoComplete("fmw") == None)
        self.assertTrue(trie.autoComplete("fmx") == None)
        self.assertTrue(trie.autoComplete("fmy") == None)
        self.assertTrue(trie.autoComplete("fmz") == None)
        self.assertTrue(trie.autoComplete("fn") == None)
        self.assertTrue(trie.autoComplete("fna") == None)
        self.assertTrue(trie.autoComplete("fnb") == None)
        self.assertTrue(trie.autoComplete("fnc") == None)
        self.assertTrue(trie.autoComplete("fnd") == None)
        self.assertTrue(trie.autoComplete("fne") == None)
        self.assertTrue(trie.autoComplete("fnf") == None)
        self.assertTrue(trie.autoComplete("fng") == None)
        self.assertTrue(trie.autoComplete("fnh") == None)
        self.assertTrue(trie.autoComplete("fni") == None)
        self.assertTrue(trie.autoComplete("fnj") == None)
        self.assertTrue(trie.autoComplete("fnk") == None)
        self.assertTrue(trie.autoComplete("fnl") == None)
        self.assertTrue(trie.autoComplete("fnm") == None)
        self.assertTrue(trie.autoComplete("fnn") == None)
        self.assertTrue(trie.autoComplete("fno") == None)
        self.assertTrue(trie.autoComplete("fnp") == None)
        self.assertTrue(trie.autoComplete("fnq") == None)
        self.assertTrue(trie.autoComplete("fnr") == None)
        self.assertTrue(trie.autoComplete("fns") == None)
        self.assertTrue(trie.autoComplete("fnt") == None)
        self.assertTrue(trie.autoComplete("fnu") == None)
        self.assertTrue(trie.autoComplete("fnv") == None)
        self.assertTrue(trie.autoComplete("fnw") == None)
        self.assertTrue(trie.autoComplete("fnx") == None)
        self.assertTrue(trie.autoComplete("fny") == None)
        self.assertTrue(trie.autoComplete("fnz") == None)
        self.assertTrue(trie.autoComplete("fo") == "for")
        self.assertTrue(trie.autoComplete("foa") == None)
        self.assertTrue(trie.autoComplete("fob") == None)
        self.assertTrue(trie.autoComplete("foc") == None)
        self.assertTrue(trie.autoComplete("fod") == None)
        self.assertTrue(trie.autoComplete("foe") == None)
        self.assertTrue(trie.autoComplete("fof") == None)
        self.assertTrue(trie.autoComplete("fog") == None)
        self.assertTrue(trie.autoComplete("foh") == None)
        self.assertTrue(trie.autoComplete("foi") == None)
        self.assertTrue(trie.autoComplete("foj") == None)
        self.assertTrue(trie.autoComplete("fok") == None)
        self.assertTrue(trie.autoComplete("fol") == "following")
        self.assertTrue(trie.autoComplete("foll") == "following")
        self.assertTrue(trie.autoComplete("follo") == "following")
        self.assertTrue(trie.autoComplete("follow") == "following")
        self.assertTrue(trie.autoComplete("followi") == "following")
        self.assertTrue(trie.autoComplete("followin") == "following")
        self.assertTrue(trie.autoComplete("following") == "following")
        self.assertTrue(trie.autoComplete("follows") == "follows")
        self.assertTrue(trie.autoComplete("fom") == None)
        self.assertTrue(trie.autoComplete("fon") == None)
        self.assertTrue(trie.autoComplete("foo") == None)
        self.assertTrue(trie.autoComplete("fop") == None)
        self.assertTrue(trie.autoComplete("foq") == None)
        self.assertTrue(trie.autoComplete("for") == "for")
        self.assertTrue(trie.autoComplete("forc") == "forces")
        self.assertTrue(trie.autoComplete("force") == "forces")
        self.assertTrue(trie.autoComplete("forces") == "forces")
        self.assertTrue(trie.autoComplete("fore") == "foreign")
        self.assertTrue(trie.autoComplete("foreg") == "foregoing")
        self.assertTrue(trie.autoComplete("forego") == "foregoing")
        self.assertTrue(trie.autoComplete("foregoi") == "foregoing")
        self.assertTrue(trie.autoComplete("foregoin") == "foregoing")
        self.assertTrue(trie.autoComplete("foregoing") == "foregoing")
        self.assertTrue(trie.autoComplete("forei") == "foreign")
        self.assertTrue(trie.autoComplete("foreig") == "foreign")
        self.assertTrue(trie.autoComplete("foreign") == "foreign")
        self.assertTrue(trie.autoComplete("forf") == "forfeiture")
        self.assertTrue(trie.autoComplete("forfe") == "forfeiture")
        self.assertTrue(trie.autoComplete("forfei") == "forfeiture")
        self.assertTrue(trie.autoComplete("forfeit") == "forfeiture")
        self.assertTrue(trie.autoComplete("forfeitu") == "forfeiture")
        self.assertTrue(trie.autoComplete("forfeitur") == "forfeiture")
        self.assertTrue(trie.autoComplete("forfeiture") == "forfeiture")
        self.assertTrue(trie.autoComplete("form") == "form")
        self.assertTrue(trie.autoComplete("forme") == "formed")
        self.assertTrue(trie.autoComplete("formed") == "formed")
        self.assertTrue(trie.autoComplete("fort") == "forth")
        self.assertTrue(trie.autoComplete("forth") == "forth")
        self.assertTrue(trie.autoComplete("forts") == "forts")
        self.assertTrue(trie.autoComplete("forty") == "forty")
        self.assertTrue(trie.autoComplete("fos") == None)
        self.assertTrue(trie.autoComplete("fot") == None)
        self.assertTrue(trie.autoComplete("fou") == "four")
        self.assertTrue(trie.autoComplete("foun") == "found")
        self.assertTrue(trie.autoComplete("found") == "found")
        self.assertTrue(trie.autoComplete("four") == "four")
        self.assertTrue(trie.autoComplete("fourt") == "fourth")
        self.assertTrue(trie.autoComplete("fourte") == "fourteen")
        self.assertTrue(trie.autoComplete("fourtee") == "fourteen")
        self.assertTrue(trie.autoComplete("fourteen") == "fourteen")
        self.assertTrue(trie.autoComplete("fourteent") == "fourteenth")
        self.assertTrue(trie.autoComplete("fourteenth") == "fourteenth")
        self.assertTrue(trie.autoComplete("fourth") == "fourth")
        self.assertTrue(trie.autoComplete("fourths") == "fourths")
        self.assertTrue(trie.autoComplete("fov") == None)
        self.assertTrue(trie.autoComplete("fow") == None)
        self.assertTrue(trie.autoComplete("fox") == None)
        self.assertTrue(trie.autoComplete("foy") == None)
        self.assertTrue(trie.autoComplete("foz") == None)
        self.assertTrue(trie.autoComplete("fp") == None)
        self.assertTrue(trie.autoComplete("fpa") == None)
        self.assertTrue(trie.autoComplete("fpb") == None)
        self.assertTrue(trie.autoComplete("fpc") == None)
        self.assertTrue(trie.autoComplete("fpd") == None)
        self.assertTrue(trie.autoComplete("fpe") == None)
        self.assertTrue(trie.autoComplete("fpf") == None)
        self.assertTrue(trie.autoComplete("fpg") == None)
        self.assertTrue(trie.autoComplete("fph") == None)
        self.assertTrue(trie.autoComplete("fpi") == None)
        self.assertTrue(trie.autoComplete("fpj") == None)
        self.assertTrue(trie.autoComplete("fpk") == None)
        self.assertTrue(trie.autoComplete("fpl") == None)
        self.assertTrue(trie.autoComplete("fpm") == None)
        self.assertTrue(trie.autoComplete("fpn") == None)
        self.assertTrue(trie.autoComplete("fpo") == None)
        self.assertTrue(trie.autoComplete("fpp") == None)
        self.assertTrue(trie.autoComplete("fpq") == None)
        self.assertTrue(trie.autoComplete("fpr") == None)
        self.assertTrue(trie.autoComplete("fps") == None)
        self.assertTrue(trie.autoComplete("fpt") == None)
        self.assertTrue(trie.autoComplete("fpu") == None)
        self.assertTrue(trie.autoComplete("fpv") == None)
        self.assertTrue(trie.autoComplete("fpw") == None)
        self.assertTrue(trie.autoComplete("fpx") == None)
        self.assertTrue(trie.autoComplete("fpy") == None)
        self.assertTrue(trie.autoComplete("fpz") == None)
        self.assertTrue(trie.autoComplete("fq") == None)
        self.assertTrue(trie.autoComplete("fqa") == None)
        self.assertTrue(trie.autoComplete("fqb") == None)
        self.assertTrue(trie.autoComplete("fqc") == None)
        self.assertTrue(trie.autoComplete("fqd") == None)
        self.assertTrue(trie.autoComplete("fqe") == None)
        self.assertTrue(trie.autoComplete("fqf") == None)
        self.assertTrue(trie.autoComplete("fqg") == None)
        self.assertTrue(trie.autoComplete("fqh") == None)
        self.assertTrue(trie.autoComplete("fqi") == None)
        self.assertTrue(trie.autoComplete("fqj") == None)
        self.assertTrue(trie.autoComplete("fqk") == None)
        self.assertTrue(trie.autoComplete("fql") == None)
        self.assertTrue(trie.autoComplete("fqm") == None)
        self.assertTrue(trie.autoComplete("fqn") == None)
        self.assertTrue(trie.autoComplete("fqo") == None)
        self.assertTrue(trie.autoComplete("fqp") == None)
        self.assertTrue(trie.autoComplete("fqq") == None)
        self.assertTrue(trie.autoComplete("fqr") == None)
        self.assertTrue(trie.autoComplete("fqs") == None)
        self.assertTrue(trie.autoComplete("fqt") == None)
        self.assertTrue(trie.autoComplete("fqu") == None)
        self.assertTrue(trie.autoComplete("fqv") == None)
        self.assertTrue(trie.autoComplete("fqw") == None)
        self.assertTrue(trie.autoComplete("fqx") == None)
        self.assertTrue(trie.autoComplete("fqy") == None)
        self.assertTrue(trie.autoComplete("fqz") == None)
        self.assertTrue(trie.autoComplete("fr") == "from")
        self.assertTrue(trie.autoComplete("fra") == None)
        self.assertTrue(trie.autoComplete("frb") == None)
        self.assertTrue(trie.autoComplete("frc") == None)
        self.assertTrue(trie.autoComplete("frd") == None)
        self.assertTrue(trie.autoComplete("fre") == "free")
        self.assertTrue(trie.autoComplete("free") == "free")
        self.assertTrue(trie.autoComplete("freed") == "freedom")
        self.assertTrue(trie.autoComplete("freedo") == "freedom")
        self.assertTrue(trie.autoComplete("freedom") == "freedom")
        self.assertTrue(trie.autoComplete("frf") == None)
        self.assertTrue(trie.autoComplete("frg") == None)
        self.assertTrue(trie.autoComplete("frh") == None)
        self.assertTrue(trie.autoComplete("fri") == None)
        self.assertTrue(trie.autoComplete("frj") == None)
        self.assertTrue(trie.autoComplete("frk") == None)
        self.assertTrue(trie.autoComplete("frl") == None)
        self.assertTrue(trie.autoComplete("frm") == None)
        self.assertTrue(trie.autoComplete("frn") == None)
        self.assertTrue(trie.autoComplete("fro") == "from")
        self.assertTrue(trie.autoComplete("from") == "from")
        self.assertTrue(trie.autoComplete("frp") == None)
        self.assertTrue(trie.autoComplete("frq") == None)
        self.assertTrue(trie.autoComplete("frr") == None)
        self.assertTrue(trie.autoComplete("frs") == None)
        self.assertTrue(trie.autoComplete("frt") == None)
        self.assertTrue(trie.autoComplete("fru") == None)
        self.assertTrue(trie.autoComplete("frv") == None)
        self.assertTrue(trie.autoComplete("frw") == None)
        self.assertTrue(trie.autoComplete("frx") == None)
        self.assertTrue(trie.autoComplete("fry") == None)
        self.assertTrue(trie.autoComplete("frz") == None)
        self.assertTrue(trie.autoComplete("fs") == None)
        self.assertTrue(trie.autoComplete("fsa") == None)
        self.assertTrue(trie.autoComplete("fsb") == None)
        self.assertTrue(trie.autoComplete("fsc") == None)
        self.assertTrue(trie.autoComplete("fsd") == None)
        self.assertTrue(trie.autoComplete("fse") == None)
        self.assertTrue(trie.autoComplete("fsf") == None)
        self.assertTrue(trie.autoComplete("fsg") == None)
        self.assertTrue(trie.autoComplete("fsh") == None)
        self.assertTrue(trie.autoComplete("fsi") == None)
        self.assertTrue(trie.autoComplete("fsj") == None)
        self.assertTrue(trie.autoComplete("fsk") == None)
        self.assertTrue(trie.autoComplete("fsl") == None)
        self.assertTrue(trie.autoComplete("fsm") == None)
        self.assertTrue(trie.autoComplete("fsn") == None)
        self.assertTrue(trie.autoComplete("fso") == None)
        self.assertTrue(trie.autoComplete("fsp") == None)
        self.assertTrue(trie.autoComplete("fsq") == None)
        self.assertTrue(trie.autoComplete("fsr") == None)
        self.assertTrue(trie.autoComplete("fss") == None)
        self.assertTrue(trie.autoComplete("fst") == None)
        self.assertTrue(trie.autoComplete("fsu") == None)
        self.assertTrue(trie.autoComplete("fsv") == None)
        self.assertTrue(trie.autoComplete("fsw") == None)
        self.assertTrue(trie.autoComplete("fsx") == None)
        self.assertTrue(trie.autoComplete("fsy") == None)
        self.assertTrue(trie.autoComplete("fsz") == None)
        self.assertTrue(trie.autoComplete("ft") == None)
        self.assertTrue(trie.autoComplete("fta") == None)
        self.assertTrue(trie.autoComplete("ftb") == None)
        self.assertTrue(trie.autoComplete("ftc") == None)
        self.assertTrue(trie.autoComplete("ftd") == None)
        self.assertTrue(trie.autoComplete("fte") == None)
        self.assertTrue(trie.autoComplete("ftf") == None)
        self.assertTrue(trie.autoComplete("ftg") == None)
        self.assertTrue(trie.autoComplete("fth") == None)
        self.assertTrue(trie.autoComplete("fti") == None)
        self.assertTrue(trie.autoComplete("ftj") == None)
        self.assertTrue(trie.autoComplete("ftk") == None)
        self.assertTrue(trie.autoComplete("ftl") == None)
        self.assertTrue(trie.autoComplete("ftm") == None)
        self.assertTrue(trie.autoComplete("ftn") == None)
        self.assertTrue(trie.autoComplete("fto") == None)
        self.assertTrue(trie.autoComplete("ftp") == None)
        self.assertTrue(trie.autoComplete("ftq") == None)
        self.assertTrue(trie.autoComplete("ftr") == None)
        self.assertTrue(trie.autoComplete("fts") == None)
        self.assertTrue(trie.autoComplete("ftt") == None)
        self.assertTrue(trie.autoComplete("ftu") == None)
        self.assertTrue(trie.autoComplete("ftv") == None)
        self.assertTrue(trie.autoComplete("ftw") == None)
        self.assertTrue(trie.autoComplete("ftx") == None)
        self.assertTrue(trie.autoComplete("fty") == None)
        self.assertTrue(trie.autoComplete("ftz") == None)
        self.assertTrue(trie.autoComplete("fu") == "full")
        self.assertTrue(trie.autoComplete("fua") == None)
        self.assertTrue(trie.autoComplete("fub") == None)
        self.assertTrue(trie.autoComplete("fuc") == None)
        self.assertTrue(trie.autoComplete("fud") == None)
        self.assertTrue(trie.autoComplete("fue") == None)
        self.assertTrue(trie.autoComplete("fuf") == None)
        self.assertTrue(trie.autoComplete("fug") == None)
        self.assertTrue(trie.autoComplete("fuh") == None)
        self.assertTrue(trie.autoComplete("fui") == None)
        self.assertTrue(trie.autoComplete("fuj") == None)
        self.assertTrue(trie.autoComplete("fuk") == None)
        self.assertTrue(trie.autoComplete("ful") == "full")
        self.assertTrue(trie.autoComplete("full") == "full")
        self.assertTrue(trie.autoComplete("fum") == None)
        self.assertTrue(trie.autoComplete("fun") == None)
        self.assertTrue(trie.autoComplete("fuo") == None)
        self.assertTrue(trie.autoComplete("fup") == None)
        self.assertTrue(trie.autoComplete("fuq") == None)
        self.assertTrue(trie.autoComplete("fur") == "further")
        self.assertTrue(trie.autoComplete("furt") == "further")
        self.assertTrue(trie.autoComplete("furth") == "further")
        self.assertTrue(trie.autoComplete("furthe") == "further")
        self.assertTrue(trie.autoComplete("further") == "further")
        self.assertTrue(trie.autoComplete("fus") == None)
        self.assertTrue(trie.autoComplete("fut") == None)
        self.assertTrue(trie.autoComplete("fuu") == None)
        self.assertTrue(trie.autoComplete("fuv") == None)
        self.assertTrue(trie.autoComplete("fuw") == None)
        self.assertTrue(trie.autoComplete("fux") == None)
        self.assertTrue(trie.autoComplete("fuy") == None)
        self.assertTrue(trie.autoComplete("fuz") == None)
        self.assertTrue(trie.autoComplete("fv") == None)
        self.assertTrue(trie.autoComplete("fva") == None)
        self.assertTrue(trie.autoComplete("fvb") == None)
        self.assertTrue(trie.autoComplete("fvc") == None)
        self.assertTrue(trie.autoComplete("fvd") == None)
        self.assertTrue(trie.autoComplete("fve") == None)
        self.assertTrue(trie.autoComplete("fvf") == None)
        self.assertTrue(trie.autoComplete("fvg") == None)
        self.assertTrue(trie.autoComplete("fvh") == None)
        self.assertTrue(trie.autoComplete("fvi") == None)
        self.assertTrue(trie.autoComplete("fvj") == None)
        self.assertTrue(trie.autoComplete("fvk") == None)
        self.assertTrue(trie.autoComplete("fvl") == None)
        self.assertTrue(trie.autoComplete("fvm") == None)
        self.assertTrue(trie.autoComplete("fvn") == None)
        self.assertTrue(trie.autoComplete("fvo") == None)
        self.assertTrue(trie.autoComplete("fvp") == None)
        self.assertTrue(trie.autoComplete("fvq") == None)
        self.assertTrue(trie.autoComplete("fvr") == None)
        self.assertTrue(trie.autoComplete("fvs") == None)
        self.assertTrue(trie.autoComplete("fvt") == None)
        self.assertTrue(trie.autoComplete("fvu") == None)
        self.assertTrue(trie.autoComplete("fvv") == None)
        self.assertTrue(trie.autoComplete("fvw") == None)
        self.assertTrue(trie.autoComplete("fvx") == None)
        self.assertTrue(trie.autoComplete("fvy") == None)
        self.assertTrue(trie.autoComplete("fvz") == None)
        self.assertTrue(trie.autoComplete("fw") == None)
        self.assertTrue(trie.autoComplete("fwa") == None)
        self.assertTrue(trie.autoComplete("fwb") == None)
        self.assertTrue(trie.autoComplete("fwc") == None)
        self.assertTrue(trie.autoComplete("fwd") == None)
        self.assertTrue(trie.autoComplete("fwe") == None)
        self.assertTrue(trie.autoComplete("fwf") == None)
        self.assertTrue(trie.autoComplete("fwg") == None)
        self.assertTrue(trie.autoComplete("fwh") == None)
        self.assertTrue(trie.autoComplete("fwi") == None)
        self.assertTrue(trie.autoComplete("fwj") == None)
        self.assertTrue(trie.autoComplete("fwk") == None)
        self.assertTrue(trie.autoComplete("fwl") == None)
        self.assertTrue(trie.autoComplete("fwm") == None)
        self.assertTrue(trie.autoComplete("fwn") == None)
        self.assertTrue(trie.autoComplete("fwo") == None)
        self.assertTrue(trie.autoComplete("fwp") == None)
        self.assertTrue(trie.autoComplete("fwq") == None)
        self.assertTrue(trie.autoComplete("fwr") == None)
        self.assertTrue(trie.autoComplete("fws") == None)
        self.assertTrue(trie.autoComplete("fwt") == None)
        self.assertTrue(trie.autoComplete("fwu") == None)
        self.assertTrue(trie.autoComplete("fwv") == None)
        self.assertTrue(trie.autoComplete("fww") == None)
        self.assertTrue(trie.autoComplete("fwx") == None)
        self.assertTrue(trie.autoComplete("fwy") == None)
        self.assertTrue(trie.autoComplete("fwz") == None)
        self.assertTrue(trie.autoComplete("fx") == None)
        self.assertTrue(trie.autoComplete("fxa") == None)
        self.assertTrue(trie.autoComplete("fxb") == None)
        self.assertTrue(trie.autoComplete("fxc") == None)
        self.assertTrue(trie.autoComplete("fxd") == None)
        self.assertTrue(trie.autoComplete("fxe") == None)
        self.assertTrue(trie.autoComplete("fxf") == None)
        self.assertTrue(trie.autoComplete("fxg") == None)
        self.assertTrue(trie.autoComplete("fxh") == None)
        self.assertTrue(trie.autoComplete("fxi") == None)
        self.assertTrue(trie.autoComplete("fxj") == None)
        self.assertTrue(trie.autoComplete("fxk") == None)
        self.assertTrue(trie.autoComplete("fxl") == None)
        self.assertTrue(trie.autoComplete("fxm") == None)
        self.assertTrue(trie.autoComplete("fxn") == None)
        self.assertTrue(trie.autoComplete("fxo") == None)
        self.assertTrue(trie.autoComplete("fxp") == None)
        self.assertTrue(trie.autoComplete("fxq") == None)
        self.assertTrue(trie.autoComplete("fxr") == None)
        self.assertTrue(trie.autoComplete("fxs") == None)
        self.assertTrue(trie.autoComplete("fxt") == None)
        self.assertTrue(trie.autoComplete("fxu") == None)
        self.assertTrue(trie.autoComplete("fxv") == None)
        self.assertTrue(trie.autoComplete("fxw") == None)
        self.assertTrue(trie.autoComplete("fxx") == None)
        self.assertTrue(trie.autoComplete("fxy") == None)
        self.assertTrue(trie.autoComplete("fxz") == None)
        self.assertTrue(trie.autoComplete("fy") == None)
        self.assertTrue(trie.autoComplete("fya") == None)
        self.assertTrue(trie.autoComplete("fyb") == None)
        self.assertTrue(trie.autoComplete("fyc") == None)
        self.assertTrue(trie.autoComplete("fyd") == None)
        self.assertTrue(trie.autoComplete("fye") == None)
        self.assertTrue(trie.autoComplete("fyf") == None)
        self.assertTrue(trie.autoComplete("fyg") == None)
        self.assertTrue(trie.autoComplete("fyh") == None)
        self.assertTrue(trie.autoComplete("fyi") == None)
        self.assertTrue(trie.autoComplete("fyj") == None)
        self.assertTrue(trie.autoComplete("fyk") == None)
        self.assertTrue(trie.autoComplete("fyl") == None)
        self.assertTrue(trie.autoComplete("fym") == None)
        self.assertTrue(trie.autoComplete("fyn") == None)
        self.assertTrue(trie.autoComplete("fyo") == None)
        self.assertTrue(trie.autoComplete("fyp") == None)
        self.assertTrue(trie.autoComplete("fyq") == None)
        self.assertTrue(trie.autoComplete("fyr") == None)
        self.assertTrue(trie.autoComplete("fys") == None)
        self.assertTrue(trie.autoComplete("fyt") == None)
        self.assertTrue(trie.autoComplete("fyu") == None)
        self.assertTrue(trie.autoComplete("fyv") == None)
        self.assertTrue(trie.autoComplete("fyw") == None)
        self.assertTrue(trie.autoComplete("fyx") == None)
        self.assertTrue(trie.autoComplete("fyy") == None)
        self.assertTrue(trie.autoComplete("fyz") == None)
        self.assertTrue(trie.autoComplete("fz") == None)
        self.assertTrue(trie.autoComplete("fza") == None)
        self.assertTrue(trie.autoComplete("fzb") == None)
        self.assertTrue(trie.autoComplete("fzc") == None)
        self.assertTrue(trie.autoComplete("fzd") == None)
        self.assertTrue(trie.autoComplete("fze") == None)
        self.assertTrue(trie.autoComplete("fzf") == None)
        self.assertTrue(trie.autoComplete("fzg") == None)
        self.assertTrue(trie.autoComplete("fzh") == None)
        self.assertTrue(trie.autoComplete("fzi") == None)
        self.assertTrue(trie.autoComplete("fzj") == None)
        self.assertTrue(trie.autoComplete("fzk") == None)
        self.assertTrue(trie.autoComplete("fzl") == None)
        self.assertTrue(trie.autoComplete("fzm") == None)
        self.assertTrue(trie.autoComplete("fzn") == None)
        self.assertTrue(trie.autoComplete("fzo") == None)
        self.assertTrue(trie.autoComplete("fzp") == None)
        self.assertTrue(trie.autoComplete("fzq") == None)
        self.assertTrue(trie.autoComplete("fzr") == None)
        self.assertTrue(trie.autoComplete("fzs") == None)
        self.assertTrue(trie.autoComplete("fzt") == None)
        self.assertTrue(trie.autoComplete("fzu") == None)
        self.assertTrue(trie.autoComplete("fzv") == None)
        self.assertTrue(trie.autoComplete("fzw") == None)
        self.assertTrue(trie.autoComplete("fzx") == None)
        self.assertTrue(trie.autoComplete("fzy") == None)
        self.assertTrue(trie.autoComplete("fzz") == None)
        self.assertTrue(trie.autoComplete("g") == "government")
        self.assertTrue(trie.autoComplete("ga") == None)
        self.assertTrue(trie.autoComplete("gaa") == None)
        self.assertTrue(trie.autoComplete("gab") == None)
        self.assertTrue(trie.autoComplete("gac") == None)
        self.assertTrue(trie.autoComplete("gad") == None)
        self.assertTrue(trie.autoComplete("gae") == None)
        self.assertTrue(trie.autoComplete("gaf") == None)
        self.assertTrue(trie.autoComplete("gag") == None)
        self.assertTrue(trie.autoComplete("gah") == None)
        self.assertTrue(trie.autoComplete("gai") == None)
        self.assertTrue(trie.autoComplete("gaj") == None)
        self.assertTrue(trie.autoComplete("gak") == None)
        self.assertTrue(trie.autoComplete("gal") == None)
        self.assertTrue(trie.autoComplete("gam") == None)
        self.assertTrue(trie.autoComplete("gan") == None)
        self.assertTrue(trie.autoComplete("gao") == None)
        self.assertTrue(trie.autoComplete("gap") == None)
        self.assertTrue(trie.autoComplete("gaq") == None)
        self.assertTrue(trie.autoComplete("gar") == None)
        self.assertTrue(trie.autoComplete("gas") == None)
        self.assertTrue(trie.autoComplete("gat") == None)
        self.assertTrue(trie.autoComplete("gau") == None)
        self.assertTrue(trie.autoComplete("gav") == None)
        self.assertTrue(trie.autoComplete("gaw") == None)
        self.assertTrue(trie.autoComplete("gax") == None)
        self.assertTrue(trie.autoComplete("gay") == None)
        self.assertTrue(trie.autoComplete("gaz") == None)
        self.assertTrue(trie.autoComplete("gb") == None)
        self.assertTrue(trie.autoComplete("gba") == None)
        self.assertTrue(trie.autoComplete("gbb") == None)
        self.assertTrue(trie.autoComplete("gbc") == None)
        self.assertTrue(trie.autoComplete("gbd") == None)
        self.assertTrue(trie.autoComplete("gbe") == None)
        self.assertTrue(trie.autoComplete("gbf") == None)
        self.assertTrue(trie.autoComplete("gbg") == None)
        self.assertTrue(trie.autoComplete("gbh") == None)
        self.assertTrue(trie.autoComplete("gbi") == None)
        self.assertTrue(trie.autoComplete("gbj") == None)
        self.assertTrue(trie.autoComplete("gbk") == None)
        self.assertTrue(trie.autoComplete("gbl") == None)
        self.assertTrue(trie.autoComplete("gbm") == None)
        self.assertTrue(trie.autoComplete("gbn") == None)
        self.assertTrue(trie.autoComplete("gbo") == None)
        self.assertTrue(trie.autoComplete("gbp") == None)
        self.assertTrue(trie.autoComplete("gbq") == None)
        self.assertTrue(trie.autoComplete("gbr") == None)
        self.assertTrue(trie.autoComplete("gbs") == None)
        self.assertTrue(trie.autoComplete("gbt") == None)
        self.assertTrue(trie.autoComplete("gbu") == None)
        self.assertTrue(trie.autoComplete("gbv") == None)
        self.assertTrue(trie.autoComplete("gbw") == None)
        self.assertTrue(trie.autoComplete("gbx") == None)
        self.assertTrue(trie.autoComplete("gby") == None)
        self.assertTrue(trie.autoComplete("gbz") == None)
        self.assertTrue(trie.autoComplete("gc") == None)
        self.assertTrue(trie.autoComplete("gca") == None)
        self.assertTrue(trie.autoComplete("gcb") == None)
        self.assertTrue(trie.autoComplete("gcc") == None)
        self.assertTrue(trie.autoComplete("gcd") == None)
        self.assertTrue(trie.autoComplete("gce") == None)
        self.assertTrue(trie.autoComplete("gcf") == None)
        self.assertTrue(trie.autoComplete("gcg") == None)
        self.assertTrue(trie.autoComplete("gch") == None)
        self.assertTrue(trie.autoComplete("gci") == None)
        self.assertTrue(trie.autoComplete("gcj") == None)
        self.assertTrue(trie.autoComplete("gck") == None)
        self.assertTrue(trie.autoComplete("gcl") == None)
        self.assertTrue(trie.autoComplete("gcm") == None)
        self.assertTrue(trie.autoComplete("gcn") == None)
        self.assertTrue(trie.autoComplete("gco") == None)
        self.assertTrue(trie.autoComplete("gcp") == None)
        self.assertTrue(trie.autoComplete("gcq") == None)
        self.assertTrue(trie.autoComplete("gcr") == None)
        self.assertTrue(trie.autoComplete("gcs") == None)
        self.assertTrue(trie.autoComplete("gct") == None)
        self.assertTrue(trie.autoComplete("gcu") == None)
        self.assertTrue(trie.autoComplete("gcv") == None)
        self.assertTrue(trie.autoComplete("gcw") == None)
        self.assertTrue(trie.autoComplete("gcx") == None)
        self.assertTrue(trie.autoComplete("gcy") == None)
        self.assertTrue(trie.autoComplete("gcz") == None)
        self.assertTrue(trie.autoComplete("gd") == None)
        self.assertTrue(trie.autoComplete("gda") == None)
        self.assertTrue(trie.autoComplete("gdb") == None)
        self.assertTrue(trie.autoComplete("gdc") == None)
        self.assertTrue(trie.autoComplete("gdd") == None)
        self.assertTrue(trie.autoComplete("gde") == None)
        self.assertTrue(trie.autoComplete("gdf") == None)
        self.assertTrue(trie.autoComplete("gdg") == None)
        self.assertTrue(trie.autoComplete("gdh") == None)
        self.assertTrue(trie.autoComplete("gdi") == None)
        self.assertTrue(trie.autoComplete("gdj") == None)
        self.assertTrue(trie.autoComplete("gdk") == None)
        self.assertTrue(trie.autoComplete("gdl") == None)
        self.assertTrue(trie.autoComplete("gdm") == None)
        self.assertTrue(trie.autoComplete("gdn") == None)
        self.assertTrue(trie.autoComplete("gdo") == None)
        self.assertTrue(trie.autoComplete("gdp") == None)
        self.assertTrue(trie.autoComplete("gdq") == None)
        self.assertTrue(trie.autoComplete("gdr") == None)
        self.assertTrue(trie.autoComplete("gds") == None)
        self.assertTrue(trie.autoComplete("gdt") == None)
        self.assertTrue(trie.autoComplete("gdu") == None)
        self.assertTrue(trie.autoComplete("gdv") == None)
        self.assertTrue(trie.autoComplete("gdw") == None)
        self.assertTrue(trie.autoComplete("gdx") == None)
        self.assertTrue(trie.autoComplete("gdy") == None)
        self.assertTrue(trie.autoComplete("gdz") == None)
        self.assertTrue(trie.autoComplete("ge") == "general")
        self.assertTrue(trie.autoComplete("gea") == None)
        self.assertTrue(trie.autoComplete("geb") == None)
        self.assertTrue(trie.autoComplete("gec") == None)
        self.assertTrue(trie.autoComplete("ged") == None)
        self.assertTrue(trie.autoComplete("gee") == None)
        self.assertTrue(trie.autoComplete("gef") == None)
        self.assertTrue(trie.autoComplete("geg") == None)
        self.assertTrue(trie.autoComplete("geh") == None)
        self.assertTrue(trie.autoComplete("gei") == None)
        self.assertTrue(trie.autoComplete("gej") == None)
        self.assertTrue(trie.autoComplete("gek") == None)
        self.assertTrue(trie.autoComplete("gel") == None)
        self.assertTrue(trie.autoComplete("gem") == None)
        self.assertTrue(trie.autoComplete("gen") == "general")
        self.assertTrue(trie.autoComplete("gene") == "general")
        self.assertTrue(trie.autoComplete("gener") == "general")
        self.assertTrue(trie.autoComplete("genera") == "general")
        self.assertTrue(trie.autoComplete("general") == "general")
        self.assertTrue(trie.autoComplete("geo") == "georgia")
        self.assertTrue(trie.autoComplete("geor") == "georgia")
        self.assertTrue(trie.autoComplete("georg") == "georgia")
        self.assertTrue(trie.autoComplete("georgi") == "georgia")
        self.assertTrue(trie.autoComplete("georgia") == "georgia")
        self.assertTrue(trie.autoComplete("gep") == None)
        self.assertTrue(trie.autoComplete("geq") == None)
        self.assertTrue(trie.autoComplete("ger") == None)
        self.assertTrue(trie.autoComplete("ges") == None)
        self.assertTrue(trie.autoComplete("get") == None)
        self.assertTrue(trie.autoComplete("geu") == None)
        self.assertTrue(trie.autoComplete("gev") == None)
        self.assertTrue(trie.autoComplete("gew") == None)
        self.assertTrue(trie.autoComplete("gex") == None)
        self.assertTrue(trie.autoComplete("gey") == None)
        self.assertTrue(trie.autoComplete("gez") == None)
        self.assertTrue(trie.autoComplete("gf") == None)
        self.assertTrue(trie.autoComplete("gfa") == None)
        self.assertTrue(trie.autoComplete("gfb") == None)
        self.assertTrue(trie.autoComplete("gfc") == None)
        self.assertTrue(trie.autoComplete("gfd") == None)
        self.assertTrue(trie.autoComplete("gfe") == None)
        self.assertTrue(trie.autoComplete("gff") == None)
        self.assertTrue(trie.autoComplete("gfg") == None)
        self.assertTrue(trie.autoComplete("gfh") == None)
        self.assertTrue(trie.autoComplete("gfi") == None)
        self.assertTrue(trie.autoComplete("gfj") == None)
        self.assertTrue(trie.autoComplete("gfk") == None)
        self.assertTrue(trie.autoComplete("gfl") == None)
        self.assertTrue(trie.autoComplete("gfm") == None)
        self.assertTrue(trie.autoComplete("gfn") == None)
        self.assertTrue(trie.autoComplete("gfo") == None)
        self.assertTrue(trie.autoComplete("gfp") == None)
        self.assertTrue(trie.autoComplete("gfq") == None)
        self.assertTrue(trie.autoComplete("gfr") == None)
        self.assertTrue(trie.autoComplete("gfs") == None)
        self.assertTrue(trie.autoComplete("gft") == None)
        self.assertTrue(trie.autoComplete("gfu") == None)
        self.assertTrue(trie.autoComplete("gfv") == None)
        self.assertTrue(trie.autoComplete("gfw") == None)
        self.assertTrue(trie.autoComplete("gfx") == None)
        self.assertTrue(trie.autoComplete("gfy") == None)
        self.assertTrue(trie.autoComplete("gfz") == None)
        self.assertTrue(trie.autoComplete("gg") == None)
        self.assertTrue(trie.autoComplete("gga") == None)
        self.assertTrue(trie.autoComplete("ggb") == None)
        self.assertTrue(trie.autoComplete("ggc") == None)
        self.assertTrue(trie.autoComplete("ggd") == None)
        self.assertTrue(trie.autoComplete("gge") == None)
        self.assertTrue(trie.autoComplete("ggf") == None)
        self.assertTrue(trie.autoComplete("ggg") == None)
        self.assertTrue(trie.autoComplete("ggh") == None)
        self.assertTrue(trie.autoComplete("ggi") == None)
        self.assertTrue(trie.autoComplete("ggj") == None)
        self.assertTrue(trie.autoComplete("ggk") == None)
        self.assertTrue(trie.autoComplete("ggl") == None)
        self.assertTrue(trie.autoComplete("ggm") == None)
        self.assertTrue(trie.autoComplete("ggn") == None)
        self.assertTrue(trie.autoComplete("ggo") == None)
        self.assertTrue(trie.autoComplete("ggp") == None)
        self.assertTrue(trie.autoComplete("ggq") == None)
        self.assertTrue(trie.autoComplete("ggr") == None)
        self.assertTrue(trie.autoComplete("ggs") == None)
        self.assertTrue(trie.autoComplete("ggt") == None)
        self.assertTrue(trie.autoComplete("ggu") == None)
        self.assertTrue(trie.autoComplete("ggv") == None)
        self.assertTrue(trie.autoComplete("ggw") == None)
        self.assertTrue(trie.autoComplete("ggx") == None)
        self.assertTrue(trie.autoComplete("ggy") == None)
        self.assertTrue(trie.autoComplete("ggz") == None)
        self.assertTrue(trie.autoComplete("gh") == None)
        self.assertTrue(trie.autoComplete("gha") == None)
        self.assertTrue(trie.autoComplete("ghb") == None)
        self.assertTrue(trie.autoComplete("ghc") == None)
        self.assertTrue(trie.autoComplete("ghd") == None)
        self.assertTrue(trie.autoComplete("ghe") == None)
        self.assertTrue(trie.autoComplete("ghf") == None)
        self.assertTrue(trie.autoComplete("ghg") == None)
        self.assertTrue(trie.autoComplete("ghh") == None)
        self.assertTrue(trie.autoComplete("ghi") == None)
        self.assertTrue(trie.autoComplete("ghj") == None)
        self.assertTrue(trie.autoComplete("ghk") == None)
        self.assertTrue(trie.autoComplete("ghl") == None)
        self.assertTrue(trie.autoComplete("ghm") == None)
        self.assertTrue(trie.autoComplete("ghn") == None)
        self.assertTrue(trie.autoComplete("gho") == None)
        self.assertTrue(trie.autoComplete("ghp") == None)
        self.assertTrue(trie.autoComplete("ghq") == None)
        self.assertTrue(trie.autoComplete("ghr") == None)
        self.assertTrue(trie.autoComplete("ghs") == None)
        self.assertTrue(trie.autoComplete("ght") == None)
        self.assertTrue(trie.autoComplete("ghu") == None)
        self.assertTrue(trie.autoComplete("ghv") == None)
        self.assertTrue(trie.autoComplete("ghw") == None)
        self.assertTrue(trie.autoComplete("ghx") == None)
        self.assertTrue(trie.autoComplete("ghy") == None)
        self.assertTrue(trie.autoComplete("ghz") == None)
        self.assertTrue(trie.autoComplete("gi") == "given")
        self.assertTrue(trie.autoComplete("gia") == None)
        self.assertTrue(trie.autoComplete("gib") == None)
        self.assertTrue(trie.autoComplete("gic") == None)
        self.assertTrue(trie.autoComplete("gid") == None)
        self.assertTrue(trie.autoComplete("gie") == None)
        self.assertTrue(trie.autoComplete("gif") == None)
        self.assertTrue(trie.autoComplete("gig") == None)
        self.assertTrue(trie.autoComplete("gih") == None)
        self.assertTrue(trie.autoComplete("gii") == None)
        self.assertTrue(trie.autoComplete("gij") == None)
        self.assertTrue(trie.autoComplete("gik") == None)
        self.assertTrue(trie.autoComplete("gil") == None)
        self.assertTrue(trie.autoComplete("gim") == None)
        self.assertTrue(trie.autoComplete("gin") == None)
        self.assertTrue(trie.autoComplete("gio") == None)
        self.assertTrue(trie.autoComplete("gip") == None)
        self.assertTrue(trie.autoComplete("giq") == None)
        self.assertTrue(trie.autoComplete("gir") == None)
        self.assertTrue(trie.autoComplete("gis") == None)
        self.assertTrue(trie.autoComplete("git") == None)
        self.assertTrue(trie.autoComplete("giu") == None)
        self.assertTrue(trie.autoComplete("giv") == "given")
        self.assertTrue(trie.autoComplete("give") == "given")
        self.assertTrue(trie.autoComplete("given") == "given")
        self.assertTrue(trie.autoComplete("givi") == "giving")
        self.assertTrue(trie.autoComplete("givin") == "giving")
        self.assertTrue(trie.autoComplete("giving") == "giving")
        self.assertTrue(trie.autoComplete("giw") == None)
        self.assertTrue(trie.autoComplete("gix") == None)
        self.assertTrue(trie.autoComplete("giy") == None)
        self.assertTrue(trie.autoComplete("giz") == None)
        self.assertTrue(trie.autoComplete("gj") == None)
        self.assertTrue(trie.autoComplete("gja") == None)
        self.assertTrue(trie.autoComplete("gjb") == None)
        self.assertTrue(trie.autoComplete("gjc") == None)
        self.assertTrue(trie.autoComplete("gjd") == None)
        self.assertTrue(trie.autoComplete("gje") == None)
        self.assertTrue(trie.autoComplete("gjf") == None)
        self.assertTrue(trie.autoComplete("gjg") == None)
        self.assertTrue(trie.autoComplete("gjh") == None)
        self.assertTrue(trie.autoComplete("gji") == None)
        self.assertTrue(trie.autoComplete("gjj") == None)
        self.assertTrue(trie.autoComplete("gjk") == None)
        self.assertTrue(trie.autoComplete("gjl") == None)
        self.assertTrue(trie.autoComplete("gjm") == None)
        self.assertTrue(trie.autoComplete("gjn") == None)
        self.assertTrue(trie.autoComplete("gjo") == None)
        self.assertTrue(trie.autoComplete("gjp") == None)
        self.assertTrue(trie.autoComplete("gjq") == None)
        self.assertTrue(trie.autoComplete("gjr") == None)
        self.assertTrue(trie.autoComplete("gjs") == None)
        self.assertTrue(trie.autoComplete("gjt") == None)
        self.assertTrue(trie.autoComplete("gju") == None)
        self.assertTrue(trie.autoComplete("gjv") == None)
        self.assertTrue(trie.autoComplete("gjw") == None)
        self.assertTrue(trie.autoComplete("gjx") == None)
        self.assertTrue(trie.autoComplete("gjy") == None)
        self.assertTrue(trie.autoComplete("gjz") == None)
        self.assertTrue(trie.autoComplete("gk") == None)
        self.assertTrue(trie.autoComplete("gka") == None)
        self.assertTrue(trie.autoComplete("gkb") == None)
        self.assertTrue(trie.autoComplete("gkc") == None)
        self.assertTrue(trie.autoComplete("gkd") == None)
        self.assertTrue(trie.autoComplete("gke") == None)
        self.assertTrue(trie.autoComplete("gkf") == None)
        self.assertTrue(trie.autoComplete("gkg") == None)
        self.assertTrue(trie.autoComplete("gkh") == None)
        self.assertTrue(trie.autoComplete("gki") == None)
        self.assertTrue(trie.autoComplete("gkj") == None)
        self.assertTrue(trie.autoComplete("gkk") == None)
        self.assertTrue(trie.autoComplete("gkl") == None)
        self.assertTrue(trie.autoComplete("gkm") == None)
        self.assertTrue(trie.autoComplete("gkn") == None)
        self.assertTrue(trie.autoComplete("gko") == None)
        self.assertTrue(trie.autoComplete("gkp") == None)
        self.assertTrue(trie.autoComplete("gkq") == None)
        self.assertTrue(trie.autoComplete("gkr") == None)
        self.assertTrue(trie.autoComplete("gks") == None)
        self.assertTrue(trie.autoComplete("gkt") == None)
        self.assertTrue(trie.autoComplete("gku") == None)
        self.assertTrue(trie.autoComplete("gkv") == None)
        self.assertTrue(trie.autoComplete("gkw") == None)
        self.assertTrue(trie.autoComplete("gkx") == None)
        self.assertTrue(trie.autoComplete("gky") == None)
        self.assertTrue(trie.autoComplete("gkz") == None)
        self.assertTrue(trie.autoComplete("gl") == None)
        self.assertTrue(trie.autoComplete("gla") == None)
        self.assertTrue(trie.autoComplete("glb") == None)
        self.assertTrue(trie.autoComplete("glc") == None)
        self.assertTrue(trie.autoComplete("gld") == None)
        self.assertTrue(trie.autoComplete("gle") == None)
        self.assertTrue(trie.autoComplete("glf") == None)
        self.assertTrue(trie.autoComplete("glg") == None)
        self.assertTrue(trie.autoComplete("glh") == None)
        self.assertTrue(trie.autoComplete("gli") == None)
        self.assertTrue(trie.autoComplete("glj") == None)
        self.assertTrue(trie.autoComplete("glk") == None)
        self.assertTrue(trie.autoComplete("gll") == None)
        self.assertTrue(trie.autoComplete("glm") == None)
        self.assertTrue(trie.autoComplete("gln") == None)
        self.assertTrue(trie.autoComplete("glo") == None)
        self.assertTrue(trie.autoComplete("glp") == None)
        self.assertTrue(trie.autoComplete("glq") == None)
        self.assertTrue(trie.autoComplete("glr") == None)
        self.assertTrue(trie.autoComplete("gls") == None)
        self.assertTrue(trie.autoComplete("glt") == None)
        self.assertTrue(trie.autoComplete("glu") == None)
        self.assertTrue(trie.autoComplete("glv") == None)
        self.assertTrue(trie.autoComplete("glw") == None)
        self.assertTrue(trie.autoComplete("glx") == None)
        self.assertTrue(trie.autoComplete("gly") == None)
        self.assertTrue(trie.autoComplete("glz") == None)
        self.assertTrue(trie.autoComplete("gm") == None)
        self.assertTrue(trie.autoComplete("gma") == None)
        self.assertTrue(trie.autoComplete("gmb") == None)
        self.assertTrue(trie.autoComplete("gmc") == None)
        self.assertTrue(trie.autoComplete("gmd") == None)
        self.assertTrue(trie.autoComplete("gme") == None)
        self.assertTrue(trie.autoComplete("gmf") == None)
        self.assertTrue(trie.autoComplete("gmg") == None)
        self.assertTrue(trie.autoComplete("gmh") == None)
        self.assertTrue(trie.autoComplete("gmi") == None)
        self.assertTrue(trie.autoComplete("gmj") == None)
        self.assertTrue(trie.autoComplete("gmk") == None)
        self.assertTrue(trie.autoComplete("gml") == None)
        self.assertTrue(trie.autoComplete("gmm") == None)
        self.assertTrue(trie.autoComplete("gmn") == None)
        self.assertTrue(trie.autoComplete("gmo") == None)
        self.assertTrue(trie.autoComplete("gmp") == None)
        self.assertTrue(trie.autoComplete("gmq") == None)
        self.assertTrue(trie.autoComplete("gmr") == None)
        self.assertTrue(trie.autoComplete("gms") == None)
        self.assertTrue(trie.autoComplete("gmt") == None)
        self.assertTrue(trie.autoComplete("gmu") == None)
        self.assertTrue(trie.autoComplete("gmv") == None)
        self.assertTrue(trie.autoComplete("gmw") == None)
        self.assertTrue(trie.autoComplete("gmx") == None)
        self.assertTrue(trie.autoComplete("gmy") == None)
        self.assertTrue(trie.autoComplete("gmz") == None)
        self.assertTrue(trie.autoComplete("gn") == None)
        self.assertTrue(trie.autoComplete("gna") == None)
        self.assertTrue(trie.autoComplete("gnb") == None)
        self.assertTrue(trie.autoComplete("gnc") == None)
        self.assertTrue(trie.autoComplete("gnd") == None)
        self.assertTrue(trie.autoComplete("gne") == None)
        self.assertTrue(trie.autoComplete("gnf") == None)
        self.assertTrue(trie.autoComplete("gng") == None)
        self.assertTrue(trie.autoComplete("gnh") == None)
        self.assertTrue(trie.autoComplete("gni") == None)
        self.assertTrue(trie.autoComplete("gnj") == None)
        self.assertTrue(trie.autoComplete("gnk") == None)
        self.assertTrue(trie.autoComplete("gnl") == None)
        self.assertTrue(trie.autoComplete("gnm") == None)
        self.assertTrue(trie.autoComplete("gnn") == None)
        self.assertTrue(trie.autoComplete("gno") == None)
        self.assertTrue(trie.autoComplete("gnp") == None)
        self.assertTrue(trie.autoComplete("gnq") == None)
        self.assertTrue(trie.autoComplete("gnr") == None)
        self.assertTrue(trie.autoComplete("gns") == None)
        self.assertTrue(trie.autoComplete("gnt") == None)
        self.assertTrue(trie.autoComplete("gnu") == None)
        self.assertTrue(trie.autoComplete("gnv") == None)
        self.assertTrue(trie.autoComplete("gnw") == None)
        self.assertTrue(trie.autoComplete("gnx") == None)
        self.assertTrue(trie.autoComplete("gny") == None)
        self.assertTrue(trie.autoComplete("gnz") == None)
        self.assertTrue(trie.autoComplete("go") == "government")
        self.assertTrue(trie.autoComplete("goa") == None)
        self.assertTrue(trie.autoComplete("gob") == None)
        self.assertTrue(trie.autoComplete("goc") == None)
        self.assertTrue(trie.autoComplete("god") == None)
        self.assertTrue(trie.autoComplete("goe") == None)
        self.assertTrue(trie.autoComplete("gof") == None)
        self.assertTrue(trie.autoComplete("gog") == None)
        self.assertTrue(trie.autoComplete("goh") == None)
        self.assertTrue(trie.autoComplete("goi") == "going")
        self.assertTrue(trie.autoComplete("goin") == "going")
        self.assertTrue(trie.autoComplete("going") == "going")
        self.assertTrue(trie.autoComplete("goj") == None)
        self.assertTrue(trie.autoComplete("gok") == None)
        self.assertTrue(trie.autoComplete("gol") == "gold")
        self.assertTrue(trie.autoComplete("gold") == "gold")
        self.assertTrue(trie.autoComplete("gom") == None)
        self.assertTrue(trie.autoComplete("gon") == None)
        self.assertTrue(trie.autoComplete("goo") == "good")
        self.assertTrue(trie.autoComplete("good") == "good")
        self.assertTrue(trie.autoComplete("gop") == None)
        self.assertTrue(trie.autoComplete("goq") == None)
        self.assertTrue(trie.autoComplete("gor") == None)
        self.assertTrue(trie.autoComplete("gos") == None)
        self.assertTrue(trie.autoComplete("got") == None)
        self.assertTrue(trie.autoComplete("gou") == None)
        self.assertTrue(trie.autoComplete("gov") == "government")
        self.assertTrue(trie.autoComplete("gove") == "government")
        self.assertTrue(trie.autoComplete("gover") == "government")
        self.assertTrue(trie.autoComplete("govern") == "government")
        self.assertTrue(trie.autoComplete("governi") == "governing")
        self.assertTrue(trie.autoComplete("governin") == "governing")
        self.assertTrue(trie.autoComplete("governing") == "governing")
        self.assertTrue(trie.autoComplete("governm") == "government")
        self.assertTrue(trie.autoComplete("governme") == "government")
        self.assertTrue(trie.autoComplete("governmen") == "government")
        self.assertTrue(trie.autoComplete("government") == "government")
        self.assertTrue(trie.autoComplete("gow") == None)
        self.assertTrue(trie.autoComplete("gox") == None)
        self.assertTrue(trie.autoComplete("goy") == None)
        self.assertTrue(trie.autoComplete("goz") == None)
        self.assertTrue(trie.autoComplete("gp") == None)
        self.assertTrue(trie.autoComplete("gpa") == None)
        self.assertTrue(trie.autoComplete("gpb") == None)
        self.assertTrue(trie.autoComplete("gpc") == None)
        self.assertTrue(trie.autoComplete("gpd") == None)
        self.assertTrue(trie.autoComplete("gpe") == None)
        self.assertTrue(trie.autoComplete("gpf") == None)
        self.assertTrue(trie.autoComplete("gpg") == None)
        self.assertTrue(trie.autoComplete("gph") == None)
        self.assertTrue(trie.autoComplete("gpi") == None)
        self.assertTrue(trie.autoComplete("gpj") == None)
        self.assertTrue(trie.autoComplete("gpk") == None)
        self.assertTrue(trie.autoComplete("gpl") == None)
        self.assertTrue(trie.autoComplete("gpm") == None)
        self.assertTrue(trie.autoComplete("gpn") == None)
        self.assertTrue(trie.autoComplete("gpo") == None)
        self.assertTrue(trie.autoComplete("gpp") == None)
        self.assertTrue(trie.autoComplete("gpq") == None)
        self.assertTrue(trie.autoComplete("gpr") == None)
        self.assertTrue(trie.autoComplete("gps") == None)
        self.assertTrue(trie.autoComplete("gpt") == None)
        self.assertTrue(trie.autoComplete("gpu") == None)
        self.assertTrue(trie.autoComplete("gpv") == None)
        self.assertTrue(trie.autoComplete("gpw") == None)
        self.assertTrue(trie.autoComplete("gpx") == None)
        self.assertTrue(trie.autoComplete("gpy") == None)
        self.assertTrue(trie.autoComplete("gpz") == None)
        self.assertTrue(trie.autoComplete("gq") == None)
        self.assertTrue(trie.autoComplete("gqa") == None)
        self.assertTrue(trie.autoComplete("gqb") == None)
        self.assertTrue(trie.autoComplete("gqc") == None)
        self.assertTrue(trie.autoComplete("gqd") == None)
        self.assertTrue(trie.autoComplete("gqe") == None)
        self.assertTrue(trie.autoComplete("gqf") == None)
        self.assertTrue(trie.autoComplete("gqg") == None)
        self.assertTrue(trie.autoComplete("gqh") == None)
        self.assertTrue(trie.autoComplete("gqi") == None)
        self.assertTrue(trie.autoComplete("gqj") == None)
        self.assertTrue(trie.autoComplete("gqk") == None)
        self.assertTrue(trie.autoComplete("gql") == None)
        self.assertTrue(trie.autoComplete("gqm") == None)
        self.assertTrue(trie.autoComplete("gqn") == None)
        self.assertTrue(trie.autoComplete("gqo") == None)
        self.assertTrue(trie.autoComplete("gqp") == None)
        self.assertTrue(trie.autoComplete("gqq") == None)
        self.assertTrue(trie.autoComplete("gqr") == None)
        self.assertTrue(trie.autoComplete("gqs") == None)
        self.assertTrue(trie.autoComplete("gqt") == None)
        self.assertTrue(trie.autoComplete("gqu") == None)
        self.assertTrue(trie.autoComplete("gqv") == None)
        self.assertTrue(trie.autoComplete("gqw") == None)
        self.assertTrue(trie.autoComplete("gqx") == None)
        self.assertTrue(trie.autoComplete("gqy") == None)
        self.assertTrue(trie.autoComplete("gqz") == None)
        self.assertTrue(trie.autoComplete("gr") == "grant")
        self.assertTrue(trie.autoComplete("gra") == "grant")
        self.assertTrue(trie.autoComplete("gran") == "grant")
        self.assertTrue(trie.autoComplete("grand") == "grand")
        self.assertTrue(trie.autoComplete("grant") == "grant")
        self.assertTrue(trie.autoComplete("grante") == "granted")
        self.assertTrue(trie.autoComplete("granted") == "granted")
        self.assertTrue(trie.autoComplete("granti") == "granting")
        self.assertTrue(trie.autoComplete("grantin") == "granting")
        self.assertTrue(trie.autoComplete("granting") == "granting")
        self.assertTrue(trie.autoComplete("grants") == "grants")
        self.assertTrue(trie.autoComplete("grb") == None)
        self.assertTrue(trie.autoComplete("grc") == None)
        self.assertTrue(trie.autoComplete("grd") == None)
        self.assertTrue(trie.autoComplete("gre") == "greatest")
        self.assertTrue(trie.autoComplete("grea") == "greatest")
        self.assertTrue(trie.autoComplete("great") == "greatest")
        self.assertTrue(trie.autoComplete("greate") == "greatest")
        self.assertTrue(trie.autoComplete("greates") == "greatest")
        self.assertTrue(trie.autoComplete("greatest") == "greatest")
        self.assertTrue(trie.autoComplete("grf") == None)
        self.assertTrue(trie.autoComplete("grg") == None)
        self.assertTrue(trie.autoComplete("grh") == None)
        self.assertTrue(trie.autoComplete("gri") == "grievances")
        self.assertTrue(trie.autoComplete("grie") == "grievances")
        self.assertTrue(trie.autoComplete("griev") == "grievances")
        self.assertTrue(trie.autoComplete("grieva") == "grievances")
        self.assertTrue(trie.autoComplete("grievan") == "grievances")
        self.assertTrue(trie.autoComplete("grievanc") == "grievances")
        self.assertTrue(trie.autoComplete("grievance") == "grievances")
        self.assertTrue(trie.autoComplete("grievances") == "grievances")
        self.assertTrue(trie.autoComplete("grj") == None)
        self.assertTrue(trie.autoComplete("grk") == None)
        self.assertTrue(trie.autoComplete("grl") == None)
        self.assertTrue(trie.autoComplete("grm") == None)
        self.assertTrue(trie.autoComplete("grn") == None)
        self.assertTrue(trie.autoComplete("gro") == None)
        self.assertTrue(trie.autoComplete("grp") == None)
        self.assertTrue(trie.autoComplete("grq") == None)
        self.assertTrue(trie.autoComplete("grr") == None)
        self.assertTrue(trie.autoComplete("grs") == None)
        self.assertTrue(trie.autoComplete("grt") == None)
        self.assertTrue(trie.autoComplete("gru") == None)
        self.assertTrue(trie.autoComplete("grv") == None)
        self.assertTrue(trie.autoComplete("grw") == None)
        self.assertTrue(trie.autoComplete("grx") == None)
        self.assertTrue(trie.autoComplete("gry") == None)
        self.assertTrue(trie.autoComplete("grz") == None)
        self.assertTrue(trie.autoComplete("gs") == None)
        self.assertTrue(trie.autoComplete("gsa") == None)
        self.assertTrue(trie.autoComplete("gsb") == None)
        self.assertTrue(trie.autoComplete("gsc") == None)
        self.assertTrue(trie.autoComplete("gsd") == None)
        self.assertTrue(trie.autoComplete("gse") == None)
        self.assertTrue(trie.autoComplete("gsf") == None)
        self.assertTrue(trie.autoComplete("gsg") == None)
        self.assertTrue(trie.autoComplete("gsh") == None)
        self.assertTrue(trie.autoComplete("gsi") == None)
        self.assertTrue(trie.autoComplete("gsj") == None)
        self.assertTrue(trie.autoComplete("gsk") == None)
        self.assertTrue(trie.autoComplete("gsl") == None)
        self.assertTrue(trie.autoComplete("gsm") == None)
        self.assertTrue(trie.autoComplete("gsn") == None)
        self.assertTrue(trie.autoComplete("gso") == None)
        self.assertTrue(trie.autoComplete("gsp") == None)
        self.assertTrue(trie.autoComplete("gsq") == None)
        self.assertTrue(trie.autoComplete("gsr") == None)
        self.assertTrue(trie.autoComplete("gss") == None)
        self.assertTrue(trie.autoComplete("gst") == None)
        self.assertTrue(trie.autoComplete("gsu") == None)
        self.assertTrue(trie.autoComplete("gsv") == None)
        self.assertTrue(trie.autoComplete("gsw") == None)
        self.assertTrue(trie.autoComplete("gsx") == None)
        self.assertTrue(trie.autoComplete("gsy") == None)
        self.assertTrue(trie.autoComplete("gsz") == None)
        self.assertTrue(trie.autoComplete("gt") == None)
        self.assertTrue(trie.autoComplete("gta") == None)
        self.assertTrue(trie.autoComplete("gtb") == None)
        self.assertTrue(trie.autoComplete("gtc") == None)
        self.assertTrue(trie.autoComplete("gtd") == None)
        self.assertTrue(trie.autoComplete("gte") == None)
        self.assertTrue(trie.autoComplete("gtf") == None)
        self.assertTrue(trie.autoComplete("gtg") == None)
        self.assertTrue(trie.autoComplete("gth") == None)
        self.assertTrue(trie.autoComplete("gti") == None)
        self.assertTrue(trie.autoComplete("gtj") == None)
        self.assertTrue(trie.autoComplete("gtk") == None)
        self.assertTrue(trie.autoComplete("gtl") == None)
        self.assertTrue(trie.autoComplete("gtm") == None)
        self.assertTrue(trie.autoComplete("gtn") == None)
        self.assertTrue(trie.autoComplete("gto") == None)
        self.assertTrue(trie.autoComplete("gtp") == None)
        self.assertTrue(trie.autoComplete("gtq") == None)
        self.assertTrue(trie.autoComplete("gtr") == None)
        self.assertTrue(trie.autoComplete("gts") == None)
        self.assertTrue(trie.autoComplete("gtt") == None)
        self.assertTrue(trie.autoComplete("gtu") == None)
        self.assertTrue(trie.autoComplete("gtv") == None)
        self.assertTrue(trie.autoComplete("gtw") == None)
        self.assertTrue(trie.autoComplete("gtx") == None)
        self.assertTrue(trie.autoComplete("gty") == None)
        self.assertTrue(trie.autoComplete("gtz") == None)
        self.assertTrue(trie.autoComplete("gu") == "guarantee")
        self.assertTrue(trie.autoComplete("gua") == "guarantee")
        self.assertTrue(trie.autoComplete("guar") == "guarantee")
        self.assertTrue(trie.autoComplete("guara") == "guarantee")
        self.assertTrue(trie.autoComplete("guaran") == "guarantee")
        self.assertTrue(trie.autoComplete("guarant") == "guarantee")
        self.assertTrue(trie.autoComplete("guarante") == "guarantee")
        self.assertTrue(trie.autoComplete("guarantee") == "guarantee")
        self.assertTrue(trie.autoComplete("gub") == None)
        self.assertTrue(trie.autoComplete("guc") == None)
        self.assertTrue(trie.autoComplete("gud") == None)
        self.assertTrue(trie.autoComplete("gue") == None)
        self.assertTrue(trie.autoComplete("guf") == None)
        self.assertTrue(trie.autoComplete("gug") == None)
        self.assertTrue(trie.autoComplete("guh") == None)
        self.assertTrue(trie.autoComplete("gui") == None)
        self.assertTrue(trie.autoComplete("guj") == None)
        self.assertTrue(trie.autoComplete("guk") == None)
        self.assertTrue(trie.autoComplete("gul") == None)
        self.assertTrue(trie.autoComplete("gum") == None)
        self.assertTrue(trie.autoComplete("gun") == None)
        self.assertTrue(trie.autoComplete("guo") == None)
        self.assertTrue(trie.autoComplete("gup") == None)
        self.assertTrue(trie.autoComplete("guq") == None)
        self.assertTrue(trie.autoComplete("gur") == None)
        self.assertTrue(trie.autoComplete("gus") == None)
        self.assertTrue(trie.autoComplete("gut") == None)
        self.assertTrue(trie.autoComplete("guu") == None)
        self.assertTrue(trie.autoComplete("guv") == None)
        self.assertTrue(trie.autoComplete("guw") == None)
        self.assertTrue(trie.autoComplete("gux") == None)
        self.assertTrue(trie.autoComplete("guy") == None)
        self.assertTrue(trie.autoComplete("guz") == None)
        self.assertTrue(trie.autoComplete("gv") == None)
        self.assertTrue(trie.autoComplete("gva") == None)
        self.assertTrue(trie.autoComplete("gvb") == None)
        self.assertTrue(trie.autoComplete("gvc") == None)
        self.assertTrue(trie.autoComplete("gvd") == None)
        self.assertTrue(trie.autoComplete("gve") == None)
        self.assertTrue(trie.autoComplete("gvf") == None)
        self.assertTrue(trie.autoComplete("gvg") == None)
        self.assertTrue(trie.autoComplete("gvh") == None)
        self.assertTrue(trie.autoComplete("gvi") == None)
        self.assertTrue(trie.autoComplete("gvj") == None)
        self.assertTrue(trie.autoComplete("gvk") == None)
        self.assertTrue(trie.autoComplete("gvl") == None)
        self.assertTrue(trie.autoComplete("gvm") == None)
        self.assertTrue(trie.autoComplete("gvn") == None)
        self.assertTrue(trie.autoComplete("gvo") == None)
        self.assertTrue(trie.autoComplete("gvp") == None)
        self.assertTrue(trie.autoComplete("gvq") == None)
        self.assertTrue(trie.autoComplete("gvr") == None)
        self.assertTrue(trie.autoComplete("gvs") == None)
        self.assertTrue(trie.autoComplete("gvt") == None)
        self.assertTrue(trie.autoComplete("gvu") == None)
        self.assertTrue(trie.autoComplete("gvv") == None)
        self.assertTrue(trie.autoComplete("gvw") == None)
        self.assertTrue(trie.autoComplete("gvx") == None)
        self.assertTrue(trie.autoComplete("gvy") == None)
        self.assertTrue(trie.autoComplete("gvz") == None)
        self.assertTrue(trie.autoComplete("gw") == None)
        self.assertTrue(trie.autoComplete("gwa") == None)
        self.assertTrue(trie.autoComplete("gwb") == None)
        self.assertTrue(trie.autoComplete("gwc") == None)
        self.assertTrue(trie.autoComplete("gwd") == None)
        self.assertTrue(trie.autoComplete("gwe") == None)
        self.assertTrue(trie.autoComplete("gwf") == None)
        self.assertTrue(trie.autoComplete("gwg") == None)
        self.assertTrue(trie.autoComplete("gwh") == None)
        self.assertTrue(trie.autoComplete("gwi") == None)
        self.assertTrue(trie.autoComplete("gwj") == None)
        self.assertTrue(trie.autoComplete("gwk") == None)
        self.assertTrue(trie.autoComplete("gwl") == None)
        self.assertTrue(trie.autoComplete("gwm") == None)
        self.assertTrue(trie.autoComplete("gwn") == None)
        self.assertTrue(trie.autoComplete("gwo") == None)
        self.assertTrue(trie.autoComplete("gwp") == None)
        self.assertTrue(trie.autoComplete("gwq") == None)
        self.assertTrue(trie.autoComplete("gwr") == None)
        self.assertTrue(trie.autoComplete("gws") == None)
        self.assertTrue(trie.autoComplete("gwt") == None)
        self.assertTrue(trie.autoComplete("gwu") == None)
        self.assertTrue(trie.autoComplete("gwv") == None)
        self.assertTrue(trie.autoComplete("gww") == None)
        self.assertTrue(trie.autoComplete("gwx") == None)
        self.assertTrue(trie.autoComplete("gwy") == None)
        self.assertTrue(trie.autoComplete("gwz") == None)
        self.assertTrue(trie.autoComplete("gx") == None)
        self.assertTrue(trie.autoComplete("gxa") == None)
        self.assertTrue(trie.autoComplete("gxb") == None)
        self.assertTrue(trie.autoComplete("gxc") == None)
        self.assertTrue(trie.autoComplete("gxd") == None)
        self.assertTrue(trie.autoComplete("gxe") == None)
        self.assertTrue(trie.autoComplete("gxf") == None)
        self.assertTrue(trie.autoComplete("gxg") == None)
        self.assertTrue(trie.autoComplete("gxh") == None)
        self.assertTrue(trie.autoComplete("gxi") == None)
        self.assertTrue(trie.autoComplete("gxj") == None)
        self.assertTrue(trie.autoComplete("gxk") == None)
        self.assertTrue(trie.autoComplete("gxl") == None)
        self.assertTrue(trie.autoComplete("gxm") == None)
        self.assertTrue(trie.autoComplete("gxn") == None)
        self.assertTrue(trie.autoComplete("gxo") == None)
        self.assertTrue(trie.autoComplete("gxp") == None)
        self.assertTrue(trie.autoComplete("gxq") == None)
        self.assertTrue(trie.autoComplete("gxr") == None)
        self.assertTrue(trie.autoComplete("gxs") == None)
        self.assertTrue(trie.autoComplete("gxt") == None)
        self.assertTrue(trie.autoComplete("gxu") == None)
        self.assertTrue(trie.autoComplete("gxv") == None)
        self.assertTrue(trie.autoComplete("gxw") == None)
        self.assertTrue(trie.autoComplete("gxx") == None)
        self.assertTrue(trie.autoComplete("gxy") == None)
        self.assertTrue(trie.autoComplete("gxz") == None)
        self.assertTrue(trie.autoComplete("gy") == None)
        self.assertTrue(trie.autoComplete("gya") == None)
        self.assertTrue(trie.autoComplete("gyb") == None)
        self.assertTrue(trie.autoComplete("gyc") == None)
        self.assertTrue(trie.autoComplete("gyd") == None)
        self.assertTrue(trie.autoComplete("gye") == None)
        self.assertTrue(trie.autoComplete("gyf") == None)
        self.assertTrue(trie.autoComplete("gyg") == None)
        self.assertTrue(trie.autoComplete("gyh") == None)
        self.assertTrue(trie.autoComplete("gyi") == None)
        self.assertTrue(trie.autoComplete("gyj") == None)
        self.assertTrue(trie.autoComplete("gyk") == None)
        self.assertTrue(trie.autoComplete("gyl") == None)
        self.assertTrue(trie.autoComplete("gym") == None)
        self.assertTrue(trie.autoComplete("gyn") == None)
        self.assertTrue(trie.autoComplete("gyo") == None)
        self.assertTrue(trie.autoComplete("gyp") == None)
        self.assertTrue(trie.autoComplete("gyq") == None)
        self.assertTrue(trie.autoComplete("gyr") == None)
        self.assertTrue(trie.autoComplete("gys") == None)
        self.assertTrue(trie.autoComplete("gyt") == None)
        self.assertTrue(trie.autoComplete("gyu") == None)
        self.assertTrue(trie.autoComplete("gyv") == None)
        self.assertTrue(trie.autoComplete("gyw") == None)
        self.assertTrue(trie.autoComplete("gyx") == None)
        self.assertTrue(trie.autoComplete("gyy") == None)
        self.assertTrue(trie.autoComplete("gyz") == None)
        self.assertTrue(trie.autoComplete("gz") == None)
        self.assertTrue(trie.autoComplete("gza") == None)
        self.assertTrue(trie.autoComplete("gzb") == None)
        self.assertTrue(trie.autoComplete("gzc") == None)
        self.assertTrue(trie.autoComplete("gzd") == None)
        self.assertTrue(trie.autoComplete("gze") == None)
        self.assertTrue(trie.autoComplete("gzf") == None)
        self.assertTrue(trie.autoComplete("gzg") == None)
        self.assertTrue(trie.autoComplete("gzh") == None)
        self.assertTrue(trie.autoComplete("gzi") == None)
        self.assertTrue(trie.autoComplete("gzj") == None)
        self.assertTrue(trie.autoComplete("gzk") == None)
        self.assertTrue(trie.autoComplete("gzl") == None)
        self.assertTrue(trie.autoComplete("gzm") == None)
        self.assertTrue(trie.autoComplete("gzn") == None)
        self.assertTrue(trie.autoComplete("gzo") == None)
        self.assertTrue(trie.autoComplete("gzp") == None)
        self.assertTrue(trie.autoComplete("gzq") == None)
        self.assertTrue(trie.autoComplete("gzr") == None)
        self.assertTrue(trie.autoComplete("gzs") == None)
        self.assertTrue(trie.autoComplete("gzt") == None)
        self.assertTrue(trie.autoComplete("gzu") == None)
        self.assertTrue(trie.autoComplete("gzv") == None)
        self.assertTrue(trie.autoComplete("gzw") == None)
        self.assertTrue(trie.autoComplete("gzx") == None)
        self.assertTrue(trie.autoComplete("gzy") == None)
        self.assertTrue(trie.autoComplete("gzz") == None)
        self.assertTrue(trie.autoComplete("h") == "have")
        self.assertTrue(trie.autoComplete("ha") == "have")
        self.assertTrue(trie.autoComplete("haa") == None)
        self.assertTrue(trie.autoComplete("hab") == "habeas")
        self.assertTrue(trie.autoComplete("habe") == "habeas")
        self.assertTrue(trie.autoComplete("habea") == "habeas")
        self.assertTrue(trie.autoComplete("habeas") == "habeas")
        self.assertTrue(trie.autoComplete("hac") == None)
        self.assertTrue(trie.autoComplete("had") == "had")
        self.assertTrue(trie.autoComplete("hae") == None)
        self.assertTrue(trie.autoComplete("haf") == None)
        self.assertTrue(trie.autoComplete("hag") == None)
        self.assertTrue(trie.autoComplete("hah") == None)
        self.assertTrue(trie.autoComplete("hai") == None)
        self.assertTrue(trie.autoComplete("haj") == None)
        self.assertTrue(trie.autoComplete("hak") == None)
        self.assertTrue(trie.autoComplete("hal") == None)
        self.assertTrue(trie.autoComplete("ham") == "hampshire")
        self.assertTrue(trie.autoComplete("hamp") == "hampshire")
        self.assertTrue(trie.autoComplete("hamps") == "hampshire")
        self.assertTrue(trie.autoComplete("hampsh") == "hampshire")
        self.assertTrue(trie.autoComplete("hampshi") == "hampshire")
        self.assertTrue(trie.autoComplete("hampshir") == "hampshire")
        self.assertTrue(trie.autoComplete("hampshire") == "hampshire")
        self.assertTrue(trie.autoComplete("han") == None)
        self.assertTrue(trie.autoComplete("hao") == None)
        self.assertTrue(trie.autoComplete("hap") == "happen")
        self.assertTrue(trie.autoComplete("happ") == "happen")
        self.assertTrue(trie.autoComplete("happe") == "happen")
        self.assertTrue(trie.autoComplete("happen") == "happen")
        self.assertTrue(trie.autoComplete("haq") == None)
        self.assertTrue(trie.autoComplete("har") == None)
        self.assertTrue(trie.autoComplete("has") == "has")
        self.assertTrue(trie.autoComplete("hat") == None)
        self.assertTrue(trie.autoComplete("hau") == None)
        self.assertTrue(trie.autoComplete("hav") == "have")
        self.assertTrue(trie.autoComplete("have") == "have")
        self.assertTrue(trie.autoComplete("havi") == "having")
        self.assertTrue(trie.autoComplete("havin") == "having")
        self.assertTrue(trie.autoComplete("having") == "having")
        self.assertTrue(trie.autoComplete("haw") == None)
        self.assertTrue(trie.autoComplete("hax") == None)
        self.assertTrue(trie.autoComplete("hay") == None)
        self.assertTrue(trie.autoComplete("haz") == None)
        self.assertTrue(trie.autoComplete("hb") == None)
        self.assertTrue(trie.autoComplete("hba") == None)
        self.assertTrue(trie.autoComplete("hbb") == None)
        self.assertTrue(trie.autoComplete("hbc") == None)
        self.assertTrue(trie.autoComplete("hbd") == None)
        self.assertTrue(trie.autoComplete("hbe") == None)
        self.assertTrue(trie.autoComplete("hbf") == None)
        self.assertTrue(trie.autoComplete("hbg") == None)
        self.assertTrue(trie.autoComplete("hbh") == None)
        self.assertTrue(trie.autoComplete("hbi") == None)
        self.assertTrue(trie.autoComplete("hbj") == None)
        self.assertTrue(trie.autoComplete("hbk") == None)
        self.assertTrue(trie.autoComplete("hbl") == None)
        self.assertTrue(trie.autoComplete("hbm") == None)
        self.assertTrue(trie.autoComplete("hbn") == None)
        self.assertTrue(trie.autoComplete("hbo") == None)
        self.assertTrue(trie.autoComplete("hbp") == None)
        self.assertTrue(trie.autoComplete("hbq") == None)
        self.assertTrue(trie.autoComplete("hbr") == None)
        self.assertTrue(trie.autoComplete("hbs") == None)
        self.assertTrue(trie.autoComplete("hbt") == None)
        self.assertTrue(trie.autoComplete("hbu") == None)
        self.assertTrue(trie.autoComplete("hbv") == None)
        self.assertTrue(trie.autoComplete("hbw") == None)
        self.assertTrue(trie.autoComplete("hbx") == None)
        self.assertTrue(trie.autoComplete("hby") == None)
        self.assertTrue(trie.autoComplete("hbz") == None)
        self.assertTrue(trie.autoComplete("hc") == None)
        self.assertTrue(trie.autoComplete("hca") == None)
        self.assertTrue(trie.autoComplete("hcb") == None)
        self.assertTrue(trie.autoComplete("hcc") == None)
        self.assertTrue(trie.autoComplete("hcd") == None)
        self.assertTrue(trie.autoComplete("hce") == None)
        self.assertTrue(trie.autoComplete("hcf") == None)
        self.assertTrue(trie.autoComplete("hcg") == None)
        self.assertTrue(trie.autoComplete("hch") == None)
        self.assertTrue(trie.autoComplete("hci") == None)
        self.assertTrue(trie.autoComplete("hcj") == None)
        self.assertTrue(trie.autoComplete("hck") == None)
        self.assertTrue(trie.autoComplete("hcl") == None)
        self.assertTrue(trie.autoComplete("hcm") == None)
        self.assertTrue(trie.autoComplete("hcn") == None)
        self.assertTrue(trie.autoComplete("hco") == None)
        self.assertTrue(trie.autoComplete("hcp") == None)
        self.assertTrue(trie.autoComplete("hcq") == None)
        self.assertTrue(trie.autoComplete("hcr") == None)
        self.assertTrue(trie.autoComplete("hcs") == None)
        self.assertTrue(trie.autoComplete("hct") == None)
        self.assertTrue(trie.autoComplete("hcu") == None)
        self.assertTrue(trie.autoComplete("hcv") == None)
        self.assertTrue(trie.autoComplete("hcw") == None)
        self.assertTrue(trie.autoComplete("hcx") == None)
        self.assertTrue(trie.autoComplete("hcy") == None)
        self.assertTrue(trie.autoComplete("hcz") == None)
        self.assertTrue(trie.autoComplete("hd") == None)
        self.assertTrue(trie.autoComplete("hda") == None)
        self.assertTrue(trie.autoComplete("hdb") == None)
        self.assertTrue(trie.autoComplete("hdc") == None)
        self.assertTrue(trie.autoComplete("hdd") == None)
        self.assertTrue(trie.autoComplete("hde") == None)
        self.assertTrue(trie.autoComplete("hdf") == None)
        self.assertTrue(trie.autoComplete("hdg") == None)
        self.assertTrue(trie.autoComplete("hdh") == None)
        self.assertTrue(trie.autoComplete("hdi") == None)
        self.assertTrue(trie.autoComplete("hdj") == None)
        self.assertTrue(trie.autoComplete("hdk") == None)
        self.assertTrue(trie.autoComplete("hdl") == None)
        self.assertTrue(trie.autoComplete("hdm") == None)
        self.assertTrue(trie.autoComplete("hdn") == None)
        self.assertTrue(trie.autoComplete("hdo") == None)
        self.assertTrue(trie.autoComplete("hdp") == None)
        self.assertTrue(trie.autoComplete("hdq") == None)
        self.assertTrue(trie.autoComplete("hdr") == None)
        self.assertTrue(trie.autoComplete("hds") == None)
        self.assertTrue(trie.autoComplete("hdt") == None)
        self.assertTrue(trie.autoComplete("hdu") == None)
        self.assertTrue(trie.autoComplete("hdv") == None)
        self.assertTrue(trie.autoComplete("hdw") == None)
        self.assertTrue(trie.autoComplete("hdx") == None)
        self.assertTrue(trie.autoComplete("hdy") == None)
        self.assertTrue(trie.autoComplete("hdz") == None)
        self.assertTrue(trie.autoComplete("he") == "he")
        self.assertTrue(trie.autoComplete("hea") == "heads")
        self.assertTrue(trie.autoComplete("head") == "heads")
        self.assertTrue(trie.autoComplete("heads") == "heads")
        self.assertTrue(trie.autoComplete("heb") == None)
        self.assertTrue(trie.autoComplete("hec") == None)
        self.assertTrue(trie.autoComplete("hed") == None)
        self.assertTrue(trie.autoComplete("hee") == None)
        self.assertTrue(trie.autoComplete("hef") == None)
        self.assertTrue(trie.autoComplete("heg") == None)
        self.assertTrue(trie.autoComplete("heh") == None)
        self.assertTrue(trie.autoComplete("hei") == None)
        self.assertTrue(trie.autoComplete("hej") == None)
        self.assertTrue(trie.autoComplete("hek") == None)
        self.assertTrue(trie.autoComplete("hel") == "held")
        self.assertTrue(trie.autoComplete("held") == "held")
        self.assertTrue(trie.autoComplete("hem") == None)
        self.assertTrue(trie.autoComplete("hen") == None)
        self.assertTrue(trie.autoComplete("heo") == None)
        self.assertTrue(trie.autoComplete("hep") == None)
        self.assertTrue(trie.autoComplete("heq") == None)
        self.assertTrue(trie.autoComplete("her") == "hereby")
        self.assertTrue(trie.autoComplete("here") == "hereby")
        self.assertTrue(trie.autoComplete("hereb") == "hereby")
        self.assertTrue(trie.autoComplete("hereby") == "hereby")
        self.assertTrue(trie.autoComplete("herei") == "herein")
        self.assertTrue(trie.autoComplete("herein") == "herein")
        self.assertTrue(trie.autoComplete("hereo") == "hereof")
        self.assertTrue(trie.autoComplete("hereof") == "hereof")
        self.assertTrue(trie.autoComplete("hes") == None)
        self.assertTrue(trie.autoComplete("het") == None)
        self.assertTrue(trie.autoComplete("heu") == None)
        self.assertTrue(trie.autoComplete("hev") == None)
        self.assertTrue(trie.autoComplete("hew") == None)
        self.assertTrue(trie.autoComplete("hex") == None)
        self.assertTrue(trie.autoComplete("hey") == None)
        self.assertTrue(trie.autoComplete("hez") == None)
        self.assertTrue(trie.autoComplete("hf") == None)
        self.assertTrue(trie.autoComplete("hfa") == None)
        self.assertTrue(trie.autoComplete("hfb") == None)
        self.assertTrue(trie.autoComplete("hfc") == None)
        self.assertTrue(trie.autoComplete("hfd") == None)
        self.assertTrue(trie.autoComplete("hfe") == None)
        self.assertTrue(trie.autoComplete("hff") == None)
        self.assertTrue(trie.autoComplete("hfg") == None)
        self.assertTrue(trie.autoComplete("hfh") == None)
        self.assertTrue(trie.autoComplete("hfi") == None)
        self.assertTrue(trie.autoComplete("hfj") == None)
        self.assertTrue(trie.autoComplete("hfk") == None)
        self.assertTrue(trie.autoComplete("hfl") == None)
        self.assertTrue(trie.autoComplete("hfm") == None)
        self.assertTrue(trie.autoComplete("hfn") == None)
        self.assertTrue(trie.autoComplete("hfo") == None)
        self.assertTrue(trie.autoComplete("hfp") == None)
        self.assertTrue(trie.autoComplete("hfq") == None)
        self.assertTrue(trie.autoComplete("hfr") == None)
        self.assertTrue(trie.autoComplete("hfs") == None)
        self.assertTrue(trie.autoComplete("hft") == None)
        self.assertTrue(trie.autoComplete("hfu") == None)
        self.assertTrue(trie.autoComplete("hfv") == None)
        self.assertTrue(trie.autoComplete("hfw") == None)
        self.assertTrue(trie.autoComplete("hfx") == None)
        self.assertTrue(trie.autoComplete("hfy") == None)
        self.assertTrue(trie.autoComplete("hfz") == None)
        self.assertTrue(trie.autoComplete("hg") == None)
        self.assertTrue(trie.autoComplete("hga") == None)
        self.assertTrue(trie.autoComplete("hgb") == None)
        self.assertTrue(trie.autoComplete("hgc") == None)
        self.assertTrue(trie.autoComplete("hgd") == None)
        self.assertTrue(trie.autoComplete("hge") == None)
        self.assertTrue(trie.autoComplete("hgf") == None)
        self.assertTrue(trie.autoComplete("hgg") == None)
        self.assertTrue(trie.autoComplete("hgh") == None)
        self.assertTrue(trie.autoComplete("hgi") == None)
        self.assertTrue(trie.autoComplete("hgj") == None)
        self.assertTrue(trie.autoComplete("hgk") == None)
        self.assertTrue(trie.autoComplete("hgl") == None)
        self.assertTrue(trie.autoComplete("hgm") == None)
        self.assertTrue(trie.autoComplete("hgn") == None)
        self.assertTrue(trie.autoComplete("hgo") == None)
        self.assertTrue(trie.autoComplete("hgp") == None)
        self.assertTrue(trie.autoComplete("hgq") == None)
        self.assertTrue(trie.autoComplete("hgr") == None)
        self.assertTrue(trie.autoComplete("hgs") == None)
        self.assertTrue(trie.autoComplete("hgt") == None)
        self.assertTrue(trie.autoComplete("hgu") == None)
        self.assertTrue(trie.autoComplete("hgv") == None)
        self.assertTrue(trie.autoComplete("hgw") == None)
        self.assertTrue(trie.autoComplete("hgx") == None)
        self.assertTrue(trie.autoComplete("hgy") == None)
        self.assertTrue(trie.autoComplete("hgz") == None)
        self.assertTrue(trie.autoComplete("hh") == None)
        self.assertTrue(trie.autoComplete("hha") == None)
        self.assertTrue(trie.autoComplete("hhb") == None)
        self.assertTrue(trie.autoComplete("hhc") == None)
        self.assertTrue(trie.autoComplete("hhd") == None)
        self.assertTrue(trie.autoComplete("hhe") == None)
        self.assertTrue(trie.autoComplete("hhf") == None)
        self.assertTrue(trie.autoComplete("hhg") == None)
        self.assertTrue(trie.autoComplete("hhh") == None)
        self.assertTrue(trie.autoComplete("hhi") == None)
        self.assertTrue(trie.autoComplete("hhj") == None)
        self.assertTrue(trie.autoComplete("hhk") == None)
        self.assertTrue(trie.autoComplete("hhl") == None)
        self.assertTrue(trie.autoComplete("hhm") == None)
        self.assertTrue(trie.autoComplete("hhn") == None)
        self.assertTrue(trie.autoComplete("hho") == None)
        self.assertTrue(trie.autoComplete("hhp") == None)
        self.assertTrue(trie.autoComplete("hhq") == None)
        self.assertTrue(trie.autoComplete("hhr") == None)
        self.assertTrue(trie.autoComplete("hhs") == None)
        self.assertTrue(trie.autoComplete("hht") == None)
        self.assertTrue(trie.autoComplete("hhu") == None)
        self.assertTrue(trie.autoComplete("hhv") == None)
        self.assertTrue(trie.autoComplete("hhw") == None)
        self.assertTrue(trie.autoComplete("hhx") == None)
        self.assertTrue(trie.autoComplete("hhy") == None)
        self.assertTrue(trie.autoComplete("hhz") == None)
        self.assertTrue(trie.autoComplete("hi") == "his")
        self.assertTrue(trie.autoComplete("hia") == None)
        self.assertTrue(trie.autoComplete("hib") == None)
        self.assertTrue(trie.autoComplete("hic") == None)
        self.assertTrue(trie.autoComplete("hid") == None)
        self.assertTrue(trie.autoComplete("hie") == None)
        self.assertTrue(trie.autoComplete("hif") == None)
        self.assertTrue(trie.autoComplete("hig") == "highest")
        self.assertTrue(trie.autoComplete("high") == "highest")
        self.assertTrue(trie.autoComplete("highe") == "highest")
        self.assertTrue(trie.autoComplete("highes") == "highest")
        self.assertTrue(trie.autoComplete("highest") == "highest")
        self.assertTrue(trie.autoComplete("hih") == None)
        self.assertTrue(trie.autoComplete("hii") == None)
        self.assertTrue(trie.autoComplete("hij") == None)
        self.assertTrue(trie.autoComplete("hik") == None)
        self.assertTrue(trie.autoComplete("hil") == None)
        self.assertTrue(trie.autoComplete("him") == "him")
        self.assertTrue(trie.autoComplete("hims") == "himself")
        self.assertTrue(trie.autoComplete("himse") == "himself")
        self.assertTrue(trie.autoComplete("himsel") == "himself")
        self.assertTrue(trie.autoComplete("himself") == "himself")
        self.assertTrue(trie.autoComplete("hin") == None)
        self.assertTrue(trie.autoComplete("hio") == None)
        self.assertTrue(trie.autoComplete("hip") == None)
        self.assertTrue(trie.autoComplete("hiq") == None)
        self.assertTrue(trie.autoComplete("hir") == None)
        self.assertTrue(trie.autoComplete("his") == "his")
        self.assertTrue(trie.autoComplete("hit") == None)
        self.assertTrue(trie.autoComplete("hiu") == None)
        self.assertTrue(trie.autoComplete("hiv") == None)
        self.assertTrue(trie.autoComplete("hiw") == None)
        self.assertTrue(trie.autoComplete("hix") == None)
        self.assertTrue(trie.autoComplete("hiy") == None)
        self.assertTrue(trie.autoComplete("hiz") == None)
        self.assertTrue(trie.autoComplete("hj") == None)
        self.assertTrue(trie.autoComplete("hja") == None)
        self.assertTrue(trie.autoComplete("hjb") == None)
        self.assertTrue(trie.autoComplete("hjc") == None)
        self.assertTrue(trie.autoComplete("hjd") == None)
        self.assertTrue(trie.autoComplete("hje") == None)
        self.assertTrue(trie.autoComplete("hjf") == None)
        self.assertTrue(trie.autoComplete("hjg") == None)
        self.assertTrue(trie.autoComplete("hjh") == None)
        self.assertTrue(trie.autoComplete("hji") == None)
        self.assertTrue(trie.autoComplete("hjj") == None)
        self.assertTrue(trie.autoComplete("hjk") == None)
        self.assertTrue(trie.autoComplete("hjl") == None)
        self.assertTrue(trie.autoComplete("hjm") == None)
        self.assertTrue(trie.autoComplete("hjn") == None)
        self.assertTrue(trie.autoComplete("hjo") == None)
        self.assertTrue(trie.autoComplete("hjp") == None)
        self.assertTrue(trie.autoComplete("hjq") == None)
        self.assertTrue(trie.autoComplete("hjr") == None)
        self.assertTrue(trie.autoComplete("hjs") == None)
        self.assertTrue(trie.autoComplete("hjt") == None)
        self.assertTrue(trie.autoComplete("hju") == None)
        self.assertTrue(trie.autoComplete("hjv") == None)
        self.assertTrue(trie.autoComplete("hjw") == None)
        self.assertTrue(trie.autoComplete("hjx") == None)
        self.assertTrue(trie.autoComplete("hjy") == None)
        self.assertTrue(trie.autoComplete("hjz") == None)
        self.assertTrue(trie.autoComplete("hk") == None)
        self.assertTrue(trie.autoComplete("hka") == None)
        self.assertTrue(trie.autoComplete("hkb") == None)
        self.assertTrue(trie.autoComplete("hkc") == None)
        self.assertTrue(trie.autoComplete("hkd") == None)
        self.assertTrue(trie.autoComplete("hke") == None)
        self.assertTrue(trie.autoComplete("hkf") == None)
        self.assertTrue(trie.autoComplete("hkg") == None)
        self.assertTrue(trie.autoComplete("hkh") == None)
        self.assertTrue(trie.autoComplete("hki") == None)
        self.assertTrue(trie.autoComplete("hkj") == None)
        self.assertTrue(trie.autoComplete("hkk") == None)
        self.assertTrue(trie.autoComplete("hkl") == None)
        self.assertTrue(trie.autoComplete("hkm") == None)
        self.assertTrue(trie.autoComplete("hkn") == None)
        self.assertTrue(trie.autoComplete("hko") == None)
        self.assertTrue(trie.autoComplete("hkp") == None)
        self.assertTrue(trie.autoComplete("hkq") == None)
        self.assertTrue(trie.autoComplete("hkr") == None)
        self.assertTrue(trie.autoComplete("hks") == None)
        self.assertTrue(trie.autoComplete("hkt") == None)
        self.assertTrue(trie.autoComplete("hku") == None)
        self.assertTrue(trie.autoComplete("hkv") == None)
        self.assertTrue(trie.autoComplete("hkw") == None)
        self.assertTrue(trie.autoComplete("hkx") == None)
        self.assertTrue(trie.autoComplete("hky") == None)
        self.assertTrue(trie.autoComplete("hkz") == None)
        self.assertTrue(trie.autoComplete("hl") == None)
        self.assertTrue(trie.autoComplete("hla") == None)
        self.assertTrue(trie.autoComplete("hlb") == None)
        self.assertTrue(trie.autoComplete("hlc") == None)
        self.assertTrue(trie.autoComplete("hld") == None)
        self.assertTrue(trie.autoComplete("hle") == None)
        self.assertTrue(trie.autoComplete("hlf") == None)
        self.assertTrue(trie.autoComplete("hlg") == None)
        self.assertTrue(trie.autoComplete("hlh") == None)
        self.assertTrue(trie.autoComplete("hli") == None)
        self.assertTrue(trie.autoComplete("hlj") == None)
        self.assertTrue(trie.autoComplete("hlk") == None)
        self.assertTrue(trie.autoComplete("hll") == None)
        self.assertTrue(trie.autoComplete("hlm") == None)
        self.assertTrue(trie.autoComplete("hln") == None)
        self.assertTrue(trie.autoComplete("hlo") == None)
        self.assertTrue(trie.autoComplete("hlp") == None)
        self.assertTrue(trie.autoComplete("hlq") == None)
        self.assertTrue(trie.autoComplete("hlr") == None)
        self.assertTrue(trie.autoComplete("hls") == None)
        self.assertTrue(trie.autoComplete("hlt") == None)
        self.assertTrue(trie.autoComplete("hlu") == None)
        self.assertTrue(trie.autoComplete("hlv") == None)
        self.assertTrue(trie.autoComplete("hlw") == None)
        self.assertTrue(trie.autoComplete("hlx") == None)
        self.assertTrue(trie.autoComplete("hly") == None)
        self.assertTrue(trie.autoComplete("hlz") == None)
        self.assertTrue(trie.autoComplete("hm") == None)
        self.assertTrue(trie.autoComplete("hma") == None)
        self.assertTrue(trie.autoComplete("hmb") == None)
        self.assertTrue(trie.autoComplete("hmc") == None)
        self.assertTrue(trie.autoComplete("hmd") == None)
        self.assertTrue(trie.autoComplete("hme") == None)
        self.assertTrue(trie.autoComplete("hmf") == None)
        self.assertTrue(trie.autoComplete("hmg") == None)
        self.assertTrue(trie.autoComplete("hmh") == None)
        self.assertTrue(trie.autoComplete("hmi") == None)
        self.assertTrue(trie.autoComplete("hmj") == None)
        self.assertTrue(trie.autoComplete("hmk") == None)
        self.assertTrue(trie.autoComplete("hml") == None)
        self.assertTrue(trie.autoComplete("hmm") == None)
        self.assertTrue(trie.autoComplete("hmn") == None)
        self.assertTrue(trie.autoComplete("hmo") == None)
        self.assertTrue(trie.autoComplete("hmp") == None)
        self.assertTrue(trie.autoComplete("hmq") == None)
        self.assertTrue(trie.autoComplete("hmr") == None)
        self.assertTrue(trie.autoComplete("hms") == None)
        self.assertTrue(trie.autoComplete("hmt") == None)
        self.assertTrue(trie.autoComplete("hmu") == None)
        self.assertTrue(trie.autoComplete("hmv") == None)
        self.assertTrue(trie.autoComplete("hmw") == None)
        self.assertTrue(trie.autoComplete("hmx") == None)
        self.assertTrue(trie.autoComplete("hmy") == None)
        self.assertTrue(trie.autoComplete("hmz") == None)
        self.assertTrue(trie.autoComplete("hn") == None)
        self.assertTrue(trie.autoComplete("hna") == None)
        self.assertTrue(trie.autoComplete("hnb") == None)
        self.assertTrue(trie.autoComplete("hnc") == None)
        self.assertTrue(trie.autoComplete("hnd") == None)
        self.assertTrue(trie.autoComplete("hne") == None)
        self.assertTrue(trie.autoComplete("hnf") == None)
        self.assertTrue(trie.autoComplete("hng") == None)
        self.assertTrue(trie.autoComplete("hnh") == None)
        self.assertTrue(trie.autoComplete("hni") == None)
        self.assertTrue(trie.autoComplete("hnj") == None)
        self.assertTrue(trie.autoComplete("hnk") == None)
        self.assertTrue(trie.autoComplete("hnl") == None)
        self.assertTrue(trie.autoComplete("hnm") == None)
        self.assertTrue(trie.autoComplete("hnn") == None)
        self.assertTrue(trie.autoComplete("hno") == None)
        self.assertTrue(trie.autoComplete("hnp") == None)
        self.assertTrue(trie.autoComplete("hnq") == None)
        self.assertTrue(trie.autoComplete("hnr") == None)
        self.assertTrue(trie.autoComplete("hns") == None)
        self.assertTrue(trie.autoComplete("hnt") == None)
        self.assertTrue(trie.autoComplete("hnu") == None)
        self.assertTrue(trie.autoComplete("hnv") == None)
        self.assertTrue(trie.autoComplete("hnw") == None)
        self.assertTrue(trie.autoComplete("hnx") == None)
        self.assertTrue(trie.autoComplete("hny") == None)
        self.assertTrue(trie.autoComplete("hnz") == None)
        self.assertTrue(trie.autoComplete("ho") == "house")
        self.assertTrue(trie.autoComplete("hoa") == None)
        self.assertTrue(trie.autoComplete("hob") == None)
        self.assertTrue(trie.autoComplete("hoc") == None)
        self.assertTrue(trie.autoComplete("hod") == None)
        self.assertTrue(trie.autoComplete("hoe") == None)
        self.assertTrue(trie.autoComplete("hof") == None)
        self.assertTrue(trie.autoComplete("hog") == None)
        self.assertTrue(trie.autoComplete("hoh") == None)
        self.assertTrue(trie.autoComplete("hoi") == None)
        self.assertTrue(trie.autoComplete("hoj") == None)
        self.assertTrue(trie.autoComplete("hok") == None)
        self.assertTrue(trie.autoComplete("hol") == "holding")
        self.assertTrue(trie.autoComplete("hold") == "holding")
        self.assertTrue(trie.autoComplete("holdi") == "holding")
        self.assertTrue(trie.autoComplete("holdin") == "holding")
        self.assertTrue(trie.autoComplete("holding") == "holding")
        self.assertTrue(trie.autoComplete("hom") == None)
        self.assertTrue(trie.autoComplete("hon") == "honor")
        self.assertTrue(trie.autoComplete("hono") == "honor")
        self.assertTrue(trie.autoComplete("honor") == "honor")
        self.assertTrue(trie.autoComplete("hoo") == None)
        self.assertTrue(trie.autoComplete("hop") == None)
        self.assertTrue(trie.autoComplete("hoq") == None)
        self.assertTrue(trie.autoComplete("hor") == None)
        self.assertTrue(trie.autoComplete("hos") == None)
        self.assertTrue(trie.autoComplete("hot") == None)
        self.assertTrue(trie.autoComplete("hou") == "house")
        self.assertTrue(trie.autoComplete("hour") == "hours")
        self.assertTrue(trie.autoComplete("hours") == "hours")
        self.assertTrue(trie.autoComplete("hous") == "house")
        self.assertTrue(trie.autoComplete("house") == "house")
        self.assertTrue(trie.autoComplete("houses") == "houses")
        self.assertTrue(trie.autoComplete("hov") == None)
        self.assertTrue(trie.autoComplete("how") == None)
        self.assertTrue(trie.autoComplete("hox") == None)
        self.assertTrue(trie.autoComplete("hoy") == None)
        self.assertTrue(trie.autoComplete("hoz") == None)
        self.assertTrue(trie.autoComplete("hp") == None)
        self.assertTrue(trie.autoComplete("hpa") == None)
        self.assertTrue(trie.autoComplete("hpb") == None)
        self.assertTrue(trie.autoComplete("hpc") == None)
        self.assertTrue(trie.autoComplete("hpd") == None)
        self.assertTrue(trie.autoComplete("hpe") == None)
        self.assertTrue(trie.autoComplete("hpf") == None)
        self.assertTrue(trie.autoComplete("hpg") == None)
        self.assertTrue(trie.autoComplete("hph") == None)
        self.assertTrue(trie.autoComplete("hpi") == None)
        self.assertTrue(trie.autoComplete("hpj") == None)
        self.assertTrue(trie.autoComplete("hpk") == None)
        self.assertTrue(trie.autoComplete("hpl") == None)
        self.assertTrue(trie.autoComplete("hpm") == None)
        self.assertTrue(trie.autoComplete("hpn") == None)
        self.assertTrue(trie.autoComplete("hpo") == None)
        self.assertTrue(trie.autoComplete("hpp") == None)
        self.assertTrue(trie.autoComplete("hpq") == None)
        self.assertTrue(trie.autoComplete("hpr") == None)
        self.assertTrue(trie.autoComplete("hps") == None)
        self.assertTrue(trie.autoComplete("hpt") == None)
        self.assertTrue(trie.autoComplete("hpu") == None)
        self.assertTrue(trie.autoComplete("hpv") == None)
        self.assertTrue(trie.autoComplete("hpw") == None)
        self.assertTrue(trie.autoComplete("hpx") == None)
        self.assertTrue(trie.autoComplete("hpy") == None)
        self.assertTrue(trie.autoComplete("hpz") == None)
        self.assertTrue(trie.autoComplete("hq") == None)
        self.assertTrue(trie.autoComplete("hqa") == None)
        self.assertTrue(trie.autoComplete("hqb") == None)
        self.assertTrue(trie.autoComplete("hqc") == None)
        self.assertTrue(trie.autoComplete("hqd") == None)
        self.assertTrue(trie.autoComplete("hqe") == None)
        self.assertTrue(trie.autoComplete("hqf") == None)
        self.assertTrue(trie.autoComplete("hqg") == None)
        self.assertTrue(trie.autoComplete("hqh") == None)
        self.assertTrue(trie.autoComplete("hqi") == None)
        self.assertTrue(trie.autoComplete("hqj") == None)
        self.assertTrue(trie.autoComplete("hqk") == None)
        self.assertTrue(trie.autoComplete("hql") == None)
        self.assertTrue(trie.autoComplete("hqm") == None)
        self.assertTrue(trie.autoComplete("hqn") == None)
        self.assertTrue(trie.autoComplete("hqo") == None)
        self.assertTrue(trie.autoComplete("hqp") == None)
        self.assertTrue(trie.autoComplete("hqq") == None)
        self.assertTrue(trie.autoComplete("hqr") == None)
        self.assertTrue(trie.autoComplete("hqs") == None)
        self.assertTrue(trie.autoComplete("hqt") == None)
        self.assertTrue(trie.autoComplete("hqu") == None)
        self.assertTrue(trie.autoComplete("hqv") == None)
        self.assertTrue(trie.autoComplete("hqw") == None)
        self.assertTrue(trie.autoComplete("hqx") == None)
        self.assertTrue(trie.autoComplete("hqy") == None)
        self.assertTrue(trie.autoComplete("hqz") == None)
        self.assertTrue(trie.autoComplete("hr") == None)
        self.assertTrue(trie.autoComplete("hra") == None)
        self.assertTrue(trie.autoComplete("hrb") == None)
        self.assertTrue(trie.autoComplete("hrc") == None)
        self.assertTrue(trie.autoComplete("hrd") == None)
        self.assertTrue(trie.autoComplete("hre") == None)
        self.assertTrue(trie.autoComplete("hrf") == None)
        self.assertTrue(trie.autoComplete("hrg") == None)
        self.assertTrue(trie.autoComplete("hrh") == None)
        self.assertTrue(trie.autoComplete("hri") == None)
        self.assertTrue(trie.autoComplete("hrj") == None)
        self.assertTrue(trie.autoComplete("hrk") == None)
        self.assertTrue(trie.autoComplete("hrl") == None)
        self.assertTrue(trie.autoComplete("hrm") == None)
        self.assertTrue(trie.autoComplete("hrn") == None)
        self.assertTrue(trie.autoComplete("hro") == None)
        self.assertTrue(trie.autoComplete("hrp") == None)
        self.assertTrue(trie.autoComplete("hrq") == None)
        self.assertTrue(trie.autoComplete("hrr") == None)
        self.assertTrue(trie.autoComplete("hrs") == None)
        self.assertTrue(trie.autoComplete("hrt") == None)
        self.assertTrue(trie.autoComplete("hru") == None)
        self.assertTrue(trie.autoComplete("hrv") == None)
        self.assertTrue(trie.autoComplete("hrw") == None)
        self.assertTrue(trie.autoComplete("hrx") == None)
        self.assertTrue(trie.autoComplete("hry") == None)
        self.assertTrue(trie.autoComplete("hrz") == None)
        self.assertTrue(trie.autoComplete("hs") == None)
        self.assertTrue(trie.autoComplete("hsa") == None)
        self.assertTrue(trie.autoComplete("hsb") == None)
        self.assertTrue(trie.autoComplete("hsc") == None)
        self.assertTrue(trie.autoComplete("hsd") == None)
        self.assertTrue(trie.autoComplete("hse") == None)
        self.assertTrue(trie.autoComplete("hsf") == None)
        self.assertTrue(trie.autoComplete("hsg") == None)
        self.assertTrue(trie.autoComplete("hsh") == None)
        self.assertTrue(trie.autoComplete("hsi") == None)
        self.assertTrue(trie.autoComplete("hsj") == None)
        self.assertTrue(trie.autoComplete("hsk") == None)
        self.assertTrue(trie.autoComplete("hsl") == None)
        self.assertTrue(trie.autoComplete("hsm") == None)
        self.assertTrue(trie.autoComplete("hsn") == None)
        self.assertTrue(trie.autoComplete("hso") == None)
        self.assertTrue(trie.autoComplete("hsp") == None)
        self.assertTrue(trie.autoComplete("hsq") == None)
        self.assertTrue(trie.autoComplete("hsr") == None)
        self.assertTrue(trie.autoComplete("hss") == None)
        self.assertTrue(trie.autoComplete("hst") == None)
        self.assertTrue(trie.autoComplete("hsu") == None)
        self.assertTrue(trie.autoComplete("hsv") == None)
        self.assertTrue(trie.autoComplete("hsw") == None)
        self.assertTrue(trie.autoComplete("hsx") == None)
        self.assertTrue(trie.autoComplete("hsy") == None)
        self.assertTrue(trie.autoComplete("hsz") == None)
        self.assertTrue(trie.autoComplete("ht") == None)
        self.assertTrue(trie.autoComplete("hta") == None)
        self.assertTrue(trie.autoComplete("htb") == None)
        self.assertTrue(trie.autoComplete("htc") == None)
        self.assertTrue(trie.autoComplete("htd") == None)
        self.assertTrue(trie.autoComplete("hte") == None)
        self.assertTrue(trie.autoComplete("htf") == None)
        self.assertTrue(trie.autoComplete("htg") == None)
        self.assertTrue(trie.autoComplete("hth") == None)
        self.assertTrue(trie.autoComplete("hti") == None)
        self.assertTrue(trie.autoComplete("htj") == None)
        self.assertTrue(trie.autoComplete("htk") == None)
        self.assertTrue(trie.autoComplete("htl") == None)
        self.assertTrue(trie.autoComplete("htm") == None)
        self.assertTrue(trie.autoComplete("htn") == None)
        self.assertTrue(trie.autoComplete("hto") == None)
        self.assertTrue(trie.autoComplete("htp") == None)
        self.assertTrue(trie.autoComplete("htq") == None)
        self.assertTrue(trie.autoComplete("htr") == None)
        self.assertTrue(trie.autoComplete("hts") == None)
        self.assertTrue(trie.autoComplete("htt") == None)
        self.assertTrue(trie.autoComplete("htu") == None)
        self.assertTrue(trie.autoComplete("htv") == None)
        self.assertTrue(trie.autoComplete("htw") == None)
        self.assertTrue(trie.autoComplete("htx") == None)
        self.assertTrue(trie.autoComplete("hty") == None)
        self.assertTrue(trie.autoComplete("htz") == None)
        self.assertTrue(trie.autoComplete("hu") == "hundred")
        self.assertTrue(trie.autoComplete("hua") == None)
        self.assertTrue(trie.autoComplete("hub") == None)
        self.assertTrue(trie.autoComplete("huc") == None)
        self.assertTrue(trie.autoComplete("hud") == None)
        self.assertTrue(trie.autoComplete("hue") == None)
        self.assertTrue(trie.autoComplete("huf") == None)
        self.assertTrue(trie.autoComplete("hug") == None)
        self.assertTrue(trie.autoComplete("huh") == None)
        self.assertTrue(trie.autoComplete("hui") == None)
        self.assertTrue(trie.autoComplete("huj") == None)
        self.assertTrue(trie.autoComplete("huk") == None)
        self.assertTrue(trie.autoComplete("hul") == None)
        self.assertTrue(trie.autoComplete("hum") == None)
        self.assertTrue(trie.autoComplete("hun") == "hundred")
        self.assertTrue(trie.autoComplete("hund") == "hundred")
        self.assertTrue(trie.autoComplete("hundr") == "hundred")
        self.assertTrue(trie.autoComplete("hundre") == "hundred")
        self.assertTrue(trie.autoComplete("hundred") == "hundred")
        self.assertTrue(trie.autoComplete("huo") == None)
        self.assertTrue(trie.autoComplete("hup") == None)
        self.assertTrue(trie.autoComplete("huq") == None)
        self.assertTrue(trie.autoComplete("hur") == None)
        self.assertTrue(trie.autoComplete("hus") == None)
        self.assertTrue(trie.autoComplete("hut") == None)
        self.assertTrue(trie.autoComplete("huu") == None)
        self.assertTrue(trie.autoComplete("huv") == None)
        self.assertTrue(trie.autoComplete("huw") == None)
        self.assertTrue(trie.autoComplete("hux") == None)
        self.assertTrue(trie.autoComplete("huy") == None)
        self.assertTrue(trie.autoComplete("huz") == None)
        self.assertTrue(trie.autoComplete("hv") == None)
        self.assertTrue(trie.autoComplete("hva") == None)
        self.assertTrue(trie.autoComplete("hvb") == None)
        self.assertTrue(trie.autoComplete("hvc") == None)
        self.assertTrue(trie.autoComplete("hvd") == None)
        self.assertTrue(trie.autoComplete("hve") == None)
        self.assertTrue(trie.autoComplete("hvf") == None)
        self.assertTrue(trie.autoComplete("hvg") == None)
        self.assertTrue(trie.autoComplete("hvh") == None)
        self.assertTrue(trie.autoComplete("hvi") == None)
        self.assertTrue(trie.autoComplete("hvj") == None)
        self.assertTrue(trie.autoComplete("hvk") == None)
        self.assertTrue(trie.autoComplete("hvl") == None)
        self.assertTrue(trie.autoComplete("hvm") == None)
        self.assertTrue(trie.autoComplete("hvn") == None)
        self.assertTrue(trie.autoComplete("hvo") == None)
        self.assertTrue(trie.autoComplete("hvp") == None)
        self.assertTrue(trie.autoComplete("hvq") == None)
        self.assertTrue(trie.autoComplete("hvr") == None)
        self.assertTrue(trie.autoComplete("hvs") == None)
        self.assertTrue(trie.autoComplete("hvt") == None)
        self.assertTrue(trie.autoComplete("hvu") == None)
        self.assertTrue(trie.autoComplete("hvv") == None)
        self.assertTrue(trie.autoComplete("hvw") == None)
        self.assertTrue(trie.autoComplete("hvx") == None)
        self.assertTrue(trie.autoComplete("hvy") == None)
        self.assertTrue(trie.autoComplete("hvz") == None)
        self.assertTrue(trie.autoComplete("hw") == None)
        self.assertTrue(trie.autoComplete("hwa") == None)
        self.assertTrue(trie.autoComplete("hwb") == None)
        self.assertTrue(trie.autoComplete("hwc") == None)
        self.assertTrue(trie.autoComplete("hwd") == None)
        self.assertTrue(trie.autoComplete("hwe") == None)
        self.assertTrue(trie.autoComplete("hwf") == None)
        self.assertTrue(trie.autoComplete("hwg") == None)
        self.assertTrue(trie.autoComplete("hwh") == None)
        self.assertTrue(trie.autoComplete("hwi") == None)
        self.assertTrue(trie.autoComplete("hwj") == None)
        self.assertTrue(trie.autoComplete("hwk") == None)
        self.assertTrue(trie.autoComplete("hwl") == None)
        self.assertTrue(trie.autoComplete("hwm") == None)
        self.assertTrue(trie.autoComplete("hwn") == None)
        self.assertTrue(trie.autoComplete("hwo") == None)
        self.assertTrue(trie.autoComplete("hwp") == None)
        self.assertTrue(trie.autoComplete("hwq") == None)
        self.assertTrue(trie.autoComplete("hwr") == None)
        self.assertTrue(trie.autoComplete("hws") == None)
        self.assertTrue(trie.autoComplete("hwt") == None)
        self.assertTrue(trie.autoComplete("hwu") == None)
        self.assertTrue(trie.autoComplete("hwv") == None)
        self.assertTrue(trie.autoComplete("hww") == None)
        self.assertTrue(trie.autoComplete("hwx") == None)
        self.assertTrue(trie.autoComplete("hwy") == None)
        self.assertTrue(trie.autoComplete("hwz") == None)
        self.assertTrue(trie.autoComplete("hx") == None)
        self.assertTrue(trie.autoComplete("hxa") == None)
        self.assertTrue(trie.autoComplete("hxb") == None)
        self.assertTrue(trie.autoComplete("hxc") == None)
        self.assertTrue(trie.autoComplete("hxd") == None)
        self.assertTrue(trie.autoComplete("hxe") == None)
        self.assertTrue(trie.autoComplete("hxf") == None)
        self.assertTrue(trie.autoComplete("hxg") == None)
        self.assertTrue(trie.autoComplete("hxh") == None)
        self.assertTrue(trie.autoComplete("hxi") == None)
        self.assertTrue(trie.autoComplete("hxj") == None)
        self.assertTrue(trie.autoComplete("hxk") == None)
        self.assertTrue(trie.autoComplete("hxl") == None)
        self.assertTrue(trie.autoComplete("hxm") == None)
        self.assertTrue(trie.autoComplete("hxn") == None)
        self.assertTrue(trie.autoComplete("hxo") == None)
        self.assertTrue(trie.autoComplete("hxp") == None)
        self.assertTrue(trie.autoComplete("hxq") == None)
        self.assertTrue(trie.autoComplete("hxr") == None)
        self.assertTrue(trie.autoComplete("hxs") == None)
        self.assertTrue(trie.autoComplete("hxt") == None)
        self.assertTrue(trie.autoComplete("hxu") == None)
        self.assertTrue(trie.autoComplete("hxv") == None)
        self.assertTrue(trie.autoComplete("hxw") == None)
        self.assertTrue(trie.autoComplete("hxx") == None)
        self.assertTrue(trie.autoComplete("hxy") == None)
        self.assertTrue(trie.autoComplete("hxz") == None)
        self.assertTrue(trie.autoComplete("hy") == None)
        self.assertTrue(trie.autoComplete("hya") == None)
        self.assertTrue(trie.autoComplete("hyb") == None)
        self.assertTrue(trie.autoComplete("hyc") == None)
        self.assertTrue(trie.autoComplete("hyd") == None)
        self.assertTrue(trie.autoComplete("hye") == None)
        self.assertTrue(trie.autoComplete("hyf") == None)
        self.assertTrue(trie.autoComplete("hyg") == None)
        self.assertTrue(trie.autoComplete("hyh") == None)
        self.assertTrue(trie.autoComplete("hyi") == None)
        self.assertTrue(trie.autoComplete("hyj") == None)
        self.assertTrue(trie.autoComplete("hyk") == None)
        self.assertTrue(trie.autoComplete("hyl") == None)
        self.assertTrue(trie.autoComplete("hym") == None)
        self.assertTrue(trie.autoComplete("hyn") == None)
        self.assertTrue(trie.autoComplete("hyo") == None)
        self.assertTrue(trie.autoComplete("hyp") == None)
        self.assertTrue(trie.autoComplete("hyq") == None)
        self.assertTrue(trie.autoComplete("hyr") == None)
        self.assertTrue(trie.autoComplete("hys") == None)
        self.assertTrue(trie.autoComplete("hyt") == None)
        self.assertTrue(trie.autoComplete("hyu") == None)
        self.assertTrue(trie.autoComplete("hyv") == None)
        self.assertTrue(trie.autoComplete("hyw") == None)
        self.assertTrue(trie.autoComplete("hyx") == None)
        self.assertTrue(trie.autoComplete("hyy") == None)
        self.assertTrue(trie.autoComplete("hyz") == None)
        self.assertTrue(trie.autoComplete("hz") == None)
        self.assertTrue(trie.autoComplete("hza") == None)
        self.assertTrue(trie.autoComplete("hzb") == None)
        self.assertTrue(trie.autoComplete("hzc") == None)
        self.assertTrue(trie.autoComplete("hzd") == None)
        self.assertTrue(trie.autoComplete("hze") == None)
        self.assertTrue(trie.autoComplete("hzf") == None)
        self.assertTrue(trie.autoComplete("hzg") == None)
        self.assertTrue(trie.autoComplete("hzh") == None)
        self.assertTrue(trie.autoComplete("hzi") == None)
        self.assertTrue(trie.autoComplete("hzj") == None)
        self.assertTrue(trie.autoComplete("hzk") == None)
        self.assertTrue(trie.autoComplete("hzl") == None)
        self.assertTrue(trie.autoComplete("hzm") == None)
        self.assertTrue(trie.autoComplete("hzn") == None)
        self.assertTrue(trie.autoComplete("hzo") == None)
        self.assertTrue(trie.autoComplete("hzp") == None)
        self.assertTrue(trie.autoComplete("hzq") == None)
        self.assertTrue(trie.autoComplete("hzr") == None)
        self.assertTrue(trie.autoComplete("hzs") == None)
        self.assertTrue(trie.autoComplete("hzt") == None)
        self.assertTrue(trie.autoComplete("hzu") == None)
        self.assertTrue(trie.autoComplete("hzv") == None)
        self.assertTrue(trie.autoComplete("hzw") == None)
        self.assertTrue(trie.autoComplete("hzx") == None)
        self.assertTrue(trie.autoComplete("hzy") == None)
        self.assertTrue(trie.autoComplete("hzz") == None)
        self.assertTrue(trie.autoComplete("i") == "in")
        self.assertTrue(trie.autoComplete("ia") == None)
        self.assertTrue(trie.autoComplete("iaa") == None)
        self.assertTrue(trie.autoComplete("iab") == None)
        self.assertTrue(trie.autoComplete("iac") == None)
        self.assertTrue(trie.autoComplete("iad") == None)
        self.assertTrue(trie.autoComplete("iae") == None)
        self.assertTrue(trie.autoComplete("iaf") == None)
        self.assertTrue(trie.autoComplete("iag") == None)
        self.assertTrue(trie.autoComplete("iah") == None)
        self.assertTrue(trie.autoComplete("iai") == None)
        self.assertTrue(trie.autoComplete("iaj") == None)
        self.assertTrue(trie.autoComplete("iak") == None)
        self.assertTrue(trie.autoComplete("ial") == None)
        self.assertTrue(trie.autoComplete("iam") == None)
        self.assertTrue(trie.autoComplete("ian") == None)
        self.assertTrue(trie.autoComplete("iao") == None)
        self.assertTrue(trie.autoComplete("iap") == None)
        self.assertTrue(trie.autoComplete("iaq") == None)
        self.assertTrue(trie.autoComplete("iar") == None)
        self.assertTrue(trie.autoComplete("ias") == None)
        self.assertTrue(trie.autoComplete("iat") == None)
        self.assertTrue(trie.autoComplete("iau") == None)
        self.assertTrue(trie.autoComplete("iav") == None)
        self.assertTrue(trie.autoComplete("iaw") == None)
        self.assertTrue(trie.autoComplete("iax") == None)
        self.assertTrue(trie.autoComplete("iay") == None)
        self.assertTrue(trie.autoComplete("iaz") == None)
        self.assertTrue(trie.autoComplete("ib") == None)
        self.assertTrue(trie.autoComplete("iba") == None)
        self.assertTrue(trie.autoComplete("ibb") == None)
        self.assertTrue(trie.autoComplete("ibc") == None)
        self.assertTrue(trie.autoComplete("ibd") == None)
        self.assertTrue(trie.autoComplete("ibe") == None)
        self.assertTrue(trie.autoComplete("ibf") == None)
        self.assertTrue(trie.autoComplete("ibg") == None)
        self.assertTrue(trie.autoComplete("ibh") == None)
        self.assertTrue(trie.autoComplete("ibi") == None)
        self.assertTrue(trie.autoComplete("ibj") == None)
        self.assertTrue(trie.autoComplete("ibk") == None)
        self.assertTrue(trie.autoComplete("ibl") == None)
        self.assertTrue(trie.autoComplete("ibm") == None)
        self.assertTrue(trie.autoComplete("ibn") == None)
        self.assertTrue(trie.autoComplete("ibo") == None)
        self.assertTrue(trie.autoComplete("ibp") == None)
        self.assertTrue(trie.autoComplete("ibq") == None)
        self.assertTrue(trie.autoComplete("ibr") == None)
        self.assertTrue(trie.autoComplete("ibs") == None)
        self.assertTrue(trie.autoComplete("ibt") == None)
        self.assertTrue(trie.autoComplete("ibu") == None)
        self.assertTrue(trie.autoComplete("ibv") == None)
        self.assertTrue(trie.autoComplete("ibw") == None)
        self.assertTrue(trie.autoComplete("ibx") == None)
        self.assertTrue(trie.autoComplete("iby") == None)
        self.assertTrue(trie.autoComplete("ibz") == None)
        self.assertTrue(trie.autoComplete("ic") == None)
        self.assertTrue(trie.autoComplete("ica") == None)
        self.assertTrue(trie.autoComplete("icb") == None)
        self.assertTrue(trie.autoComplete("icc") == None)
        self.assertTrue(trie.autoComplete("icd") == None)
        self.assertTrue(trie.autoComplete("ice") == None)
        self.assertTrue(trie.autoComplete("icf") == None)
        self.assertTrue(trie.autoComplete("icg") == None)
        self.assertTrue(trie.autoComplete("ich") == None)
        self.assertTrue(trie.autoComplete("ici") == None)
        self.assertTrue(trie.autoComplete("icj") == None)
        self.assertTrue(trie.autoComplete("ick") == None)
        self.assertTrue(trie.autoComplete("icl") == None)
        self.assertTrue(trie.autoComplete("icm") == None)
        self.assertTrue(trie.autoComplete("icn") == None)
        self.assertTrue(trie.autoComplete("ico") == None)
        self.assertTrue(trie.autoComplete("icp") == None)
        self.assertTrue(trie.autoComplete("icq") == None)
        self.assertTrue(trie.autoComplete("icr") == None)
        self.assertTrue(trie.autoComplete("ics") == None)
        self.assertTrue(trie.autoComplete("ict") == None)
        self.assertTrue(trie.autoComplete("icu") == None)
        self.assertTrue(trie.autoComplete("icv") == None)
        self.assertTrue(trie.autoComplete("icw") == None)
        self.assertTrue(trie.autoComplete("icx") == None)
        self.assertTrue(trie.autoComplete("icy") == None)
        self.assertTrue(trie.autoComplete("icz") == None)
        self.assertTrue(trie.autoComplete("id") == None)
        self.assertTrue(trie.autoComplete("ida") == None)
        self.assertTrue(trie.autoComplete("idb") == None)
        self.assertTrue(trie.autoComplete("idc") == None)
        self.assertTrue(trie.autoComplete("idd") == None)
        self.assertTrue(trie.autoComplete("ide") == None)
        self.assertTrue(trie.autoComplete("idf") == None)
        self.assertTrue(trie.autoComplete("idg") == None)
        self.assertTrue(trie.autoComplete("idh") == None)
        self.assertTrue(trie.autoComplete("idi") == None)
        self.assertTrue(trie.autoComplete("idj") == None)
        self.assertTrue(trie.autoComplete("idk") == None)
        self.assertTrue(trie.autoComplete("idl") == None)
        self.assertTrue(trie.autoComplete("idm") == None)
        self.assertTrue(trie.autoComplete("idn") == None)
        self.assertTrue(trie.autoComplete("ido") == None)
        self.assertTrue(trie.autoComplete("idp") == None)
        self.assertTrue(trie.autoComplete("idq") == None)
        self.assertTrue(trie.autoComplete("idr") == None)
        self.assertTrue(trie.autoComplete("ids") == None)
        self.assertTrue(trie.autoComplete("idt") == None)
        self.assertTrue(trie.autoComplete("idu") == None)
        self.assertTrue(trie.autoComplete("idv") == None)
        self.assertTrue(trie.autoComplete("idw") == None)
        self.assertTrue(trie.autoComplete("idx") == None)
        self.assertTrue(trie.autoComplete("idy") == None)
        self.assertTrue(trie.autoComplete("idz") == None)
        self.assertTrue(trie.autoComplete("ie") == None)
        self.assertTrue(trie.autoComplete("iea") == None)
        self.assertTrue(trie.autoComplete("ieb") == None)
        self.assertTrue(trie.autoComplete("iec") == None)
        self.assertTrue(trie.autoComplete("ied") == None)
        self.assertTrue(trie.autoComplete("iee") == None)
        self.assertTrue(trie.autoComplete("ief") == None)
        self.assertTrue(trie.autoComplete("ieg") == None)
        self.assertTrue(trie.autoComplete("ieh") == None)
        self.assertTrue(trie.autoComplete("iei") == None)
        self.assertTrue(trie.autoComplete("iej") == None)
        self.assertTrue(trie.autoComplete("iek") == None)
        self.assertTrue(trie.autoComplete("iel") == None)
        self.assertTrue(trie.autoComplete("iem") == None)
        self.assertTrue(trie.autoComplete("ien") == None)
        self.assertTrue(trie.autoComplete("ieo") == None)
        self.assertTrue(trie.autoComplete("iep") == None)
        self.assertTrue(trie.autoComplete("ieq") == None)
        self.assertTrue(trie.autoComplete("ier") == None)
        self.assertTrue(trie.autoComplete("ies") == None)
        self.assertTrue(trie.autoComplete("iet") == None)
        self.assertTrue(trie.autoComplete("ieu") == None)
        self.assertTrue(trie.autoComplete("iev") == None)
        self.assertTrue(trie.autoComplete("iew") == None)
        self.assertTrue(trie.autoComplete("iex") == None)
        self.assertTrue(trie.autoComplete("iey") == None)
        self.assertTrue(trie.autoComplete("iez") == None)
        self.assertTrue(trie.autoComplete("if") == "if")
        self.assertTrue(trie.autoComplete("ifa") == None)
        self.assertTrue(trie.autoComplete("ifb") == None)
        self.assertTrue(trie.autoComplete("ifc") == None)
        self.assertTrue(trie.autoComplete("ifd") == None)
        self.assertTrue(trie.autoComplete("ife") == None)
        self.assertTrue(trie.autoComplete("iff") == None)
        self.assertTrue(trie.autoComplete("ifg") == None)
        self.assertTrue(trie.autoComplete("ifh") == None)
        self.assertTrue(trie.autoComplete("ifi") == None)
        self.assertTrue(trie.autoComplete("ifj") == None)
        self.assertTrue(trie.autoComplete("ifk") == None)
        self.assertTrue(trie.autoComplete("ifl") == None)
        self.assertTrue(trie.autoComplete("ifm") == None)
        self.assertTrue(trie.autoComplete("ifn") == None)
        self.assertTrue(trie.autoComplete("ifo") == None)
        self.assertTrue(trie.autoComplete("ifp") == None)
        self.assertTrue(trie.autoComplete("ifq") == None)
        self.assertTrue(trie.autoComplete("ifr") == None)
        self.assertTrue(trie.autoComplete("ifs") == None)
        self.assertTrue(trie.autoComplete("ift") == None)
        self.assertTrue(trie.autoComplete("ifu") == None)
        self.assertTrue(trie.autoComplete("ifv") == None)
        self.assertTrue(trie.autoComplete("ifw") == None)
        self.assertTrue(trie.autoComplete("ifx") == None)
        self.assertTrue(trie.autoComplete("ify") == None)
        self.assertTrue(trie.autoComplete("ifz") == None)
        self.assertTrue(trie.autoComplete("ig") == None)
        self.assertTrue(trie.autoComplete("iga") == None)
        self.assertTrue(trie.autoComplete("igb") == None)
        self.assertTrue(trie.autoComplete("igc") == None)
        self.assertTrue(trie.autoComplete("igd") == None)
        self.assertTrue(trie.autoComplete("ige") == None)
        self.assertTrue(trie.autoComplete("igf") == None)
        self.assertTrue(trie.autoComplete("igg") == None)
        self.assertTrue(trie.autoComplete("igh") == None)
        self.assertTrue(trie.autoComplete("igi") == None)
        self.assertTrue(trie.autoComplete("igj") == None)
        self.assertTrue(trie.autoComplete("igk") == None)
        self.assertTrue(trie.autoComplete("igl") == None)
        self.assertTrue(trie.autoComplete("igm") == None)
        self.assertTrue(trie.autoComplete("ign") == None)
        self.assertTrue(trie.autoComplete("igo") == None)
        self.assertTrue(trie.autoComplete("igp") == None)
        self.assertTrue(trie.autoComplete("igq") == None)
        self.assertTrue(trie.autoComplete("igr") == None)
        self.assertTrue(trie.autoComplete("igs") == None)
        self.assertTrue(trie.autoComplete("igt") == None)
        self.assertTrue(trie.autoComplete("igu") == None)
        self.assertTrue(trie.autoComplete("igv") == None)
        self.assertTrue(trie.autoComplete("igw") == None)
        self.assertTrue(trie.autoComplete("igx") == None)
        self.assertTrue(trie.autoComplete("igy") == None)
        self.assertTrue(trie.autoComplete("igz") == None)
        self.assertTrue(trie.autoComplete("ih") == None)
        self.assertTrue(trie.autoComplete("iha") == None)
        self.assertTrue(trie.autoComplete("ihb") == None)
        self.assertTrue(trie.autoComplete("ihc") == None)
        self.assertTrue(trie.autoComplete("ihd") == None)
        self.assertTrue(trie.autoComplete("ihe") == None)
        self.assertTrue(trie.autoComplete("ihf") == None)
        self.assertTrue(trie.autoComplete("ihg") == None)
        self.assertTrue(trie.autoComplete("ihh") == None)
        self.assertTrue(trie.autoComplete("ihi") == None)
        self.assertTrue(trie.autoComplete("ihj") == None)
        self.assertTrue(trie.autoComplete("ihk") == None)
        self.assertTrue(trie.autoComplete("ihl") == None)
        self.assertTrue(trie.autoComplete("ihm") == None)
        self.assertTrue(trie.autoComplete("ihn") == None)
        self.assertTrue(trie.autoComplete("iho") == None)
        self.assertTrue(trie.autoComplete("ihp") == None)
        self.assertTrue(trie.autoComplete("ihq") == None)
        self.assertTrue(trie.autoComplete("ihr") == None)
        self.assertTrue(trie.autoComplete("ihs") == None)
        self.assertTrue(trie.autoComplete("iht") == None)
        self.assertTrue(trie.autoComplete("ihu") == None)
        self.assertTrue(trie.autoComplete("ihv") == None)
        self.assertTrue(trie.autoComplete("ihw") == None)
        self.assertTrue(trie.autoComplete("ihx") == None)
        self.assertTrue(trie.autoComplete("ihy") == None)
        self.assertTrue(trie.autoComplete("ihz") == None)
        self.assertTrue(trie.autoComplete("ii") == "ii")
        self.assertTrue(trie.autoComplete("iia") == None)
        self.assertTrue(trie.autoComplete("iib") == None)
        self.assertTrue(trie.autoComplete("iic") == None)
        self.assertTrue(trie.autoComplete("iid") == None)
        self.assertTrue(trie.autoComplete("iie") == None)
        self.assertTrue(trie.autoComplete("iif") == None)
        self.assertTrue(trie.autoComplete("iig") == None)
        self.assertTrue(trie.autoComplete("iih") == None)
        self.assertTrue(trie.autoComplete("iii") == "iii")
        self.assertTrue(trie.autoComplete("iij") == None)
        self.assertTrue(trie.autoComplete("iik") == None)
        self.assertTrue(trie.autoComplete("iil") == None)
        self.assertTrue(trie.autoComplete("iim") == None)
        self.assertTrue(trie.autoComplete("iin") == None)
        self.assertTrue(trie.autoComplete("iio") == None)
        self.assertTrue(trie.autoComplete("iip") == None)
        self.assertTrue(trie.autoComplete("iiq") == None)
        self.assertTrue(trie.autoComplete("iir") == None)
        self.assertTrue(trie.autoComplete("iis") == None)
        self.assertTrue(trie.autoComplete("iit") == None)
        self.assertTrue(trie.autoComplete("iiu") == None)
        self.assertTrue(trie.autoComplete("iiv") == None)
        self.assertTrue(trie.autoComplete("iiw") == None)
        self.assertTrue(trie.autoComplete("iix") == None)
        self.assertTrue(trie.autoComplete("iiy") == None)
        self.assertTrue(trie.autoComplete("iiz") == None)
        self.assertTrue(trie.autoComplete("ij") == None)
        self.assertTrue(trie.autoComplete("ija") == None)
        self.assertTrue(trie.autoComplete("ijb") == None)
        self.assertTrue(trie.autoComplete("ijc") == None)
        self.assertTrue(trie.autoComplete("ijd") == None)
        self.assertTrue(trie.autoComplete("ije") == None)
        self.assertTrue(trie.autoComplete("ijf") == None)
        self.assertTrue(trie.autoComplete("ijg") == None)
        self.assertTrue(trie.autoComplete("ijh") == None)
        self.assertTrue(trie.autoComplete("iji") == None)
        self.assertTrue(trie.autoComplete("ijj") == None)
        self.assertTrue(trie.autoComplete("ijk") == None)
        self.assertTrue(trie.autoComplete("ijl") == None)
        self.assertTrue(trie.autoComplete("ijm") == None)
        self.assertTrue(trie.autoComplete("ijn") == None)
        self.assertTrue(trie.autoComplete("ijo") == None)
        self.assertTrue(trie.autoComplete("ijp") == None)
        self.assertTrue(trie.autoComplete("ijq") == None)
        self.assertTrue(trie.autoComplete("ijr") == None)
        self.assertTrue(trie.autoComplete("ijs") == None)
        self.assertTrue(trie.autoComplete("ijt") == None)
        self.assertTrue(trie.autoComplete("iju") == None)
        self.assertTrue(trie.autoComplete("ijv") == None)
        self.assertTrue(trie.autoComplete("ijw") == None)
        self.assertTrue(trie.autoComplete("ijx") == None)
        self.assertTrue(trie.autoComplete("ijy") == None)
        self.assertTrue(trie.autoComplete("ijz") == None)
        self.assertTrue(trie.autoComplete("ik") == None)
        self.assertTrue(trie.autoComplete("ika") == None)
        self.assertTrue(trie.autoComplete("ikb") == None)
        self.assertTrue(trie.autoComplete("ikc") == None)
        self.assertTrue(trie.autoComplete("ikd") == None)
        self.assertTrue(trie.autoComplete("ike") == None)
        self.assertTrue(trie.autoComplete("ikf") == None)
        self.assertTrue(trie.autoComplete("ikg") == None)
        self.assertTrue(trie.autoComplete("ikh") == None)
        self.assertTrue(trie.autoComplete("iki") == None)
        self.assertTrue(trie.autoComplete("ikj") == None)
        self.assertTrue(trie.autoComplete("ikk") == None)
        self.assertTrue(trie.autoComplete("ikl") == None)
        self.assertTrue(trie.autoComplete("ikm") == None)
        self.assertTrue(trie.autoComplete("ikn") == None)
        self.assertTrue(trie.autoComplete("iko") == None)
        self.assertTrue(trie.autoComplete("ikp") == None)
        self.assertTrue(trie.autoComplete("ikq") == None)
        self.assertTrue(trie.autoComplete("ikr") == None)
        self.assertTrue(trie.autoComplete("iks") == None)
        self.assertTrue(trie.autoComplete("ikt") == None)
        self.assertTrue(trie.autoComplete("iku") == None)
        self.assertTrue(trie.autoComplete("ikv") == None)
        self.assertTrue(trie.autoComplete("ikw") == None)
        self.assertTrue(trie.autoComplete("ikx") == None)
        self.assertTrue(trie.autoComplete("iky") == None)
        self.assertTrue(trie.autoComplete("ikz") == None)
        self.assertTrue(trie.autoComplete("il") == "illegal")
        self.assertTrue(trie.autoComplete("ila") == None)
        self.assertTrue(trie.autoComplete("ilb") == None)
        self.assertTrue(trie.autoComplete("ilc") == None)
        self.assertTrue(trie.autoComplete("ild") == None)
        self.assertTrue(trie.autoComplete("ile") == None)
        self.assertTrue(trie.autoComplete("ilf") == None)
        self.assertTrue(trie.autoComplete("ilg") == None)
        self.assertTrue(trie.autoComplete("ilh") == None)
        self.assertTrue(trie.autoComplete("ili") == None)
        self.assertTrue(trie.autoComplete("ilj") == None)
        self.assertTrue(trie.autoComplete("ilk") == None)
        self.assertTrue(trie.autoComplete("ill") == "illegal")
        self.assertTrue(trie.autoComplete("ille") == "illegal")
        self.assertTrue(trie.autoComplete("illeg") == "illegal")
        self.assertTrue(trie.autoComplete("illega") == "illegal")
        self.assertTrue(trie.autoComplete("illegal") == "illegal")
        self.assertTrue(trie.autoComplete("ilm") == None)
        self.assertTrue(trie.autoComplete("iln") == None)
        self.assertTrue(trie.autoComplete("ilo") == None)
        self.assertTrue(trie.autoComplete("ilp") == None)
        self.assertTrue(trie.autoComplete("ilq") == None)
        self.assertTrue(trie.autoComplete("ilr") == None)
        self.assertTrue(trie.autoComplete("ils") == None)
        self.assertTrue(trie.autoComplete("ilt") == None)
        self.assertTrue(trie.autoComplete("ilu") == None)
        self.assertTrue(trie.autoComplete("ilv") == None)
        self.assertTrue(trie.autoComplete("ilw") == None)
        self.assertTrue(trie.autoComplete("ilx") == None)
        self.assertTrue(trie.autoComplete("ily") == None)
        self.assertTrue(trie.autoComplete("ilz") == None)
        self.assertTrue(trie.autoComplete("im") == "impeachment")
        self.assertTrue(trie.autoComplete("ima") == None)
        self.assertTrue(trie.autoComplete("imb") == None)
        self.assertTrue(trie.autoComplete("imc") == None)
        self.assertTrue(trie.autoComplete("imd") == None)
        self.assertTrue(trie.autoComplete("ime") == None)
        self.assertTrue(trie.autoComplete("imf") == None)
        self.assertTrue(trie.autoComplete("img") == None)
        self.assertTrue(trie.autoComplete("imh") == None)
        self.assertTrue(trie.autoComplete("imi") == None)
        self.assertTrue(trie.autoComplete("imj") == None)
        self.assertTrue(trie.autoComplete("imk") == None)
        self.assertTrue(trie.autoComplete("iml") == None)
        self.assertTrue(trie.autoComplete("imm") == "immediately")
        self.assertTrue(trie.autoComplete("imme") == "immediately")
        self.assertTrue(trie.autoComplete("immed") == "immediately")
        self.assertTrue(trie.autoComplete("immedi") == "immediately")
        self.assertTrue(trie.autoComplete("immedia") == "immediately")
        self.assertTrue(trie.autoComplete("immediat") == "immediately")
        self.assertTrue(trie.autoComplete("immediate") == "immediately")
        self.assertTrue(trie.autoComplete("immediatel") == "immediately")
        self.assertTrue(trie.autoComplete("immediately") == "immediately")
        self.assertTrue(trie.autoComplete("immi") == "imminent")
        self.assertTrue(trie.autoComplete("immin") == "imminent")
        self.assertTrue(trie.autoComplete("immine") == "imminent")
        self.assertTrue(trie.autoComplete("imminen") == "imminent")
        self.assertTrue(trie.autoComplete("imminent") == "imminent")
        self.assertTrue(trie.autoComplete("immu") == "immunities")
        self.assertTrue(trie.autoComplete("immun") == "immunities")
        self.assertTrue(trie.autoComplete("immuni") == "immunities")
        self.assertTrue(trie.autoComplete("immunit") == "immunities")
        self.assertTrue(trie.autoComplete("immuniti") == "immunities")
        self.assertTrue(trie.autoComplete("immunitie") == "immunities")
        self.assertTrue(trie.autoComplete("immunities") == "immunities")
        self.assertTrue(trie.autoComplete("imn") == None)
        self.assertTrue(trie.autoComplete("imo") == None)
        self.assertTrue(trie.autoComplete("imp") == "impeachment")
        self.assertTrue(trie.autoComplete("impa") == "impairing")
        self.assertTrue(trie.autoComplete("impai") == "impairing")
        self.assertTrue(trie.autoComplete("impair") == "impairing")
        self.assertTrue(trie.autoComplete("impairi") == "impairing")
        self.assertTrue(trie.autoComplete("impairin") == "impairing")
        self.assertTrue(trie.autoComplete("impairing") == "impairing")
        self.assertTrue(trie.autoComplete("impar") == "impartial")
        self.assertTrue(trie.autoComplete("impart") == "impartial")
        self.assertTrue(trie.autoComplete("imparti") == "impartial")
        self.assertTrue(trie.autoComplete("impartia") == "impartial")
        self.assertTrue(trie.autoComplete("impartial") == "impartial")
        self.assertTrue(trie.autoComplete("impe") == "impeachment")
        self.assertTrue(trie.autoComplete("impea") == "impeachment")
        self.assertTrue(trie.autoComplete("impeac") == "impeachment")
        self.assertTrue(trie.autoComplete("impeach") == "impeachment")
        self.assertTrue(trie.autoComplete("impeachm") == "impeachment")
        self.assertTrue(trie.autoComplete("impeachme") == "impeachment")
        self.assertTrue(trie.autoComplete("impeachmen") == "impeachment")
        self.assertTrue(trie.autoComplete("impeachment") == "impeachment")
        self.assertTrue(trie.autoComplete("impeachments") == "impeachments")
        self.assertTrue(trie.autoComplete("impo") == "importation")
        self.assertTrue(trie.autoComplete("impor") == "importation")
        self.assertTrue(trie.autoComplete("import") == "importation")
        self.assertTrue(trie.autoComplete("importa") == "importation")
        self.assertTrue(trie.autoComplete("importat") == "importation")
        self.assertTrue(trie.autoComplete("importati") == "importation")
        self.assertTrue(trie.autoComplete("importatio") == "importation")
        self.assertTrue(trie.autoComplete("importation") == "importation")
        self.assertTrue(trie.autoComplete("imports") == "imports")
        self.assertTrue(trie.autoComplete("impos") == "imposts")
        self.assertTrue(trie.autoComplete("impose") == "imposed")
        self.assertTrue(trie.autoComplete("imposed") == "imposed")
        self.assertTrue(trie.autoComplete("impost") == "imposts")
        self.assertTrue(trie.autoComplete("imposts") == "imposts")
        self.assertTrue(trie.autoComplete("imq") == None)
        self.assertTrue(trie.autoComplete("imr") == None)
        self.assertTrue(trie.autoComplete("ims") == None)
        self.assertTrue(trie.autoComplete("imt") == None)
        self.assertTrue(trie.autoComplete("imu") == None)
        self.assertTrue(trie.autoComplete("imv") == None)
        self.assertTrue(trie.autoComplete("imw") == None)
        self.assertTrue(trie.autoComplete("imx") == None)
        self.assertTrue(trie.autoComplete("imy") == None)
        self.assertTrue(trie.autoComplete("imz") == None)
        self.assertTrue(trie.autoComplete("in") == "in")
        self.assertTrue(trie.autoComplete("ina") == "inability")
        self.assertTrue(trie.autoComplete("inab") == "inability")
        self.assertTrue(trie.autoComplete("inabi") == "inability")
        self.assertTrue(trie.autoComplete("inabil") == "inability")
        self.assertTrue(trie.autoComplete("inabili") == "inability")
        self.assertTrue(trie.autoComplete("inabilit") == "inability")
        self.assertTrue(trie.autoComplete("inability") == "inability")
        self.assertTrue(trie.autoComplete("inb") == None)
        self.assertTrue(trie.autoComplete("inc") == "including")
        self.assertTrue(trie.autoComplete("incl") == "including")
        self.assertTrue(trie.autoComplete("inclu") == "including")
        self.assertTrue(trie.autoComplete("includ") == "including")
        self.assertTrue(trie.autoComplete("include") == "included")
        self.assertTrue(trie.autoComplete("included") == "included")
        self.assertTrue(trie.autoComplete("includi") == "including")
        self.assertTrue(trie.autoComplete("includin") == "including")
        self.assertTrue(trie.autoComplete("including") == "including")
        self.assertTrue(trie.autoComplete("inco") == "incomes")
        self.assertTrue(trie.autoComplete("incom") == "incomes")
        self.assertTrue(trie.autoComplete("income") == "incomes")
        self.assertTrue(trie.autoComplete("incomes") == "incomes")
        self.assertTrue(trie.autoComplete("incr") == "increased")
        self.assertTrue(trie.autoComplete("incre") == "increased")
        self.assertTrue(trie.autoComplete("increa") == "increased")
        self.assertTrue(trie.autoComplete("increas") == "increased")
        self.assertTrue(trie.autoComplete("increase") == "increased")
        self.assertTrue(trie.autoComplete("increased") == "increased")
        self.assertTrue(trie.autoComplete("incu") == "incurred")
        self.assertTrue(trie.autoComplete("incur") == "incurred")
        self.assertTrue(trie.autoComplete("incurr") == "incurred")
        self.assertTrue(trie.autoComplete("incurre") == "incurred")
        self.assertTrue(trie.autoComplete("incurred") == "incurred")
        self.assertTrue(trie.autoComplete("ind") == "indians")
        self.assertTrue(trie.autoComplete("indi") == "indians")
        self.assertTrue(trie.autoComplete("india") == "indians")
        self.assertTrue(trie.autoComplete("indian") == "indians")
        self.assertTrue(trie.autoComplete("indians") == "indians")
        self.assertTrue(trie.autoComplete("indic") == "indictment")
        self.assertTrue(trie.autoComplete("indict") == "indictment")
        self.assertTrue(trie.autoComplete("indictm") == "indictment")
        self.assertTrue(trie.autoComplete("indictme") == "indictment")
        self.assertTrue(trie.autoComplete("indictmen") == "indictment")
        self.assertTrue(trie.autoComplete("indictment") == "indictment")
        self.assertTrue(trie.autoComplete("ine") == "ineligible")
        self.assertTrue(trie.autoComplete("inel") == "ineligible")
        self.assertTrue(trie.autoComplete("ineli") == "ineligible")
        self.assertTrue(trie.autoComplete("inelig") == "ineligible")
        self.assertTrue(trie.autoComplete("ineligi") == "ineligible")
        self.assertTrue(trie.autoComplete("ineligib") == "ineligible")
        self.assertTrue(trie.autoComplete("ineligibl") == "ineligible")
        self.assertTrue(trie.autoComplete("ineligible") == "ineligible")
        self.assertTrue(trie.autoComplete("inf") == "inferior")
        self.assertTrue(trie.autoComplete("infa") == "infamous")
        self.assertTrue(trie.autoComplete("infam") == "infamous")
        self.assertTrue(trie.autoComplete("infamo") == "infamous")
        self.assertTrue(trie.autoComplete("infamou") == "infamous")
        self.assertTrue(trie.autoComplete("infamous") == "infamous")
        self.assertTrue(trie.autoComplete("infe") == "inferior")
        self.assertTrue(trie.autoComplete("infer") == "inferior")
        self.assertTrue(trie.autoComplete("inferi") == "inferior")
        self.assertTrue(trie.autoComplete("inferio") == "inferior")
        self.assertTrue(trie.autoComplete("inferior") == "inferior")
        self.assertTrue(trie.autoComplete("infl") == "inflicted")
        self.assertTrue(trie.autoComplete("infli") == "inflicted")
        self.assertTrue(trie.autoComplete("inflic") == "inflicted")
        self.assertTrue(trie.autoComplete("inflict") == "inflicted")
        self.assertTrue(trie.autoComplete("inflicte") == "inflicted")
        self.assertTrue(trie.autoComplete("inflicted") == "inflicted")
        self.assertTrue(trie.autoComplete("info") == "information")
        self.assertTrue(trie.autoComplete("infor") == "information")
        self.assertTrue(trie.autoComplete("inform") == "information")
        self.assertTrue(trie.autoComplete("informa") == "information")
        self.assertTrue(trie.autoComplete("informat") == "information")
        self.assertTrue(trie.autoComplete("informati") == "information")
        self.assertTrue(trie.autoComplete("informatio") == "information")
        self.assertTrue(trie.autoComplete("information") == "information")
        self.assertTrue(trie.autoComplete("informe") == "informed")
        self.assertTrue(trie.autoComplete("informed") == "informed")
        self.assertTrue(trie.autoComplete("infr") == "infringed")
        self.assertTrue(trie.autoComplete("infri") == "infringed")
        self.assertTrue(trie.autoComplete("infrin") == "infringed")
        self.assertTrue(trie.autoComplete("infring") == "infringed")
        self.assertTrue(trie.autoComplete("infringe") == "infringed")
        self.assertTrue(trie.autoComplete("infringed") == "infringed")
        self.assertTrue(trie.autoComplete("ing") == None)
        self.assertTrue(trie.autoComplete("inh") == "inhabitant")
        self.assertTrue(trie.autoComplete("inha") == "inhabitant")
        self.assertTrue(trie.autoComplete("inhab") == "inhabitant")
        self.assertTrue(trie.autoComplete("inhabi") == "inhabitant")
        self.assertTrue(trie.autoComplete("inhabit") == "inhabitant")
        self.assertTrue(trie.autoComplete("inhabita") == "inhabitant")
        self.assertTrue(trie.autoComplete("inhabitan") == "inhabitant")
        self.assertTrue(trie.autoComplete("inhabitant") == "inhabitant")
        self.assertTrue(trie.autoComplete("inhabitants") == "inhabitants")
        self.assertTrue(trie.autoComplete("ini") == None)
        self.assertTrue(trie.autoComplete("inj") == None)
        self.assertTrue(trie.autoComplete("ink") == None)
        self.assertTrue(trie.autoComplete("inl") == None)
        self.assertTrue(trie.autoComplete("inm") == None)
        self.assertTrue(trie.autoComplete("inn") == None)
        self.assertTrue(trie.autoComplete("ino") == "inoperative")
        self.assertTrue(trie.autoComplete("inop") == "inoperative")
        self.assertTrue(trie.autoComplete("inope") == "inoperative")
        self.assertTrue(trie.autoComplete("inoper") == "inoperative")
        self.assertTrue(trie.autoComplete("inopera") == "inoperative")
        self.assertTrue(trie.autoComplete("inoperat") == "inoperative")
        self.assertTrue(trie.autoComplete("inoperati") == "inoperative")
        self.assertTrue(trie.autoComplete("inoperativ") == "inoperative")
        self.assertTrue(trie.autoComplete("inoperative") == "inoperative")
        self.assertTrue(trie.autoComplete("inp") == None)
        self.assertTrue(trie.autoComplete("inq") == None)
        self.assertTrue(trie.autoComplete("inr") == None)
        self.assertTrue(trie.autoComplete("ins") == "insurrection")
        self.assertTrue(trie.autoComplete("insp") == "inspection")
        self.assertTrue(trie.autoComplete("inspe") == "inspection")
        self.assertTrue(trie.autoComplete("inspec") == "inspection")
        self.assertTrue(trie.autoComplete("inspect") == "inspection")
        self.assertTrue(trie.autoComplete("inspecti") == "inspection")
        self.assertTrue(trie.autoComplete("inspectio") == "inspection")
        self.assertTrue(trie.autoComplete("inspection") == "inspection")
        self.assertTrue(trie.autoComplete("insu") == "insurrection")
        self.assertTrue(trie.autoComplete("insur") == "insurrection")
        self.assertTrue(trie.autoComplete("insure") == "insure")
        self.assertTrue(trie.autoComplete("insurr") == "insurrection")
        self.assertTrue(trie.autoComplete("insurre") == "insurrection")
        self.assertTrue(trie.autoComplete("insurrec") == "insurrection")
        self.assertTrue(trie.autoComplete("insurrect") == "insurrection")
        self.assertTrue(trie.autoComplete("insurrecti") == "insurrection")
        self.assertTrue(trie.autoComplete("insurrectio") == "insurrection")
        self.assertTrue(trie.autoComplete("insurrection") == "insurrection")
        self.assertTrue(trie.autoComplete("insurrections") == "insurrections")
        self.assertTrue(trie.autoComplete("int") == "into")
        self.assertTrue(trie.autoComplete("inte") == "intents")
        self.assertTrue(trie.autoComplete("inten") == "intents")
        self.assertTrue(trie.autoComplete("intent") == "intents")
        self.assertTrue(trie.autoComplete("intents") == "intents")
        self.assertTrue(trie.autoComplete("inter") == "intervened")
        self.assertTrue(trie.autoComplete("interv") == "intervened")
        self.assertTrue(trie.autoComplete("interve") == "intervened")
        self.assertTrue(trie.autoComplete("interven") == "intervened")
        self.assertTrue(trie.autoComplete("intervene") == "intervened")
        self.assertTrue(trie.autoComplete("intervened") == "intervened")
        self.assertTrue(trie.autoComplete("into") == "into")
        self.assertTrue(trie.autoComplete("intox") == "intoxicating")
        self.assertTrue(trie.autoComplete("intoxi") == "intoxicating")
        self.assertTrue(trie.autoComplete("intoxic") == "intoxicating")
        self.assertTrue(trie.autoComplete("intoxica") == "intoxicating")
        self.assertTrue(trie.autoComplete("intoxicat") == "intoxicating")
        self.assertTrue(trie.autoComplete("intoxicati") == "intoxicating")
        self.assertTrue(trie.autoComplete("intoxicatin") == "intoxicating")
        self.assertTrue(trie.autoComplete("intoxicating") == "intoxicating")
        self.assertTrue(trie.autoComplete("inu") == None)
        self.assertTrue(trie.autoComplete("inv") == "invasion")
        self.assertTrue(trie.autoComplete("inva") == "invasion")
        self.assertTrue(trie.autoComplete("invad") == "invaded")
        self.assertTrue(trie.autoComplete("invade") == "invaded")
        self.assertTrue(trie.autoComplete("invaded") == "invaded")
        self.assertTrue(trie.autoComplete("invas") == "invasion")
        self.assertTrue(trie.autoComplete("invasi") == "invasion")
        self.assertTrue(trie.autoComplete("invasio") == "invasion")
        self.assertTrue(trie.autoComplete("invasion") == "invasion")
        self.assertTrue(trie.autoComplete("invasions") == "invasions")
        self.assertTrue(trie.autoComplete("inve") == "inventors")
        self.assertTrue(trie.autoComplete("inven") == "inventors")
        self.assertTrue(trie.autoComplete("invent") == "inventors")
        self.assertTrue(trie.autoComplete("invento") == "inventors")
        self.assertTrue(trie.autoComplete("inventor") == "inventors")
        self.assertTrue(trie.autoComplete("inventors") == "inventors")
        self.assertTrue(trie.autoComplete("invo") == "involuntary")
        self.assertTrue(trie.autoComplete("invol") == "involuntary")
        self.assertTrue(trie.autoComplete("involu") == "involuntary")
        self.assertTrue(trie.autoComplete("involun") == "involuntary")
        self.assertTrue(trie.autoComplete("involunt") == "involuntary")
        self.assertTrue(trie.autoComplete("involunta") == "involuntary")
        self.assertTrue(trie.autoComplete("involuntar") == "involuntary")
        self.assertTrue(trie.autoComplete("involuntary") == "involuntary")
        self.assertTrue(trie.autoComplete("inw") == None)
        self.assertTrue(trie.autoComplete("inx") == None)
        self.assertTrue(trie.autoComplete("iny") == None)
        self.assertTrue(trie.autoComplete("inz") == None)
        self.assertTrue(trie.autoComplete("io") == None)
        self.assertTrue(trie.autoComplete("ioa") == None)
        self.assertTrue(trie.autoComplete("iob") == None)
        self.assertTrue(trie.autoComplete("ioc") == None)
        self.assertTrue(trie.autoComplete("iod") == None)
        self.assertTrue(trie.autoComplete("ioe") == None)
        self.assertTrue(trie.autoComplete("iof") == None)
        self.assertTrue(trie.autoComplete("iog") == None)
        self.assertTrue(trie.autoComplete("ioh") == None)
        self.assertTrue(trie.autoComplete("ioi") == None)
        self.assertTrue(trie.autoComplete("ioj") == None)
        self.assertTrue(trie.autoComplete("iok") == None)
        self.assertTrue(trie.autoComplete("iol") == None)
        self.assertTrue(trie.autoComplete("iom") == None)
        self.assertTrue(trie.autoComplete("ion") == None)
        self.assertTrue(trie.autoComplete("ioo") == None)
        self.assertTrue(trie.autoComplete("iop") == None)
        self.assertTrue(trie.autoComplete("ioq") == None)
        self.assertTrue(trie.autoComplete("ior") == None)
        self.assertTrue(trie.autoComplete("ios") == None)
        self.assertTrue(trie.autoComplete("iot") == None)
        self.assertTrue(trie.autoComplete("iou") == None)
        self.assertTrue(trie.autoComplete("iov") == None)
        self.assertTrue(trie.autoComplete("iow") == None)
        self.assertTrue(trie.autoComplete("iox") == None)
        self.assertTrue(trie.autoComplete("ioy") == None)
        self.assertTrue(trie.autoComplete("ioz") == None)
        self.assertTrue(trie.autoComplete("ip") == None)
        self.assertTrue(trie.autoComplete("ipa") == None)
        self.assertTrue(trie.autoComplete("ipb") == None)
        self.assertTrue(trie.autoComplete("ipc") == None)
        self.assertTrue(trie.autoComplete("ipd") == None)
        self.assertTrue(trie.autoComplete("ipe") == None)
        self.assertTrue(trie.autoComplete("ipf") == None)
        self.assertTrue(trie.autoComplete("ipg") == None)
        self.assertTrue(trie.autoComplete("iph") == None)
        self.assertTrue(trie.autoComplete("ipi") == None)
        self.assertTrue(trie.autoComplete("ipj") == None)
        self.assertTrue(trie.autoComplete("ipk") == None)
        self.assertTrue(trie.autoComplete("ipl") == None)
        self.assertTrue(trie.autoComplete("ipm") == None)
        self.assertTrue(trie.autoComplete("ipn") == None)
        self.assertTrue(trie.autoComplete("ipo") == None)
        self.assertTrue(trie.autoComplete("ipp") == None)
        self.assertTrue(trie.autoComplete("ipq") == None)
        self.assertTrue(trie.autoComplete("ipr") == None)
        self.assertTrue(trie.autoComplete("ips") == None)
        self.assertTrue(trie.autoComplete("ipt") == None)
        self.assertTrue(trie.autoComplete("ipu") == None)
        self.assertTrue(trie.autoComplete("ipv") == None)
        self.assertTrue(trie.autoComplete("ipw") == None)
        self.assertTrue(trie.autoComplete("ipx") == None)
        self.assertTrue(trie.autoComplete("ipy") == None)
        self.assertTrue(trie.autoComplete("ipz") == None)
        self.assertTrue(trie.autoComplete("iq") == None)
        self.assertTrue(trie.autoComplete("iqa") == None)
        self.assertTrue(trie.autoComplete("iqb") == None)
        self.assertTrue(trie.autoComplete("iqc") == None)
        self.assertTrue(trie.autoComplete("iqd") == None)
        self.assertTrue(trie.autoComplete("iqe") == None)
        self.assertTrue(trie.autoComplete("iqf") == None)
        self.assertTrue(trie.autoComplete("iqg") == None)
        self.assertTrue(trie.autoComplete("iqh") == None)
        self.assertTrue(trie.autoComplete("iqi") == None)
        self.assertTrue(trie.autoComplete("iqj") == None)
        self.assertTrue(trie.autoComplete("iqk") == None)
        self.assertTrue(trie.autoComplete("iql") == None)
        self.assertTrue(trie.autoComplete("iqm") == None)
        self.assertTrue(trie.autoComplete("iqn") == None)
        self.assertTrue(trie.autoComplete("iqo") == None)
        self.assertTrue(trie.autoComplete("iqp") == None)
        self.assertTrue(trie.autoComplete("iqq") == None)
        self.assertTrue(trie.autoComplete("iqr") == None)
        self.assertTrue(trie.autoComplete("iqs") == None)
        self.assertTrue(trie.autoComplete("iqt") == None)
        self.assertTrue(trie.autoComplete("iqu") == None)
        self.assertTrue(trie.autoComplete("iqv") == None)
        self.assertTrue(trie.autoComplete("iqw") == None)
        self.assertTrue(trie.autoComplete("iqx") == None)
        self.assertTrue(trie.autoComplete("iqy") == None)
        self.assertTrue(trie.autoComplete("iqz") == None)
        self.assertTrue(trie.autoComplete("ir") == None)
        self.assertTrue(trie.autoComplete("ira") == None)
        self.assertTrue(trie.autoComplete("irb") == None)
        self.assertTrue(trie.autoComplete("irc") == None)
        self.assertTrue(trie.autoComplete("ird") == None)
        self.assertTrue(trie.autoComplete("ire") == None)
        self.assertTrue(trie.autoComplete("irf") == None)
        self.assertTrue(trie.autoComplete("irg") == None)
        self.assertTrue(trie.autoComplete("irh") == None)
        self.assertTrue(trie.autoComplete("iri") == None)
        self.assertTrue(trie.autoComplete("irj") == None)
        self.assertTrue(trie.autoComplete("irk") == None)
        self.assertTrue(trie.autoComplete("irl") == None)
        self.assertTrue(trie.autoComplete("irm") == None)
        self.assertTrue(trie.autoComplete("irn") == None)
        self.assertTrue(trie.autoComplete("iro") == None)
        self.assertTrue(trie.autoComplete("irp") == None)
        self.assertTrue(trie.autoComplete("irq") == None)
        self.assertTrue(trie.autoComplete("irr") == None)
        self.assertTrue(trie.autoComplete("irs") == None)
        self.assertTrue(trie.autoComplete("irt") == None)
        self.assertTrue(trie.autoComplete("iru") == None)
        self.assertTrue(trie.autoComplete("irv") == None)
        self.assertTrue(trie.autoComplete("irw") == None)
        self.assertTrue(trie.autoComplete("irx") == None)
        self.assertTrue(trie.autoComplete("iry") == None)
        self.assertTrue(trie.autoComplete("irz") == None)
        self.assertTrue(trie.autoComplete("is") == "is")
        self.assertTrue(trie.autoComplete("isa") == None)
        self.assertTrue(trie.autoComplete("isb") == None)
        self.assertTrue(trie.autoComplete("isc") == None)
        self.assertTrue(trie.autoComplete("isd") == None)
        self.assertTrue(trie.autoComplete("ise") == None)
        self.assertTrue(trie.autoComplete("isf") == None)
        self.assertTrue(trie.autoComplete("isg") == None)
        self.assertTrue(trie.autoComplete("ish") == None)
        self.assertTrue(trie.autoComplete("isi") == None)
        self.assertTrue(trie.autoComplete("isj") == None)
        self.assertTrue(trie.autoComplete("isk") == None)
        self.assertTrue(trie.autoComplete("isl") == "island")
        self.assertTrue(trie.autoComplete("isla") == "island")
        self.assertTrue(trie.autoComplete("islan") == "island")
        self.assertTrue(trie.autoComplete("island") == "island")
        self.assertTrue(trie.autoComplete("ism") == None)
        self.assertTrue(trie.autoComplete("isn") == None)
        self.assertTrue(trie.autoComplete("iso") == None)
        self.assertTrue(trie.autoComplete("isp") == None)
        self.assertTrue(trie.autoComplete("isq") == None)
        self.assertTrue(trie.autoComplete("isr") == None)
        self.assertTrue(trie.autoComplete("iss") == "issue")
        self.assertTrue(trie.autoComplete("issu") == "issue")
        self.assertTrue(trie.autoComplete("issue") == "issue")
        self.assertTrue(trie.autoComplete("ist") == None)
        self.assertTrue(trie.autoComplete("isu") == None)
        self.assertTrue(trie.autoComplete("isv") == None)
        self.assertTrue(trie.autoComplete("isw") == None)
        self.assertTrue(trie.autoComplete("isx") == None)
        self.assertTrue(trie.autoComplete("isy") == None)
        self.assertTrue(trie.autoComplete("isz") == None)
        self.assertTrue(trie.autoComplete("it") == "it")
        self.assertTrue(trie.autoComplete("ita") == None)
        self.assertTrue(trie.autoComplete("itb") == None)
        self.assertTrue(trie.autoComplete("itc") == None)
        self.assertTrue(trie.autoComplete("itd") == None)
        self.assertTrue(trie.autoComplete("ite") == None)
        self.assertTrue(trie.autoComplete("itf") == None)
        self.assertTrue(trie.autoComplete("itg") == None)
        self.assertTrue(trie.autoComplete("ith") == None)
        self.assertTrue(trie.autoComplete("iti") == None)
        self.assertTrue(trie.autoComplete("itj") == None)
        self.assertTrue(trie.autoComplete("itk") == None)
        self.assertTrue(trie.autoComplete("itl") == None)
        self.assertTrue(trie.autoComplete("itm") == None)
        self.assertTrue(trie.autoComplete("itn") == None)
        self.assertTrue(trie.autoComplete("ito") == None)
        self.assertTrue(trie.autoComplete("itp") == None)
        self.assertTrue(trie.autoComplete("itq") == None)
        self.assertTrue(trie.autoComplete("itr") == None)
        self.assertTrue(trie.autoComplete("its") == "its")
        self.assertTrue(trie.autoComplete("itt") == None)
        self.assertTrue(trie.autoComplete("itu") == None)
        self.assertTrue(trie.autoComplete("itv") == None)
        self.assertTrue(trie.autoComplete("itw") == None)
        self.assertTrue(trie.autoComplete("itx") == None)
        self.assertTrue(trie.autoComplete("ity") == None)
        self.assertTrue(trie.autoComplete("itz") == None)
        self.assertTrue(trie.autoComplete("iu") == None)
        self.assertTrue(trie.autoComplete("iua") == None)
        self.assertTrue(trie.autoComplete("iub") == None)
        self.assertTrue(trie.autoComplete("iuc") == None)
        self.assertTrue(trie.autoComplete("iud") == None)
        self.assertTrue(trie.autoComplete("iue") == None)
        self.assertTrue(trie.autoComplete("iuf") == None)
        self.assertTrue(trie.autoComplete("iug") == None)
        self.assertTrue(trie.autoComplete("iuh") == None)
        self.assertTrue(trie.autoComplete("iui") == None)
        self.assertTrue(trie.autoComplete("iuj") == None)
        self.assertTrue(trie.autoComplete("iuk") == None)
        self.assertTrue(trie.autoComplete("iul") == None)
        self.assertTrue(trie.autoComplete("ium") == None)
        self.assertTrue(trie.autoComplete("iun") == None)
        self.assertTrue(trie.autoComplete("iuo") == None)
        self.assertTrue(trie.autoComplete("iup") == None)
        self.assertTrue(trie.autoComplete("iuq") == None)
        self.assertTrue(trie.autoComplete("iur") == None)
        self.assertTrue(trie.autoComplete("ius") == None)
        self.assertTrue(trie.autoComplete("iut") == None)
        self.assertTrue(trie.autoComplete("iuu") == None)
        self.assertTrue(trie.autoComplete("iuv") == None)
        self.assertTrue(trie.autoComplete("iuw") == None)
        self.assertTrue(trie.autoComplete("iux") == None)
        self.assertTrue(trie.autoComplete("iuy") == None)
        self.assertTrue(trie.autoComplete("iuz") == None)
        self.assertTrue(trie.autoComplete("iv") == "iv")
        self.assertTrue(trie.autoComplete("iva") == None)
        self.assertTrue(trie.autoComplete("ivb") == None)
        self.assertTrue(trie.autoComplete("ivc") == None)
        self.assertTrue(trie.autoComplete("ivd") == None)
        self.assertTrue(trie.autoComplete("ive") == None)
        self.assertTrue(trie.autoComplete("ivf") == None)
        self.assertTrue(trie.autoComplete("ivg") == None)
        self.assertTrue(trie.autoComplete("ivh") == None)
        self.assertTrue(trie.autoComplete("ivi") == None)
        self.assertTrue(trie.autoComplete("ivj") == None)
        self.assertTrue(trie.autoComplete("ivk") == None)
        self.assertTrue(trie.autoComplete("ivl") == None)
        self.assertTrue(trie.autoComplete("ivm") == None)
        self.assertTrue(trie.autoComplete("ivn") == None)
        self.assertTrue(trie.autoComplete("ivo") == None)
        self.assertTrue(trie.autoComplete("ivp") == None)
        self.assertTrue(trie.autoComplete("ivq") == None)
        self.assertTrue(trie.autoComplete("ivr") == None)
        self.assertTrue(trie.autoComplete("ivs") == None)
        self.assertTrue(trie.autoComplete("ivt") == None)
        self.assertTrue(trie.autoComplete("ivu") == None)
        self.assertTrue(trie.autoComplete("ivv") == None)
        self.assertTrue(trie.autoComplete("ivw") == None)
        self.assertTrue(trie.autoComplete("ivx") == None)
        self.assertTrue(trie.autoComplete("ivy") == None)
        self.assertTrue(trie.autoComplete("ivz") == None)
        self.assertTrue(trie.autoComplete("iw") == None)
        self.assertTrue(trie.autoComplete("iwa") == None)
        self.assertTrue(trie.autoComplete("iwb") == None)
        self.assertTrue(trie.autoComplete("iwc") == None)
        self.assertTrue(trie.autoComplete("iwd") == None)
        self.assertTrue(trie.autoComplete("iwe") == None)
        self.assertTrue(trie.autoComplete("iwf") == None)
        self.assertTrue(trie.autoComplete("iwg") == None)
        self.assertTrue(trie.autoComplete("iwh") == None)
        self.assertTrue(trie.autoComplete("iwi") == None)
        self.assertTrue(trie.autoComplete("iwj") == None)
        self.assertTrue(trie.autoComplete("iwk") == None)
        self.assertTrue(trie.autoComplete("iwl") == None)
        self.assertTrue(trie.autoComplete("iwm") == None)
        self.assertTrue(trie.autoComplete("iwn") == None)
        self.assertTrue(trie.autoComplete("iwo") == None)
        self.assertTrue(trie.autoComplete("iwp") == None)
        self.assertTrue(trie.autoComplete("iwq") == None)
        self.assertTrue(trie.autoComplete("iwr") == None)
        self.assertTrue(trie.autoComplete("iws") == None)
        self.assertTrue(trie.autoComplete("iwt") == None)
        self.assertTrue(trie.autoComplete("iwu") == None)
        self.assertTrue(trie.autoComplete("iwv") == None)
        self.assertTrue(trie.autoComplete("iww") == None)
        self.assertTrue(trie.autoComplete("iwx") == None)
        self.assertTrue(trie.autoComplete("iwy") == None)
        self.assertTrue(trie.autoComplete("iwz") == None)
        self.assertTrue(trie.autoComplete("ix") == None)
        self.assertTrue(trie.autoComplete("ixa") == None)
        self.assertTrue(trie.autoComplete("ixb") == None)
        self.assertTrue(trie.autoComplete("ixc") == None)
        self.assertTrue(trie.autoComplete("ixd") == None)
        self.assertTrue(trie.autoComplete("ixe") == None)
        self.assertTrue(trie.autoComplete("ixf") == None)
        self.assertTrue(trie.autoComplete("ixg") == None)
        self.assertTrue(trie.autoComplete("ixh") == None)
        self.assertTrue(trie.autoComplete("ixi") == None)
        self.assertTrue(trie.autoComplete("ixj") == None)
        self.assertTrue(trie.autoComplete("ixk") == None)
        self.assertTrue(trie.autoComplete("ixl") == None)
        self.assertTrue(trie.autoComplete("ixm") == None)
        self.assertTrue(trie.autoComplete("ixn") == None)
        self.assertTrue(trie.autoComplete("ixo") == None)
        self.assertTrue(trie.autoComplete("ixp") == None)
        self.assertTrue(trie.autoComplete("ixq") == None)
        self.assertTrue(trie.autoComplete("ixr") == None)
        self.assertTrue(trie.autoComplete("ixs") == None)
        self.assertTrue(trie.autoComplete("ixt") == None)
        self.assertTrue(trie.autoComplete("ixu") == None)
        self.assertTrue(trie.autoComplete("ixv") == None)
        self.assertTrue(trie.autoComplete("ixw") == None)
        self.assertTrue(trie.autoComplete("ixx") == None)
        self.assertTrue(trie.autoComplete("ixy") == None)
        self.assertTrue(trie.autoComplete("ixz") == None)
        self.assertTrue(trie.autoComplete("iy") == None)
        self.assertTrue(trie.autoComplete("iya") == None)
        self.assertTrue(trie.autoComplete("iyb") == None)
        self.assertTrue(trie.autoComplete("iyc") == None)
        self.assertTrue(trie.autoComplete("iyd") == None)
        self.assertTrue(trie.autoComplete("iye") == None)
        self.assertTrue(trie.autoComplete("iyf") == None)
        self.assertTrue(trie.autoComplete("iyg") == None)
        self.assertTrue(trie.autoComplete("iyh") == None)
        self.assertTrue(trie.autoComplete("iyi") == None)
        self.assertTrue(trie.autoComplete("iyj") == None)
        self.assertTrue(trie.autoComplete("iyk") == None)
        self.assertTrue(trie.autoComplete("iyl") == None)
        self.assertTrue(trie.autoComplete("iym") == None)
        self.assertTrue(trie.autoComplete("iyn") == None)
        self.assertTrue(trie.autoComplete("iyo") == None)
        self.assertTrue(trie.autoComplete("iyp") == None)
        self.assertTrue(trie.autoComplete("iyq") == None)
        self.assertTrue(trie.autoComplete("iyr") == None)
        self.assertTrue(trie.autoComplete("iys") == None)
        self.assertTrue(trie.autoComplete("iyt") == None)
        self.assertTrue(trie.autoComplete("iyu") == None)
        self.assertTrue(trie.autoComplete("iyv") == None)
        self.assertTrue(trie.autoComplete("iyw") == None)
        self.assertTrue(trie.autoComplete("iyx") == None)
        self.assertTrue(trie.autoComplete("iyy") == None)
        self.assertTrue(trie.autoComplete("iyz") == None)
        self.assertTrue(trie.autoComplete("iz") == None)
        self.assertTrue(trie.autoComplete("iza") == None)
        self.assertTrue(trie.autoComplete("izb") == None)
        self.assertTrue(trie.autoComplete("izc") == None)
        self.assertTrue(trie.autoComplete("izd") == None)
        self.assertTrue(trie.autoComplete("ize") == None)
        self.assertTrue(trie.autoComplete("izf") == None)
        self.assertTrue(trie.autoComplete("izg") == None)
        self.assertTrue(trie.autoComplete("izh") == None)
        self.assertTrue(trie.autoComplete("izi") == None)
        self.assertTrue(trie.autoComplete("izj") == None)
        self.assertTrue(trie.autoComplete("izk") == None)
        self.assertTrue(trie.autoComplete("izl") == None)
        self.assertTrue(trie.autoComplete("izm") == None)
        self.assertTrue(trie.autoComplete("izn") == None)
        self.assertTrue(trie.autoComplete("izo") == None)
        self.assertTrue(trie.autoComplete("izp") == None)
        self.assertTrue(trie.autoComplete("izq") == None)
        self.assertTrue(trie.autoComplete("izr") == None)
        self.assertTrue(trie.autoComplete("izs") == None)
        self.assertTrue(trie.autoComplete("izt") == None)
        self.assertTrue(trie.autoComplete("izu") == None)
        self.assertTrue(trie.autoComplete("izv") == None)
        self.assertTrue(trie.autoComplete("izw") == None)
        self.assertTrue(trie.autoComplete("izx") == None)
        self.assertTrue(trie.autoComplete("izy") == None)
        self.assertTrue(trie.autoComplete("izz") == None)
        self.assertTrue(trie.autoComplete("j") == "jurisdiction")
        self.assertTrue(trie.autoComplete("ja") == "january")
        self.assertTrue(trie.autoComplete("jaa") == None)
        self.assertTrue(trie.autoComplete("jab") == None)
        self.assertTrue(trie.autoComplete("jac") == None)
        self.assertTrue(trie.autoComplete("jad") == None)
        self.assertTrue(trie.autoComplete("jae") == None)
        self.assertTrue(trie.autoComplete("jaf") == None)
        self.assertTrue(trie.autoComplete("jag") == None)
        self.assertTrue(trie.autoComplete("jah") == None)
        self.assertTrue(trie.autoComplete("jai") == None)
        self.assertTrue(trie.autoComplete("jaj") == None)
        self.assertTrue(trie.autoComplete("jak") == None)
        self.assertTrue(trie.autoComplete("jal") == None)
        self.assertTrue(trie.autoComplete("jam") == None)
        self.assertTrue(trie.autoComplete("jan") == "january")
        self.assertTrue(trie.autoComplete("janu") == "january")
        self.assertTrue(trie.autoComplete("janua") == "january")
        self.assertTrue(trie.autoComplete("januar") == "january")
        self.assertTrue(trie.autoComplete("january") == "january")
        self.assertTrue(trie.autoComplete("jao") == None)
        self.assertTrue(trie.autoComplete("jap") == None)
        self.assertTrue(trie.autoComplete("jaq") == None)
        self.assertTrue(trie.autoComplete("jar") == None)
        self.assertTrue(trie.autoComplete("jas") == None)
        self.assertTrue(trie.autoComplete("jat") == None)
        self.assertTrue(trie.autoComplete("jau") == None)
        self.assertTrue(trie.autoComplete("jav") == None)
        self.assertTrue(trie.autoComplete("jaw") == None)
        self.assertTrue(trie.autoComplete("jax") == None)
        self.assertTrue(trie.autoComplete("jay") == None)
        self.assertTrue(trie.autoComplete("jaz") == None)
        self.assertTrue(trie.autoComplete("jb") == None)
        self.assertTrue(trie.autoComplete("jba") == None)
        self.assertTrue(trie.autoComplete("jbb") == None)
        self.assertTrue(trie.autoComplete("jbc") == None)
        self.assertTrue(trie.autoComplete("jbd") == None)
        self.assertTrue(trie.autoComplete("jbe") == None)
        self.assertTrue(trie.autoComplete("jbf") == None)
        self.assertTrue(trie.autoComplete("jbg") == None)
        self.assertTrue(trie.autoComplete("jbh") == None)
        self.assertTrue(trie.autoComplete("jbi") == None)
        self.assertTrue(trie.autoComplete("jbj") == None)
        self.assertTrue(trie.autoComplete("jbk") == None)
        self.assertTrue(trie.autoComplete("jbl") == None)
        self.assertTrue(trie.autoComplete("jbm") == None)
        self.assertTrue(trie.autoComplete("jbn") == None)
        self.assertTrue(trie.autoComplete("jbo") == None)
        self.assertTrue(trie.autoComplete("jbp") == None)
        self.assertTrue(trie.autoComplete("jbq") == None)
        self.assertTrue(trie.autoComplete("jbr") == None)
        self.assertTrue(trie.autoComplete("jbs") == None)
        self.assertTrue(trie.autoComplete("jbt") == None)
        self.assertTrue(trie.autoComplete("jbu") == None)
        self.assertTrue(trie.autoComplete("jbv") == None)
        self.assertTrue(trie.autoComplete("jbw") == None)
        self.assertTrue(trie.autoComplete("jbx") == None)
        self.assertTrue(trie.autoComplete("jby") == None)
        self.assertTrue(trie.autoComplete("jbz") == None)
        self.assertTrue(trie.autoComplete("jc") == None)
        self.assertTrue(trie.autoComplete("jca") == None)
        self.assertTrue(trie.autoComplete("jcb") == None)
        self.assertTrue(trie.autoComplete("jcc") == None)
        self.assertTrue(trie.autoComplete("jcd") == None)
        self.assertTrue(trie.autoComplete("jce") == None)
        self.assertTrue(trie.autoComplete("jcf") == None)
        self.assertTrue(trie.autoComplete("jcg") == None)
        self.assertTrue(trie.autoComplete("jch") == None)
        self.assertTrue(trie.autoComplete("jci") == None)
        self.assertTrue(trie.autoComplete("jcj") == None)
        self.assertTrue(trie.autoComplete("jck") == None)
        self.assertTrue(trie.autoComplete("jcl") == None)
        self.assertTrue(trie.autoComplete("jcm") == None)
        self.assertTrue(trie.autoComplete("jcn") == None)
        self.assertTrue(trie.autoComplete("jco") == None)
        self.assertTrue(trie.autoComplete("jcp") == None)
        self.assertTrue(trie.autoComplete("jcq") == None)
        self.assertTrue(trie.autoComplete("jcr") == None)
        self.assertTrue(trie.autoComplete("jcs") == None)
        self.assertTrue(trie.autoComplete("jct") == None)
        self.assertTrue(trie.autoComplete("jcu") == None)
        self.assertTrue(trie.autoComplete("jcv") == None)
        self.assertTrue(trie.autoComplete("jcw") == None)
        self.assertTrue(trie.autoComplete("jcx") == None)
        self.assertTrue(trie.autoComplete("jcy") == None)
        self.assertTrue(trie.autoComplete("jcz") == None)
        self.assertTrue(trie.autoComplete("jd") == None)
        self.assertTrue(trie.autoComplete("jda") == None)
        self.assertTrue(trie.autoComplete("jdb") == None)
        self.assertTrue(trie.autoComplete("jdc") == None)
        self.assertTrue(trie.autoComplete("jdd") == None)
        self.assertTrue(trie.autoComplete("jde") == None)
        self.assertTrue(trie.autoComplete("jdf") == None)
        self.assertTrue(trie.autoComplete("jdg") == None)
        self.assertTrue(trie.autoComplete("jdh") == None)
        self.assertTrue(trie.autoComplete("jdi") == None)
        self.assertTrue(trie.autoComplete("jdj") == None)
        self.assertTrue(trie.autoComplete("jdk") == None)
        self.assertTrue(trie.autoComplete("jdl") == None)
        self.assertTrue(trie.autoComplete("jdm") == None)
        self.assertTrue(trie.autoComplete("jdn") == None)
        self.assertTrue(trie.autoComplete("jdo") == None)
        self.assertTrue(trie.autoComplete("jdp") == None)
        self.assertTrue(trie.autoComplete("jdq") == None)
        self.assertTrue(trie.autoComplete("jdr") == None)
        self.assertTrue(trie.autoComplete("jds") == None)
        self.assertTrue(trie.autoComplete("jdt") == None)
        self.assertTrue(trie.autoComplete("jdu") == None)
        self.assertTrue(trie.autoComplete("jdv") == None)
        self.assertTrue(trie.autoComplete("jdw") == None)
        self.assertTrue(trie.autoComplete("jdx") == None)
        self.assertTrue(trie.autoComplete("jdy") == None)
        self.assertTrue(trie.autoComplete("jdz") == None)
        self.assertTrue(trie.autoComplete("je") == "jeopardy")
        self.assertTrue(trie.autoComplete("jea") == None)
        self.assertTrue(trie.autoComplete("jeb") == None)
        self.assertTrue(trie.autoComplete("jec") == None)
        self.assertTrue(trie.autoComplete("jed") == None)
        self.assertTrue(trie.autoComplete("jee") == None)
        self.assertTrue(trie.autoComplete("jef") == None)
        self.assertTrue(trie.autoComplete("jeg") == None)
        self.assertTrue(trie.autoComplete("jeh") == None)
        self.assertTrue(trie.autoComplete("jei") == None)
        self.assertTrue(trie.autoComplete("jej") == None)
        self.assertTrue(trie.autoComplete("jek") == None)
        self.assertTrue(trie.autoComplete("jel") == None)
        self.assertTrue(trie.autoComplete("jem") == None)
        self.assertTrue(trie.autoComplete("jen") == None)
        self.assertTrue(trie.autoComplete("jeo") == "jeopardy")
        self.assertTrue(trie.autoComplete("jeop") == "jeopardy")
        self.assertTrue(trie.autoComplete("jeopa") == "jeopardy")
        self.assertTrue(trie.autoComplete("jeopar") == "jeopardy")
        self.assertTrue(trie.autoComplete("jeopard") == "jeopardy")
        self.assertTrue(trie.autoComplete("jeopardy") == "jeopardy")
        self.assertTrue(trie.autoComplete("jep") == None)
        self.assertTrue(trie.autoComplete("jeq") == None)
        self.assertTrue(trie.autoComplete("jer") == "jersey")
        self.assertTrue(trie.autoComplete("jers") == "jersey")
        self.assertTrue(trie.autoComplete("jerse") == "jersey")
        self.assertTrue(trie.autoComplete("jersey") == "jersey")
        self.assertTrue(trie.autoComplete("jes") == None)
        self.assertTrue(trie.autoComplete("jet") == None)
        self.assertTrue(trie.autoComplete("jeu") == None)
        self.assertTrue(trie.autoComplete("jev") == None)
        self.assertTrue(trie.autoComplete("jew") == None)
        self.assertTrue(trie.autoComplete("jex") == None)
        self.assertTrue(trie.autoComplete("jey") == None)
        self.assertTrue(trie.autoComplete("jez") == None)
        self.assertTrue(trie.autoComplete("jf") == None)
        self.assertTrue(trie.autoComplete("jfa") == None)
        self.assertTrue(trie.autoComplete("jfb") == None)
        self.assertTrue(trie.autoComplete("jfc") == None)
        self.assertTrue(trie.autoComplete("jfd") == None)
        self.assertTrue(trie.autoComplete("jfe") == None)
        self.assertTrue(trie.autoComplete("jff") == None)
        self.assertTrue(trie.autoComplete("jfg") == None)
        self.assertTrue(trie.autoComplete("jfh") == None)
        self.assertTrue(trie.autoComplete("jfi") == None)
        self.assertTrue(trie.autoComplete("jfj") == None)
        self.assertTrue(trie.autoComplete("jfk") == None)
        self.assertTrue(trie.autoComplete("jfl") == None)
        self.assertTrue(trie.autoComplete("jfm") == None)
        self.assertTrue(trie.autoComplete("jfn") == None)
        self.assertTrue(trie.autoComplete("jfo") == None)
        self.assertTrue(trie.autoComplete("jfp") == None)
        self.assertTrue(trie.autoComplete("jfq") == None)
        self.assertTrue(trie.autoComplete("jfr") == None)
        self.assertTrue(trie.autoComplete("jfs") == None)
        self.assertTrue(trie.autoComplete("jft") == None)
        self.assertTrue(trie.autoComplete("jfu") == None)
        self.assertTrue(trie.autoComplete("jfv") == None)
        self.assertTrue(trie.autoComplete("jfw") == None)
        self.assertTrue(trie.autoComplete("jfx") == None)
        self.assertTrue(trie.autoComplete("jfy") == None)
        self.assertTrue(trie.autoComplete("jfz") == None)
        self.assertTrue(trie.autoComplete("jg") == None)
        self.assertTrue(trie.autoComplete("jga") == None)
        self.assertTrue(trie.autoComplete("jgb") == None)
        self.assertTrue(trie.autoComplete("jgc") == None)
        self.assertTrue(trie.autoComplete("jgd") == None)
        self.assertTrue(trie.autoComplete("jge") == None)
        self.assertTrue(trie.autoComplete("jgf") == None)
        self.assertTrue(trie.autoComplete("jgg") == None)
        self.assertTrue(trie.autoComplete("jgh") == None)
        self.assertTrue(trie.autoComplete("jgi") == None)
        self.assertTrue(trie.autoComplete("jgj") == None)
        self.assertTrue(trie.autoComplete("jgk") == None)
        self.assertTrue(trie.autoComplete("jgl") == None)
        self.assertTrue(trie.autoComplete("jgm") == None)
        self.assertTrue(trie.autoComplete("jgn") == None)
        self.assertTrue(trie.autoComplete("jgo") == None)
        self.assertTrue(trie.autoComplete("jgp") == None)
        self.assertTrue(trie.autoComplete("jgq") == None)
        self.assertTrue(trie.autoComplete("jgr") == None)
        self.assertTrue(trie.autoComplete("jgs") == None)
        self.assertTrue(trie.autoComplete("jgt") == None)
        self.assertTrue(trie.autoComplete("jgu") == None)
        self.assertTrue(trie.autoComplete("jgv") == None)
        self.assertTrue(trie.autoComplete("jgw") == None)
        self.assertTrue(trie.autoComplete("jgx") == None)
        self.assertTrue(trie.autoComplete("jgy") == None)
        self.assertTrue(trie.autoComplete("jgz") == None)
        self.assertTrue(trie.autoComplete("jh") == None)
        self.assertTrue(trie.autoComplete("jha") == None)
        self.assertTrue(trie.autoComplete("jhb") == None)
        self.assertTrue(trie.autoComplete("jhc") == None)
        self.assertTrue(trie.autoComplete("jhd") == None)
        self.assertTrue(trie.autoComplete("jhe") == None)
        self.assertTrue(trie.autoComplete("jhf") == None)
        self.assertTrue(trie.autoComplete("jhg") == None)
        self.assertTrue(trie.autoComplete("jhh") == None)
        self.assertTrue(trie.autoComplete("jhi") == None)
        self.assertTrue(trie.autoComplete("jhj") == None)
        self.assertTrue(trie.autoComplete("jhk") == None)
        self.assertTrue(trie.autoComplete("jhl") == None)
        self.assertTrue(trie.autoComplete("jhm") == None)
        self.assertTrue(trie.autoComplete("jhn") == None)
        self.assertTrue(trie.autoComplete("jho") == None)
        self.assertTrue(trie.autoComplete("jhp") == None)
        self.assertTrue(trie.autoComplete("jhq") == None)
        self.assertTrue(trie.autoComplete("jhr") == None)
        self.assertTrue(trie.autoComplete("jhs") == None)
        self.assertTrue(trie.autoComplete("jht") == None)
        self.assertTrue(trie.autoComplete("jhu") == None)
        self.assertTrue(trie.autoComplete("jhv") == None)
        self.assertTrue(trie.autoComplete("jhw") == None)
        self.assertTrue(trie.autoComplete("jhx") == None)
        self.assertTrue(trie.autoComplete("jhy") == None)
        self.assertTrue(trie.autoComplete("jhz") == None)
        self.assertTrue(trie.autoComplete("ji") == None)
        self.assertTrue(trie.autoComplete("jia") == None)
        self.assertTrue(trie.autoComplete("jib") == None)
        self.assertTrue(trie.autoComplete("jic") == None)
        self.assertTrue(trie.autoComplete("jid") == None)
        self.assertTrue(trie.autoComplete("jie") == None)
        self.assertTrue(trie.autoComplete("jif") == None)
        self.assertTrue(trie.autoComplete("jig") == None)
        self.assertTrue(trie.autoComplete("jih") == None)
        self.assertTrue(trie.autoComplete("jii") == None)
        self.assertTrue(trie.autoComplete("jij") == None)
        self.assertTrue(trie.autoComplete("jik") == None)
        self.assertTrue(trie.autoComplete("jil") == None)
        self.assertTrue(trie.autoComplete("jim") == None)
        self.assertTrue(trie.autoComplete("jin") == None)
        self.assertTrue(trie.autoComplete("jio") == None)
        self.assertTrue(trie.autoComplete("jip") == None)
        self.assertTrue(trie.autoComplete("jiq") == None)
        self.assertTrue(trie.autoComplete("jir") == None)
        self.assertTrue(trie.autoComplete("jis") == None)
        self.assertTrue(trie.autoComplete("jit") == None)
        self.assertTrue(trie.autoComplete("jiu") == None)
        self.assertTrue(trie.autoComplete("jiv") == None)
        self.assertTrue(trie.autoComplete("jiw") == None)
        self.assertTrue(trie.autoComplete("jix") == None)
        self.assertTrue(trie.autoComplete("jiy") == None)
        self.assertTrue(trie.autoComplete("jiz") == None)
        self.assertTrue(trie.autoComplete("jj") == None)
        self.assertTrue(trie.autoComplete("jja") == None)
        self.assertTrue(trie.autoComplete("jjb") == None)
        self.assertTrue(trie.autoComplete("jjc") == None)
        self.assertTrue(trie.autoComplete("jjd") == None)
        self.assertTrue(trie.autoComplete("jje") == None)
        self.assertTrue(trie.autoComplete("jjf") == None)
        self.assertTrue(trie.autoComplete("jjg") == None)
        self.assertTrue(trie.autoComplete("jjh") == None)
        self.assertTrue(trie.autoComplete("jji") == None)
        self.assertTrue(trie.autoComplete("jjj") == None)
        self.assertTrue(trie.autoComplete("jjk") == None)
        self.assertTrue(trie.autoComplete("jjl") == None)
        self.assertTrue(trie.autoComplete("jjm") == None)
        self.assertTrue(trie.autoComplete("jjn") == None)
        self.assertTrue(trie.autoComplete("jjo") == None)
        self.assertTrue(trie.autoComplete("jjp") == None)
        self.assertTrue(trie.autoComplete("jjq") == None)
        self.assertTrue(trie.autoComplete("jjr") == None)
        self.assertTrue(trie.autoComplete("jjs") == None)
        self.assertTrue(trie.autoComplete("jjt") == None)
        self.assertTrue(trie.autoComplete("jju") == None)
        self.assertTrue(trie.autoComplete("jjv") == None)
        self.assertTrue(trie.autoComplete("jjw") == None)
        self.assertTrue(trie.autoComplete("jjx") == None)
        self.assertTrue(trie.autoComplete("jjy") == None)
        self.assertTrue(trie.autoComplete("jjz") == None)
        self.assertTrue(trie.autoComplete("jk") == None)
        self.assertTrue(trie.autoComplete("jka") == None)
        self.assertTrue(trie.autoComplete("jkb") == None)
        self.assertTrue(trie.autoComplete("jkc") == None)
        self.assertTrue(trie.autoComplete("jkd") == None)
        self.assertTrue(trie.autoComplete("jke") == None)
        self.assertTrue(trie.autoComplete("jkf") == None)
        self.assertTrue(trie.autoComplete("jkg") == None)
        self.assertTrue(trie.autoComplete("jkh") == None)
        self.assertTrue(trie.autoComplete("jki") == None)
        self.assertTrue(trie.autoComplete("jkj") == None)
        self.assertTrue(trie.autoComplete("jkk") == None)
        self.assertTrue(trie.autoComplete("jkl") == None)
        self.assertTrue(trie.autoComplete("jkm") == None)
        self.assertTrue(trie.autoComplete("jkn") == None)
        self.assertTrue(trie.autoComplete("jko") == None)
        self.assertTrue(trie.autoComplete("jkp") == None)
        self.assertTrue(trie.autoComplete("jkq") == None)
        self.assertTrue(trie.autoComplete("jkr") == None)
        self.assertTrue(trie.autoComplete("jks") == None)
        self.assertTrue(trie.autoComplete("jkt") == None)
        self.assertTrue(trie.autoComplete("jku") == None)
        self.assertTrue(trie.autoComplete("jkv") == None)
        self.assertTrue(trie.autoComplete("jkw") == None)
        self.assertTrue(trie.autoComplete("jkx") == None)
        self.assertTrue(trie.autoComplete("jky") == None)
        self.assertTrue(trie.autoComplete("jkz") == None)
        self.assertTrue(trie.autoComplete("jl") == None)
        self.assertTrue(trie.autoComplete("jla") == None)
        self.assertTrue(trie.autoComplete("jlb") == None)
        self.assertTrue(trie.autoComplete("jlc") == None)
        self.assertTrue(trie.autoComplete("jld") == None)
        self.assertTrue(trie.autoComplete("jle") == None)
        self.assertTrue(trie.autoComplete("jlf") == None)
        self.assertTrue(trie.autoComplete("jlg") == None)
        self.assertTrue(trie.autoComplete("jlh") == None)
        self.assertTrue(trie.autoComplete("jli") == None)
        self.assertTrue(trie.autoComplete("jlj") == None)
        self.assertTrue(trie.autoComplete("jlk") == None)
        self.assertTrue(trie.autoComplete("jll") == None)
        self.assertTrue(trie.autoComplete("jlm") == None)
        self.assertTrue(trie.autoComplete("jln") == None)
        self.assertTrue(trie.autoComplete("jlo") == None)
        self.assertTrue(trie.autoComplete("jlp") == None)
        self.assertTrue(trie.autoComplete("jlq") == None)
        self.assertTrue(trie.autoComplete("jlr") == None)
        self.assertTrue(trie.autoComplete("jls") == None)
        self.assertTrue(trie.autoComplete("jlt") == None)
        self.assertTrue(trie.autoComplete("jlu") == None)
        self.assertTrue(trie.autoComplete("jlv") == None)
        self.assertTrue(trie.autoComplete("jlw") == None)
        self.assertTrue(trie.autoComplete("jlx") == None)
        self.assertTrue(trie.autoComplete("jly") == None)
        self.assertTrue(trie.autoComplete("jlz") == None)
        self.assertTrue(trie.autoComplete("jm") == None)
        self.assertTrue(trie.autoComplete("jma") == None)
        self.assertTrue(trie.autoComplete("jmb") == None)
        self.assertTrue(trie.autoComplete("jmc") == None)
        self.assertTrue(trie.autoComplete("jmd") == None)
        self.assertTrue(trie.autoComplete("jme") == None)
        self.assertTrue(trie.autoComplete("jmf") == None)
        self.assertTrue(trie.autoComplete("jmg") == None)
        self.assertTrue(trie.autoComplete("jmh") == None)
        self.assertTrue(trie.autoComplete("jmi") == None)
        self.assertTrue(trie.autoComplete("jmj") == None)
        self.assertTrue(trie.autoComplete("jmk") == None)
        self.assertTrue(trie.autoComplete("jml") == None)
        self.assertTrue(trie.autoComplete("jmm") == None)
        self.assertTrue(trie.autoComplete("jmn") == None)
        self.assertTrue(trie.autoComplete("jmo") == None)
        self.assertTrue(trie.autoComplete("jmp") == None)
        self.assertTrue(trie.autoComplete("jmq") == None)
        self.assertTrue(trie.autoComplete("jmr") == None)
        self.assertTrue(trie.autoComplete("jms") == None)
        self.assertTrue(trie.autoComplete("jmt") == None)
        self.assertTrue(trie.autoComplete("jmu") == None)
        self.assertTrue(trie.autoComplete("jmv") == None)
        self.assertTrue(trie.autoComplete("jmw") == None)
        self.assertTrue(trie.autoComplete("jmx") == None)
        self.assertTrue(trie.autoComplete("jmy") == None)
        self.assertTrue(trie.autoComplete("jmz") == None)
        self.assertTrue(trie.autoComplete("jn") == None)
        self.assertTrue(trie.autoComplete("jna") == None)
        self.assertTrue(trie.autoComplete("jnb") == None)
        self.assertTrue(trie.autoComplete("jnc") == None)
        self.assertTrue(trie.autoComplete("jnd") == None)
        self.assertTrue(trie.autoComplete("jne") == None)
        self.assertTrue(trie.autoComplete("jnf") == None)
        self.assertTrue(trie.autoComplete("jng") == None)
        self.assertTrue(trie.autoComplete("jnh") == None)
        self.assertTrue(trie.autoComplete("jni") == None)
        self.assertTrue(trie.autoComplete("jnj") == None)
        self.assertTrue(trie.autoComplete("jnk") == None)
        self.assertTrue(trie.autoComplete("jnl") == None)
        self.assertTrue(trie.autoComplete("jnm") == None)
        self.assertTrue(trie.autoComplete("jnn") == None)
        self.assertTrue(trie.autoComplete("jno") == None)
        self.assertTrue(trie.autoComplete("jnp") == None)
        self.assertTrue(trie.autoComplete("jnq") == None)
        self.assertTrue(trie.autoComplete("jnr") == None)
        self.assertTrue(trie.autoComplete("jns") == None)
        self.assertTrue(trie.autoComplete("jnt") == None)
        self.assertTrue(trie.autoComplete("jnu") == None)
        self.assertTrue(trie.autoComplete("jnv") == None)
        self.assertTrue(trie.autoComplete("jnw") == None)
        self.assertTrue(trie.autoComplete("jnx") == None)
        self.assertTrue(trie.autoComplete("jny") == None)
        self.assertTrue(trie.autoComplete("jnz") == None)
        self.assertTrue(trie.autoComplete("jo") == "journal")
        self.assertTrue(trie.autoComplete("joa") == None)
        self.assertTrue(trie.autoComplete("job") == None)
        self.assertTrue(trie.autoComplete("joc") == None)
        self.assertTrue(trie.autoComplete("jod") == None)
        self.assertTrue(trie.autoComplete("joe") == None)
        self.assertTrue(trie.autoComplete("jof") == None)
        self.assertTrue(trie.autoComplete("jog") == None)
        self.assertTrue(trie.autoComplete("joh") == None)
        self.assertTrue(trie.autoComplete("joi") == None)
        self.assertTrue(trie.autoComplete("joj") == None)
        self.assertTrue(trie.autoComplete("jok") == None)
        self.assertTrue(trie.autoComplete("jol") == None)
        self.assertTrue(trie.autoComplete("jom") == None)
        self.assertTrue(trie.autoComplete("jon") == None)
        self.assertTrue(trie.autoComplete("joo") == None)
        self.assertTrue(trie.autoComplete("jop") == None)
        self.assertTrue(trie.autoComplete("joq") == None)
        self.assertTrue(trie.autoComplete("jor") == None)
        self.assertTrue(trie.autoComplete("jos") == None)
        self.assertTrue(trie.autoComplete("jot") == None)
        self.assertTrue(trie.autoComplete("jou") == "journal")
        self.assertTrue(trie.autoComplete("jour") == "journal")
        self.assertTrue(trie.autoComplete("journ") == "journal")
        self.assertTrue(trie.autoComplete("journa") == "journal")
        self.assertTrue(trie.autoComplete("journal") == "journal")
        self.assertTrue(trie.autoComplete("jov") == None)
        self.assertTrue(trie.autoComplete("jow") == None)
        self.assertTrue(trie.autoComplete("jox") == None)
        self.assertTrue(trie.autoComplete("joy") == None)
        self.assertTrue(trie.autoComplete("joz") == None)
        self.assertTrue(trie.autoComplete("jp") == None)
        self.assertTrue(trie.autoComplete("jpa") == None)
        self.assertTrue(trie.autoComplete("jpb") == None)
        self.assertTrue(trie.autoComplete("jpc") == None)
        self.assertTrue(trie.autoComplete("jpd") == None)
        self.assertTrue(trie.autoComplete("jpe") == None)
        self.assertTrue(trie.autoComplete("jpf") == None)
        self.assertTrue(trie.autoComplete("jpg") == None)
        self.assertTrue(trie.autoComplete("jph") == None)
        self.assertTrue(trie.autoComplete("jpi") == None)
        self.assertTrue(trie.autoComplete("jpj") == None)
        self.assertTrue(trie.autoComplete("jpk") == None)
        self.assertTrue(trie.autoComplete("jpl") == None)
        self.assertTrue(trie.autoComplete("jpm") == None)
        self.assertTrue(trie.autoComplete("jpn") == None)
        self.assertTrue(trie.autoComplete("jpo") == None)
        self.assertTrue(trie.autoComplete("jpp") == None)
        self.assertTrue(trie.autoComplete("jpq") == None)
        self.assertTrue(trie.autoComplete("jpr") == None)
        self.assertTrue(trie.autoComplete("jps") == None)
        self.assertTrue(trie.autoComplete("jpt") == None)
        self.assertTrue(trie.autoComplete("jpu") == None)
        self.assertTrue(trie.autoComplete("jpv") == None)
        self.assertTrue(trie.autoComplete("jpw") == None)
        self.assertTrue(trie.autoComplete("jpx") == None)
        self.assertTrue(trie.autoComplete("jpy") == None)
        self.assertTrue(trie.autoComplete("jpz") == None)
        self.assertTrue(trie.autoComplete("jq") == None)
        self.assertTrue(trie.autoComplete("jqa") == None)
        self.assertTrue(trie.autoComplete("jqb") == None)
        self.assertTrue(trie.autoComplete("jqc") == None)
        self.assertTrue(trie.autoComplete("jqd") == None)
        self.assertTrue(trie.autoComplete("jqe") == None)
        self.assertTrue(trie.autoComplete("jqf") == None)
        self.assertTrue(trie.autoComplete("jqg") == None)
        self.assertTrue(trie.autoComplete("jqh") == None)
        self.assertTrue(trie.autoComplete("jqi") == None)
        self.assertTrue(trie.autoComplete("jqj") == None)
        self.assertTrue(trie.autoComplete("jqk") == None)
        self.assertTrue(trie.autoComplete("jql") == None)
        self.assertTrue(trie.autoComplete("jqm") == None)
        self.assertTrue(trie.autoComplete("jqn") == None)
        self.assertTrue(trie.autoComplete("jqo") == None)
        self.assertTrue(trie.autoComplete("jqp") == None)
        self.assertTrue(trie.autoComplete("jqq") == None)
        self.assertTrue(trie.autoComplete("jqr") == None)
        self.assertTrue(trie.autoComplete("jqs") == None)
        self.assertTrue(trie.autoComplete("jqt") == None)
        self.assertTrue(trie.autoComplete("jqu") == None)
        self.assertTrue(trie.autoComplete("jqv") == None)
        self.assertTrue(trie.autoComplete("jqw") == None)
        self.assertTrue(trie.autoComplete("jqx") == None)
        self.assertTrue(trie.autoComplete("jqy") == None)
        self.assertTrue(trie.autoComplete("jqz") == None)
        self.assertTrue(trie.autoComplete("jr") == None)
        self.assertTrue(trie.autoComplete("jra") == None)
        self.assertTrue(trie.autoComplete("jrb") == None)
        self.assertTrue(trie.autoComplete("jrc") == None)
        self.assertTrue(trie.autoComplete("jrd") == None)
        self.assertTrue(trie.autoComplete("jre") == None)
        self.assertTrue(trie.autoComplete("jrf") == None)
        self.assertTrue(trie.autoComplete("jrg") == None)
        self.assertTrue(trie.autoComplete("jrh") == None)
        self.assertTrue(trie.autoComplete("jri") == None)
        self.assertTrue(trie.autoComplete("jrj") == None)
        self.assertTrue(trie.autoComplete("jrk") == None)
        self.assertTrue(trie.autoComplete("jrl") == None)
        self.assertTrue(trie.autoComplete("jrm") == None)
        self.assertTrue(trie.autoComplete("jrn") == None)
        self.assertTrue(trie.autoComplete("jro") == None)
        self.assertTrue(trie.autoComplete("jrp") == None)
        self.assertTrue(trie.autoComplete("jrq") == None)
        self.assertTrue(trie.autoComplete("jrr") == None)
        self.assertTrue(trie.autoComplete("jrs") == None)
        self.assertTrue(trie.autoComplete("jrt") == None)
        self.assertTrue(trie.autoComplete("jru") == None)
        self.assertTrue(trie.autoComplete("jrv") == None)
        self.assertTrue(trie.autoComplete("jrw") == None)
        self.assertTrue(trie.autoComplete("jrx") == None)
        self.assertTrue(trie.autoComplete("jry") == None)
        self.assertTrue(trie.autoComplete("jrz") == None)
        self.assertTrue(trie.autoComplete("js") == None)
        self.assertTrue(trie.autoComplete("jsa") == None)
        self.assertTrue(trie.autoComplete("jsb") == None)
        self.assertTrue(trie.autoComplete("jsc") == None)
        self.assertTrue(trie.autoComplete("jsd") == None)
        self.assertTrue(trie.autoComplete("jse") == None)
        self.assertTrue(trie.autoComplete("jsf") == None)
        self.assertTrue(trie.autoComplete("jsg") == None)
        self.assertTrue(trie.autoComplete("jsh") == None)
        self.assertTrue(trie.autoComplete("jsi") == None)
        self.assertTrue(trie.autoComplete("jsj") == None)
        self.assertTrue(trie.autoComplete("jsk") == None)
        self.assertTrue(trie.autoComplete("jsl") == None)
        self.assertTrue(trie.autoComplete("jsm") == None)
        self.assertTrue(trie.autoComplete("jsn") == None)
        self.assertTrue(trie.autoComplete("jso") == None)
        self.assertTrue(trie.autoComplete("jsp") == None)
        self.assertTrue(trie.autoComplete("jsq") == None)
        self.assertTrue(trie.autoComplete("jsr") == None)
        self.assertTrue(trie.autoComplete("jss") == None)
        self.assertTrue(trie.autoComplete("jst") == None)
        self.assertTrue(trie.autoComplete("jsu") == None)
        self.assertTrue(trie.autoComplete("jsv") == None)
        self.assertTrue(trie.autoComplete("jsw") == None)
        self.assertTrue(trie.autoComplete("jsx") == None)
        self.assertTrue(trie.autoComplete("jsy") == None)
        self.assertTrue(trie.autoComplete("jsz") == None)
        self.assertTrue(trie.autoComplete("jt") == None)
        self.assertTrue(trie.autoComplete("jta") == None)
        self.assertTrue(trie.autoComplete("jtb") == None)
        self.assertTrue(trie.autoComplete("jtc") == None)
        self.assertTrue(trie.autoComplete("jtd") == None)
        self.assertTrue(trie.autoComplete("jte") == None)
        self.assertTrue(trie.autoComplete("jtf") == None)
        self.assertTrue(trie.autoComplete("jtg") == None)
        self.assertTrue(trie.autoComplete("jth") == None)
        self.assertTrue(trie.autoComplete("jti") == None)
        self.assertTrue(trie.autoComplete("jtj") == None)
        self.assertTrue(trie.autoComplete("jtk") == None)
        self.assertTrue(trie.autoComplete("jtl") == None)
        self.assertTrue(trie.autoComplete("jtm") == None)
        self.assertTrue(trie.autoComplete("jtn") == None)
        self.assertTrue(trie.autoComplete("jto") == None)
        self.assertTrue(trie.autoComplete("jtp") == None)
        self.assertTrue(trie.autoComplete("jtq") == None)
        self.assertTrue(trie.autoComplete("jtr") == None)
        self.assertTrue(trie.autoComplete("jts") == None)
        self.assertTrue(trie.autoComplete("jtt") == None)
        self.assertTrue(trie.autoComplete("jtu") == None)
        self.assertTrue(trie.autoComplete("jtv") == None)
        self.assertTrue(trie.autoComplete("jtw") == None)
        self.assertTrue(trie.autoComplete("jtx") == None)
        self.assertTrue(trie.autoComplete("jty") == None)
        self.assertTrue(trie.autoComplete("jtz") == None)
        self.assertTrue(trie.autoComplete("ju") == "jurisdiction")
        self.assertTrue(trie.autoComplete("jua") == None)
        self.assertTrue(trie.autoComplete("jub") == None)
        self.assertTrue(trie.autoComplete("juc") == None)
        self.assertTrue(trie.autoComplete("jud") == "judicial")
        self.assertTrue(trie.autoComplete("judg") == "judges")
        self.assertTrue(trie.autoComplete("judge") == "judges")
        self.assertTrue(trie.autoComplete("judges") == "judges")
        self.assertTrue(trie.autoComplete("judgm") == "judgment")
        self.assertTrue(trie.autoComplete("judgme") == "judgment")
        self.assertTrue(trie.autoComplete("judgmen") == "judgment")
        self.assertTrue(trie.autoComplete("judgment") == "judgment")
        self.assertTrue(trie.autoComplete("judi") == "judicial")
        self.assertTrue(trie.autoComplete("judic") == "judicial")
        self.assertTrue(trie.autoComplete("judici") == "judicial")
        self.assertTrue(trie.autoComplete("judicia") == "judicial")
        self.assertTrue(trie.autoComplete("judicial") == "judicial")
        self.assertTrue(trie.autoComplete("jue") == None)
        self.assertTrue(trie.autoComplete("juf") == None)
        self.assertTrue(trie.autoComplete("jug") == None)
        self.assertTrue(trie.autoComplete("juh") == None)
        self.assertTrue(trie.autoComplete("jui") == None)
        self.assertTrue(trie.autoComplete("juj") == None)
        self.assertTrue(trie.autoComplete("juk") == None)
        self.assertTrue(trie.autoComplete("jul") == None)
        self.assertTrue(trie.autoComplete("jum") == None)
        self.assertTrue(trie.autoComplete("jun") == "junction")
        self.assertTrue(trie.autoComplete("junc") == "junction")
        self.assertTrue(trie.autoComplete("junct") == "junction")
        self.assertTrue(trie.autoComplete("juncti") == "junction")
        self.assertTrue(trie.autoComplete("junctio") == "junction")
        self.assertTrue(trie.autoComplete("junction") == "junction")
        self.assertTrue(trie.autoComplete("juo") == None)
        self.assertTrue(trie.autoComplete("jup") == None)
        self.assertTrue(trie.autoComplete("juq") == None)
        self.assertTrue(trie.autoComplete("jur") == "jurisdiction")
        self.assertTrue(trie.autoComplete("juri") == "jurisdiction")
        self.assertTrue(trie.autoComplete("juris") == "jurisdiction")
        self.assertTrue(trie.autoComplete("jurisd") == "jurisdiction")
        self.assertTrue(trie.autoComplete("jurisdi") == "jurisdiction")
        self.assertTrue(trie.autoComplete("jurisdic") == "jurisdiction")
        self.assertTrue(trie.autoComplete("jurisdict") == "jurisdiction")
        self.assertTrue(trie.autoComplete("jurisdicti") == "jurisdiction")
        self.assertTrue(trie.autoComplete("jurisdictio") == "jurisdiction")
        self.assertTrue(trie.autoComplete("jurisdiction") == "jurisdiction")
        self.assertTrue(trie.autoComplete("jury") == "jury")
        self.assertTrue(trie.autoComplete("jus") == "justice")
        self.assertTrue(trie.autoComplete("just") == "justice")
        self.assertTrue(trie.autoComplete("justi") == "justice")
        self.assertTrue(trie.autoComplete("justic") == "justice")
        self.assertTrue(trie.autoComplete("justice") == "justice")
        self.assertTrue(trie.autoComplete("jut") == None)
        self.assertTrue(trie.autoComplete("juu") == None)
        self.assertTrue(trie.autoComplete("juv") == None)
        self.assertTrue(trie.autoComplete("juw") == None)
        self.assertTrue(trie.autoComplete("jux") == None)
        self.assertTrue(trie.autoComplete("juy") == None)
        self.assertTrue(trie.autoComplete("juz") == None)
        self.assertTrue(trie.autoComplete("jv") == None)
        self.assertTrue(trie.autoComplete("jva") == None)
        self.assertTrue(trie.autoComplete("jvb") == None)
        self.assertTrue(trie.autoComplete("jvc") == None)
        self.assertTrue(trie.autoComplete("jvd") == None)
        self.assertTrue(trie.autoComplete("jve") == None)
        self.assertTrue(trie.autoComplete("jvf") == None)
        self.assertTrue(trie.autoComplete("jvg") == None)
        self.assertTrue(trie.autoComplete("jvh") == None)
        self.assertTrue(trie.autoComplete("jvi") == None)
        self.assertTrue(trie.autoComplete("jvj") == None)
        self.assertTrue(trie.autoComplete("jvk") == None)
        self.assertTrue(trie.autoComplete("jvl") == None)
        self.assertTrue(trie.autoComplete("jvm") == None)
        self.assertTrue(trie.autoComplete("jvn") == None)
        self.assertTrue(trie.autoComplete("jvo") == None)
        self.assertTrue(trie.autoComplete("jvp") == None)
        self.assertTrue(trie.autoComplete("jvq") == None)
        self.assertTrue(trie.autoComplete("jvr") == None)
        self.assertTrue(trie.autoComplete("jvs") == None)
        self.assertTrue(trie.autoComplete("jvt") == None)
        self.assertTrue(trie.autoComplete("jvu") == None)
        self.assertTrue(trie.autoComplete("jvv") == None)
        self.assertTrue(trie.autoComplete("jvw") == None)
        self.assertTrue(trie.autoComplete("jvx") == None)
        self.assertTrue(trie.autoComplete("jvy") == None)
        self.assertTrue(trie.autoComplete("jvz") == None)
        self.assertTrue(trie.autoComplete("jw") == None)
        self.assertTrue(trie.autoComplete("jwa") == None)
        self.assertTrue(trie.autoComplete("jwb") == None)
        self.assertTrue(trie.autoComplete("jwc") == None)
        self.assertTrue(trie.autoComplete("jwd") == None)
        self.assertTrue(trie.autoComplete("jwe") == None)
        self.assertTrue(trie.autoComplete("jwf") == None)
        self.assertTrue(trie.autoComplete("jwg") == None)
        self.assertTrue(trie.autoComplete("jwh") == None)
        self.assertTrue(trie.autoComplete("jwi") == None)
        self.assertTrue(trie.autoComplete("jwj") == None)
        self.assertTrue(trie.autoComplete("jwk") == None)
        self.assertTrue(trie.autoComplete("jwl") == None)
        self.assertTrue(trie.autoComplete("jwm") == None)
        self.assertTrue(trie.autoComplete("jwn") == None)
        self.assertTrue(trie.autoComplete("jwo") == None)
        self.assertTrue(trie.autoComplete("jwp") == None)
        self.assertTrue(trie.autoComplete("jwq") == None)
        self.assertTrue(trie.autoComplete("jwr") == None)
        self.assertTrue(trie.autoComplete("jws") == None)
        self.assertTrue(trie.autoComplete("jwt") == None)
        self.assertTrue(trie.autoComplete("jwu") == None)
        self.assertTrue(trie.autoComplete("jwv") == None)
        self.assertTrue(trie.autoComplete("jww") == None)
        self.assertTrue(trie.autoComplete("jwx") == None)
        self.assertTrue(trie.autoComplete("jwy") == None)
        self.assertTrue(trie.autoComplete("jwz") == None)
        self.assertTrue(trie.autoComplete("jx") == None)
        self.assertTrue(trie.autoComplete("jxa") == None)
        self.assertTrue(trie.autoComplete("jxb") == None)
        self.assertTrue(trie.autoComplete("jxc") == None)
        self.assertTrue(trie.autoComplete("jxd") == None)
        self.assertTrue(trie.autoComplete("jxe") == None)
        self.assertTrue(trie.autoComplete("jxf") == None)
        self.assertTrue(trie.autoComplete("jxg") == None)
        self.assertTrue(trie.autoComplete("jxh") == None)
        self.assertTrue(trie.autoComplete("jxi") == None)
        self.assertTrue(trie.autoComplete("jxj") == None)
        self.assertTrue(trie.autoComplete("jxk") == None)
        self.assertTrue(trie.autoComplete("jxl") == None)
        self.assertTrue(trie.autoComplete("jxm") == None)
        self.assertTrue(trie.autoComplete("jxn") == None)
        self.assertTrue(trie.autoComplete("jxo") == None)
        self.assertTrue(trie.autoComplete("jxp") == None)
        self.assertTrue(trie.autoComplete("jxq") == None)
        self.assertTrue(trie.autoComplete("jxr") == None)
        self.assertTrue(trie.autoComplete("jxs") == None)
        self.assertTrue(trie.autoComplete("jxt") == None)
        self.assertTrue(trie.autoComplete("jxu") == None)
        self.assertTrue(trie.autoComplete("jxv") == None)
        self.assertTrue(trie.autoComplete("jxw") == None)
        self.assertTrue(trie.autoComplete("jxx") == None)
        self.assertTrue(trie.autoComplete("jxy") == None)
        self.assertTrue(trie.autoComplete("jxz") == None)
        self.assertTrue(trie.autoComplete("jy") == None)
        self.assertTrue(trie.autoComplete("jya") == None)
        self.assertTrue(trie.autoComplete("jyb") == None)
        self.assertTrue(trie.autoComplete("jyc") == None)
        self.assertTrue(trie.autoComplete("jyd") == None)
        self.assertTrue(trie.autoComplete("jye") == None)
        self.assertTrue(trie.autoComplete("jyf") == None)
        self.assertTrue(trie.autoComplete("jyg") == None)
        self.assertTrue(trie.autoComplete("jyh") == None)
        self.assertTrue(trie.autoComplete("jyi") == None)
        self.assertTrue(trie.autoComplete("jyj") == None)
        self.assertTrue(trie.autoComplete("jyk") == None)
        self.assertTrue(trie.autoComplete("jyl") == None)
        self.assertTrue(trie.autoComplete("jym") == None)
        self.assertTrue(trie.autoComplete("jyn") == None)
        self.assertTrue(trie.autoComplete("jyo") == None)
        self.assertTrue(trie.autoComplete("jyp") == None)
        self.assertTrue(trie.autoComplete("jyq") == None)
        self.assertTrue(trie.autoComplete("jyr") == None)
        self.assertTrue(trie.autoComplete("jys") == None)
        self.assertTrue(trie.autoComplete("jyt") == None)
        self.assertTrue(trie.autoComplete("jyu") == None)
        self.assertTrue(trie.autoComplete("jyv") == None)
        self.assertTrue(trie.autoComplete("jyw") == None)
        self.assertTrue(trie.autoComplete("jyx") == None)
        self.assertTrue(trie.autoComplete("jyy") == None)
        self.assertTrue(trie.autoComplete("jyz") == None)
        self.assertTrue(trie.autoComplete("jz") == None)
        self.assertTrue(trie.autoComplete("jza") == None)
        self.assertTrue(trie.autoComplete("jzb") == None)
        self.assertTrue(trie.autoComplete("jzc") == None)
        self.assertTrue(trie.autoComplete("jzd") == None)
        self.assertTrue(trie.autoComplete("jze") == None)
        self.assertTrue(trie.autoComplete("jzf") == None)
        self.assertTrue(trie.autoComplete("jzg") == None)
        self.assertTrue(trie.autoComplete("jzh") == None)
        self.assertTrue(trie.autoComplete("jzi") == None)
        self.assertTrue(trie.autoComplete("jzj") == None)
        self.assertTrue(trie.autoComplete("jzk") == None)
        self.assertTrue(trie.autoComplete("jzl") == None)
        self.assertTrue(trie.autoComplete("jzm") == None)
        self.assertTrue(trie.autoComplete("jzn") == None)
        self.assertTrue(trie.autoComplete("jzo") == None)
        self.assertTrue(trie.autoComplete("jzp") == None)
        self.assertTrue(trie.autoComplete("jzq") == None)
        self.assertTrue(trie.autoComplete("jzr") == None)
        self.assertTrue(trie.autoComplete("jzs") == None)
        self.assertTrue(trie.autoComplete("jzt") == None)
        self.assertTrue(trie.autoComplete("jzu") == None)
        self.assertTrue(trie.autoComplete("jzv") == None)
        self.assertTrue(trie.autoComplete("jzw") == None)
        self.assertTrue(trie.autoComplete("jzx") == None)
        self.assertTrue(trie.autoComplete("jzy") == None)
        self.assertTrue(trie.autoComplete("jzz") == None)
        self.assertTrue(trie.autoComplete("k") == "keep")
        self.assertTrue(trie.autoComplete("ka") == None)
        self.assertTrue(trie.autoComplete("kaa") == None)
        self.assertTrue(trie.autoComplete("kab") == None)
        self.assertTrue(trie.autoComplete("kac") == None)
        self.assertTrue(trie.autoComplete("kad") == None)
        self.assertTrue(trie.autoComplete("kae") == None)
        self.assertTrue(trie.autoComplete("kaf") == None)
        self.assertTrue(trie.autoComplete("kag") == None)
        self.assertTrue(trie.autoComplete("kah") == None)
        self.assertTrue(trie.autoComplete("kai") == None)
        self.assertTrue(trie.autoComplete("kaj") == None)
        self.assertTrue(trie.autoComplete("kak") == None)
        self.assertTrue(trie.autoComplete("kal") == None)
        self.assertTrue(trie.autoComplete("kam") == None)
        self.assertTrue(trie.autoComplete("kan") == None)
        self.assertTrue(trie.autoComplete("kao") == None)
        self.assertTrue(trie.autoComplete("kap") == None)
        self.assertTrue(trie.autoComplete("kaq") == None)
        self.assertTrue(trie.autoComplete("kar") == None)
        self.assertTrue(trie.autoComplete("kas") == None)
        self.assertTrue(trie.autoComplete("kat") == None)
        self.assertTrue(trie.autoComplete("kau") == None)
        self.assertTrue(trie.autoComplete("kav") == None)
        self.assertTrue(trie.autoComplete("kaw") == None)
        self.assertTrue(trie.autoComplete("kax") == None)
        self.assertTrue(trie.autoComplete("kay") == None)
        self.assertTrue(trie.autoComplete("kaz") == None)
        self.assertTrue(trie.autoComplete("kb") == None)
        self.assertTrue(trie.autoComplete("kba") == None)
        self.assertTrue(trie.autoComplete("kbb") == None)
        self.assertTrue(trie.autoComplete("kbc") == None)
        self.assertTrue(trie.autoComplete("kbd") == None)
        self.assertTrue(trie.autoComplete("kbe") == None)
        self.assertTrue(trie.autoComplete("kbf") == None)
        self.assertTrue(trie.autoComplete("kbg") == None)
        self.assertTrue(trie.autoComplete("kbh") == None)
        self.assertTrue(trie.autoComplete("kbi") == None)
        self.assertTrue(trie.autoComplete("kbj") == None)
        self.assertTrue(trie.autoComplete("kbk") == None)
        self.assertTrue(trie.autoComplete("kbl") == None)
        self.assertTrue(trie.autoComplete("kbm") == None)
        self.assertTrue(trie.autoComplete("kbn") == None)
        self.assertTrue(trie.autoComplete("kbo") == None)
        self.assertTrue(trie.autoComplete("kbp") == None)
        self.assertTrue(trie.autoComplete("kbq") == None)
        self.assertTrue(trie.autoComplete("kbr") == None)
        self.assertTrue(trie.autoComplete("kbs") == None)
        self.assertTrue(trie.autoComplete("kbt") == None)
        self.assertTrue(trie.autoComplete("kbu") == None)
        self.assertTrue(trie.autoComplete("kbv") == None)
        self.assertTrue(trie.autoComplete("kbw") == None)
        self.assertTrue(trie.autoComplete("kbx") == None)
        self.assertTrue(trie.autoComplete("kby") == None)
        self.assertTrue(trie.autoComplete("kbz") == None)
        self.assertTrue(trie.autoComplete("kc") == None)
        self.assertTrue(trie.autoComplete("kca") == None)
        self.assertTrue(trie.autoComplete("kcb") == None)
        self.assertTrue(trie.autoComplete("kcc") == None)
        self.assertTrue(trie.autoComplete("kcd") == None)
        self.assertTrue(trie.autoComplete("kce") == None)
        self.assertTrue(trie.autoComplete("kcf") == None)
        self.assertTrue(trie.autoComplete("kcg") == None)
        self.assertTrue(trie.autoComplete("kch") == None)
        self.assertTrue(trie.autoComplete("kci") == None)
        self.assertTrue(trie.autoComplete("kcj") == None)
        self.assertTrue(trie.autoComplete("kck") == None)
        self.assertTrue(trie.autoComplete("kcl") == None)
        self.assertTrue(trie.autoComplete("kcm") == None)
        self.assertTrue(trie.autoComplete("kcn") == None)
        self.assertTrue(trie.autoComplete("kco") == None)
        self.assertTrue(trie.autoComplete("kcp") == None)
        self.assertTrue(trie.autoComplete("kcq") == None)
        self.assertTrue(trie.autoComplete("kcr") == None)
        self.assertTrue(trie.autoComplete("kcs") == None)
        self.assertTrue(trie.autoComplete("kct") == None)
        self.assertTrue(trie.autoComplete("kcu") == None)
        self.assertTrue(trie.autoComplete("kcv") == None)
        self.assertTrue(trie.autoComplete("kcw") == None)
        self.assertTrue(trie.autoComplete("kcx") == None)
        self.assertTrue(trie.autoComplete("kcy") == None)
        self.assertTrue(trie.autoComplete("kcz") == None)
        self.assertTrue(trie.autoComplete("kd") == None)
        self.assertTrue(trie.autoComplete("kda") == None)
        self.assertTrue(trie.autoComplete("kdb") == None)
        self.assertTrue(trie.autoComplete("kdc") == None)
        self.assertTrue(trie.autoComplete("kdd") == None)
        self.assertTrue(trie.autoComplete("kde") == None)
        self.assertTrue(trie.autoComplete("kdf") == None)
        self.assertTrue(trie.autoComplete("kdg") == None)
        self.assertTrue(trie.autoComplete("kdh") == None)
        self.assertTrue(trie.autoComplete("kdi") == None)
        self.assertTrue(trie.autoComplete("kdj") == None)
        self.assertTrue(trie.autoComplete("kdk") == None)
        self.assertTrue(trie.autoComplete("kdl") == None)
        self.assertTrue(trie.autoComplete("kdm") == None)
        self.assertTrue(trie.autoComplete("kdn") == None)
        self.assertTrue(trie.autoComplete("kdo") == None)
        self.assertTrue(trie.autoComplete("kdp") == None)
        self.assertTrue(trie.autoComplete("kdq") == None)
        self.assertTrue(trie.autoComplete("kdr") == None)
        self.assertTrue(trie.autoComplete("kds") == None)
        self.assertTrue(trie.autoComplete("kdt") == None)
        self.assertTrue(trie.autoComplete("kdu") == None)
        self.assertTrue(trie.autoComplete("kdv") == None)
        self.assertTrue(trie.autoComplete("kdw") == None)
        self.assertTrue(trie.autoComplete("kdx") == None)
        self.assertTrue(trie.autoComplete("kdy") == None)
        self.assertTrue(trie.autoComplete("kdz") == None)
        self.assertTrue(trie.autoComplete("ke") == "keep")
        self.assertTrue(trie.autoComplete("kea") == None)
        self.assertTrue(trie.autoComplete("keb") == None)
        self.assertTrue(trie.autoComplete("kec") == None)
        self.assertTrue(trie.autoComplete("ked") == None)
        self.assertTrue(trie.autoComplete("kee") == "keep")
        self.assertTrue(trie.autoComplete("keep") == "keep")
        self.assertTrue(trie.autoComplete("kef") == None)
        self.assertTrue(trie.autoComplete("keg") == None)
        self.assertTrue(trie.autoComplete("keh") == None)
        self.assertTrue(trie.autoComplete("kei") == None)
        self.assertTrue(trie.autoComplete("kej") == None)
        self.assertTrue(trie.autoComplete("kek") == None)
        self.assertTrue(trie.autoComplete("kel") == None)
        self.assertTrue(trie.autoComplete("kem") == None)
        self.assertTrue(trie.autoComplete("ken") == None)
        self.assertTrue(trie.autoComplete("keo") == None)
        self.assertTrue(trie.autoComplete("kep") == None)
        self.assertTrue(trie.autoComplete("keq") == None)
        self.assertTrue(trie.autoComplete("ker") == None)
        self.assertTrue(trie.autoComplete("kes") == None)
        self.assertTrue(trie.autoComplete("ket") == None)
        self.assertTrue(trie.autoComplete("keu") == None)
        self.assertTrue(trie.autoComplete("kev") == None)
        self.assertTrue(trie.autoComplete("kew") == None)
        self.assertTrue(trie.autoComplete("kex") == None)
        self.assertTrue(trie.autoComplete("key") == None)
        self.assertTrue(trie.autoComplete("kez") == None)
        self.assertTrue(trie.autoComplete("kf") == None)
        self.assertTrue(trie.autoComplete("kfa") == None)
        self.assertTrue(trie.autoComplete("kfb") == None)
        self.assertTrue(trie.autoComplete("kfc") == None)
        self.assertTrue(trie.autoComplete("kfd") == None)
        self.assertTrue(trie.autoComplete("kfe") == None)
        self.assertTrue(trie.autoComplete("kff") == None)
        self.assertTrue(trie.autoComplete("kfg") == None)
        self.assertTrue(trie.autoComplete("kfh") == None)
        self.assertTrue(trie.autoComplete("kfi") == None)
        self.assertTrue(trie.autoComplete("kfj") == None)
        self.assertTrue(trie.autoComplete("kfk") == None)
        self.assertTrue(trie.autoComplete("kfl") == None)
        self.assertTrue(trie.autoComplete("kfm") == None)
        self.assertTrue(trie.autoComplete("kfn") == None)
        self.assertTrue(trie.autoComplete("kfo") == None)
        self.assertTrue(trie.autoComplete("kfp") == None)
        self.assertTrue(trie.autoComplete("kfq") == None)
        self.assertTrue(trie.autoComplete("kfr") == None)
        self.assertTrue(trie.autoComplete("kfs") == None)
        self.assertTrue(trie.autoComplete("kft") == None)
        self.assertTrue(trie.autoComplete("kfu") == None)
        self.assertTrue(trie.autoComplete("kfv") == None)
        self.assertTrue(trie.autoComplete("kfw") == None)
        self.assertTrue(trie.autoComplete("kfx") == None)
        self.assertTrue(trie.autoComplete("kfy") == None)
        self.assertTrue(trie.autoComplete("kfz") == None)
        self.assertTrue(trie.autoComplete("kg") == None)
        self.assertTrue(trie.autoComplete("kga") == None)
        self.assertTrue(trie.autoComplete("kgb") == None)
        self.assertTrue(trie.autoComplete("kgc") == None)
        self.assertTrue(trie.autoComplete("kgd") == None)
        self.assertTrue(trie.autoComplete("kge") == None)
        self.assertTrue(trie.autoComplete("kgf") == None)
        self.assertTrue(trie.autoComplete("kgg") == None)
        self.assertTrue(trie.autoComplete("kgh") == None)
        self.assertTrue(trie.autoComplete("kgi") == None)
        self.assertTrue(trie.autoComplete("kgj") == None)
        self.assertTrue(trie.autoComplete("kgk") == None)
        self.assertTrue(trie.autoComplete("kgl") == None)
        self.assertTrue(trie.autoComplete("kgm") == None)
        self.assertTrue(trie.autoComplete("kgn") == None)
        self.assertTrue(trie.autoComplete("kgo") == None)
        self.assertTrue(trie.autoComplete("kgp") == None)
        self.assertTrue(trie.autoComplete("kgq") == None)
        self.assertTrue(trie.autoComplete("kgr") == None)
        self.assertTrue(trie.autoComplete("kgs") == None)
        self.assertTrue(trie.autoComplete("kgt") == None)
        self.assertTrue(trie.autoComplete("kgu") == None)
        self.assertTrue(trie.autoComplete("kgv") == None)
        self.assertTrue(trie.autoComplete("kgw") == None)
        self.assertTrue(trie.autoComplete("kgx") == None)
        self.assertTrue(trie.autoComplete("kgy") == None)
        self.assertTrue(trie.autoComplete("kgz") == None)
        self.assertTrue(trie.autoComplete("kh") == None)
        self.assertTrue(trie.autoComplete("kha") == None)
        self.assertTrue(trie.autoComplete("khb") == None)
        self.assertTrue(trie.autoComplete("khc") == None)
        self.assertTrue(trie.autoComplete("khd") == None)
        self.assertTrue(trie.autoComplete("khe") == None)
        self.assertTrue(trie.autoComplete("khf") == None)
        self.assertTrue(trie.autoComplete("khg") == None)
        self.assertTrue(trie.autoComplete("khh") == None)
        self.assertTrue(trie.autoComplete("khi") == None)
        self.assertTrue(trie.autoComplete("khj") == None)
        self.assertTrue(trie.autoComplete("khk") == None)
        self.assertTrue(trie.autoComplete("khl") == None)
        self.assertTrue(trie.autoComplete("khm") == None)
        self.assertTrue(trie.autoComplete("khn") == None)
        self.assertTrue(trie.autoComplete("kho") == None)
        self.assertTrue(trie.autoComplete("khp") == None)
        self.assertTrue(trie.autoComplete("khq") == None)
        self.assertTrue(trie.autoComplete("khr") == None)
        self.assertTrue(trie.autoComplete("khs") == None)
        self.assertTrue(trie.autoComplete("kht") == None)
        self.assertTrue(trie.autoComplete("khu") == None)
        self.assertTrue(trie.autoComplete("khv") == None)
        self.assertTrue(trie.autoComplete("khw") == None)
        self.assertTrue(trie.autoComplete("khx") == None)
        self.assertTrue(trie.autoComplete("khy") == None)
        self.assertTrue(trie.autoComplete("khz") == None)
        self.assertTrue(trie.autoComplete("ki") == "kind")
        self.assertTrue(trie.autoComplete("kia") == None)
        self.assertTrue(trie.autoComplete("kib") == None)
        self.assertTrue(trie.autoComplete("kic") == None)
        self.assertTrue(trie.autoComplete("kid") == None)
        self.assertTrue(trie.autoComplete("kie") == None)
        self.assertTrue(trie.autoComplete("kif") == None)
        self.assertTrue(trie.autoComplete("kig") == None)
        self.assertTrue(trie.autoComplete("kih") == None)
        self.assertTrue(trie.autoComplete("kii") == None)
        self.assertTrue(trie.autoComplete("kij") == None)
        self.assertTrue(trie.autoComplete("kik") == None)
        self.assertTrue(trie.autoComplete("kil") == None)
        self.assertTrue(trie.autoComplete("kim") == None)
        self.assertTrue(trie.autoComplete("kin") == "kind")
        self.assertTrue(trie.autoComplete("kind") == "kind")
        self.assertTrue(trie.autoComplete("king") == "king")
        self.assertTrue(trie.autoComplete("kio") == None)
        self.assertTrue(trie.autoComplete("kip") == None)
        self.assertTrue(trie.autoComplete("kiq") == None)
        self.assertTrue(trie.autoComplete("kir") == None)
        self.assertTrue(trie.autoComplete("kis") == None)
        self.assertTrue(trie.autoComplete("kit") == None)
        self.assertTrue(trie.autoComplete("kiu") == None)
        self.assertTrue(trie.autoComplete("kiv") == None)
        self.assertTrue(trie.autoComplete("kiw") == None)
        self.assertTrue(trie.autoComplete("kix") == None)
        self.assertTrue(trie.autoComplete("kiy") == None)
        self.assertTrue(trie.autoComplete("kiz") == None)
        self.assertTrue(trie.autoComplete("kj") == None)
        self.assertTrue(trie.autoComplete("kja") == None)
        self.assertTrue(trie.autoComplete("kjb") == None)
        self.assertTrue(trie.autoComplete("kjc") == None)
        self.assertTrue(trie.autoComplete("kjd") == None)
        self.assertTrue(trie.autoComplete("kje") == None)
        self.assertTrue(trie.autoComplete("kjf") == None)
        self.assertTrue(trie.autoComplete("kjg") == None)
        self.assertTrue(trie.autoComplete("kjh") == None)
        self.assertTrue(trie.autoComplete("kji") == None)
        self.assertTrue(trie.autoComplete("kjj") == None)
        self.assertTrue(trie.autoComplete("kjk") == None)
        self.assertTrue(trie.autoComplete("kjl") == None)
        self.assertTrue(trie.autoComplete("kjm") == None)
        self.assertTrue(trie.autoComplete("kjn") == None)
        self.assertTrue(trie.autoComplete("kjo") == None)
        self.assertTrue(trie.autoComplete("kjp") == None)
        self.assertTrue(trie.autoComplete("kjq") == None)
        self.assertTrue(trie.autoComplete("kjr") == None)
        self.assertTrue(trie.autoComplete("kjs") == None)
        self.assertTrue(trie.autoComplete("kjt") == None)
        self.assertTrue(trie.autoComplete("kju") == None)
        self.assertTrue(trie.autoComplete("kjv") == None)
        self.assertTrue(trie.autoComplete("kjw") == None)
        self.assertTrue(trie.autoComplete("kjx") == None)
        self.assertTrue(trie.autoComplete("kjy") == None)
        self.assertTrue(trie.autoComplete("kjz") == None)
        self.assertTrue(trie.autoComplete("kk") == None)
        self.assertTrue(trie.autoComplete("kka") == None)
        self.assertTrue(trie.autoComplete("kkb") == None)
        self.assertTrue(trie.autoComplete("kkc") == None)
        self.assertTrue(trie.autoComplete("kkd") == None)
        self.assertTrue(trie.autoComplete("kke") == None)
        self.assertTrue(trie.autoComplete("kkf") == None)
        self.assertTrue(trie.autoComplete("kkg") == None)
        self.assertTrue(trie.autoComplete("kkh") == None)
        self.assertTrue(trie.autoComplete("kki") == None)
        self.assertTrue(trie.autoComplete("kkj") == None)
        self.assertTrue(trie.autoComplete("kkk") == None)
        self.assertTrue(trie.autoComplete("kkl") == None)
        self.assertTrue(trie.autoComplete("kkm") == None)
        self.assertTrue(trie.autoComplete("kkn") == None)
        self.assertTrue(trie.autoComplete("kko") == None)
        self.assertTrue(trie.autoComplete("kkp") == None)
        self.assertTrue(trie.autoComplete("kkq") == None)
        self.assertTrue(trie.autoComplete("kkr") == None)
        self.assertTrue(trie.autoComplete("kks") == None)
        self.assertTrue(trie.autoComplete("kkt") == None)
        self.assertTrue(trie.autoComplete("kku") == None)
        self.assertTrue(trie.autoComplete("kkv") == None)
        self.assertTrue(trie.autoComplete("kkw") == None)
        self.assertTrue(trie.autoComplete("kkx") == None)
        self.assertTrue(trie.autoComplete("kky") == None)
        self.assertTrue(trie.autoComplete("kkz") == None)
        self.assertTrue(trie.autoComplete("kl") == None)
        self.assertTrue(trie.autoComplete("kla") == None)
        self.assertTrue(trie.autoComplete("klb") == None)
        self.assertTrue(trie.autoComplete("klc") == None)
        self.assertTrue(trie.autoComplete("kld") == None)
        self.assertTrue(trie.autoComplete("kle") == None)
        self.assertTrue(trie.autoComplete("klf") == None)
        self.assertTrue(trie.autoComplete("klg") == None)
        self.assertTrue(trie.autoComplete("klh") == None)
        self.assertTrue(trie.autoComplete("kli") == None)
        self.assertTrue(trie.autoComplete("klj") == None)
        self.assertTrue(trie.autoComplete("klk") == None)
        self.assertTrue(trie.autoComplete("kll") == None)
        self.assertTrue(trie.autoComplete("klm") == None)
        self.assertTrue(trie.autoComplete("kln") == None)
        self.assertTrue(trie.autoComplete("klo") == None)
        self.assertTrue(trie.autoComplete("klp") == None)
        self.assertTrue(trie.autoComplete("klq") == None)
        self.assertTrue(trie.autoComplete("klr") == None)
        self.assertTrue(trie.autoComplete("kls") == None)
        self.assertTrue(trie.autoComplete("klt") == None)
        self.assertTrue(trie.autoComplete("klu") == None)
        self.assertTrue(trie.autoComplete("klv") == None)
        self.assertTrue(trie.autoComplete("klw") == None)
        self.assertTrue(trie.autoComplete("klx") == None)
        self.assertTrue(trie.autoComplete("kly") == None)
        self.assertTrue(trie.autoComplete("klz") == None)
        self.assertTrue(trie.autoComplete("km") == None)
        self.assertTrue(trie.autoComplete("kma") == None)
        self.assertTrue(trie.autoComplete("kmb") == None)
        self.assertTrue(trie.autoComplete("kmc") == None)
        self.assertTrue(trie.autoComplete("kmd") == None)
        self.assertTrue(trie.autoComplete("kme") == None)
        self.assertTrue(trie.autoComplete("kmf") == None)
        self.assertTrue(trie.autoComplete("kmg") == None)
        self.assertTrue(trie.autoComplete("kmh") == None)
        self.assertTrue(trie.autoComplete("kmi") == None)
        self.assertTrue(trie.autoComplete("kmj") == None)
        self.assertTrue(trie.autoComplete("kmk") == None)
        self.assertTrue(trie.autoComplete("kml") == None)
        self.assertTrue(trie.autoComplete("kmm") == None)
        self.assertTrue(trie.autoComplete("kmn") == None)
        self.assertTrue(trie.autoComplete("kmo") == None)
        self.assertTrue(trie.autoComplete("kmp") == None)
        self.assertTrue(trie.autoComplete("kmq") == None)
        self.assertTrue(trie.autoComplete("kmr") == None)
        self.assertTrue(trie.autoComplete("kms") == None)
        self.assertTrue(trie.autoComplete("kmt") == None)
        self.assertTrue(trie.autoComplete("kmu") == None)
        self.assertTrue(trie.autoComplete("kmv") == None)
        self.assertTrue(trie.autoComplete("kmw") == None)
        self.assertTrue(trie.autoComplete("kmx") == None)
        self.assertTrue(trie.autoComplete("kmy") == None)
        self.assertTrue(trie.autoComplete("kmz") == None)
        self.assertTrue(trie.autoComplete("kn") == None)
        self.assertTrue(trie.autoComplete("kna") == None)
        self.assertTrue(trie.autoComplete("knb") == None)
        self.assertTrue(trie.autoComplete("knc") == None)
        self.assertTrue(trie.autoComplete("knd") == None)
        self.assertTrue(trie.autoComplete("kne") == None)
        self.assertTrue(trie.autoComplete("knf") == None)
        self.assertTrue(trie.autoComplete("kng") == None)
        self.assertTrue(trie.autoComplete("knh") == None)
        self.assertTrue(trie.autoComplete("kni") == None)
        self.assertTrue(trie.autoComplete("knj") == None)
        self.assertTrue(trie.autoComplete("knk") == None)
        self.assertTrue(trie.autoComplete("knl") == None)
        self.assertTrue(trie.autoComplete("knm") == None)
        self.assertTrue(trie.autoComplete("knn") == None)
        self.assertTrue(trie.autoComplete("kno") == None)
        self.assertTrue(trie.autoComplete("knp") == None)
        self.assertTrue(trie.autoComplete("knq") == None)
        self.assertTrue(trie.autoComplete("knr") == None)
        self.assertTrue(trie.autoComplete("kns") == None)
        self.assertTrue(trie.autoComplete("knt") == None)
        self.assertTrue(trie.autoComplete("knu") == None)
        self.assertTrue(trie.autoComplete("knv") == None)
        self.assertTrue(trie.autoComplete("knw") == None)
        self.assertTrue(trie.autoComplete("knx") == None)
        self.assertTrue(trie.autoComplete("kny") == None)
        self.assertTrue(trie.autoComplete("knz") == None)
        self.assertTrue(trie.autoComplete("ko") == None)
        self.assertTrue(trie.autoComplete("koa") == None)
        self.assertTrue(trie.autoComplete("kob") == None)
        self.assertTrue(trie.autoComplete("koc") == None)
        self.assertTrue(trie.autoComplete("kod") == None)
        self.assertTrue(trie.autoComplete("koe") == None)
        self.assertTrue(trie.autoComplete("kof") == None)
        self.assertTrue(trie.autoComplete("kog") == None)
        self.assertTrue(trie.autoComplete("koh") == None)
        self.assertTrue(trie.autoComplete("koi") == None)
        self.assertTrue(trie.autoComplete("koj") == None)
        self.assertTrue(trie.autoComplete("kok") == None)
        self.assertTrue(trie.autoComplete("kol") == None)
        self.assertTrue(trie.autoComplete("kom") == None)
        self.assertTrue(trie.autoComplete("kon") == None)
        self.assertTrue(trie.autoComplete("koo") == None)
        self.assertTrue(trie.autoComplete("kop") == None)
        self.assertTrue(trie.autoComplete("koq") == None)
        self.assertTrue(trie.autoComplete("kor") == None)
        self.assertTrue(trie.autoComplete("kos") == None)
        self.assertTrue(trie.autoComplete("kot") == None)
        self.assertTrue(trie.autoComplete("kou") == None)
        self.assertTrue(trie.autoComplete("kov") == None)
        self.assertTrue(trie.autoComplete("kow") == None)
        self.assertTrue(trie.autoComplete("kox") == None)
        self.assertTrue(trie.autoComplete("koy") == None)
        self.assertTrue(trie.autoComplete("koz") == None)
        self.assertTrue(trie.autoComplete("kp") == None)
        self.assertTrue(trie.autoComplete("kpa") == None)
        self.assertTrue(trie.autoComplete("kpb") == None)
        self.assertTrue(trie.autoComplete("kpc") == None)
        self.assertTrue(trie.autoComplete("kpd") == None)
        self.assertTrue(trie.autoComplete("kpe") == None)
        self.assertTrue(trie.autoComplete("kpf") == None)
        self.assertTrue(trie.autoComplete("kpg") == None)
        self.assertTrue(trie.autoComplete("kph") == None)
        self.assertTrue(trie.autoComplete("kpi") == None)
        self.assertTrue(trie.autoComplete("kpj") == None)
        self.assertTrue(trie.autoComplete("kpk") == None)
        self.assertTrue(trie.autoComplete("kpl") == None)
        self.assertTrue(trie.autoComplete("kpm") == None)
        self.assertTrue(trie.autoComplete("kpn") == None)
        self.assertTrue(trie.autoComplete("kpo") == None)
        self.assertTrue(trie.autoComplete("kpp") == None)
        self.assertTrue(trie.autoComplete("kpq") == None)
        self.assertTrue(trie.autoComplete("kpr") == None)
        self.assertTrue(trie.autoComplete("kps") == None)
        self.assertTrue(trie.autoComplete("kpt") == None)
        self.assertTrue(trie.autoComplete("kpu") == None)
        self.assertTrue(trie.autoComplete("kpv") == None)
        self.assertTrue(trie.autoComplete("kpw") == None)
        self.assertTrue(trie.autoComplete("kpx") == None)
        self.assertTrue(trie.autoComplete("kpy") == None)
        self.assertTrue(trie.autoComplete("kpz") == None)
        self.assertTrue(trie.autoComplete("kq") == None)
        self.assertTrue(trie.autoComplete("kqa") == None)
        self.assertTrue(trie.autoComplete("kqb") == None)
        self.assertTrue(trie.autoComplete("kqc") == None)
        self.assertTrue(trie.autoComplete("kqd") == None)
        self.assertTrue(trie.autoComplete("kqe") == None)
        self.assertTrue(trie.autoComplete("kqf") == None)
        self.assertTrue(trie.autoComplete("kqg") == None)
        self.assertTrue(trie.autoComplete("kqh") == None)
        self.assertTrue(trie.autoComplete("kqi") == None)
        self.assertTrue(trie.autoComplete("kqj") == None)
        self.assertTrue(trie.autoComplete("kqk") == None)
        self.assertTrue(trie.autoComplete("kql") == None)
        self.assertTrue(trie.autoComplete("kqm") == None)
        self.assertTrue(trie.autoComplete("kqn") == None)
        self.assertTrue(trie.autoComplete("kqo") == None)
        self.assertTrue(trie.autoComplete("kqp") == None)
        self.assertTrue(trie.autoComplete("kqq") == None)
        self.assertTrue(trie.autoComplete("kqr") == None)
        self.assertTrue(trie.autoComplete("kqs") == None)
        self.assertTrue(trie.autoComplete("kqt") == None)
        self.assertTrue(trie.autoComplete("kqu") == None)
        self.assertTrue(trie.autoComplete("kqv") == None)
        self.assertTrue(trie.autoComplete("kqw") == None)
        self.assertTrue(trie.autoComplete("kqx") == None)
        self.assertTrue(trie.autoComplete("kqy") == None)
        self.assertTrue(trie.autoComplete("kqz") == None)
        self.assertTrue(trie.autoComplete("kr") == None)
        self.assertTrue(trie.autoComplete("kra") == None)
        self.assertTrue(trie.autoComplete("krb") == None)
        self.assertTrue(trie.autoComplete("krc") == None)
        self.assertTrue(trie.autoComplete("krd") == None)
        self.assertTrue(trie.autoComplete("kre") == None)
        self.assertTrue(trie.autoComplete("krf") == None)
        self.assertTrue(trie.autoComplete("krg") == None)
        self.assertTrue(trie.autoComplete("krh") == None)
        self.assertTrue(trie.autoComplete("kri") == None)
        self.assertTrue(trie.autoComplete("krj") == None)
        self.assertTrue(trie.autoComplete("krk") == None)
        self.assertTrue(trie.autoComplete("krl") == None)
        self.assertTrue(trie.autoComplete("krm") == None)
        self.assertTrue(trie.autoComplete("krn") == None)
        self.assertTrue(trie.autoComplete("kro") == None)
        self.assertTrue(trie.autoComplete("krp") == None)
        self.assertTrue(trie.autoComplete("krq") == None)
        self.assertTrue(trie.autoComplete("krr") == None)
        self.assertTrue(trie.autoComplete("krs") == None)
        self.assertTrue(trie.autoComplete("krt") == None)
        self.assertTrue(trie.autoComplete("kru") == None)
        self.assertTrue(trie.autoComplete("krv") == None)
        self.assertTrue(trie.autoComplete("krw") == None)
        self.assertTrue(trie.autoComplete("krx") == None)
        self.assertTrue(trie.autoComplete("kry") == None)
        self.assertTrue(trie.autoComplete("krz") == None)
        self.assertTrue(trie.autoComplete("ks") == None)
        self.assertTrue(trie.autoComplete("ksa") == None)
        self.assertTrue(trie.autoComplete("ksb") == None)
        self.assertTrue(trie.autoComplete("ksc") == None)
        self.assertTrue(trie.autoComplete("ksd") == None)
        self.assertTrue(trie.autoComplete("kse") == None)
        self.assertTrue(trie.autoComplete("ksf") == None)
        self.assertTrue(trie.autoComplete("ksg") == None)
        self.assertTrue(trie.autoComplete("ksh") == None)
        self.assertTrue(trie.autoComplete("ksi") == None)
        self.assertTrue(trie.autoComplete("ksj") == None)
        self.assertTrue(trie.autoComplete("ksk") == None)
        self.assertTrue(trie.autoComplete("ksl") == None)
        self.assertTrue(trie.autoComplete("ksm") == None)
        self.assertTrue(trie.autoComplete("ksn") == None)
        self.assertTrue(trie.autoComplete("kso") == None)
        self.assertTrue(trie.autoComplete("ksp") == None)
        self.assertTrue(trie.autoComplete("ksq") == None)
        self.assertTrue(trie.autoComplete("ksr") == None)
        self.assertTrue(trie.autoComplete("kss") == None)
        self.assertTrue(trie.autoComplete("kst") == None)
        self.assertTrue(trie.autoComplete("ksu") == None)
        self.assertTrue(trie.autoComplete("ksv") == None)
        self.assertTrue(trie.autoComplete("ksw") == None)
        self.assertTrue(trie.autoComplete("ksx") == None)
        self.assertTrue(trie.autoComplete("ksy") == None)
        self.assertTrue(trie.autoComplete("ksz") == None)
        self.assertTrue(trie.autoComplete("kt") == None)
        self.assertTrue(trie.autoComplete("kta") == None)
        self.assertTrue(trie.autoComplete("ktb") == None)
        self.assertTrue(trie.autoComplete("ktc") == None)
        self.assertTrue(trie.autoComplete("ktd") == None)
        self.assertTrue(trie.autoComplete("kte") == None)
        self.assertTrue(trie.autoComplete("ktf") == None)
        self.assertTrue(trie.autoComplete("ktg") == None)
        self.assertTrue(trie.autoComplete("kth") == None)
        self.assertTrue(trie.autoComplete("kti") == None)
        self.assertTrue(trie.autoComplete("ktj") == None)
        self.assertTrue(trie.autoComplete("ktk") == None)
        self.assertTrue(trie.autoComplete("ktl") == None)
        self.assertTrue(trie.autoComplete("ktm") == None)
        self.assertTrue(trie.autoComplete("ktn") == None)
        self.assertTrue(trie.autoComplete("kto") == None)
        self.assertTrue(trie.autoComplete("ktp") == None)
        self.assertTrue(trie.autoComplete("ktq") == None)
        self.assertTrue(trie.autoComplete("ktr") == None)
        self.assertTrue(trie.autoComplete("kts") == None)
        self.assertTrue(trie.autoComplete("ktt") == None)
        self.assertTrue(trie.autoComplete("ktu") == None)
        self.assertTrue(trie.autoComplete("ktv") == None)
        self.assertTrue(trie.autoComplete("ktw") == None)
        self.assertTrue(trie.autoComplete("ktx") == None)
        self.assertTrue(trie.autoComplete("kty") == None)
        self.assertTrue(trie.autoComplete("ktz") == None)
        self.assertTrue(trie.autoComplete("ku") == None)
        self.assertTrue(trie.autoComplete("kua") == None)
        self.assertTrue(trie.autoComplete("kub") == None)
        self.assertTrue(trie.autoComplete("kuc") == None)
        self.assertTrue(trie.autoComplete("kud") == None)
        self.assertTrue(trie.autoComplete("kue") == None)
        self.assertTrue(trie.autoComplete("kuf") == None)
        self.assertTrue(trie.autoComplete("kug") == None)
        self.assertTrue(trie.autoComplete("kuh") == None)
        self.assertTrue(trie.autoComplete("kui") == None)
        self.assertTrue(trie.autoComplete("kuj") == None)
        self.assertTrue(trie.autoComplete("kuk") == None)
        self.assertTrue(trie.autoComplete("kul") == None)
        self.assertTrue(trie.autoComplete("kum") == None)
        self.assertTrue(trie.autoComplete("kun") == None)
        self.assertTrue(trie.autoComplete("kuo") == None)
        self.assertTrue(trie.autoComplete("kup") == None)
        self.assertTrue(trie.autoComplete("kuq") == None)
        self.assertTrue(trie.autoComplete("kur") == None)
        self.assertTrue(trie.autoComplete("kus") == None)
        self.assertTrue(trie.autoComplete("kut") == None)
        self.assertTrue(trie.autoComplete("kuu") == None)
        self.assertTrue(trie.autoComplete("kuv") == None)
        self.assertTrue(trie.autoComplete("kuw") == None)
        self.assertTrue(trie.autoComplete("kux") == None)
        self.assertTrue(trie.autoComplete("kuy") == None)
        self.assertTrue(trie.autoComplete("kuz") == None)
        self.assertTrue(trie.autoComplete("kv") == None)
        self.assertTrue(trie.autoComplete("kva") == None)
        self.assertTrue(trie.autoComplete("kvb") == None)
        self.assertTrue(trie.autoComplete("kvc") == None)
        self.assertTrue(trie.autoComplete("kvd") == None)
        self.assertTrue(trie.autoComplete("kve") == None)
        self.assertTrue(trie.autoComplete("kvf") == None)
        self.assertTrue(trie.autoComplete("kvg") == None)
        self.assertTrue(trie.autoComplete("kvh") == None)
        self.assertTrue(trie.autoComplete("kvi") == None)
        self.assertTrue(trie.autoComplete("kvj") == None)
        self.assertTrue(trie.autoComplete("kvk") == None)
        self.assertTrue(trie.autoComplete("kvl") == None)
        self.assertTrue(trie.autoComplete("kvm") == None)
        self.assertTrue(trie.autoComplete("kvn") == None)
        self.assertTrue(trie.autoComplete("kvo") == None)
        self.assertTrue(trie.autoComplete("kvp") == None)
        self.assertTrue(trie.autoComplete("kvq") == None)
        self.assertTrue(trie.autoComplete("kvr") == None)
        self.assertTrue(trie.autoComplete("kvs") == None)
        self.assertTrue(trie.autoComplete("kvt") == None)
        self.assertTrue(trie.autoComplete("kvu") == None)
        self.assertTrue(trie.autoComplete("kvv") == None)
        self.assertTrue(trie.autoComplete("kvw") == None)
        self.assertTrue(trie.autoComplete("kvx") == None)
        self.assertTrue(trie.autoComplete("kvy") == None)
        self.assertTrue(trie.autoComplete("kvz") == None)
        self.assertTrue(trie.autoComplete("kw") == None)
        self.assertTrue(trie.autoComplete("kwa") == None)
        self.assertTrue(trie.autoComplete("kwb") == None)
        self.assertTrue(trie.autoComplete("kwc") == None)
        self.assertTrue(trie.autoComplete("kwd") == None)
        self.assertTrue(trie.autoComplete("kwe") == None)
        self.assertTrue(trie.autoComplete("kwf") == None)
        self.assertTrue(trie.autoComplete("kwg") == None)
        self.assertTrue(trie.autoComplete("kwh") == None)
        self.assertTrue(trie.autoComplete("kwi") == None)
        self.assertTrue(trie.autoComplete("kwj") == None)
        self.assertTrue(trie.autoComplete("kwk") == None)
        self.assertTrue(trie.autoComplete("kwl") == None)
        self.assertTrue(trie.autoComplete("kwm") == None)
        self.assertTrue(trie.autoComplete("kwn") == None)
        self.assertTrue(trie.autoComplete("kwo") == None)
        self.assertTrue(trie.autoComplete("kwp") == None)
        self.assertTrue(trie.autoComplete("kwq") == None)
        self.assertTrue(trie.autoComplete("kwr") == None)
        self.assertTrue(trie.autoComplete("kws") == None)
        self.assertTrue(trie.autoComplete("kwt") == None)
        self.assertTrue(trie.autoComplete("kwu") == None)
        self.assertTrue(trie.autoComplete("kwv") == None)
        self.assertTrue(trie.autoComplete("kww") == None)
        self.assertTrue(trie.autoComplete("kwx") == None)
        self.assertTrue(trie.autoComplete("kwy") == None)
        self.assertTrue(trie.autoComplete("kwz") == None)
        self.assertTrue(trie.autoComplete("kx") == None)
        self.assertTrue(trie.autoComplete("kxa") == None)
        self.assertTrue(trie.autoComplete("kxb") == None)
        self.assertTrue(trie.autoComplete("kxc") == None)
        self.assertTrue(trie.autoComplete("kxd") == None)
        self.assertTrue(trie.autoComplete("kxe") == None)
        self.assertTrue(trie.autoComplete("kxf") == None)
        self.assertTrue(trie.autoComplete("kxg") == None)
        self.assertTrue(trie.autoComplete("kxh") == None)
        self.assertTrue(trie.autoComplete("kxi") == None)
        self.assertTrue(trie.autoComplete("kxj") == None)
        self.assertTrue(trie.autoComplete("kxk") == None)
        self.assertTrue(trie.autoComplete("kxl") == None)
        self.assertTrue(trie.autoComplete("kxm") == None)
        self.assertTrue(trie.autoComplete("kxn") == None)
        self.assertTrue(trie.autoComplete("kxo") == None)
        self.assertTrue(trie.autoComplete("kxp") == None)
        self.assertTrue(trie.autoComplete("kxq") == None)
        self.assertTrue(trie.autoComplete("kxr") == None)
        self.assertTrue(trie.autoComplete("kxs") == None)
        self.assertTrue(trie.autoComplete("kxt") == None)
        self.assertTrue(trie.autoComplete("kxu") == None)
        self.assertTrue(trie.autoComplete("kxv") == None)
        self.assertTrue(trie.autoComplete("kxw") == None)
        self.assertTrue(trie.autoComplete("kxx") == None)
        self.assertTrue(trie.autoComplete("kxy") == None)
        self.assertTrue(trie.autoComplete("kxz") == None)
        self.assertTrue(trie.autoComplete("ky") == None)
        self.assertTrue(trie.autoComplete("kya") == None)
        self.assertTrue(trie.autoComplete("kyb") == None)
        self.assertTrue(trie.autoComplete("kyc") == None)
        self.assertTrue(trie.autoComplete("kyd") == None)
        self.assertTrue(trie.autoComplete("kye") == None)
        self.assertTrue(trie.autoComplete("kyf") == None)
        self.assertTrue(trie.autoComplete("kyg") == None)
        self.assertTrue(trie.autoComplete("kyh") == None)
        self.assertTrue(trie.autoComplete("kyi") == None)
        self.assertTrue(trie.autoComplete("kyj") == None)
        self.assertTrue(trie.autoComplete("kyk") == None)
        self.assertTrue(trie.autoComplete("kyl") == None)
        self.assertTrue(trie.autoComplete("kym") == None)
        self.assertTrue(trie.autoComplete("kyn") == None)
        self.assertTrue(trie.autoComplete("kyo") == None)
        self.assertTrue(trie.autoComplete("kyp") == None)
        self.assertTrue(trie.autoComplete("kyq") == None)
        self.assertTrue(trie.autoComplete("kyr") == None)
        self.assertTrue(trie.autoComplete("kys") == None)
        self.assertTrue(trie.autoComplete("kyt") == None)
        self.assertTrue(trie.autoComplete("kyu") == None)
        self.assertTrue(trie.autoComplete("kyv") == None)
        self.assertTrue(trie.autoComplete("kyw") == None)
        self.assertTrue(trie.autoComplete("kyx") == None)
        self.assertTrue(trie.autoComplete("kyy") == None)
        self.assertTrue(trie.autoComplete("kyz") == None)
        self.assertTrue(trie.autoComplete("kz") == None)
        self.assertTrue(trie.autoComplete("kza") == None)
        self.assertTrue(trie.autoComplete("kzb") == None)
        self.assertTrue(trie.autoComplete("kzc") == None)
        self.assertTrue(trie.autoComplete("kzd") == None)
        self.assertTrue(trie.autoComplete("kze") == None)
        self.assertTrue(trie.autoComplete("kzf") == None)
        self.assertTrue(trie.autoComplete("kzg") == None)
        self.assertTrue(trie.autoComplete("kzh") == None)
        self.assertTrue(trie.autoComplete("kzi") == None)
        self.assertTrue(trie.autoComplete("kzj") == None)
        self.assertTrue(trie.autoComplete("kzk") == None)
        self.assertTrue(trie.autoComplete("kzl") == None)
        self.assertTrue(trie.autoComplete("kzm") == None)
        self.assertTrue(trie.autoComplete("kzn") == None)
        self.assertTrue(trie.autoComplete("kzo") == None)
        self.assertTrue(trie.autoComplete("kzp") == None)
        self.assertTrue(trie.autoComplete("kzq") == None)
        self.assertTrue(trie.autoComplete("kzr") == None)
        self.assertTrue(trie.autoComplete("kzs") == None)
        self.assertTrue(trie.autoComplete("kzt") == None)
        self.assertTrue(trie.autoComplete("kzu") == None)
        self.assertTrue(trie.autoComplete("kzv") == None)
        self.assertTrue(trie.autoComplete("kzw") == None)
        self.assertTrue(trie.autoComplete("kzx") == None)
        self.assertTrue(trie.autoComplete("kzy") == None)
        self.assertTrue(trie.autoComplete("kzz") == None)
        self.assertTrue(trie.autoComplete("l") == "law")
        self.assertTrue(trie.autoComplete("la") == "law")
        self.assertTrue(trie.autoComplete("laa") == None)
        self.assertTrue(trie.autoComplete("lab") == "labour")
        self.assertTrue(trie.autoComplete("labo") == "labour")
        self.assertTrue(trie.autoComplete("labou") == "labour")
        self.assertTrue(trie.autoComplete("labour") == "labour")
        self.assertTrue(trie.autoComplete("lac") == None)
        self.assertTrue(trie.autoComplete("lad") == None)
        self.assertTrue(trie.autoComplete("lae") == None)
        self.assertTrue(trie.autoComplete("laf") == None)
        self.assertTrue(trie.autoComplete("lag") == None)
        self.assertTrue(trie.autoComplete("lah") == None)
        self.assertTrue(trie.autoComplete("lai") == "laid")
        self.assertTrue(trie.autoComplete("laid") == "laid")
        self.assertTrue(trie.autoComplete("laj") == None)
        self.assertTrue(trie.autoComplete("lak") == None)
        self.assertTrue(trie.autoComplete("lal") == None)
        self.assertTrue(trie.autoComplete("lam") == None)
        self.assertTrue(trie.autoComplete("lan") == "land")
        self.assertTrue(trie.autoComplete("land") == "land")
        self.assertTrue(trie.autoComplete("lands") == "lands")
        self.assertTrue(trie.autoComplete("lao") == None)
        self.assertTrue(trie.autoComplete("lap") == None)
        self.assertTrue(trie.autoComplete("laq") == None)
        self.assertTrue(trie.autoComplete("lar") == "large")
        self.assertTrue(trie.autoComplete("larg") == "large")
        self.assertTrue(trie.autoComplete("large") == "large")
        self.assertTrue(trie.autoComplete("las") == None)
        self.assertTrue(trie.autoComplete("lat") == "latter")
        self.assertTrue(trie.autoComplete("latt") == "latter")
        self.assertTrue(trie.autoComplete("latte") == "latter")
        self.assertTrue(trie.autoComplete("latter") == "latter")
        self.assertTrue(trie.autoComplete("lau") == None)
        self.assertTrue(trie.autoComplete("lav") == None)
        self.assertTrue(trie.autoComplete("law") == "law")
        self.assertTrue(trie.autoComplete("laws") == "laws")
        self.assertTrue(trie.autoComplete("lax") == None)
        self.assertTrue(trie.autoComplete("lay") == "lay")
        self.assertTrue(trie.autoComplete("laz") == None)
        self.assertTrue(trie.autoComplete("lb") == None)
        self.assertTrue(trie.autoComplete("lba") == None)
        self.assertTrue(trie.autoComplete("lbb") == None)
        self.assertTrue(trie.autoComplete("lbc") == None)
        self.assertTrue(trie.autoComplete("lbd") == None)
        self.assertTrue(trie.autoComplete("lbe") == None)
        self.assertTrue(trie.autoComplete("lbf") == None)
        self.assertTrue(trie.autoComplete("lbg") == None)
        self.assertTrue(trie.autoComplete("lbh") == None)
        self.assertTrue(trie.autoComplete("lbi") == None)
        self.assertTrue(trie.autoComplete("lbj") == None)
        self.assertTrue(trie.autoComplete("lbk") == None)
        self.assertTrue(trie.autoComplete("lbl") == None)
        self.assertTrue(trie.autoComplete("lbm") == None)
        self.assertTrue(trie.autoComplete("lbn") == None)
        self.assertTrue(trie.autoComplete("lbo") == None)
        self.assertTrue(trie.autoComplete("lbp") == None)
        self.assertTrue(trie.autoComplete("lbq") == None)
        self.assertTrue(trie.autoComplete("lbr") == None)
        self.assertTrue(trie.autoComplete("lbs") == None)
        self.assertTrue(trie.autoComplete("lbt") == None)
        self.assertTrue(trie.autoComplete("lbu") == None)
        self.assertTrue(trie.autoComplete("lbv") == None)
        self.assertTrue(trie.autoComplete("lbw") == None)
        self.assertTrue(trie.autoComplete("lbx") == None)
        self.assertTrue(trie.autoComplete("lby") == None)
        self.assertTrue(trie.autoComplete("lbz") == None)
        self.assertTrue(trie.autoComplete("lc") == None)
        self.assertTrue(trie.autoComplete("lca") == None)
        self.assertTrue(trie.autoComplete("lcb") == None)
        self.assertTrue(trie.autoComplete("lcc") == None)
        self.assertTrue(trie.autoComplete("lcd") == None)
        self.assertTrue(trie.autoComplete("lce") == None)
        self.assertTrue(trie.autoComplete("lcf") == None)
        self.assertTrue(trie.autoComplete("lcg") == None)
        self.assertTrue(trie.autoComplete("lch") == None)
        self.assertTrue(trie.autoComplete("lci") == None)
        self.assertTrue(trie.autoComplete("lcj") == None)
        self.assertTrue(trie.autoComplete("lck") == None)
        self.assertTrue(trie.autoComplete("lcl") == None)
        self.assertTrue(trie.autoComplete("lcm") == None)
        self.assertTrue(trie.autoComplete("lcn") == None)
        self.assertTrue(trie.autoComplete("lco") == None)
        self.assertTrue(trie.autoComplete("lcp") == None)
        self.assertTrue(trie.autoComplete("lcq") == None)
        self.assertTrue(trie.autoComplete("lcr") == None)
        self.assertTrue(trie.autoComplete("lcs") == None)
        self.assertTrue(trie.autoComplete("lct") == None)
        self.assertTrue(trie.autoComplete("lcu") == None)
        self.assertTrue(trie.autoComplete("lcv") == None)
        self.assertTrue(trie.autoComplete("lcw") == None)
        self.assertTrue(trie.autoComplete("lcx") == None)
        self.assertTrue(trie.autoComplete("lcy") == None)
        self.assertTrue(trie.autoComplete("lcz") == None)
        self.assertTrue(trie.autoComplete("ld") == None)
        self.assertTrue(trie.autoComplete("lda") == None)
        self.assertTrue(trie.autoComplete("ldb") == None)
        self.assertTrue(trie.autoComplete("ldc") == None)
        self.assertTrue(trie.autoComplete("ldd") == None)
        self.assertTrue(trie.autoComplete("lde") == None)
        self.assertTrue(trie.autoComplete("ldf") == None)
        self.assertTrue(trie.autoComplete("ldg") == None)
        self.assertTrue(trie.autoComplete("ldh") == None)
        self.assertTrue(trie.autoComplete("ldi") == None)
        self.assertTrue(trie.autoComplete("ldj") == None)
        self.assertTrue(trie.autoComplete("ldk") == None)
        self.assertTrue(trie.autoComplete("ldl") == None)
        self.assertTrue(trie.autoComplete("ldm") == None)
        self.assertTrue(trie.autoComplete("ldn") == None)
        self.assertTrue(trie.autoComplete("ldo") == None)
        self.assertTrue(trie.autoComplete("ldp") == None)
        self.assertTrue(trie.autoComplete("ldq") == None)
        self.assertTrue(trie.autoComplete("ldr") == None)
        self.assertTrue(trie.autoComplete("lds") == None)
        self.assertTrue(trie.autoComplete("ldt") == None)
        self.assertTrue(trie.autoComplete("ldu") == None)
        self.assertTrue(trie.autoComplete("ldv") == None)
        self.assertTrue(trie.autoComplete("ldw") == None)
        self.assertTrue(trie.autoComplete("ldx") == None)
        self.assertTrue(trie.autoComplete("ldy") == None)
        self.assertTrue(trie.autoComplete("ldz") == None)
        self.assertTrue(trie.autoComplete("le") == "legislature")
        self.assertTrue(trie.autoComplete("lea") == "least")
        self.assertTrue(trie.autoComplete("leas") == "least")
        self.assertTrue(trie.autoComplete("least") == "least")
        self.assertTrue(trie.autoComplete("leb") == None)
        self.assertTrue(trie.autoComplete("lec") == None)
        self.assertTrue(trie.autoComplete("led") == None)
        self.assertTrue(trie.autoComplete("lee") == None)
        self.assertTrue(trie.autoComplete("lef") == None)
        self.assertTrue(trie.autoComplete("leg") == "legislature")
        self.assertTrue(trie.autoComplete("legi") == "legislature")
        self.assertTrue(trie.autoComplete("legis") == "legislature")
        self.assertTrue(trie.autoComplete("legisl") == "legislature")
        self.assertTrue(trie.autoComplete("legisla") == "legislature")
        self.assertTrue(trie.autoComplete("legislat") == "legislature")
        self.assertTrue(trie.autoComplete("legislati") == "legislation")
        self.assertTrue(trie.autoComplete("legislatio") == "legislation")
        self.assertTrue(trie.autoComplete("legislation") == "legislation")
        self.assertTrue(trie.autoComplete("legislativ") == "legislative")
        self.assertTrue(trie.autoComplete("legislative") == "legislative")
        self.assertTrue(trie.autoComplete("legislatu") == "legislature")
        self.assertTrue(trie.autoComplete("legislatur") == "legislature")
        self.assertTrue(trie.autoComplete("legislature") == "legislature")
        self.assertTrue(trie.autoComplete("legislatures") == "legislatures")
        self.assertTrue(trie.autoComplete("leh") == None)
        self.assertTrue(trie.autoComplete("lei") == None)
        self.assertTrue(trie.autoComplete("lej") == None)
        self.assertTrue(trie.autoComplete("lek") == None)
        self.assertTrue(trie.autoComplete("lel") == None)
        self.assertTrue(trie.autoComplete("lem") == None)
        self.assertTrue(trie.autoComplete("len") == None)
        self.assertTrue(trie.autoComplete("leo") == None)
        self.assertTrue(trie.autoComplete("lep") == None)
        self.assertTrue(trie.autoComplete("leq") == None)
        self.assertTrue(trie.autoComplete("ler") == None)
        self.assertTrue(trie.autoComplete("les") == None)
        self.assertTrue(trie.autoComplete("let") == "letters")
        self.assertTrue(trie.autoComplete("lett") == "letters")
        self.assertTrue(trie.autoComplete("lette") == "letters")
        self.assertTrue(trie.autoComplete("letter") == "letters")
        self.assertTrue(trie.autoComplete("letters") == "letters")
        self.assertTrue(trie.autoComplete("leu") == None)
        self.assertTrue(trie.autoComplete("lev") == "levying")
        self.assertTrue(trie.autoComplete("levy") == "levying")
        self.assertTrue(trie.autoComplete("levyi") == "levying")
        self.assertTrue(trie.autoComplete("levyin") == "levying")
        self.assertTrue(trie.autoComplete("levying") == "levying")
        self.assertTrue(trie.autoComplete("lew") == None)
        self.assertTrue(trie.autoComplete("lex") == None)
        self.assertTrue(trie.autoComplete("ley") == None)
        self.assertTrue(trie.autoComplete("lez") == None)
        self.assertTrue(trie.autoComplete("lf") == None)
        self.assertTrue(trie.autoComplete("lfa") == None)
        self.assertTrue(trie.autoComplete("lfb") == None)
        self.assertTrue(trie.autoComplete("lfc") == None)
        self.assertTrue(trie.autoComplete("lfd") == None)
        self.assertTrue(trie.autoComplete("lfe") == None)
        self.assertTrue(trie.autoComplete("lff") == None)
        self.assertTrue(trie.autoComplete("lfg") == None)
        self.assertTrue(trie.autoComplete("lfh") == None)
        self.assertTrue(trie.autoComplete("lfi") == None)
        self.assertTrue(trie.autoComplete("lfj") == None)
        self.assertTrue(trie.autoComplete("lfk") == None)
        self.assertTrue(trie.autoComplete("lfl") == None)
        self.assertTrue(trie.autoComplete("lfm") == None)
        self.assertTrue(trie.autoComplete("lfn") == None)
        self.assertTrue(trie.autoComplete("lfo") == None)
        self.assertTrue(trie.autoComplete("lfp") == None)
        self.assertTrue(trie.autoComplete("lfq") == None)
        self.assertTrue(trie.autoComplete("lfr") == None)
        self.assertTrue(trie.autoComplete("lfs") == None)
        self.assertTrue(trie.autoComplete("lft") == None)
        self.assertTrue(trie.autoComplete("lfu") == None)
        self.assertTrue(trie.autoComplete("lfv") == None)
        self.assertTrue(trie.autoComplete("lfw") == None)
        self.assertTrue(trie.autoComplete("lfx") == None)
        self.assertTrue(trie.autoComplete("lfy") == None)
        self.assertTrue(trie.autoComplete("lfz") == None)
        self.assertTrue(trie.autoComplete("lg") == None)
        self.assertTrue(trie.autoComplete("lga") == None)
        self.assertTrue(trie.autoComplete("lgb") == None)
        self.assertTrue(trie.autoComplete("lgc") == None)
        self.assertTrue(trie.autoComplete("lgd") == None)
        self.assertTrue(trie.autoComplete("lge") == None)
        self.assertTrue(trie.autoComplete("lgf") == None)
        self.assertTrue(trie.autoComplete("lgg") == None)
        self.assertTrue(trie.autoComplete("lgh") == None)
        self.assertTrue(trie.autoComplete("lgi") == None)
        self.assertTrue(trie.autoComplete("lgj") == None)
        self.assertTrue(trie.autoComplete("lgk") == None)
        self.assertTrue(trie.autoComplete("lgl") == None)
        self.assertTrue(trie.autoComplete("lgm") == None)
        self.assertTrue(trie.autoComplete("lgn") == None)
        self.assertTrue(trie.autoComplete("lgo") == None)
        self.assertTrue(trie.autoComplete("lgp") == None)
        self.assertTrue(trie.autoComplete("lgq") == None)
        self.assertTrue(trie.autoComplete("lgr") == None)
        self.assertTrue(trie.autoComplete("lgs") == None)
        self.assertTrue(trie.autoComplete("lgt") == None)
        self.assertTrue(trie.autoComplete("lgu") == None)
        self.assertTrue(trie.autoComplete("lgv") == None)
        self.assertTrue(trie.autoComplete("lgw") == None)
        self.assertTrue(trie.autoComplete("lgx") == None)
        self.assertTrue(trie.autoComplete("lgy") == None)
        self.assertTrue(trie.autoComplete("lgz") == None)
        self.assertTrue(trie.autoComplete("lh") == None)
        self.assertTrue(trie.autoComplete("lha") == None)
        self.assertTrue(trie.autoComplete("lhb") == None)
        self.assertTrue(trie.autoComplete("lhc") == None)
        self.assertTrue(trie.autoComplete("lhd") == None)
        self.assertTrue(trie.autoComplete("lhe") == None)
        self.assertTrue(trie.autoComplete("lhf") == None)
        self.assertTrue(trie.autoComplete("lhg") == None)
        self.assertTrue(trie.autoComplete("lhh") == None)
        self.assertTrue(trie.autoComplete("lhi") == None)
        self.assertTrue(trie.autoComplete("lhj") == None)
        self.assertTrue(trie.autoComplete("lhk") == None)
        self.assertTrue(trie.autoComplete("lhl") == None)
        self.assertTrue(trie.autoComplete("lhm") == None)
        self.assertTrue(trie.autoComplete("lhn") == None)
        self.assertTrue(trie.autoComplete("lho") == None)
        self.assertTrue(trie.autoComplete("lhp") == None)
        self.assertTrue(trie.autoComplete("lhq") == None)
        self.assertTrue(trie.autoComplete("lhr") == None)
        self.assertTrue(trie.autoComplete("lhs") == None)
        self.assertTrue(trie.autoComplete("lht") == None)
        self.assertTrue(trie.autoComplete("lhu") == None)
        self.assertTrue(trie.autoComplete("lhv") == None)
        self.assertTrue(trie.autoComplete("lhw") == None)
        self.assertTrue(trie.autoComplete("lhx") == None)
        self.assertTrue(trie.autoComplete("lhy") == None)
        self.assertTrue(trie.autoComplete("lhz") == None)
        self.assertTrue(trie.autoComplete("li") == "list")
        self.assertTrue(trie.autoComplete("lia") == "liable")
        self.assertTrue(trie.autoComplete("liab") == "liable")
        self.assertTrue(trie.autoComplete("liabl") == "liable")
        self.assertTrue(trie.autoComplete("liable") == "liable")
        self.assertTrue(trie.autoComplete("lib") == "liberty")
        self.assertTrue(trie.autoComplete("libe") == "liberty")
        self.assertTrue(trie.autoComplete("liber") == "liberty")
        self.assertTrue(trie.autoComplete("libert") == "liberty")
        self.assertTrue(trie.autoComplete("liberty") == "liberty")
        self.assertTrue(trie.autoComplete("lic") == None)
        self.assertTrue(trie.autoComplete("lid") == None)
        self.assertTrue(trie.autoComplete("lie") == None)
        self.assertTrue(trie.autoComplete("lif") == "life")
        self.assertTrue(trie.autoComplete("life") == "life")
        self.assertTrue(trie.autoComplete("lig") == None)
        self.assertTrue(trie.autoComplete("lih") == None)
        self.assertTrue(trie.autoComplete("lii") == None)
        self.assertTrue(trie.autoComplete("lij") == None)
        self.assertTrue(trie.autoComplete("lik") == "like")
        self.assertTrue(trie.autoComplete("like") == "like")
        self.assertTrue(trie.autoComplete("likew") == "likewise")
        self.assertTrue(trie.autoComplete("likewi") == "likewise")
        self.assertTrue(trie.autoComplete("likewis") == "likewise")
        self.assertTrue(trie.autoComplete("likewise") == "likewise")
        self.assertTrue(trie.autoComplete("lil") == None)
        self.assertTrue(trie.autoComplete("lim") == "limb")
        self.assertTrue(trie.autoComplete("limb") == "limb")
        self.assertTrue(trie.autoComplete("limi") == "limitations")
        self.assertTrue(trie.autoComplete("limit") == "limitations")
        self.assertTrue(trie.autoComplete("limita") == "limitations")
        self.assertTrue(trie.autoComplete("limitat") == "limitations")
        self.assertTrue(trie.autoComplete("limitati") == "limitations")
        self.assertTrue(trie.autoComplete("limitatio") == "limitations")
        self.assertTrue(trie.autoComplete("limitation") == "limitations")
        self.assertTrue(trie.autoComplete("limitations") == "limitations")
        self.assertTrue(trie.autoComplete("limite") == "limited")
        self.assertTrue(trie.autoComplete("limited") == "limited")
        self.assertTrue(trie.autoComplete("lin") == None)
        self.assertTrue(trie.autoComplete("lio") == None)
        self.assertTrue(trie.autoComplete("lip") == None)
        self.assertTrue(trie.autoComplete("liq") == "liquors")
        self.assertTrue(trie.autoComplete("liqu") == "liquors")
        self.assertTrue(trie.autoComplete("liquo") == "liquors")
        self.assertTrue(trie.autoComplete("liquor") == "liquors")
        self.assertTrue(trie.autoComplete("liquors") == "liquors")
        self.assertTrue(trie.autoComplete("lir") == None)
        self.assertTrue(trie.autoComplete("lis") == "list")
        self.assertTrue(trie.autoComplete("list") == "list")
        self.assertTrue(trie.autoComplete("lists") == "lists")
        self.assertTrue(trie.autoComplete("lit") == None)
        self.assertTrue(trie.autoComplete("liu") == None)
        self.assertTrue(trie.autoComplete("liv") == None)
        self.assertTrue(trie.autoComplete("liw") == None)
        self.assertTrue(trie.autoComplete("lix") == None)
        self.assertTrue(trie.autoComplete("liy") == None)
        self.assertTrue(trie.autoComplete("liz") == None)
        self.assertTrue(trie.autoComplete("lj") == None)
        self.assertTrue(trie.autoComplete("lja") == None)
        self.assertTrue(trie.autoComplete("ljb") == None)
        self.assertTrue(trie.autoComplete("ljc") == None)
        self.assertTrue(trie.autoComplete("ljd") == None)
        self.assertTrue(trie.autoComplete("lje") == None)
        self.assertTrue(trie.autoComplete("ljf") == None)
        self.assertTrue(trie.autoComplete("ljg") == None)
        self.assertTrue(trie.autoComplete("ljh") == None)
        self.assertTrue(trie.autoComplete("lji") == None)
        self.assertTrue(trie.autoComplete("ljj") == None)
        self.assertTrue(trie.autoComplete("ljk") == None)
        self.assertTrue(trie.autoComplete("ljl") == None)
        self.assertTrue(trie.autoComplete("ljm") == None)
        self.assertTrue(trie.autoComplete("ljn") == None)
        self.assertTrue(trie.autoComplete("ljo") == None)
        self.assertTrue(trie.autoComplete("ljp") == None)
        self.assertTrue(trie.autoComplete("ljq") == None)
        self.assertTrue(trie.autoComplete("ljr") == None)
        self.assertTrue(trie.autoComplete("ljs") == None)
        self.assertTrue(trie.autoComplete("ljt") == None)
        self.assertTrue(trie.autoComplete("lju") == None)
        self.assertTrue(trie.autoComplete("ljv") == None)
        self.assertTrue(trie.autoComplete("ljw") == None)
        self.assertTrue(trie.autoComplete("ljx") == None)
        self.assertTrue(trie.autoComplete("ljy") == None)
        self.assertTrue(trie.autoComplete("ljz") == None)
        self.assertTrue(trie.autoComplete("lk") == None)
        self.assertTrue(trie.autoComplete("lka") == None)
        self.assertTrue(trie.autoComplete("lkb") == None)
        self.assertTrue(trie.autoComplete("lkc") == None)
        self.assertTrue(trie.autoComplete("lkd") == None)
        self.assertTrue(trie.autoComplete("lke") == None)
        self.assertTrue(trie.autoComplete("lkf") == None)
        self.assertTrue(trie.autoComplete("lkg") == None)
        self.assertTrue(trie.autoComplete("lkh") == None)
        self.assertTrue(trie.autoComplete("lki") == None)
        self.assertTrue(trie.autoComplete("lkj") == None)
        self.assertTrue(trie.autoComplete("lkk") == None)
        self.assertTrue(trie.autoComplete("lkl") == None)
        self.assertTrue(trie.autoComplete("lkm") == None)
        self.assertTrue(trie.autoComplete("lkn") == None)
        self.assertTrue(trie.autoComplete("lko") == None)
        self.assertTrue(trie.autoComplete("lkp") == None)
        self.assertTrue(trie.autoComplete("lkq") == None)
        self.assertTrue(trie.autoComplete("lkr") == None)
        self.assertTrue(trie.autoComplete("lks") == None)
        self.assertTrue(trie.autoComplete("lkt") == None)
        self.assertTrue(trie.autoComplete("lku") == None)
        self.assertTrue(trie.autoComplete("lkv") == None)
        self.assertTrue(trie.autoComplete("lkw") == None)
        self.assertTrue(trie.autoComplete("lkx") == None)
        self.assertTrue(trie.autoComplete("lky") == None)
        self.assertTrue(trie.autoComplete("lkz") == None)
        self.assertTrue(trie.autoComplete("ll") == None)
        self.assertTrue(trie.autoComplete("lla") == None)
        self.assertTrue(trie.autoComplete("llb") == None)
        self.assertTrue(trie.autoComplete("llc") == None)
        self.assertTrue(trie.autoComplete("lld") == None)
        self.assertTrue(trie.autoComplete("lle") == None)
        self.assertTrue(trie.autoComplete("llf") == None)
        self.assertTrue(trie.autoComplete("llg") == None)
        self.assertTrue(trie.autoComplete("llh") == None)
        self.assertTrue(trie.autoComplete("lli") == None)
        self.assertTrue(trie.autoComplete("llj") == None)
        self.assertTrue(trie.autoComplete("llk") == None)
        self.assertTrue(trie.autoComplete("lll") == None)
        self.assertTrue(trie.autoComplete("llm") == None)
        self.assertTrue(trie.autoComplete("lln") == None)
        self.assertTrue(trie.autoComplete("llo") == None)
        self.assertTrue(trie.autoComplete("llp") == None)
        self.assertTrue(trie.autoComplete("llq") == None)
        self.assertTrue(trie.autoComplete("llr") == None)
        self.assertTrue(trie.autoComplete("lls") == None)
        self.assertTrue(trie.autoComplete("llt") == None)
        self.assertTrue(trie.autoComplete("llu") == None)
        self.assertTrue(trie.autoComplete("llv") == None)
        self.assertTrue(trie.autoComplete("llw") == None)
        self.assertTrue(trie.autoComplete("llx") == None)
        self.assertTrue(trie.autoComplete("lly") == None)
        self.assertTrue(trie.autoComplete("llz") == None)
        self.assertTrue(trie.autoComplete("lm") == None)
        self.assertTrue(trie.autoComplete("lma") == None)
        self.assertTrue(trie.autoComplete("lmb") == None)
        self.assertTrue(trie.autoComplete("lmc") == None)
        self.assertTrue(trie.autoComplete("lmd") == None)
        self.assertTrue(trie.autoComplete("lme") == None)
        self.assertTrue(trie.autoComplete("lmf") == None)
        self.assertTrue(trie.autoComplete("lmg") == None)
        self.assertTrue(trie.autoComplete("lmh") == None)
        self.assertTrue(trie.autoComplete("lmi") == None)
        self.assertTrue(trie.autoComplete("lmj") == None)
        self.assertTrue(trie.autoComplete("lmk") == None)
        self.assertTrue(trie.autoComplete("lml") == None)
        self.assertTrue(trie.autoComplete("lmm") == None)
        self.assertTrue(trie.autoComplete("lmn") == None)
        self.assertTrue(trie.autoComplete("lmo") == None)
        self.assertTrue(trie.autoComplete("lmp") == None)
        self.assertTrue(trie.autoComplete("lmq") == None)
        self.assertTrue(trie.autoComplete("lmr") == None)
        self.assertTrue(trie.autoComplete("lms") == None)
        self.assertTrue(trie.autoComplete("lmt") == None)
        self.assertTrue(trie.autoComplete("lmu") == None)
        self.assertTrue(trie.autoComplete("lmv") == None)
        self.assertTrue(trie.autoComplete("lmw") == None)
        self.assertTrue(trie.autoComplete("lmx") == None)
        self.assertTrue(trie.autoComplete("lmy") == None)
        self.assertTrue(trie.autoComplete("lmz") == None)
        self.assertTrue(trie.autoComplete("ln") == None)
        self.assertTrue(trie.autoComplete("lna") == None)
        self.assertTrue(trie.autoComplete("lnb") == None)
        self.assertTrue(trie.autoComplete("lnc") == None)
        self.assertTrue(trie.autoComplete("lnd") == None)
        self.assertTrue(trie.autoComplete("lne") == None)
        self.assertTrue(trie.autoComplete("lnf") == None)
        self.assertTrue(trie.autoComplete("lng") == None)
        self.assertTrue(trie.autoComplete("lnh") == None)
        self.assertTrue(trie.autoComplete("lni") == None)
        self.assertTrue(trie.autoComplete("lnj") == None)
        self.assertTrue(trie.autoComplete("lnk") == None)
        self.assertTrue(trie.autoComplete("lnl") == None)
        self.assertTrue(trie.autoComplete("lnm") == None)
        self.assertTrue(trie.autoComplete("lnn") == None)
        self.assertTrue(trie.autoComplete("lno") == None)
        self.assertTrue(trie.autoComplete("lnp") == None)
        self.assertTrue(trie.autoComplete("lnq") == None)
        self.assertTrue(trie.autoComplete("lnr") == None)
        self.assertTrue(trie.autoComplete("lns") == None)
        self.assertTrue(trie.autoComplete("lnt") == None)
        self.assertTrue(trie.autoComplete("lnu") == None)
        self.assertTrue(trie.autoComplete("lnv") == None)
        self.assertTrue(trie.autoComplete("lnw") == None)
        self.assertTrue(trie.autoComplete("lnx") == None)
        self.assertTrue(trie.autoComplete("lny") == None)
        self.assertTrue(trie.autoComplete("lnz") == None)
        self.assertTrue(trie.autoComplete("lo") == "longer")
        self.assertTrue(trie.autoComplete("loa") == None)
        self.assertTrue(trie.autoComplete("lob") == None)
        self.assertTrue(trie.autoComplete("loc") == None)
        self.assertTrue(trie.autoComplete("lod") == None)
        self.assertTrue(trie.autoComplete("loe") == None)
        self.assertTrue(trie.autoComplete("lof") == None)
        self.assertTrue(trie.autoComplete("log") == None)
        self.assertTrue(trie.autoComplete("loh") == None)
        self.assertTrue(trie.autoComplete("loi") == None)
        self.assertTrue(trie.autoComplete("loj") == None)
        self.assertTrue(trie.autoComplete("lok") == None)
        self.assertTrue(trie.autoComplete("lol") == None)
        self.assertTrue(trie.autoComplete("lom") == None)
        self.assertTrue(trie.autoComplete("lon") == "longer")
        self.assertTrue(trie.autoComplete("long") == "longer")
        self.assertTrue(trie.autoComplete("longe") == "longer")
        self.assertTrue(trie.autoComplete("longer") == "longer")
        self.assertTrue(trie.autoComplete("loo") == None)
        self.assertTrue(trie.autoComplete("lop") == None)
        self.assertTrue(trie.autoComplete("loq") == None)
        self.assertTrue(trie.autoComplete("lor") == None)
        self.assertTrue(trie.autoComplete("los") == "loss")
        self.assertTrue(trie.autoComplete("loss") == "loss")
        self.assertTrue(trie.autoComplete("lot") == None)
        self.assertTrue(trie.autoComplete("lou") == None)
        self.assertTrue(trie.autoComplete("lov") == None)
        self.assertTrue(trie.autoComplete("low") == None)
        self.assertTrue(trie.autoComplete("lox") == None)
        self.assertTrue(trie.autoComplete("loy") == None)
        self.assertTrue(trie.autoComplete("loz") == None)
        self.assertTrue(trie.autoComplete("lp") == None)
        self.assertTrue(trie.autoComplete("lpa") == None)
        self.assertTrue(trie.autoComplete("lpb") == None)
        self.assertTrue(trie.autoComplete("lpc") == None)
        self.assertTrue(trie.autoComplete("lpd") == None)
        self.assertTrue(trie.autoComplete("lpe") == None)
        self.assertTrue(trie.autoComplete("lpf") == None)
        self.assertTrue(trie.autoComplete("lpg") == None)
        self.assertTrue(trie.autoComplete("lph") == None)
        self.assertTrue(trie.autoComplete("lpi") == None)
        self.assertTrue(trie.autoComplete("lpj") == None)
        self.assertTrue(trie.autoComplete("lpk") == None)
        self.assertTrue(trie.autoComplete("lpl") == None)
        self.assertTrue(trie.autoComplete("lpm") == None)
        self.assertTrue(trie.autoComplete("lpn") == None)
        self.assertTrue(trie.autoComplete("lpo") == None)
        self.assertTrue(trie.autoComplete("lpp") == None)
        self.assertTrue(trie.autoComplete("lpq") == None)
        self.assertTrue(trie.autoComplete("lpr") == None)
        self.assertTrue(trie.autoComplete("lps") == None)
        self.assertTrue(trie.autoComplete("lpt") == None)
        self.assertTrue(trie.autoComplete("lpu") == None)
        self.assertTrue(trie.autoComplete("lpv") == None)
        self.assertTrue(trie.autoComplete("lpw") == None)
        self.assertTrue(trie.autoComplete("lpx") == None)
        self.assertTrue(trie.autoComplete("lpy") == None)
        self.assertTrue(trie.autoComplete("lpz") == None)
        self.assertTrue(trie.autoComplete("lq") == None)
        self.assertTrue(trie.autoComplete("lqa") == None)
        self.assertTrue(trie.autoComplete("lqb") == None)
        self.assertTrue(trie.autoComplete("lqc") == None)
        self.assertTrue(trie.autoComplete("lqd") == None)
        self.assertTrue(trie.autoComplete("lqe") == None)
        self.assertTrue(trie.autoComplete("lqf") == None)
        self.assertTrue(trie.autoComplete("lqg") == None)
        self.assertTrue(trie.autoComplete("lqh") == None)
        self.assertTrue(trie.autoComplete("lqi") == None)
        self.assertTrue(trie.autoComplete("lqj") == None)
        self.assertTrue(trie.autoComplete("lqk") == None)
        self.assertTrue(trie.autoComplete("lql") == None)
        self.assertTrue(trie.autoComplete("lqm") == None)
        self.assertTrue(trie.autoComplete("lqn") == None)
        self.assertTrue(trie.autoComplete("lqo") == None)
        self.assertTrue(trie.autoComplete("lqp") == None)
        self.assertTrue(trie.autoComplete("lqq") == None)
        self.assertTrue(trie.autoComplete("lqr") == None)
        self.assertTrue(trie.autoComplete("lqs") == None)
        self.assertTrue(trie.autoComplete("lqt") == None)
        self.assertTrue(trie.autoComplete("lqu") == None)
        self.assertTrue(trie.autoComplete("lqv") == None)
        self.assertTrue(trie.autoComplete("lqw") == None)
        self.assertTrue(trie.autoComplete("lqx") == None)
        self.assertTrue(trie.autoComplete("lqy") == None)
        self.assertTrue(trie.autoComplete("lqz") == None)
        self.assertTrue(trie.autoComplete("lr") == None)
        self.assertTrue(trie.autoComplete("lra") == None)
        self.assertTrue(trie.autoComplete("lrb") == None)
        self.assertTrue(trie.autoComplete("lrc") == None)
        self.assertTrue(trie.autoComplete("lrd") == None)
        self.assertTrue(trie.autoComplete("lre") == None)
        self.assertTrue(trie.autoComplete("lrf") == None)
        self.assertTrue(trie.autoComplete("lrg") == None)
        self.assertTrue(trie.autoComplete("lrh") == None)
        self.assertTrue(trie.autoComplete("lri") == None)
        self.assertTrue(trie.autoComplete("lrj") == None)
        self.assertTrue(trie.autoComplete("lrk") == None)
        self.assertTrue(trie.autoComplete("lrl") == None)
        self.assertTrue(trie.autoComplete("lrm") == None)
        self.assertTrue(trie.autoComplete("lrn") == None)
        self.assertTrue(trie.autoComplete("lro") == None)
        self.assertTrue(trie.autoComplete("lrp") == None)
        self.assertTrue(trie.autoComplete("lrq") == None)
        self.assertTrue(trie.autoComplete("lrr") == None)
        self.assertTrue(trie.autoComplete("lrs") == None)
        self.assertTrue(trie.autoComplete("lrt") == None)
        self.assertTrue(trie.autoComplete("lru") == None)
        self.assertTrue(trie.autoComplete("lrv") == None)
        self.assertTrue(trie.autoComplete("lrw") == None)
        self.assertTrue(trie.autoComplete("lrx") == None)
        self.assertTrue(trie.autoComplete("lry") == None)
        self.assertTrue(trie.autoComplete("lrz") == None)
        self.assertTrue(trie.autoComplete("ls") == None)
        self.assertTrue(trie.autoComplete("lsa") == None)
        self.assertTrue(trie.autoComplete("lsb") == None)
        self.assertTrue(trie.autoComplete("lsc") == None)
        self.assertTrue(trie.autoComplete("lsd") == None)
        self.assertTrue(trie.autoComplete("lse") == None)
        self.assertTrue(trie.autoComplete("lsf") == None)
        self.assertTrue(trie.autoComplete("lsg") == None)
        self.assertTrue(trie.autoComplete("lsh") == None)
        self.assertTrue(trie.autoComplete("lsi") == None)
        self.assertTrue(trie.autoComplete("lsj") == None)
        self.assertTrue(trie.autoComplete("lsk") == None)
        self.assertTrue(trie.autoComplete("lsl") == None)
        self.assertTrue(trie.autoComplete("lsm") == None)
        self.assertTrue(trie.autoComplete("lsn") == None)
        self.assertTrue(trie.autoComplete("lso") == None)
        self.assertTrue(trie.autoComplete("lsp") == None)
        self.assertTrue(trie.autoComplete("lsq") == None)
        self.assertTrue(trie.autoComplete("lsr") == None)
        self.assertTrue(trie.autoComplete("lss") == None)
        self.assertTrue(trie.autoComplete("lst") == None)
        self.assertTrue(trie.autoComplete("lsu") == None)
        self.assertTrue(trie.autoComplete("lsv") == None)
        self.assertTrue(trie.autoComplete("lsw") == None)
        self.assertTrue(trie.autoComplete("lsx") == None)
        self.assertTrue(trie.autoComplete("lsy") == None)
        self.assertTrue(trie.autoComplete("lsz") == None)
        self.assertTrue(trie.autoComplete("lt") == None)
        self.assertTrue(trie.autoComplete("lta") == None)
        self.assertTrue(trie.autoComplete("ltb") == None)
        self.assertTrue(trie.autoComplete("ltc") == None)
        self.assertTrue(trie.autoComplete("ltd") == None)
        self.assertTrue(trie.autoComplete("lte") == None)
        self.assertTrue(trie.autoComplete("ltf") == None)
        self.assertTrue(trie.autoComplete("ltg") == None)
        self.assertTrue(trie.autoComplete("lth") == None)
        self.assertTrue(trie.autoComplete("lti") == None)
        self.assertTrue(trie.autoComplete("ltj") == None)
        self.assertTrue(trie.autoComplete("ltk") == None)
        self.assertTrue(trie.autoComplete("ltl") == None)
        self.assertTrue(trie.autoComplete("ltm") == None)
        self.assertTrue(trie.autoComplete("ltn") == None)
        self.assertTrue(trie.autoComplete("lto") == None)
        self.assertTrue(trie.autoComplete("ltp") == None)
        self.assertTrue(trie.autoComplete("ltq") == None)
        self.assertTrue(trie.autoComplete("ltr") == None)
        self.assertTrue(trie.autoComplete("lts") == None)
        self.assertTrue(trie.autoComplete("ltt") == None)
        self.assertTrue(trie.autoComplete("ltu") == None)
        self.assertTrue(trie.autoComplete("ltv") == None)
        self.assertTrue(trie.autoComplete("ltw") == None)
        self.assertTrue(trie.autoComplete("ltx") == None)
        self.assertTrue(trie.autoComplete("lty") == None)
        self.assertTrue(trie.autoComplete("ltz") == None)
        self.assertTrue(trie.autoComplete("lu") == None)
        self.assertTrue(trie.autoComplete("lua") == None)
        self.assertTrue(trie.autoComplete("lub") == None)
        self.assertTrue(trie.autoComplete("luc") == None)
        self.assertTrue(trie.autoComplete("lud") == None)
        self.assertTrue(trie.autoComplete("lue") == None)
        self.assertTrue(trie.autoComplete("luf") == None)
        self.assertTrue(trie.autoComplete("lug") == None)
        self.assertTrue(trie.autoComplete("luh") == None)
        self.assertTrue(trie.autoComplete("lui") == None)
        self.assertTrue(trie.autoComplete("luj") == None)
        self.assertTrue(trie.autoComplete("luk") == None)
        self.assertTrue(trie.autoComplete("lul") == None)
        self.assertTrue(trie.autoComplete("lum") == None)
        self.assertTrue(trie.autoComplete("lun") == None)
        self.assertTrue(trie.autoComplete("luo") == None)
        self.assertTrue(trie.autoComplete("lup") == None)
        self.assertTrue(trie.autoComplete("luq") == None)
        self.assertTrue(trie.autoComplete("lur") == None)
        self.assertTrue(trie.autoComplete("lus") == None)
        self.assertTrue(trie.autoComplete("lut") == None)
        self.assertTrue(trie.autoComplete("luu") == None)
        self.assertTrue(trie.autoComplete("luv") == None)
        self.assertTrue(trie.autoComplete("luw") == None)
        self.assertTrue(trie.autoComplete("lux") == None)
        self.assertTrue(trie.autoComplete("luy") == None)
        self.assertTrue(trie.autoComplete("luz") == None)
        self.assertTrue(trie.autoComplete("lv") == None)
        self.assertTrue(trie.autoComplete("lva") == None)
        self.assertTrue(trie.autoComplete("lvb") == None)
        self.assertTrue(trie.autoComplete("lvc") == None)
        self.assertTrue(trie.autoComplete("lvd") == None)
        self.assertTrue(trie.autoComplete("lve") == None)
        self.assertTrue(trie.autoComplete("lvf") == None)
        self.assertTrue(trie.autoComplete("lvg") == None)
        self.assertTrue(trie.autoComplete("lvh") == None)
        self.assertTrue(trie.autoComplete("lvi") == None)
        self.assertTrue(trie.autoComplete("lvj") == None)
        self.assertTrue(trie.autoComplete("lvk") == None)
        self.assertTrue(trie.autoComplete("lvl") == None)
        self.assertTrue(trie.autoComplete("lvm") == None)
        self.assertTrue(trie.autoComplete("lvn") == None)
        self.assertTrue(trie.autoComplete("lvo") == None)
        self.assertTrue(trie.autoComplete("lvp") == None)
        self.assertTrue(trie.autoComplete("lvq") == None)
        self.assertTrue(trie.autoComplete("lvr") == None)
        self.assertTrue(trie.autoComplete("lvs") == None)
        self.assertTrue(trie.autoComplete("lvt") == None)
        self.assertTrue(trie.autoComplete("lvu") == None)
        self.assertTrue(trie.autoComplete("lvv") == None)
        self.assertTrue(trie.autoComplete("lvw") == None)
        self.assertTrue(trie.autoComplete("lvx") == None)
        self.assertTrue(trie.autoComplete("lvy") == None)
        self.assertTrue(trie.autoComplete("lvz") == None)
        self.assertTrue(trie.autoComplete("lw") == None)
        self.assertTrue(trie.autoComplete("lwa") == None)
        self.assertTrue(trie.autoComplete("lwb") == None)
        self.assertTrue(trie.autoComplete("lwc") == None)
        self.assertTrue(trie.autoComplete("lwd") == None)
        self.assertTrue(trie.autoComplete("lwe") == None)
        self.assertTrue(trie.autoComplete("lwf") == None)
        self.assertTrue(trie.autoComplete("lwg") == None)
        self.assertTrue(trie.autoComplete("lwh") == None)
        self.assertTrue(trie.autoComplete("lwi") == None)
        self.assertTrue(trie.autoComplete("lwj") == None)
        self.assertTrue(trie.autoComplete("lwk") == None)
        self.assertTrue(trie.autoComplete("lwl") == None)
        self.assertTrue(trie.autoComplete("lwm") == None)
        self.assertTrue(trie.autoComplete("lwn") == None)
        self.assertTrue(trie.autoComplete("lwo") == None)
        self.assertTrue(trie.autoComplete("lwp") == None)
        self.assertTrue(trie.autoComplete("lwq") == None)
        self.assertTrue(trie.autoComplete("lwr") == None)
        self.assertTrue(trie.autoComplete("lws") == None)
        self.assertTrue(trie.autoComplete("lwt") == None)
        self.assertTrue(trie.autoComplete("lwu") == None)
        self.assertTrue(trie.autoComplete("lwv") == None)
        self.assertTrue(trie.autoComplete("lww") == None)
        self.assertTrue(trie.autoComplete("lwx") == None)
        self.assertTrue(trie.autoComplete("lwy") == None)
        self.assertTrue(trie.autoComplete("lwz") == None)
        self.assertTrue(trie.autoComplete("lx") == None)
        self.assertTrue(trie.autoComplete("lxa") == None)
        self.assertTrue(trie.autoComplete("lxb") == None)
        self.assertTrue(trie.autoComplete("lxc") == None)
        self.assertTrue(trie.autoComplete("lxd") == None)
        self.assertTrue(trie.autoComplete("lxe") == None)
        self.assertTrue(trie.autoComplete("lxf") == None)
        self.assertTrue(trie.autoComplete("lxg") == None)
        self.assertTrue(trie.autoComplete("lxh") == None)
        self.assertTrue(trie.autoComplete("lxi") == None)
        self.assertTrue(trie.autoComplete("lxj") == None)
        self.assertTrue(trie.autoComplete("lxk") == None)
        self.assertTrue(trie.autoComplete("lxl") == None)
        self.assertTrue(trie.autoComplete("lxm") == None)
        self.assertTrue(trie.autoComplete("lxn") == None)
        self.assertTrue(trie.autoComplete("lxo") == None)
        self.assertTrue(trie.autoComplete("lxp") == None)
        self.assertTrue(trie.autoComplete("lxq") == None)
        self.assertTrue(trie.autoComplete("lxr") == None)
        self.assertTrue(trie.autoComplete("lxs") == None)
        self.assertTrue(trie.autoComplete("lxt") == None)
        self.assertTrue(trie.autoComplete("lxu") == None)
        self.assertTrue(trie.autoComplete("lxv") == None)
        self.assertTrue(trie.autoComplete("lxw") == None)
        self.assertTrue(trie.autoComplete("lxx") == None)
        self.assertTrue(trie.autoComplete("lxy") == None)
        self.assertTrue(trie.autoComplete("lxz") == None)
        self.assertTrue(trie.autoComplete("ly") == None)
        self.assertTrue(trie.autoComplete("lya") == None)
        self.assertTrue(trie.autoComplete("lyb") == None)
        self.assertTrue(trie.autoComplete("lyc") == None)
        self.assertTrue(trie.autoComplete("lyd") == None)
        self.assertTrue(trie.autoComplete("lye") == None)
        self.assertTrue(trie.autoComplete("lyf") == None)
        self.assertTrue(trie.autoComplete("lyg") == None)
        self.assertTrue(trie.autoComplete("lyh") == None)
        self.assertTrue(trie.autoComplete("lyi") == None)
        self.assertTrue(trie.autoComplete("lyj") == None)
        self.assertTrue(trie.autoComplete("lyk") == None)
        self.assertTrue(trie.autoComplete("lyl") == None)
        self.assertTrue(trie.autoComplete("lym") == None)
        self.assertTrue(trie.autoComplete("lyn") == None)
        self.assertTrue(trie.autoComplete("lyo") == None)
        self.assertTrue(trie.autoComplete("lyp") == None)
        self.assertTrue(trie.autoComplete("lyq") == None)
        self.assertTrue(trie.autoComplete("lyr") == None)
        self.assertTrue(trie.autoComplete("lys") == None)
        self.assertTrue(trie.autoComplete("lyt") == None)
        self.assertTrue(trie.autoComplete("lyu") == None)
        self.assertTrue(trie.autoComplete("lyv") == None)
        self.assertTrue(trie.autoComplete("lyw") == None)
        self.assertTrue(trie.autoComplete("lyx") == None)
        self.assertTrue(trie.autoComplete("lyy") == None)
        self.assertTrue(trie.autoComplete("lyz") == None)
        self.assertTrue(trie.autoComplete("lz") == None)
        self.assertTrue(trie.autoComplete("lza") == None)
        self.assertTrue(trie.autoComplete("lzb") == None)
        self.assertTrue(trie.autoComplete("lzc") == None)
        self.assertTrue(trie.autoComplete("lzd") == None)
        self.assertTrue(trie.autoComplete("lze") == None)
        self.assertTrue(trie.autoComplete("lzf") == None)
        self.assertTrue(trie.autoComplete("lzg") == None)
        self.assertTrue(trie.autoComplete("lzh") == None)
        self.assertTrue(trie.autoComplete("lzi") == None)
        self.assertTrue(trie.autoComplete("lzj") == None)
        self.assertTrue(trie.autoComplete("lzk") == None)
        self.assertTrue(trie.autoComplete("lzl") == None)
        self.assertTrue(trie.autoComplete("lzm") == None)
        self.assertTrue(trie.autoComplete("lzn") == None)
        self.assertTrue(trie.autoComplete("lzo") == None)
        self.assertTrue(trie.autoComplete("lzp") == None)
        self.assertTrue(trie.autoComplete("lzq") == None)
        self.assertTrue(trie.autoComplete("lzr") == None)
        self.assertTrue(trie.autoComplete("lzs") == None)
        self.assertTrue(trie.autoComplete("lzt") == None)
        self.assertTrue(trie.autoComplete("lzu") == None)
        self.assertTrue(trie.autoComplete("lzv") == None)
        self.assertTrue(trie.autoComplete("lzw") == None)
        self.assertTrue(trie.autoComplete("lzx") == None)
        self.assertTrue(trie.autoComplete("lzy") == None)
        self.assertTrue(trie.autoComplete("lzz") == None)
        self.assertTrue(trie.autoComplete("m") == "may")
        self.assertTrue(trie.autoComplete("ma") == "may")
        self.assertTrue(trie.autoComplete("maa") == None)
        self.assertTrue(trie.autoComplete("mab") == None)
        self.assertTrue(trie.autoComplete("mac") == None)
        self.assertTrue(trie.autoComplete("mad") == "made")
        self.assertTrue(trie.autoComplete("made") == "made")
        self.assertTrue(trie.autoComplete("mae") == None)
        self.assertTrue(trie.autoComplete("maf") == None)
        self.assertTrue(trie.autoComplete("mag") == "magazines")
        self.assertTrue(trie.autoComplete("maga") == "magazines")
        self.assertTrue(trie.autoComplete("magaz") == "magazines")
        self.assertTrue(trie.autoComplete("magazi") == "magazines")
        self.assertTrue(trie.autoComplete("magazin") == "magazines")
        self.assertTrue(trie.autoComplete("magazine") == "magazines")
        self.assertTrue(trie.autoComplete("magazines") == "magazines")
        self.assertTrue(trie.autoComplete("mah") == None)
        self.assertTrue(trie.autoComplete("mai") == "maintain")
        self.assertTrue(trie.autoComplete("main") == "maintain")
        self.assertTrue(trie.autoComplete("maint") == "maintain")
        self.assertTrue(trie.autoComplete("mainta") == "maintain")
        self.assertTrue(trie.autoComplete("maintai") == "maintain")
        self.assertTrue(trie.autoComplete("maintain") == "maintain")
        self.assertTrue(trie.autoComplete("maj") == "majority")
        self.assertTrue(trie.autoComplete("majo") == "majority")
        self.assertTrue(trie.autoComplete("major") == "majority")
        self.assertTrue(trie.autoComplete("majori") == "majority")
        self.assertTrue(trie.autoComplete("majorit") == "majority")
        self.assertTrue(trie.autoComplete("majority") == "majority")
        self.assertTrue(trie.autoComplete("mak") == "make")
        self.assertTrue(trie.autoComplete("make") == "make")
        self.assertTrue(trie.autoComplete("mal") == "male")
        self.assertTrue(trie.autoComplete("male") == "male")
        self.assertTrue(trie.autoComplete("mam") == None)
        self.assertTrue(trie.autoComplete("man") == "manner")
        self.assertTrue(trie.autoComplete("mann") == "manner")
        self.assertTrue(trie.autoComplete("manne") == "manner")
        self.assertTrue(trie.autoComplete("manner") == "manner")
        self.assertTrue(trie.autoComplete("manu") == "manufacture")
        self.assertTrue(trie.autoComplete("manuf") == "manufacture")
        self.assertTrue(trie.autoComplete("manufa") == "manufacture")
        self.assertTrue(trie.autoComplete("manufac") == "manufacture")
        self.assertTrue(trie.autoComplete("manufact") == "manufacture")
        self.assertTrue(trie.autoComplete("manufactu") == "manufacture")
        self.assertTrue(trie.autoComplete("manufactur") == "manufacture")
        self.assertTrue(trie.autoComplete("manufacture") == "manufacture")
        self.assertTrue(trie.autoComplete("mao") == None)
        self.assertTrue(trie.autoComplete("map") == None)
        self.assertTrue(trie.autoComplete("maq") == None)
        self.assertTrue(trie.autoComplete("mar") == "marque")
        self.assertTrue(trie.autoComplete("marc") == "march")
        self.assertTrue(trie.autoComplete("march") == "march")
        self.assertTrue(trie.autoComplete("mari") == "maritime")
        self.assertTrue(trie.autoComplete("marit") == "maritime")
        self.assertTrue(trie.autoComplete("mariti") == "maritime")
        self.assertTrue(trie.autoComplete("maritim") == "maritime")
        self.assertTrue(trie.autoComplete("maritime") == "maritime")
        self.assertTrue(trie.autoComplete("marq") == "marque")
        self.assertTrue(trie.autoComplete("marqu") == "marque")
        self.assertTrue(trie.autoComplete("marque") == "marque")
        self.assertTrue(trie.autoComplete("mary") == "maryland")
        self.assertTrue(trie.autoComplete("maryl") == "maryland")
        self.assertTrue(trie.autoComplete("maryla") == "maryland")
        self.assertTrue(trie.autoComplete("marylan") == "maryland")
        self.assertTrue(trie.autoComplete("maryland") == "maryland")
        self.assertTrue(trie.autoComplete("mas") == "massachusetts")
        self.assertTrue(trie.autoComplete("mass") == "massachusetts")
        self.assertTrue(trie.autoComplete("massa") == "massachusetts")
        self.assertTrue(trie.autoComplete("massac") == "massachusetts")
        self.assertTrue(trie.autoComplete("massach") == "massachusetts")
        self.assertTrue(trie.autoComplete("massachu") == "massachusetts")
        self.assertTrue(trie.autoComplete("massachus") == "massachusetts")
        self.assertTrue(trie.autoComplete("massachuse") == "massachusetts")
        self.assertTrue(trie.autoComplete("massachuset") == "massachusetts")
        self.assertTrue(trie.autoComplete("massachusett") == "massachusetts")
        self.assertTrue(trie.autoComplete("massachusetts") == "massachusetts")
        self.assertTrue(trie.autoComplete("mat") == None)
        self.assertTrue(trie.autoComplete("mau") == None)
        self.assertTrue(trie.autoComplete("mav") == None)
        self.assertTrue(trie.autoComplete("maw") == None)
        self.assertTrue(trie.autoComplete("max") == None)
        self.assertTrue(trie.autoComplete("may") == "may")
        self.assertTrue(trie.autoComplete("maz") == None)
        self.assertTrue(trie.autoComplete("mb") == None)
        self.assertTrue(trie.autoComplete("mba") == None)
        self.assertTrue(trie.autoComplete("mbb") == None)
        self.assertTrue(trie.autoComplete("mbc") == None)
        self.assertTrue(trie.autoComplete("mbd") == None)
        self.assertTrue(trie.autoComplete("mbe") == None)
        self.assertTrue(trie.autoComplete("mbf") == None)
        self.assertTrue(trie.autoComplete("mbg") == None)
        self.assertTrue(trie.autoComplete("mbh") == None)
        self.assertTrue(trie.autoComplete("mbi") == None)
        self.assertTrue(trie.autoComplete("mbj") == None)
        self.assertTrue(trie.autoComplete("mbk") == None)
        self.assertTrue(trie.autoComplete("mbl") == None)
        self.assertTrue(trie.autoComplete("mbm") == None)
        self.assertTrue(trie.autoComplete("mbn") == None)
        self.assertTrue(trie.autoComplete("mbo") == None)
        self.assertTrue(trie.autoComplete("mbp") == None)
        self.assertTrue(trie.autoComplete("mbq") == None)
        self.assertTrue(trie.autoComplete("mbr") == None)
        self.assertTrue(trie.autoComplete("mbs") == None)
        self.assertTrue(trie.autoComplete("mbt") == None)
        self.assertTrue(trie.autoComplete("mbu") == None)
        self.assertTrue(trie.autoComplete("mbv") == None)
        self.assertTrue(trie.autoComplete("mbw") == None)
        self.assertTrue(trie.autoComplete("mbx") == None)
        self.assertTrue(trie.autoComplete("mby") == None)
        self.assertTrue(trie.autoComplete("mbz") == None)
        self.assertTrue(trie.autoComplete("mc") == None)
        self.assertTrue(trie.autoComplete("mca") == None)
        self.assertTrue(trie.autoComplete("mcb") == None)
        self.assertTrue(trie.autoComplete("mcc") == None)
        self.assertTrue(trie.autoComplete("mcd") == None)
        self.assertTrue(trie.autoComplete("mce") == None)
        self.assertTrue(trie.autoComplete("mcf") == None)
        self.assertTrue(trie.autoComplete("mcg") == None)
        self.assertTrue(trie.autoComplete("mch") == None)
        self.assertTrue(trie.autoComplete("mci") == None)
        self.assertTrue(trie.autoComplete("mcj") == None)
        self.assertTrue(trie.autoComplete("mck") == None)
        self.assertTrue(trie.autoComplete("mcl") == None)
        self.assertTrue(trie.autoComplete("mcm") == None)
        self.assertTrue(trie.autoComplete("mcn") == None)
        self.assertTrue(trie.autoComplete("mco") == None)
        self.assertTrue(trie.autoComplete("mcp") == None)
        self.assertTrue(trie.autoComplete("mcq") == None)
        self.assertTrue(trie.autoComplete("mcr") == None)
        self.assertTrue(trie.autoComplete("mcs") == None)
        self.assertTrue(trie.autoComplete("mct") == None)
        self.assertTrue(trie.autoComplete("mcu") == None)
        self.assertTrue(trie.autoComplete("mcv") == None)
        self.assertTrue(trie.autoComplete("mcw") == None)
        self.assertTrue(trie.autoComplete("mcx") == None)
        self.assertTrue(trie.autoComplete("mcy") == None)
        self.assertTrue(trie.autoComplete("mcz") == None)
        self.assertTrue(trie.autoComplete("md") == None)
        self.assertTrue(trie.autoComplete("mda") == None)
        self.assertTrue(trie.autoComplete("mdb") == None)
        self.assertTrue(trie.autoComplete("mdc") == None)
        self.assertTrue(trie.autoComplete("mdd") == None)
        self.assertTrue(trie.autoComplete("mde") == None)
        self.assertTrue(trie.autoComplete("mdf") == None)
        self.assertTrue(trie.autoComplete("mdg") == None)
        self.assertTrue(trie.autoComplete("mdh") == None)
        self.assertTrue(trie.autoComplete("mdi") == None)
        self.assertTrue(trie.autoComplete("mdj") == None)
        self.assertTrue(trie.autoComplete("mdk") == None)
        self.assertTrue(trie.autoComplete("mdl") == None)
        self.assertTrue(trie.autoComplete("mdm") == None)
        self.assertTrue(trie.autoComplete("mdn") == None)
        self.assertTrue(trie.autoComplete("mdo") == None)
        self.assertTrue(trie.autoComplete("mdp") == None)
        self.assertTrue(trie.autoComplete("mdq") == None)
        self.assertTrue(trie.autoComplete("mdr") == None)
        self.assertTrue(trie.autoComplete("mds") == None)
        self.assertTrue(trie.autoComplete("mdt") == None)
        self.assertTrue(trie.autoComplete("mdu") == None)
        self.assertTrue(trie.autoComplete("mdv") == None)
        self.assertTrue(trie.autoComplete("mdw") == None)
        self.assertTrue(trie.autoComplete("mdx") == None)
        self.assertTrue(trie.autoComplete("mdy") == None)
        self.assertTrue(trie.autoComplete("mdz") == None)
        self.assertTrue(trie.autoComplete("me") == "members")
        self.assertTrue(trie.autoComplete("mea") == "measures")
        self.assertTrue(trie.autoComplete("meas") == "measures")
        self.assertTrue(trie.autoComplete("measu") == "measures")
        self.assertTrue(trie.autoComplete("measur") == "measures")
        self.assertTrue(trie.autoComplete("measure") == "measures")
        self.assertTrue(trie.autoComplete("measures") == "measures")
        self.assertTrue(trie.autoComplete("meb") == None)
        self.assertTrue(trie.autoComplete("mec") == None)
        self.assertTrue(trie.autoComplete("med") == None)
        self.assertTrue(trie.autoComplete("mee") == "meeting")
        self.assertTrue(trie.autoComplete("meet") == "meeting")
        self.assertTrue(trie.autoComplete("meeti") == "meeting")
        self.assertTrue(trie.autoComplete("meetin") == "meeting")
        self.assertTrue(trie.autoComplete("meeting") == "meeting")
        self.assertTrue(trie.autoComplete("mef") == None)
        self.assertTrue(trie.autoComplete("meg") == None)
        self.assertTrue(trie.autoComplete("meh") == None)
        self.assertTrue(trie.autoComplete("mei") == None)
        self.assertTrue(trie.autoComplete("mej") == None)
        self.assertTrue(trie.autoComplete("mek") == None)
        self.assertTrue(trie.autoComplete("mel") == None)
        self.assertTrue(trie.autoComplete("mem") == "members")
        self.assertTrue(trie.autoComplete("memb") == "members")
        self.assertTrue(trie.autoComplete("membe") == "members")
        self.assertTrue(trie.autoComplete("member") == "members")
        self.assertTrue(trie.autoComplete("members") == "members")
        self.assertTrue(trie.autoComplete("men") == "mentioned")
        self.assertTrue(trie.autoComplete("ment") == "mentioned")
        self.assertTrue(trie.autoComplete("menti") == "mentioned")
        self.assertTrue(trie.autoComplete("mentio") == "mentioned")
        self.assertTrue(trie.autoComplete("mention") == "mentioned")
        self.assertTrue(trie.autoComplete("mentione") == "mentioned")
        self.assertTrue(trie.autoComplete("mentioned") == "mentioned")
        self.assertTrue(trie.autoComplete("meo") == None)
        self.assertTrue(trie.autoComplete("mep") == None)
        self.assertTrue(trie.autoComplete("meq") == None)
        self.assertTrue(trie.autoComplete("mer") == None)
        self.assertTrue(trie.autoComplete("mes") == None)
        self.assertTrue(trie.autoComplete("met") == None)
        self.assertTrue(trie.autoComplete("meu") == None)
        self.assertTrue(trie.autoComplete("mev") == None)
        self.assertTrue(trie.autoComplete("mew") == None)
        self.assertTrue(trie.autoComplete("mex") == None)
        self.assertTrue(trie.autoComplete("mey") == None)
        self.assertTrue(trie.autoComplete("mez") == None)
        self.assertTrue(trie.autoComplete("mf") == None)
        self.assertTrue(trie.autoComplete("mfa") == None)
        self.assertTrue(trie.autoComplete("mfb") == None)
        self.assertTrue(trie.autoComplete("mfc") == None)
        self.assertTrue(trie.autoComplete("mfd") == None)
        self.assertTrue(trie.autoComplete("mfe") == None)
        self.assertTrue(trie.autoComplete("mff") == None)
        self.assertTrue(trie.autoComplete("mfg") == None)
        self.assertTrue(trie.autoComplete("mfh") == None)
        self.assertTrue(trie.autoComplete("mfi") == None)
        self.assertTrue(trie.autoComplete("mfj") == None)
        self.assertTrue(trie.autoComplete("mfk") == None)
        self.assertTrue(trie.autoComplete("mfl") == None)
        self.assertTrue(trie.autoComplete("mfm") == None)
        self.assertTrue(trie.autoComplete("mfn") == None)
        self.assertTrue(trie.autoComplete("mfo") == None)
        self.assertTrue(trie.autoComplete("mfp") == None)
        self.assertTrue(trie.autoComplete("mfq") == None)
        self.assertTrue(trie.autoComplete("mfr") == None)
        self.assertTrue(trie.autoComplete("mfs") == None)
        self.assertTrue(trie.autoComplete("mft") == None)
        self.assertTrue(trie.autoComplete("mfu") == None)
        self.assertTrue(trie.autoComplete("mfv") == None)
        self.assertTrue(trie.autoComplete("mfw") == None)
        self.assertTrue(trie.autoComplete("mfx") == None)
        self.assertTrue(trie.autoComplete("mfy") == None)
        self.assertTrue(trie.autoComplete("mfz") == None)
        self.assertTrue(trie.autoComplete("mg") == None)
        self.assertTrue(trie.autoComplete("mga") == None)
        self.assertTrue(trie.autoComplete("mgb") == None)
        self.assertTrue(trie.autoComplete("mgc") == None)
        self.assertTrue(trie.autoComplete("mgd") == None)
        self.assertTrue(trie.autoComplete("mge") == None)
        self.assertTrue(trie.autoComplete("mgf") == None)
        self.assertTrue(trie.autoComplete("mgg") == None)
        self.assertTrue(trie.autoComplete("mgh") == None)
        self.assertTrue(trie.autoComplete("mgi") == None)
        self.assertTrue(trie.autoComplete("mgj") == None)
        self.assertTrue(trie.autoComplete("mgk") == None)
        self.assertTrue(trie.autoComplete("mgl") == None)
        self.assertTrue(trie.autoComplete("mgm") == None)
        self.assertTrue(trie.autoComplete("mgn") == None)
        self.assertTrue(trie.autoComplete("mgo") == None)
        self.assertTrue(trie.autoComplete("mgp") == None)
        self.assertTrue(trie.autoComplete("mgq") == None)
        self.assertTrue(trie.autoComplete("mgr") == None)
        self.assertTrue(trie.autoComplete("mgs") == None)
        self.assertTrue(trie.autoComplete("mgt") == None)
        self.assertTrue(trie.autoComplete("mgu") == None)
        self.assertTrue(trie.autoComplete("mgv") == None)
        self.assertTrue(trie.autoComplete("mgw") == None)
        self.assertTrue(trie.autoComplete("mgx") == None)
        self.assertTrue(trie.autoComplete("mgy") == None)
        self.assertTrue(trie.autoComplete("mgz") == None)
        self.assertTrue(trie.autoComplete("mh") == None)
        self.assertTrue(trie.autoComplete("mha") == None)
        self.assertTrue(trie.autoComplete("mhb") == None)
        self.assertTrue(trie.autoComplete("mhc") == None)
        self.assertTrue(trie.autoComplete("mhd") == None)
        self.assertTrue(trie.autoComplete("mhe") == None)
        self.assertTrue(trie.autoComplete("mhf") == None)
        self.assertTrue(trie.autoComplete("mhg") == None)
        self.assertTrue(trie.autoComplete("mhh") == None)
        self.assertTrue(trie.autoComplete("mhi") == None)
        self.assertTrue(trie.autoComplete("mhj") == None)
        self.assertTrue(trie.autoComplete("mhk") == None)
        self.assertTrue(trie.autoComplete("mhl") == None)
        self.assertTrue(trie.autoComplete("mhm") == None)
        self.assertTrue(trie.autoComplete("mhn") == None)
        self.assertTrue(trie.autoComplete("mho") == None)
        self.assertTrue(trie.autoComplete("mhp") == None)
        self.assertTrue(trie.autoComplete("mhq") == None)
        self.assertTrue(trie.autoComplete("mhr") == None)
        self.assertTrue(trie.autoComplete("mhs") == None)
        self.assertTrue(trie.autoComplete("mht") == None)
        self.assertTrue(trie.autoComplete("mhu") == None)
        self.assertTrue(trie.autoComplete("mhv") == None)
        self.assertTrue(trie.autoComplete("mhw") == None)
        self.assertTrue(trie.autoComplete("mhx") == None)
        self.assertTrue(trie.autoComplete("mhy") == None)
        self.assertTrue(trie.autoComplete("mhz") == None)
        self.assertTrue(trie.autoComplete("mi") == "militia")
        self.assertTrue(trie.autoComplete("mia") == None)
        self.assertTrue(trie.autoComplete("mib") == None)
        self.assertTrue(trie.autoComplete("mic") == None)
        self.assertTrue(trie.autoComplete("mid") == None)
        self.assertTrue(trie.autoComplete("mie") == None)
        self.assertTrue(trie.autoComplete("mif") == None)
        self.assertTrue(trie.autoComplete("mig") == "migration")
        self.assertTrue(trie.autoComplete("migr") == "migration")
        self.assertTrue(trie.autoComplete("migra") == "migration")
        self.assertTrue(trie.autoComplete("migrat") == "migration")
        self.assertTrue(trie.autoComplete("migrati") == "migration")
        self.assertTrue(trie.autoComplete("migratio") == "migration")
        self.assertTrue(trie.autoComplete("migration") == "migration")
        self.assertTrue(trie.autoComplete("mih") == None)
        self.assertTrue(trie.autoComplete("mii") == None)
        self.assertTrue(trie.autoComplete("mij") == None)
        self.assertTrue(trie.autoComplete("mik") == None)
        self.assertTrue(trie.autoComplete("mil") == "militia")
        self.assertTrue(trie.autoComplete("mile") == "miles")
        self.assertTrue(trie.autoComplete("miles") == "miles")
        self.assertTrue(trie.autoComplete("mili") == "militia")
        self.assertTrue(trie.autoComplete("milit") == "militia")
        self.assertTrue(trie.autoComplete("milita") == "military")
        self.assertTrue(trie.autoComplete("militar") == "military")
        self.assertTrue(trie.autoComplete("military") == "military")
        self.assertTrue(trie.autoComplete("militi") == "militia")
        self.assertTrue(trie.autoComplete("militia") == "militia")
        self.assertTrue(trie.autoComplete("mim") == None)
        self.assertTrue(trie.autoComplete("min") == "ministers")
        self.assertTrue(trie.autoComplete("mini") == "ministers")
        self.assertTrue(trie.autoComplete("minis") == "ministers")
        self.assertTrue(trie.autoComplete("minist") == "ministers")
        self.assertTrue(trie.autoComplete("ministe") == "ministers")
        self.assertTrue(trie.autoComplete("minister") == "ministers")
        self.assertTrue(trie.autoComplete("ministers") == "ministers")
        self.assertTrue(trie.autoComplete("mio") == None)
        self.assertTrue(trie.autoComplete("mip") == None)
        self.assertTrue(trie.autoComplete("miq") == None)
        self.assertTrue(trie.autoComplete("mir") == None)
        self.assertTrue(trie.autoComplete("mis") == "misdemeanors")
        self.assertTrue(trie.autoComplete("misd") == "misdemeanors")
        self.assertTrue(trie.autoComplete("misde") == "misdemeanors")
        self.assertTrue(trie.autoComplete("misdem") == "misdemeanors")
        self.assertTrue(trie.autoComplete("misdeme") == "misdemeanors")
        self.assertTrue(trie.autoComplete("misdemea") == "misdemeanors")
        self.assertTrue(trie.autoComplete("misdemean") == "misdemeanors")
        self.assertTrue(trie.autoComplete("misdemeano") == "misdemeanors")
        self.assertTrue(trie.autoComplete("misdemeanor") == "misdemeanors")
        self.assertTrue(trie.autoComplete("misdemeanors") == "misdemeanors")
        self.assertTrue(trie.autoComplete("mit") == None)
        self.assertTrue(trie.autoComplete("miu") == None)
        self.assertTrue(trie.autoComplete("miv") == None)
        self.assertTrue(trie.autoComplete("miw") == None)
        self.assertTrue(trie.autoComplete("mix") == None)
        self.assertTrue(trie.autoComplete("miy") == None)
        self.assertTrue(trie.autoComplete("miz") == None)
        self.assertTrue(trie.autoComplete("mj") == None)
        self.assertTrue(trie.autoComplete("mja") == None)
        self.assertTrue(trie.autoComplete("mjb") == None)
        self.assertTrue(trie.autoComplete("mjc") == None)
        self.assertTrue(trie.autoComplete("mjd") == None)
        self.assertTrue(trie.autoComplete("mje") == None)
        self.assertTrue(trie.autoComplete("mjf") == None)
        self.assertTrue(trie.autoComplete("mjg") == None)
        self.assertTrue(trie.autoComplete("mjh") == None)
        self.assertTrue(trie.autoComplete("mji") == None)
        self.assertTrue(trie.autoComplete("mjj") == None)
        self.assertTrue(trie.autoComplete("mjk") == None)
        self.assertTrue(trie.autoComplete("mjl") == None)
        self.assertTrue(trie.autoComplete("mjm") == None)
        self.assertTrue(trie.autoComplete("mjn") == None)
        self.assertTrue(trie.autoComplete("mjo") == None)
        self.assertTrue(trie.autoComplete("mjp") == None)
        self.assertTrue(trie.autoComplete("mjq") == None)
        self.assertTrue(trie.autoComplete("mjr") == None)
        self.assertTrue(trie.autoComplete("mjs") == None)
        self.assertTrue(trie.autoComplete("mjt") == None)
        self.assertTrue(trie.autoComplete("mju") == None)
        self.assertTrue(trie.autoComplete("mjv") == None)
        self.assertTrue(trie.autoComplete("mjw") == None)
        self.assertTrue(trie.autoComplete("mjx") == None)
        self.assertTrue(trie.autoComplete("mjy") == None)
        self.assertTrue(trie.autoComplete("mjz") == None)
        self.assertTrue(trie.autoComplete("mk") == None)
        self.assertTrue(trie.autoComplete("mka") == None)
        self.assertTrue(trie.autoComplete("mkb") == None)
        self.assertTrue(trie.autoComplete("mkc") == None)
        self.assertTrue(trie.autoComplete("mkd") == None)
        self.assertTrue(trie.autoComplete("mke") == None)
        self.assertTrue(trie.autoComplete("mkf") == None)
        self.assertTrue(trie.autoComplete("mkg") == None)
        self.assertTrue(trie.autoComplete("mkh") == None)
        self.assertTrue(trie.autoComplete("mki") == None)
        self.assertTrue(trie.autoComplete("mkj") == None)
        self.assertTrue(trie.autoComplete("mkk") == None)
        self.assertTrue(trie.autoComplete("mkl") == None)
        self.assertTrue(trie.autoComplete("mkm") == None)
        self.assertTrue(trie.autoComplete("mkn") == None)
        self.assertTrue(trie.autoComplete("mko") == None)
        self.assertTrue(trie.autoComplete("mkp") == None)
        self.assertTrue(trie.autoComplete("mkq") == None)
        self.assertTrue(trie.autoComplete("mkr") == None)
        self.assertTrue(trie.autoComplete("mks") == None)
        self.assertTrue(trie.autoComplete("mkt") == None)
        self.assertTrue(trie.autoComplete("mku") == None)
        self.assertTrue(trie.autoComplete("mkv") == None)
        self.assertTrue(trie.autoComplete("mkw") == None)
        self.assertTrue(trie.autoComplete("mkx") == None)
        self.assertTrue(trie.autoComplete("mky") == None)
        self.assertTrue(trie.autoComplete("mkz") == None)
        self.assertTrue(trie.autoComplete("ml") == None)
        self.assertTrue(trie.autoComplete("mla") == None)
        self.assertTrue(trie.autoComplete("mlb") == None)
        self.assertTrue(trie.autoComplete("mlc") == None)
        self.assertTrue(trie.autoComplete("mld") == None)
        self.assertTrue(trie.autoComplete("mle") == None)
        self.assertTrue(trie.autoComplete("mlf") == None)
        self.assertTrue(trie.autoComplete("mlg") == None)
        self.assertTrue(trie.autoComplete("mlh") == None)
        self.assertTrue(trie.autoComplete("mli") == None)
        self.assertTrue(trie.autoComplete("mlj") == None)
        self.assertTrue(trie.autoComplete("mlk") == None)
        self.assertTrue(trie.autoComplete("mll") == None)
        self.assertTrue(trie.autoComplete("mlm") == None)
        self.assertTrue(trie.autoComplete("mln") == None)
        self.assertTrue(trie.autoComplete("mlo") == None)
        self.assertTrue(trie.autoComplete("mlp") == None)
        self.assertTrue(trie.autoComplete("mlq") == None)
        self.assertTrue(trie.autoComplete("mlr") == None)
        self.assertTrue(trie.autoComplete("mls") == None)
        self.assertTrue(trie.autoComplete("mlt") == None)
        self.assertTrue(trie.autoComplete("mlu") == None)
        self.assertTrue(trie.autoComplete("mlv") == None)
        self.assertTrue(trie.autoComplete("mlw") == None)
        self.assertTrue(trie.autoComplete("mlx") == None)
        self.assertTrue(trie.autoComplete("mly") == None)
        self.assertTrue(trie.autoComplete("mlz") == None)
        self.assertTrue(trie.autoComplete("mm") == None)
        self.assertTrue(trie.autoComplete("mma") == None)
        self.assertTrue(trie.autoComplete("mmb") == None)
        self.assertTrue(trie.autoComplete("mmc") == None)
        self.assertTrue(trie.autoComplete("mmd") == None)
        self.assertTrue(trie.autoComplete("mme") == None)
        self.assertTrue(trie.autoComplete("mmf") == None)
        self.assertTrue(trie.autoComplete("mmg") == None)
        self.assertTrue(trie.autoComplete("mmh") == None)
        self.assertTrue(trie.autoComplete("mmi") == None)
        self.assertTrue(trie.autoComplete("mmj") == None)
        self.assertTrue(trie.autoComplete("mmk") == None)
        self.assertTrue(trie.autoComplete("mml") == None)
        self.assertTrue(trie.autoComplete("mmm") == None)
        self.assertTrue(trie.autoComplete("mmn") == None)
        self.assertTrue(trie.autoComplete("mmo") == None)
        self.assertTrue(trie.autoComplete("mmp") == None)
        self.assertTrue(trie.autoComplete("mmq") == None)
        self.assertTrue(trie.autoComplete("mmr") == None)
        self.assertTrue(trie.autoComplete("mms") == None)
        self.assertTrue(trie.autoComplete("mmt") == None)
        self.assertTrue(trie.autoComplete("mmu") == None)
        self.assertTrue(trie.autoComplete("mmv") == None)
        self.assertTrue(trie.autoComplete("mmw") == None)
        self.assertTrue(trie.autoComplete("mmx") == None)
        self.assertTrue(trie.autoComplete("mmy") == None)
        self.assertTrue(trie.autoComplete("mmz") == None)
        self.assertTrue(trie.autoComplete("mn") == None)
        self.assertTrue(trie.autoComplete("mna") == None)
        self.assertTrue(trie.autoComplete("mnb") == None)
        self.assertTrue(trie.autoComplete("mnc") == None)
        self.assertTrue(trie.autoComplete("mnd") == None)
        self.assertTrue(trie.autoComplete("mne") == None)
        self.assertTrue(trie.autoComplete("mnf") == None)
        self.assertTrue(trie.autoComplete("mng") == None)
        self.assertTrue(trie.autoComplete("mnh") == None)
        self.assertTrue(trie.autoComplete("mni") == None)
        self.assertTrue(trie.autoComplete("mnj") == None)
        self.assertTrue(trie.autoComplete("mnk") == None)
        self.assertTrue(trie.autoComplete("mnl") == None)
        self.assertTrue(trie.autoComplete("mnm") == None)
        self.assertTrue(trie.autoComplete("mnn") == None)
        self.assertTrue(trie.autoComplete("mno") == None)
        self.assertTrue(trie.autoComplete("mnp") == None)
        self.assertTrue(trie.autoComplete("mnq") == None)
        self.assertTrue(trie.autoComplete("mnr") == None)
        self.assertTrue(trie.autoComplete("mns") == None)
        self.assertTrue(trie.autoComplete("mnt") == None)
        self.assertTrue(trie.autoComplete("mnu") == None)
        self.assertTrue(trie.autoComplete("mnv") == None)
        self.assertTrue(trie.autoComplete("mnw") == None)
        self.assertTrue(trie.autoComplete("mnx") == None)
        self.assertTrue(trie.autoComplete("mny") == None)
        self.assertTrue(trie.autoComplete("mnz") == None)
        self.assertTrue(trie.autoComplete("mo") == "more")
        self.assertTrue(trie.autoComplete("moa") == None)
        self.assertTrue(trie.autoComplete("mob") == None)
        self.assertTrue(trie.autoComplete("moc") == None)
        self.assertTrue(trie.autoComplete("mod") == "mode")
        self.assertTrue(trie.autoComplete("mode") == "mode")
        self.assertTrue(trie.autoComplete("moe") == None)
        self.assertTrue(trie.autoComplete("mof") == None)
        self.assertTrue(trie.autoComplete("mog") == None)
        self.assertTrue(trie.autoComplete("moh") == None)
        self.assertTrue(trie.autoComplete("moi") == None)
        self.assertTrue(trie.autoComplete("moj") == None)
        self.assertTrue(trie.autoComplete("mok") == None)
        self.assertTrue(trie.autoComplete("mol") == None)
        self.assertTrue(trie.autoComplete("mom") == None)
        self.assertTrue(trie.autoComplete("mon") == "money")
        self.assertTrue(trie.autoComplete("mond") == "monday")
        self.assertTrue(trie.autoComplete("monda") == "monday")
        self.assertTrue(trie.autoComplete("monday") == "monday")
        self.assertTrue(trie.autoComplete("mone") == "money")
        self.assertTrue(trie.autoComplete("money") == "money")
        self.assertTrue(trie.autoComplete("moo") == None)
        self.assertTrue(trie.autoComplete("mop") == None)
        self.assertTrue(trie.autoComplete("moq") == None)
        self.assertTrue(trie.autoComplete("mor") == "more")
        self.assertTrue(trie.autoComplete("more") == "more")
        self.assertTrue(trie.autoComplete("mos") == "most")
        self.assertTrue(trie.autoComplete("most") == "most")
        self.assertTrue(trie.autoComplete("mot") == None)
        self.assertTrue(trie.autoComplete("mou") == None)
        self.assertTrue(trie.autoComplete("mov") == None)
        self.assertTrue(trie.autoComplete("mow") == None)
        self.assertTrue(trie.autoComplete("mox") == None)
        self.assertTrue(trie.autoComplete("moy") == None)
        self.assertTrue(trie.autoComplete("moz") == None)
        self.assertTrue(trie.autoComplete("mp") == None)
        self.assertTrue(trie.autoComplete("mpa") == None)
        self.assertTrue(trie.autoComplete("mpb") == None)
        self.assertTrue(trie.autoComplete("mpc") == None)
        self.assertTrue(trie.autoComplete("mpd") == None)
        self.assertTrue(trie.autoComplete("mpe") == None)
        self.assertTrue(trie.autoComplete("mpf") == None)
        self.assertTrue(trie.autoComplete("mpg") == None)
        self.assertTrue(trie.autoComplete("mph") == None)
        self.assertTrue(trie.autoComplete("mpi") == None)
        self.assertTrue(trie.autoComplete("mpj") == None)
        self.assertTrue(trie.autoComplete("mpk") == None)
        self.assertTrue(trie.autoComplete("mpl") == None)
        self.assertTrue(trie.autoComplete("mpm") == None)
        self.assertTrue(trie.autoComplete("mpn") == None)
        self.assertTrue(trie.autoComplete("mpo") == None)
        self.assertTrue(trie.autoComplete("mpp") == None)
        self.assertTrue(trie.autoComplete("mpq") == None)
        self.assertTrue(trie.autoComplete("mpr") == None)
        self.assertTrue(trie.autoComplete("mps") == None)
        self.assertTrue(trie.autoComplete("mpt") == None)
        self.assertTrue(trie.autoComplete("mpu") == None)
        self.assertTrue(trie.autoComplete("mpv") == None)
        self.assertTrue(trie.autoComplete("mpw") == None)
        self.assertTrue(trie.autoComplete("mpx") == None)
        self.assertTrue(trie.autoComplete("mpy") == None)
        self.assertTrue(trie.autoComplete("mpz") == None)
        self.assertTrue(trie.autoComplete("mq") == None)
        self.assertTrue(trie.autoComplete("mqa") == None)
        self.assertTrue(trie.autoComplete("mqb") == None)
        self.assertTrue(trie.autoComplete("mqc") == None)
        self.assertTrue(trie.autoComplete("mqd") == None)
        self.assertTrue(trie.autoComplete("mqe") == None)
        self.assertTrue(trie.autoComplete("mqf") == None)
        self.assertTrue(trie.autoComplete("mqg") == None)
        self.assertTrue(trie.autoComplete("mqh") == None)
        self.assertTrue(trie.autoComplete("mqi") == None)
        self.assertTrue(trie.autoComplete("mqj") == None)
        self.assertTrue(trie.autoComplete("mqk") == None)
        self.assertTrue(trie.autoComplete("mql") == None)
        self.assertTrue(trie.autoComplete("mqm") == None)
        self.assertTrue(trie.autoComplete("mqn") == None)
        self.assertTrue(trie.autoComplete("mqo") == None)
        self.assertTrue(trie.autoComplete("mqp") == None)
        self.assertTrue(trie.autoComplete("mqq") == None)
        self.assertTrue(trie.autoComplete("mqr") == None)
        self.assertTrue(trie.autoComplete("mqs") == None)
        self.assertTrue(trie.autoComplete("mqt") == None)
        self.assertTrue(trie.autoComplete("mqu") == None)
        self.assertTrue(trie.autoComplete("mqv") == None)
        self.assertTrue(trie.autoComplete("mqw") == None)
        self.assertTrue(trie.autoComplete("mqx") == None)
        self.assertTrue(trie.autoComplete("mqy") == None)
        self.assertTrue(trie.autoComplete("mqz") == None)
        self.assertTrue(trie.autoComplete("mr") == None)
        self.assertTrue(trie.autoComplete("mra") == None)
        self.assertTrue(trie.autoComplete("mrb") == None)
        self.assertTrue(trie.autoComplete("mrc") == None)
        self.assertTrue(trie.autoComplete("mrd") == None)
        self.assertTrue(trie.autoComplete("mre") == None)
        self.assertTrue(trie.autoComplete("mrf") == None)
        self.assertTrue(trie.autoComplete("mrg") == None)
        self.assertTrue(trie.autoComplete("mrh") == None)
        self.assertTrue(trie.autoComplete("mri") == None)
        self.assertTrue(trie.autoComplete("mrj") == None)
        self.assertTrue(trie.autoComplete("mrk") == None)
        self.assertTrue(trie.autoComplete("mrl") == None)
        self.assertTrue(trie.autoComplete("mrm") == None)
        self.assertTrue(trie.autoComplete("mrn") == None)
        self.assertTrue(trie.autoComplete("mro") == None)
        self.assertTrue(trie.autoComplete("mrp") == None)
        self.assertTrue(trie.autoComplete("mrq") == None)
        self.assertTrue(trie.autoComplete("mrr") == None)
        self.assertTrue(trie.autoComplete("mrs") == None)
        self.assertTrue(trie.autoComplete("mrt") == None)
        self.assertTrue(trie.autoComplete("mru") == None)
        self.assertTrue(trie.autoComplete("mrv") == None)
        self.assertTrue(trie.autoComplete("mrw") == None)
        self.assertTrue(trie.autoComplete("mrx") == None)
        self.assertTrue(trie.autoComplete("mry") == None)
        self.assertTrue(trie.autoComplete("mrz") == None)
        self.assertTrue(trie.autoComplete("ms") == None)
        self.assertTrue(trie.autoComplete("msa") == None)
        self.assertTrue(trie.autoComplete("msb") == None)
        self.assertTrue(trie.autoComplete("msc") == None)
        self.assertTrue(trie.autoComplete("msd") == None)
        self.assertTrue(trie.autoComplete("mse") == None)
        self.assertTrue(trie.autoComplete("msf") == None)
        self.assertTrue(trie.autoComplete("msg") == None)
        self.assertTrue(trie.autoComplete("msh") == None)
        self.assertTrue(trie.autoComplete("msi") == None)
        self.assertTrue(trie.autoComplete("msj") == None)
        self.assertTrue(trie.autoComplete("msk") == None)
        self.assertTrue(trie.autoComplete("msl") == None)
        self.assertTrue(trie.autoComplete("msm") == None)
        self.assertTrue(trie.autoComplete("msn") == None)
        self.assertTrue(trie.autoComplete("mso") == None)
        self.assertTrue(trie.autoComplete("msp") == None)
        self.assertTrue(trie.autoComplete("msq") == None)
        self.assertTrue(trie.autoComplete("msr") == None)
        self.assertTrue(trie.autoComplete("mss") == None)
        self.assertTrue(trie.autoComplete("mst") == None)
        self.assertTrue(trie.autoComplete("msu") == None)
        self.assertTrue(trie.autoComplete("msv") == None)
        self.assertTrue(trie.autoComplete("msw") == None)
        self.assertTrue(trie.autoComplete("msx") == None)
        self.assertTrue(trie.autoComplete("msy") == None)
        self.assertTrue(trie.autoComplete("msz") == None)
        self.assertTrue(trie.autoComplete("mt") == None)
        self.assertTrue(trie.autoComplete("mta") == None)
        self.assertTrue(trie.autoComplete("mtb") == None)
        self.assertTrue(trie.autoComplete("mtc") == None)
        self.assertTrue(trie.autoComplete("mtd") == None)
        self.assertTrue(trie.autoComplete("mte") == None)
        self.assertTrue(trie.autoComplete("mtf") == None)
        self.assertTrue(trie.autoComplete("mtg") == None)
        self.assertTrue(trie.autoComplete("mth") == None)
        self.assertTrue(trie.autoComplete("mti") == None)
        self.assertTrue(trie.autoComplete("mtj") == None)
        self.assertTrue(trie.autoComplete("mtk") == None)
        self.assertTrue(trie.autoComplete("mtl") == None)
        self.assertTrue(trie.autoComplete("mtm") == None)
        self.assertTrue(trie.autoComplete("mtn") == None)
        self.assertTrue(trie.autoComplete("mto") == None)
        self.assertTrue(trie.autoComplete("mtp") == None)
        self.assertTrue(trie.autoComplete("mtq") == None)
        self.assertTrue(trie.autoComplete("mtr") == None)
        self.assertTrue(trie.autoComplete("mts") == None)
        self.assertTrue(trie.autoComplete("mtt") == None)
        self.assertTrue(trie.autoComplete("mtu") == None)
        self.assertTrue(trie.autoComplete("mtv") == None)
        self.assertTrue(trie.autoComplete("mtw") == None)
        self.assertTrue(trie.autoComplete("mtx") == None)
        self.assertTrue(trie.autoComplete("mty") == None)
        self.assertTrue(trie.autoComplete("mtz") == None)
        self.assertTrue(trie.autoComplete("mu") == None)
        self.assertTrue(trie.autoComplete("mua") == None)
        self.assertTrue(trie.autoComplete("mub") == None)
        self.assertTrue(trie.autoComplete("muc") == None)
        self.assertTrue(trie.autoComplete("mud") == None)
        self.assertTrue(trie.autoComplete("mue") == None)
        self.assertTrue(trie.autoComplete("muf") == None)
        self.assertTrue(trie.autoComplete("mug") == None)
        self.assertTrue(trie.autoComplete("muh") == None)
        self.assertTrue(trie.autoComplete("mui") == None)
        self.assertTrue(trie.autoComplete("muj") == None)
        self.assertTrue(trie.autoComplete("muk") == None)
        self.assertTrue(trie.autoComplete("mul") == None)
        self.assertTrue(trie.autoComplete("mum") == None)
        self.assertTrue(trie.autoComplete("mun") == None)
        self.assertTrue(trie.autoComplete("muo") == None)
        self.assertTrue(trie.autoComplete("mup") == None)
        self.assertTrue(trie.autoComplete("muq") == None)
        self.assertTrue(trie.autoComplete("mur") == None)
        self.assertTrue(trie.autoComplete("mus") == None)
        self.assertTrue(trie.autoComplete("mut") == None)
        self.assertTrue(trie.autoComplete("muu") == None)
        self.assertTrue(trie.autoComplete("muv") == None)
        self.assertTrue(trie.autoComplete("muw") == None)
        self.assertTrue(trie.autoComplete("mux") == None)
        self.assertTrue(trie.autoComplete("muy") == None)
        self.assertTrue(trie.autoComplete("muz") == None)
        self.assertTrue(trie.autoComplete("mv") == None)
        self.assertTrue(trie.autoComplete("mva") == None)
        self.assertTrue(trie.autoComplete("mvb") == None)
        self.assertTrue(trie.autoComplete("mvc") == None)
        self.assertTrue(trie.autoComplete("mvd") == None)
        self.assertTrue(trie.autoComplete("mve") == None)
        self.assertTrue(trie.autoComplete("mvf") == None)
        self.assertTrue(trie.autoComplete("mvg") == None)
        self.assertTrue(trie.autoComplete("mvh") == None)
        self.assertTrue(trie.autoComplete("mvi") == None)
        self.assertTrue(trie.autoComplete("mvj") == None)
        self.assertTrue(trie.autoComplete("mvk") == None)
        self.assertTrue(trie.autoComplete("mvl") == None)
        self.assertTrue(trie.autoComplete("mvm") == None)
        self.assertTrue(trie.autoComplete("mvn") == None)
        self.assertTrue(trie.autoComplete("mvo") == None)
        self.assertTrue(trie.autoComplete("mvp") == None)
        self.assertTrue(trie.autoComplete("mvq") == None)
        self.assertTrue(trie.autoComplete("mvr") == None)
        self.assertTrue(trie.autoComplete("mvs") == None)
        self.assertTrue(trie.autoComplete("mvt") == None)
        self.assertTrue(trie.autoComplete("mvu") == None)
        self.assertTrue(trie.autoComplete("mvv") == None)
        self.assertTrue(trie.autoComplete("mvw") == None)
        self.assertTrue(trie.autoComplete("mvx") == None)
        self.assertTrue(trie.autoComplete("mvy") == None)
        self.assertTrue(trie.autoComplete("mvz") == None)
        self.assertTrue(trie.autoComplete("mw") == None)
        self.assertTrue(trie.autoComplete("mwa") == None)
        self.assertTrue(trie.autoComplete("mwb") == None)
        self.assertTrue(trie.autoComplete("mwc") == None)
        self.assertTrue(trie.autoComplete("mwd") == None)
        self.assertTrue(trie.autoComplete("mwe") == None)
        self.assertTrue(trie.autoComplete("mwf") == None)
        self.assertTrue(trie.autoComplete("mwg") == None)
        self.assertTrue(trie.autoComplete("mwh") == None)
        self.assertTrue(trie.autoComplete("mwi") == None)
        self.assertTrue(trie.autoComplete("mwj") == None)
        self.assertTrue(trie.autoComplete("mwk") == None)
        self.assertTrue(trie.autoComplete("mwl") == None)
        self.assertTrue(trie.autoComplete("mwm") == None)
        self.assertTrue(trie.autoComplete("mwn") == None)
        self.assertTrue(trie.autoComplete("mwo") == None)
        self.assertTrue(trie.autoComplete("mwp") == None)
        self.assertTrue(trie.autoComplete("mwq") == None)
        self.assertTrue(trie.autoComplete("mwr") == None)
        self.assertTrue(trie.autoComplete("mws") == None)
        self.assertTrue(trie.autoComplete("mwt") == None)
        self.assertTrue(trie.autoComplete("mwu") == None)
        self.assertTrue(trie.autoComplete("mwv") == None)
        self.assertTrue(trie.autoComplete("mww") == None)
        self.assertTrue(trie.autoComplete("mwx") == None)
        self.assertTrue(trie.autoComplete("mwy") == None)
        self.assertTrue(trie.autoComplete("mwz") == None)
        self.assertTrue(trie.autoComplete("mx") == None)
        self.assertTrue(trie.autoComplete("mxa") == None)
        self.assertTrue(trie.autoComplete("mxb") == None)
        self.assertTrue(trie.autoComplete("mxc") == None)
        self.assertTrue(trie.autoComplete("mxd") == None)
        self.assertTrue(trie.autoComplete("mxe") == None)
        self.assertTrue(trie.autoComplete("mxf") == None)
        self.assertTrue(trie.autoComplete("mxg") == None)
        self.assertTrue(trie.autoComplete("mxh") == None)
        self.assertTrue(trie.autoComplete("mxi") == None)
        self.assertTrue(trie.autoComplete("mxj") == None)
        self.assertTrue(trie.autoComplete("mxk") == None)
        self.assertTrue(trie.autoComplete("mxl") == None)
        self.assertTrue(trie.autoComplete("mxm") == None)
        self.assertTrue(trie.autoComplete("mxn") == None)
        self.assertTrue(trie.autoComplete("mxo") == None)
        self.assertTrue(trie.autoComplete("mxp") == None)
        self.assertTrue(trie.autoComplete("mxq") == None)
        self.assertTrue(trie.autoComplete("mxr") == None)
        self.assertTrue(trie.autoComplete("mxs") == None)
        self.assertTrue(trie.autoComplete("mxt") == None)
        self.assertTrue(trie.autoComplete("mxu") == None)
        self.assertTrue(trie.autoComplete("mxv") == None)
        self.assertTrue(trie.autoComplete("mxw") == None)
        self.assertTrue(trie.autoComplete("mxx") == None)
        self.assertTrue(trie.autoComplete("mxy") == None)
        self.assertTrue(trie.autoComplete("mxz") == None)
        self.assertTrue(trie.autoComplete("my") == "my")
        self.assertTrue(trie.autoComplete("mya") == None)
        self.assertTrue(trie.autoComplete("myb") == None)
        self.assertTrue(trie.autoComplete("myc") == None)
        self.assertTrue(trie.autoComplete("myd") == None)
        self.assertTrue(trie.autoComplete("mye") == None)
        self.assertTrue(trie.autoComplete("myf") == None)
        self.assertTrue(trie.autoComplete("myg") == None)
        self.assertTrue(trie.autoComplete("myh") == None)
        self.assertTrue(trie.autoComplete("myi") == None)
        self.assertTrue(trie.autoComplete("myj") == None)
        self.assertTrue(trie.autoComplete("myk") == None)
        self.assertTrue(trie.autoComplete("myl") == None)
        self.assertTrue(trie.autoComplete("mym") == None)
        self.assertTrue(trie.autoComplete("myn") == None)
        self.assertTrue(trie.autoComplete("myo") == None)
        self.assertTrue(trie.autoComplete("myp") == None)
        self.assertTrue(trie.autoComplete("myq") == None)
        self.assertTrue(trie.autoComplete("myr") == None)
        self.assertTrue(trie.autoComplete("mys") == None)
        self.assertTrue(trie.autoComplete("myt") == None)
        self.assertTrue(trie.autoComplete("myu") == None)
        self.assertTrue(trie.autoComplete("myv") == None)
        self.assertTrue(trie.autoComplete("myw") == None)
        self.assertTrue(trie.autoComplete("myx") == None)
        self.assertTrue(trie.autoComplete("myy") == None)
        self.assertTrue(trie.autoComplete("myz") == None)
        self.assertTrue(trie.autoComplete("mz") == None)
        self.assertTrue(trie.autoComplete("mza") == None)
        self.assertTrue(trie.autoComplete("mzb") == None)
        self.assertTrue(trie.autoComplete("mzc") == None)
        self.assertTrue(trie.autoComplete("mzd") == None)
        self.assertTrue(trie.autoComplete("mze") == None)
        self.assertTrue(trie.autoComplete("mzf") == None)
        self.assertTrue(trie.autoComplete("mzg") == None)
        self.assertTrue(trie.autoComplete("mzh") == None)
        self.assertTrue(trie.autoComplete("mzi") == None)
        self.assertTrue(trie.autoComplete("mzj") == None)
        self.assertTrue(trie.autoComplete("mzk") == None)
        self.assertTrue(trie.autoComplete("mzl") == None)
        self.assertTrue(trie.autoComplete("mzm") == None)
        self.assertTrue(trie.autoComplete("mzn") == None)
        self.assertTrue(trie.autoComplete("mzo") == None)
        self.assertTrue(trie.autoComplete("mzp") == None)
        self.assertTrue(trie.autoComplete("mzq") == None)
        self.assertTrue(trie.autoComplete("mzr") == None)
        self.assertTrue(trie.autoComplete("mzs") == None)
        self.assertTrue(trie.autoComplete("mzt") == None)
        self.assertTrue(trie.autoComplete("mzu") == None)
        self.assertTrue(trie.autoComplete("mzv") == None)
        self.assertTrue(trie.autoComplete("mzw") == None)
        self.assertTrue(trie.autoComplete("mzx") == None)
        self.assertTrue(trie.autoComplete("mzy") == None)
        self.assertTrue(trie.autoComplete("mzz") == None)
        self.assertTrue(trie.autoComplete("n") == "not")
        self.assertTrue(trie.autoComplete("na") == "nations")
        self.assertTrue(trie.autoComplete("naa") == None)
        self.assertTrue(trie.autoComplete("nab") == None)
        self.assertTrue(trie.autoComplete("nac") == None)
        self.assertTrue(trie.autoComplete("nad") == None)
        self.assertTrue(trie.autoComplete("nae") == None)
        self.assertTrue(trie.autoComplete("naf") == None)
        self.assertTrue(trie.autoComplete("nag") == None)
        self.assertTrue(trie.autoComplete("nah") == None)
        self.assertTrue(trie.autoComplete("nai") == None)
        self.assertTrue(trie.autoComplete("naj") == None)
        self.assertTrue(trie.autoComplete("nak") == None)
        self.assertTrue(trie.autoComplete("nal") == None)
        self.assertTrue(trie.autoComplete("nam") == "name")
        self.assertTrue(trie.autoComplete("name") == "name")
        self.assertTrue(trie.autoComplete("names") == "names")
        self.assertTrue(trie.autoComplete("nan") == None)
        self.assertTrue(trie.autoComplete("nao") == None)
        self.assertTrue(trie.autoComplete("nap") == None)
        self.assertTrue(trie.autoComplete("naq") == None)
        self.assertTrue(trie.autoComplete("nar") == None)
        self.assertTrue(trie.autoComplete("nas") == None)
        self.assertTrue(trie.autoComplete("nat") == "nations")
        self.assertTrue(trie.autoComplete("nati") == "nations")
        self.assertTrue(trie.autoComplete("natio") == "nations")
        self.assertTrue(trie.autoComplete("nation") == "nations")
        self.assertTrue(trie.autoComplete("nations") == "nations")
        self.assertTrue(trie.autoComplete("natu") == "natural")
        self.assertTrue(trie.autoComplete("natur") == "natural")
        self.assertTrue(trie.autoComplete("natura") == "natural")
        self.assertTrue(trie.autoComplete("natural") == "natural")
        self.assertTrue(trie.autoComplete("naturali") == "naturalization")
        self.assertTrue(trie.autoComplete("naturaliz") == "naturalization")
        self.assertTrue(trie.autoComplete("naturaliza") == "naturalization")
        self.assertTrue(trie.autoComplete("naturalizat") == "naturalization")
        self.assertTrue(trie.autoComplete("naturalizati") == "naturalization")
        self.assertTrue(trie.autoComplete("naturalizatio") == "naturalization")
        self.assertTrue(trie.autoComplete("naturalization") == "naturalization")
        self.assertTrue(trie.autoComplete("naturalize") == "naturalized")
        self.assertTrue(trie.autoComplete("naturalized") == "naturalized")
        self.assertTrue(trie.autoComplete("nature") == "nature")
        self.assertTrue(trie.autoComplete("nau") == None)
        self.assertTrue(trie.autoComplete("nav") == "naval")
        self.assertTrue(trie.autoComplete("nava") == "naval")
        self.assertTrue(trie.autoComplete("naval") == "naval")
        self.assertTrue(trie.autoComplete("navy") == "navy")
        self.assertTrue(trie.autoComplete("naw") == None)
        self.assertTrue(trie.autoComplete("nax") == None)
        self.assertTrue(trie.autoComplete("nay") == "nays")
        self.assertTrue(trie.autoComplete("nays") == "nays")
        self.assertTrue(trie.autoComplete("naz") == None)
        self.assertTrue(trie.autoComplete("nb") == None)
        self.assertTrue(trie.autoComplete("nba") == None)
        self.assertTrue(trie.autoComplete("nbb") == None)
        self.assertTrue(trie.autoComplete("nbc") == None)
        self.assertTrue(trie.autoComplete("nbd") == None)
        self.assertTrue(trie.autoComplete("nbe") == None)
        self.assertTrue(trie.autoComplete("nbf") == None)
        self.assertTrue(trie.autoComplete("nbg") == None)
        self.assertTrue(trie.autoComplete("nbh") == None)
        self.assertTrue(trie.autoComplete("nbi") == None)
        self.assertTrue(trie.autoComplete("nbj") == None)
        self.assertTrue(trie.autoComplete("nbk") == None)
        self.assertTrue(trie.autoComplete("nbl") == None)
        self.assertTrue(trie.autoComplete("nbm") == None)
        self.assertTrue(trie.autoComplete("nbn") == None)
        self.assertTrue(trie.autoComplete("nbo") == None)
        self.assertTrue(trie.autoComplete("nbp") == None)
        self.assertTrue(trie.autoComplete("nbq") == None)
        self.assertTrue(trie.autoComplete("nbr") == None)
        self.assertTrue(trie.autoComplete("nbs") == None)
        self.assertTrue(trie.autoComplete("nbt") == None)
        self.assertTrue(trie.autoComplete("nbu") == None)
        self.assertTrue(trie.autoComplete("nbv") == None)
        self.assertTrue(trie.autoComplete("nbw") == None)
        self.assertTrue(trie.autoComplete("nbx") == None)
        self.assertTrue(trie.autoComplete("nby") == None)
        self.assertTrue(trie.autoComplete("nbz") == None)
        self.assertTrue(trie.autoComplete("nc") == None)
        self.assertTrue(trie.autoComplete("nca") == None)
        self.assertTrue(trie.autoComplete("ncb") == None)
        self.assertTrue(trie.autoComplete("ncc") == None)
        self.assertTrue(trie.autoComplete("ncd") == None)
        self.assertTrue(trie.autoComplete("nce") == None)
        self.assertTrue(trie.autoComplete("ncf") == None)
        self.assertTrue(trie.autoComplete("ncg") == None)
        self.assertTrue(trie.autoComplete("nch") == None)
        self.assertTrue(trie.autoComplete("nci") == None)
        self.assertTrue(trie.autoComplete("ncj") == None)
        self.assertTrue(trie.autoComplete("nck") == None)
        self.assertTrue(trie.autoComplete("ncl") == None)
        self.assertTrue(trie.autoComplete("ncm") == None)
        self.assertTrue(trie.autoComplete("ncn") == None)
        self.assertTrue(trie.autoComplete("nco") == None)
        self.assertTrue(trie.autoComplete("ncp") == None)
        self.assertTrue(trie.autoComplete("ncq") == None)
        self.assertTrue(trie.autoComplete("ncr") == None)
        self.assertTrue(trie.autoComplete("ncs") == None)
        self.assertTrue(trie.autoComplete("nct") == None)
        self.assertTrue(trie.autoComplete("ncu") == None)
        self.assertTrue(trie.autoComplete("ncv") == None)
        self.assertTrue(trie.autoComplete("ncw") == None)
        self.assertTrue(trie.autoComplete("ncx") == None)
        self.assertTrue(trie.autoComplete("ncy") == None)
        self.assertTrue(trie.autoComplete("ncz") == None)
        self.assertTrue(trie.autoComplete("nd") == None)
        self.assertTrue(trie.autoComplete("nda") == None)
        self.assertTrue(trie.autoComplete("ndb") == None)
        self.assertTrue(trie.autoComplete("ndc") == None)
        self.assertTrue(trie.autoComplete("ndd") == None)
        self.assertTrue(trie.autoComplete("nde") == None)
        self.assertTrue(trie.autoComplete("ndf") == None)
        self.assertTrue(trie.autoComplete("ndg") == None)
        self.assertTrue(trie.autoComplete("ndh") == None)
        self.assertTrue(trie.autoComplete("ndi") == None)
        self.assertTrue(trie.autoComplete("ndj") == None)
        self.assertTrue(trie.autoComplete("ndk") == None)
        self.assertTrue(trie.autoComplete("ndl") == None)
        self.assertTrue(trie.autoComplete("ndm") == None)
        self.assertTrue(trie.autoComplete("ndn") == None)
        self.assertTrue(trie.autoComplete("ndo") == None)
        self.assertTrue(trie.autoComplete("ndp") == None)
        self.assertTrue(trie.autoComplete("ndq") == None)
        self.assertTrue(trie.autoComplete("ndr") == None)
        self.assertTrue(trie.autoComplete("nds") == None)
        self.assertTrue(trie.autoComplete("ndt") == None)
        self.assertTrue(trie.autoComplete("ndu") == None)
        self.assertTrue(trie.autoComplete("ndv") == None)
        self.assertTrue(trie.autoComplete("ndw") == None)
        self.assertTrue(trie.autoComplete("ndx") == None)
        self.assertTrue(trie.autoComplete("ndy") == None)
        self.assertTrue(trie.autoComplete("ndz") == None)
        self.assertTrue(trie.autoComplete("ne") == "necessary")
        self.assertTrue(trie.autoComplete("nea") == None)
        self.assertTrue(trie.autoComplete("neb") == None)
        self.assertTrue(trie.autoComplete("nec") == "necessary")
        self.assertTrue(trie.autoComplete("nece") == "necessary")
        self.assertTrue(trie.autoComplete("neces") == "necessary")
        self.assertTrue(trie.autoComplete("necess") == "necessary")
        self.assertTrue(trie.autoComplete("necessa") == "necessary")
        self.assertTrue(trie.autoComplete("necessar") == "necessary")
        self.assertTrue(trie.autoComplete("necessary") == "necessary")
        self.assertTrue(trie.autoComplete("ned") == None)
        self.assertTrue(trie.autoComplete("nee") == "needful")
        self.assertTrue(trie.autoComplete("need") == "needful")
        self.assertTrue(trie.autoComplete("needf") == "needful")
        self.assertTrue(trie.autoComplete("needfu") == "needful")
        self.assertTrue(trie.autoComplete("needful") == "needful")
        self.assertTrue(trie.autoComplete("nef") == None)
        self.assertTrue(trie.autoComplete("neg") == None)
        self.assertTrue(trie.autoComplete("neh") == None)
        self.assertTrue(trie.autoComplete("nei") == "neither")
        self.assertTrue(trie.autoComplete("neit") == "neither")
        self.assertTrue(trie.autoComplete("neith") == "neither")
        self.assertTrue(trie.autoComplete("neithe") == "neither")
        self.assertTrue(trie.autoComplete("neither") == "neither")
        self.assertTrue(trie.autoComplete("nej") == None)
        self.assertTrue(trie.autoComplete("nek") == None)
        self.assertTrue(trie.autoComplete("nel") == None)
        self.assertTrue(trie.autoComplete("nem") == None)
        self.assertTrue(trie.autoComplete("nen") == None)
        self.assertTrue(trie.autoComplete("neo") == None)
        self.assertTrue(trie.autoComplete("nep") == None)
        self.assertTrue(trie.autoComplete("neq") == None)
        self.assertTrue(trie.autoComplete("ner") == None)
        self.assertTrue(trie.autoComplete("nes") == None)
        self.assertTrue(trie.autoComplete("net") == "net")
        self.assertTrue(trie.autoComplete("neu") == None)
        self.assertTrue(trie.autoComplete("nev") == "nevertheless")
        self.assertTrue(trie.autoComplete("neve") == "nevertheless")
        self.assertTrue(trie.autoComplete("never") == "nevertheless")
        self.assertTrue(trie.autoComplete("nevert") == "nevertheless")
        self.assertTrue(trie.autoComplete("neverth") == "nevertheless")
        self.assertTrue(trie.autoComplete("neverthe") == "nevertheless")
        self.assertTrue(trie.autoComplete("neverthel") == "nevertheless")
        self.assertTrue(trie.autoComplete("neverthele") == "nevertheless")
        self.assertTrue(trie.autoComplete("nevertheles") == "nevertheless")
        self.assertTrue(trie.autoComplete("nevertheless") == "nevertheless")
        self.assertTrue(trie.autoComplete("new") == "new")
        self.assertTrue(trie.autoComplete("nex") == "next")
        self.assertTrue(trie.autoComplete("next") == "next")
        self.assertTrue(trie.autoComplete("ney") == None)
        self.assertTrue(trie.autoComplete("nez") == None)
        self.assertTrue(trie.autoComplete("nf") == None)
        self.assertTrue(trie.autoComplete("nfa") == None)
        self.assertTrue(trie.autoComplete("nfb") == None)
        self.assertTrue(trie.autoComplete("nfc") == None)
        self.assertTrue(trie.autoComplete("nfd") == None)
        self.assertTrue(trie.autoComplete("nfe") == None)
        self.assertTrue(trie.autoComplete("nff") == None)
        self.assertTrue(trie.autoComplete("nfg") == None)
        self.assertTrue(trie.autoComplete("nfh") == None)
        self.assertTrue(trie.autoComplete("nfi") == None)
        self.assertTrue(trie.autoComplete("nfj") == None)
        self.assertTrue(trie.autoComplete("nfk") == None)
        self.assertTrue(trie.autoComplete("nfl") == None)
        self.assertTrue(trie.autoComplete("nfm") == None)
        self.assertTrue(trie.autoComplete("nfn") == None)
        self.assertTrue(trie.autoComplete("nfo") == None)
        self.assertTrue(trie.autoComplete("nfp") == None)
        self.assertTrue(trie.autoComplete("nfq") == None)
        self.assertTrue(trie.autoComplete("nfr") == None)
        self.assertTrue(trie.autoComplete("nfs") == None)
        self.assertTrue(trie.autoComplete("nft") == None)
        self.assertTrue(trie.autoComplete("nfu") == None)
        self.assertTrue(trie.autoComplete("nfv") == None)
        self.assertTrue(trie.autoComplete("nfw") == None)
        self.assertTrue(trie.autoComplete("nfx") == None)
        self.assertTrue(trie.autoComplete("nfy") == None)
        self.assertTrue(trie.autoComplete("nfz") == None)
        self.assertTrue(trie.autoComplete("ng") == None)
        self.assertTrue(trie.autoComplete("nga") == None)
        self.assertTrue(trie.autoComplete("ngb") == None)
        self.assertTrue(trie.autoComplete("ngc") == None)
        self.assertTrue(trie.autoComplete("ngd") == None)
        self.assertTrue(trie.autoComplete("nge") == None)
        self.assertTrue(trie.autoComplete("ngf") == None)
        self.assertTrue(trie.autoComplete("ngg") == None)
        self.assertTrue(trie.autoComplete("ngh") == None)
        self.assertTrue(trie.autoComplete("ngi") == None)
        self.assertTrue(trie.autoComplete("ngj") == None)
        self.assertTrue(trie.autoComplete("ngk") == None)
        self.assertTrue(trie.autoComplete("ngl") == None)
        self.assertTrue(trie.autoComplete("ngm") == None)
        self.assertTrue(trie.autoComplete("ngn") == None)
        self.assertTrue(trie.autoComplete("ngo") == None)
        self.assertTrue(trie.autoComplete("ngp") == None)
        self.assertTrue(trie.autoComplete("ngq") == None)
        self.assertTrue(trie.autoComplete("ngr") == None)
        self.assertTrue(trie.autoComplete("ngs") == None)
        self.assertTrue(trie.autoComplete("ngt") == None)
        self.assertTrue(trie.autoComplete("ngu") == None)
        self.assertTrue(trie.autoComplete("ngv") == None)
        self.assertTrue(trie.autoComplete("ngw") == None)
        self.assertTrue(trie.autoComplete("ngx") == None)
        self.assertTrue(trie.autoComplete("ngy") == None)
        self.assertTrue(trie.autoComplete("ngz") == None)
        self.assertTrue(trie.autoComplete("nh") == None)
        self.assertTrue(trie.autoComplete("nha") == None)
        self.assertTrue(trie.autoComplete("nhb") == None)
        self.assertTrue(trie.autoComplete("nhc") == None)
        self.assertTrue(trie.autoComplete("nhd") == None)
        self.assertTrue(trie.autoComplete("nhe") == None)
        self.assertTrue(trie.autoComplete("nhf") == None)
        self.assertTrue(trie.autoComplete("nhg") == None)
        self.assertTrue(trie.autoComplete("nhh") == None)
        self.assertTrue(trie.autoComplete("nhi") == None)
        self.assertTrue(trie.autoComplete("nhj") == None)
        self.assertTrue(trie.autoComplete("nhk") == None)
        self.assertTrue(trie.autoComplete("nhl") == None)
        self.assertTrue(trie.autoComplete("nhm") == None)
        self.assertTrue(trie.autoComplete("nhn") == None)
        self.assertTrue(trie.autoComplete("nho") == None)
        self.assertTrue(trie.autoComplete("nhp") == None)
        self.assertTrue(trie.autoComplete("nhq") == None)
        self.assertTrue(trie.autoComplete("nhr") == None)
        self.assertTrue(trie.autoComplete("nhs") == None)
        self.assertTrue(trie.autoComplete("nht") == None)
        self.assertTrue(trie.autoComplete("nhu") == None)
        self.assertTrue(trie.autoComplete("nhv") == None)
        self.assertTrue(trie.autoComplete("nhw") == None)
        self.assertTrue(trie.autoComplete("nhx") == None)
        self.assertTrue(trie.autoComplete("nhy") == None)
        self.assertTrue(trie.autoComplete("nhz") == None)
        self.assertTrue(trie.autoComplete("ni") == "nine")
        self.assertTrue(trie.autoComplete("nia") == None)
        self.assertTrue(trie.autoComplete("nib") == None)
        self.assertTrue(trie.autoComplete("nic") == None)
        self.assertTrue(trie.autoComplete("nid") == None)
        self.assertTrue(trie.autoComplete("nie") == None)
        self.assertTrue(trie.autoComplete("nif") == None)
        self.assertTrue(trie.autoComplete("nig") == None)
        self.assertTrue(trie.autoComplete("nih") == None)
        self.assertTrue(trie.autoComplete("nii") == None)
        self.assertTrue(trie.autoComplete("nij") == None)
        self.assertTrue(trie.autoComplete("nik") == None)
        self.assertTrue(trie.autoComplete("nil") == None)
        self.assertTrue(trie.autoComplete("nim") == None)
        self.assertTrue(trie.autoComplete("nin") == "nine")
        self.assertTrue(trie.autoComplete("nine") == "nine")
        self.assertTrue(trie.autoComplete("ninet") == "nineteenth")
        self.assertTrue(trie.autoComplete("ninete") == "nineteenth")
        self.assertTrue(trie.autoComplete("ninetee") == "nineteenth")
        self.assertTrue(trie.autoComplete("nineteen") == "nineteenth")
        self.assertTrue(trie.autoComplete("nineteent") == "nineteenth")
        self.assertTrue(trie.autoComplete("nineteenth") == "nineteenth")
        self.assertTrue(trie.autoComplete("nint") == "ninth")
        self.assertTrue(trie.autoComplete("ninth") == "ninth")
        self.assertTrue(trie.autoComplete("nio") == None)
        self.assertTrue(trie.autoComplete("nip") == None)
        self.assertTrue(trie.autoComplete("niq") == None)
        self.assertTrue(trie.autoComplete("nir") == None)
        self.assertTrue(trie.autoComplete("nis") == None)
        self.assertTrue(trie.autoComplete("nit") == None)
        self.assertTrue(trie.autoComplete("niu") == None)
        self.assertTrue(trie.autoComplete("niv") == None)
        self.assertTrue(trie.autoComplete("niw") == None)
        self.assertTrue(trie.autoComplete("nix") == None)
        self.assertTrue(trie.autoComplete("niy") == None)
        self.assertTrue(trie.autoComplete("niz") == None)
        self.assertTrue(trie.autoComplete("nj") == None)
        self.assertTrue(trie.autoComplete("nja") == None)
        self.assertTrue(trie.autoComplete("njb") == None)
        self.assertTrue(trie.autoComplete("njc") == None)
        self.assertTrue(trie.autoComplete("njd") == None)
        self.assertTrue(trie.autoComplete("nje") == None)
        self.assertTrue(trie.autoComplete("njf") == None)
        self.assertTrue(trie.autoComplete("njg") == None)
        self.assertTrue(trie.autoComplete("njh") == None)
        self.assertTrue(trie.autoComplete("nji") == None)
        self.assertTrue(trie.autoComplete("njj") == None)
        self.assertTrue(trie.autoComplete("njk") == None)
        self.assertTrue(trie.autoComplete("njl") == None)
        self.assertTrue(trie.autoComplete("njm") == None)
        self.assertTrue(trie.autoComplete("njn") == None)
        self.assertTrue(trie.autoComplete("njo") == None)
        self.assertTrue(trie.autoComplete("njp") == None)
        self.assertTrue(trie.autoComplete("njq") == None)
        self.assertTrue(trie.autoComplete("njr") == None)
        self.assertTrue(trie.autoComplete("njs") == None)
        self.assertTrue(trie.autoComplete("njt") == None)
        self.assertTrue(trie.autoComplete("nju") == None)
        self.assertTrue(trie.autoComplete("njv") == None)
        self.assertTrue(trie.autoComplete("njw") == None)
        self.assertTrue(trie.autoComplete("njx") == None)
        self.assertTrue(trie.autoComplete("njy") == None)
        self.assertTrue(trie.autoComplete("njz") == None)
        self.assertTrue(trie.autoComplete("nk") == None)
        self.assertTrue(trie.autoComplete("nka") == None)
        self.assertTrue(trie.autoComplete("nkb") == None)
        self.assertTrue(trie.autoComplete("nkc") == None)
        self.assertTrue(trie.autoComplete("nkd") == None)
        self.assertTrue(trie.autoComplete("nke") == None)
        self.assertTrue(trie.autoComplete("nkf") == None)
        self.assertTrue(trie.autoComplete("nkg") == None)
        self.assertTrue(trie.autoComplete("nkh") == None)
        self.assertTrue(trie.autoComplete("nki") == None)
        self.assertTrue(trie.autoComplete("nkj") == None)
        self.assertTrue(trie.autoComplete("nkk") == None)
        self.assertTrue(trie.autoComplete("nkl") == None)
        self.assertTrue(trie.autoComplete("nkm") == None)
        self.assertTrue(trie.autoComplete("nkn") == None)
        self.assertTrue(trie.autoComplete("nko") == None)
        self.assertTrue(trie.autoComplete("nkp") == None)
        self.assertTrue(trie.autoComplete("nkq") == None)
        self.assertTrue(trie.autoComplete("nkr") == None)
        self.assertTrue(trie.autoComplete("nks") == None)
        self.assertTrue(trie.autoComplete("nkt") == None)
        self.assertTrue(trie.autoComplete("nku") == None)
        self.assertTrue(trie.autoComplete("nkv") == None)
        self.assertTrue(trie.autoComplete("nkw") == None)
        self.assertTrue(trie.autoComplete("nkx") == None)
        self.assertTrue(trie.autoComplete("nky") == None)
        self.assertTrue(trie.autoComplete("nkz") == None)
        self.assertTrue(trie.autoComplete("nl") == None)
        self.assertTrue(trie.autoComplete("nla") == None)
        self.assertTrue(trie.autoComplete("nlb") == None)
        self.assertTrue(trie.autoComplete("nlc") == None)
        self.assertTrue(trie.autoComplete("nld") == None)
        self.assertTrue(trie.autoComplete("nle") == None)
        self.assertTrue(trie.autoComplete("nlf") == None)
        self.assertTrue(trie.autoComplete("nlg") == None)
        self.assertTrue(trie.autoComplete("nlh") == None)
        self.assertTrue(trie.autoComplete("nli") == None)
        self.assertTrue(trie.autoComplete("nlj") == None)
        self.assertTrue(trie.autoComplete("nlk") == None)
        self.assertTrue(trie.autoComplete("nll") == None)
        self.assertTrue(trie.autoComplete("nlm") == None)
        self.assertTrue(trie.autoComplete("nln") == None)
        self.assertTrue(trie.autoComplete("nlo") == None)
        self.assertTrue(trie.autoComplete("nlp") == None)
        self.assertTrue(trie.autoComplete("nlq") == None)
        self.assertTrue(trie.autoComplete("nlr") == None)
        self.assertTrue(trie.autoComplete("nls") == None)
        self.assertTrue(trie.autoComplete("nlt") == None)
        self.assertTrue(trie.autoComplete("nlu") == None)
        self.assertTrue(trie.autoComplete("nlv") == None)
        self.assertTrue(trie.autoComplete("nlw") == None)
        self.assertTrue(trie.autoComplete("nlx") == None)
        self.assertTrue(trie.autoComplete("nly") == None)
        self.assertTrue(trie.autoComplete("nlz") == None)
        self.assertTrue(trie.autoComplete("nm") == None)
        self.assertTrue(trie.autoComplete("nma") == None)
        self.assertTrue(trie.autoComplete("nmb") == None)
        self.assertTrue(trie.autoComplete("nmc") == None)
        self.assertTrue(trie.autoComplete("nmd") == None)
        self.assertTrue(trie.autoComplete("nme") == None)
        self.assertTrue(trie.autoComplete("nmf") == None)
        self.assertTrue(trie.autoComplete("nmg") == None)
        self.assertTrue(trie.autoComplete("nmh") == None)
        self.assertTrue(trie.autoComplete("nmi") == None)
        self.assertTrue(trie.autoComplete("nmj") == None)
        self.assertTrue(trie.autoComplete("nmk") == None)
        self.assertTrue(trie.autoComplete("nml") == None)
        self.assertTrue(trie.autoComplete("nmm") == None)
        self.assertTrue(trie.autoComplete("nmn") == None)
        self.assertTrue(trie.autoComplete("nmo") == None)
        self.assertTrue(trie.autoComplete("nmp") == None)
        self.assertTrue(trie.autoComplete("nmq") == None)
        self.assertTrue(trie.autoComplete("nmr") == None)
        self.assertTrue(trie.autoComplete("nms") == None)
        self.assertTrue(trie.autoComplete("nmt") == None)
        self.assertTrue(trie.autoComplete("nmu") == None)
        self.assertTrue(trie.autoComplete("nmv") == None)
        self.assertTrue(trie.autoComplete("nmw") == None)
        self.assertTrue(trie.autoComplete("nmx") == None)
        self.assertTrue(trie.autoComplete("nmy") == None)
        self.assertTrue(trie.autoComplete("nmz") == None)
        self.assertTrue(trie.autoComplete("nn") == None)
        self.assertTrue(trie.autoComplete("nna") == None)
        self.assertTrue(trie.autoComplete("nnb") == None)
        self.assertTrue(trie.autoComplete("nnc") == None)
        self.assertTrue(trie.autoComplete("nnd") == None)
        self.assertTrue(trie.autoComplete("nne") == None)
        self.assertTrue(trie.autoComplete("nnf") == None)
        self.assertTrue(trie.autoComplete("nng") == None)
        self.assertTrue(trie.autoComplete("nnh") == None)
        self.assertTrue(trie.autoComplete("nni") == None)
        self.assertTrue(trie.autoComplete("nnj") == None)
        self.assertTrue(trie.autoComplete("nnk") == None)
        self.assertTrue(trie.autoComplete("nnl") == None)
        self.assertTrue(trie.autoComplete("nnm") == None)
        self.assertTrue(trie.autoComplete("nnn") == None)
        self.assertTrue(trie.autoComplete("nno") == None)
        self.assertTrue(trie.autoComplete("nnp") == None)
        self.assertTrue(trie.autoComplete("nnq") == None)
        self.assertTrue(trie.autoComplete("nnr") == None)
        self.assertTrue(trie.autoComplete("nns") == None)
        self.assertTrue(trie.autoComplete("nnt") == None)
        self.assertTrue(trie.autoComplete("nnu") == None)
        self.assertTrue(trie.autoComplete("nnv") == None)
        self.assertTrue(trie.autoComplete("nnw") == None)
        self.assertTrue(trie.autoComplete("nnx") == None)
        self.assertTrue(trie.autoComplete("nny") == None)
        self.assertTrue(trie.autoComplete("nnz") == None)
        self.assertTrue(trie.autoComplete("no") == "not")
        self.assertTrue(trie.autoComplete("noa") == None)
        self.assertTrue(trie.autoComplete("nob") == "nobility")
        self.assertTrue(trie.autoComplete("nobi") == "nobility")
        self.assertTrue(trie.autoComplete("nobil") == "nobility")
        self.assertTrue(trie.autoComplete("nobili") == "nobility")
        self.assertTrue(trie.autoComplete("nobilit") == "nobility")
        self.assertTrue(trie.autoComplete("nobility") == "nobility")
        self.assertTrue(trie.autoComplete("noc") == None)
        self.assertTrue(trie.autoComplete("nod") == None)
        self.assertTrue(trie.autoComplete("noe") == None)
        self.assertTrue(trie.autoComplete("nof") == None)
        self.assertTrue(trie.autoComplete("nog") == None)
        self.assertTrue(trie.autoComplete("noh") == None)
        self.assertTrue(trie.autoComplete("noi") == None)
        self.assertTrue(trie.autoComplete("noj") == None)
        self.assertTrue(trie.autoComplete("nok") == None)
        self.assertTrue(trie.autoComplete("nol") == None)
        self.assertTrue(trie.autoComplete("nom") == "nominate")
        self.assertTrue(trie.autoComplete("nomi") == "nominate")
        self.assertTrue(trie.autoComplete("nomin") == "nominate")
        self.assertTrue(trie.autoComplete("nomina") == "nominate")
        self.assertTrue(trie.autoComplete("nominat") == "nominate")
        self.assertTrue(trie.autoComplete("nominate") == "nominate")
        self.assertTrue(trie.autoComplete("non") == None)
        self.assertTrue(trie.autoComplete("noo") == "noon")
        self.assertTrue(trie.autoComplete("noon") == "noon")
        self.assertTrue(trie.autoComplete("nop") == None)
        self.assertTrue(trie.autoComplete("noq") == None)
        self.assertTrue(trie.autoComplete("nor") == "nor")
        self.assertTrue(trie.autoComplete("nort") == "north")
        self.assertTrue(trie.autoComplete("north") == "north")
        self.assertTrue(trie.autoComplete("nos") == None)
        self.assertTrue(trie.autoComplete("not") == "not")
        self.assertTrue(trie.autoComplete("noth") == "nothing")
        self.assertTrue(trie.autoComplete("nothi") == "nothing")
        self.assertTrue(trie.autoComplete("nothin") == "nothing")
        self.assertTrue(trie.autoComplete("nothing") == "nothing")
        self.assertTrue(trie.autoComplete("notw") == "notwithstanding")
        self.assertTrue(trie.autoComplete("notwi") == "notwithstanding")
        self.assertTrue(trie.autoComplete("notwit") == "notwithstanding")
        self.assertTrue(trie.autoComplete("notwith") == "notwithstanding")
        self.assertTrue(trie.autoComplete("notwiths") == "notwithstanding")
        self.assertTrue(trie.autoComplete("notwithst") == "notwithstanding")
        self.assertTrue(trie.autoComplete("notwithsta") == "notwithstanding")
        self.assertTrue(trie.autoComplete("notwithstan") == "notwithstanding")
        self.assertTrue(trie.autoComplete("notwithstand") == "notwithstanding")
        self.assertTrue(trie.autoComplete("notwithstandi") == "notwithstanding")
        self.assertTrue(trie.autoComplete("notwithstandin") == "notwithstanding")
        self.assertTrue(trie.autoComplete("notwithstanding") == "notwithstanding")
        self.assertTrue(trie.autoComplete("nou") == None)
        self.assertTrue(trie.autoComplete("nov") == None)
        self.assertTrue(trie.autoComplete("now") == "now")
        self.assertTrue(trie.autoComplete("nox") == None)
        self.assertTrue(trie.autoComplete("noy") == None)
        self.assertTrue(trie.autoComplete("noz") == None)
        self.assertTrue(trie.autoComplete("np") == None)
        self.assertTrue(trie.autoComplete("npa") == None)
        self.assertTrue(trie.autoComplete("npb") == None)
        self.assertTrue(trie.autoComplete("npc") == None)
        self.assertTrue(trie.autoComplete("npd") == None)
        self.assertTrue(trie.autoComplete("npe") == None)
        self.assertTrue(trie.autoComplete("npf") == None)
        self.assertTrue(trie.autoComplete("npg") == None)
        self.assertTrue(trie.autoComplete("nph") == None)
        self.assertTrue(trie.autoComplete("npi") == None)
        self.assertTrue(trie.autoComplete("npj") == None)
        self.assertTrue(trie.autoComplete("npk") == None)
        self.assertTrue(trie.autoComplete("npl") == None)
        self.assertTrue(trie.autoComplete("npm") == None)
        self.assertTrue(trie.autoComplete("npn") == None)
        self.assertTrue(trie.autoComplete("npo") == None)
        self.assertTrue(trie.autoComplete("npp") == None)
        self.assertTrue(trie.autoComplete("npq") == None)
        self.assertTrue(trie.autoComplete("npr") == None)
        self.assertTrue(trie.autoComplete("nps") == None)
        self.assertTrue(trie.autoComplete("npt") == None)
        self.assertTrue(trie.autoComplete("npu") == None)
        self.assertTrue(trie.autoComplete("npv") == None)
        self.assertTrue(trie.autoComplete("npw") == None)
        self.assertTrue(trie.autoComplete("npx") == None)
        self.assertTrue(trie.autoComplete("npy") == None)
        self.assertTrue(trie.autoComplete("npz") == None)
        self.assertTrue(trie.autoComplete("nq") == None)
        self.assertTrue(trie.autoComplete("nqa") == None)
        self.assertTrue(trie.autoComplete("nqb") == None)
        self.assertTrue(trie.autoComplete("nqc") == None)
        self.assertTrue(trie.autoComplete("nqd") == None)
        self.assertTrue(trie.autoComplete("nqe") == None)
        self.assertTrue(trie.autoComplete("nqf") == None)
        self.assertTrue(trie.autoComplete("nqg") == None)
        self.assertTrue(trie.autoComplete("nqh") == None)
        self.assertTrue(trie.autoComplete("nqi") == None)
        self.assertTrue(trie.autoComplete("nqj") == None)
        self.assertTrue(trie.autoComplete("nqk") == None)
        self.assertTrue(trie.autoComplete("nql") == None)
        self.assertTrue(trie.autoComplete("nqm") == None)
        self.assertTrue(trie.autoComplete("nqn") == None)
        self.assertTrue(trie.autoComplete("nqo") == None)
        self.assertTrue(trie.autoComplete("nqp") == None)
        self.assertTrue(trie.autoComplete("nqq") == None)
        self.assertTrue(trie.autoComplete("nqr") == None)
        self.assertTrue(trie.autoComplete("nqs") == None)
        self.assertTrue(trie.autoComplete("nqt") == None)
        self.assertTrue(trie.autoComplete("nqu") == None)
        self.assertTrue(trie.autoComplete("nqv") == None)
        self.assertTrue(trie.autoComplete("nqw") == None)
        self.assertTrue(trie.autoComplete("nqx") == None)
        self.assertTrue(trie.autoComplete("nqy") == None)
        self.assertTrue(trie.autoComplete("nqz") == None)
        self.assertTrue(trie.autoComplete("nr") == None)
        self.assertTrue(trie.autoComplete("nra") == None)
        self.assertTrue(trie.autoComplete("nrb") == None)
        self.assertTrue(trie.autoComplete("nrc") == None)
        self.assertTrue(trie.autoComplete("nrd") == None)
        self.assertTrue(trie.autoComplete("nre") == None)
        self.assertTrue(trie.autoComplete("nrf") == None)
        self.assertTrue(trie.autoComplete("nrg") == None)
        self.assertTrue(trie.autoComplete("nrh") == None)
        self.assertTrue(trie.autoComplete("nri") == None)
        self.assertTrue(trie.autoComplete("nrj") == None)
        self.assertTrue(trie.autoComplete("nrk") == None)
        self.assertTrue(trie.autoComplete("nrl") == None)
        self.assertTrue(trie.autoComplete("nrm") == None)
        self.assertTrue(trie.autoComplete("nrn") == None)
        self.assertTrue(trie.autoComplete("nro") == None)
        self.assertTrue(trie.autoComplete("nrp") == None)
        self.assertTrue(trie.autoComplete("nrq") == None)
        self.assertTrue(trie.autoComplete("nrr") == None)
        self.assertTrue(trie.autoComplete("nrs") == None)
        self.assertTrue(trie.autoComplete("nrt") == None)
        self.assertTrue(trie.autoComplete("nru") == None)
        self.assertTrue(trie.autoComplete("nrv") == None)
        self.assertTrue(trie.autoComplete("nrw") == None)
        self.assertTrue(trie.autoComplete("nrx") == None)
        self.assertTrue(trie.autoComplete("nry") == None)
        self.assertTrue(trie.autoComplete("nrz") == None)
        self.assertTrue(trie.autoComplete("ns") == None)
        self.assertTrue(trie.autoComplete("nsa") == None)
        self.assertTrue(trie.autoComplete("nsb") == None)
        self.assertTrue(trie.autoComplete("nsc") == None)
        self.assertTrue(trie.autoComplete("nsd") == None)
        self.assertTrue(trie.autoComplete("nse") == None)
        self.assertTrue(trie.autoComplete("nsf") == None)
        self.assertTrue(trie.autoComplete("nsg") == None)
        self.assertTrue(trie.autoComplete("nsh") == None)
        self.assertTrue(trie.autoComplete("nsi") == None)
        self.assertTrue(trie.autoComplete("nsj") == None)
        self.assertTrue(trie.autoComplete("nsk") == None)
        self.assertTrue(trie.autoComplete("nsl") == None)
        self.assertTrue(trie.autoComplete("nsm") == None)
        self.assertTrue(trie.autoComplete("nsn") == None)
        self.assertTrue(trie.autoComplete("nso") == None)
        self.assertTrue(trie.autoComplete("nsp") == None)
        self.assertTrue(trie.autoComplete("nsq") == None)
        self.assertTrue(trie.autoComplete("nsr") == None)
        self.assertTrue(trie.autoComplete("nss") == None)
        self.assertTrue(trie.autoComplete("nst") == None)
        self.assertTrue(trie.autoComplete("nsu") == None)
        self.assertTrue(trie.autoComplete("nsv") == None)
        self.assertTrue(trie.autoComplete("nsw") == None)
        self.assertTrue(trie.autoComplete("nsx") == None)
        self.assertTrue(trie.autoComplete("nsy") == None)
        self.assertTrue(trie.autoComplete("nsz") == None)
        self.assertTrue(trie.autoComplete("nt") == None)
        self.assertTrue(trie.autoComplete("nta") == None)
        self.assertTrue(trie.autoComplete("ntb") == None)
        self.assertTrue(trie.autoComplete("ntc") == None)
        self.assertTrue(trie.autoComplete("ntd") == None)
        self.assertTrue(trie.autoComplete("nte") == None)
        self.assertTrue(trie.autoComplete("ntf") == None)
        self.assertTrue(trie.autoComplete("ntg") == None)
        self.assertTrue(trie.autoComplete("nth") == None)
        self.assertTrue(trie.autoComplete("nti") == None)
        self.assertTrue(trie.autoComplete("ntj") == None)
        self.assertTrue(trie.autoComplete("ntk") == None)
        self.assertTrue(trie.autoComplete("ntl") == None)
        self.assertTrue(trie.autoComplete("ntm") == None)
        self.assertTrue(trie.autoComplete("ntn") == None)
        self.assertTrue(trie.autoComplete("nto") == None)
        self.assertTrue(trie.autoComplete("ntp") == None)
        self.assertTrue(trie.autoComplete("ntq") == None)
        self.assertTrue(trie.autoComplete("ntr") == None)
        self.assertTrue(trie.autoComplete("nts") == None)
        self.assertTrue(trie.autoComplete("ntt") == None)
        self.assertTrue(trie.autoComplete("ntu") == None)
        self.assertTrue(trie.autoComplete("ntv") == None)
        self.assertTrue(trie.autoComplete("ntw") == None)
        self.assertTrue(trie.autoComplete("ntx") == None)
        self.assertTrue(trie.autoComplete("nty") == None)
        self.assertTrue(trie.autoComplete("ntz") == None)
        self.assertTrue(trie.autoComplete("nu") == "number")
        self.assertTrue(trie.autoComplete("nua") == None)
        self.assertTrue(trie.autoComplete("nub") == None)
        self.assertTrue(trie.autoComplete("nuc") == None)
        self.assertTrue(trie.autoComplete("nud") == None)
        self.assertTrue(trie.autoComplete("nue") == None)
        self.assertTrue(trie.autoComplete("nuf") == None)
        self.assertTrue(trie.autoComplete("nug") == None)
        self.assertTrue(trie.autoComplete("nuh") == None)
        self.assertTrue(trie.autoComplete("nui") == None)
        self.assertTrue(trie.autoComplete("nuj") == None)
        self.assertTrue(trie.autoComplete("nuk") == None)
        self.assertTrue(trie.autoComplete("nul") == None)
        self.assertTrue(trie.autoComplete("num") == "number")
        self.assertTrue(trie.autoComplete("numb") == "number")
        self.assertTrue(trie.autoComplete("numbe") == "number")
        self.assertTrue(trie.autoComplete("number") == "number")
        self.assertTrue(trie.autoComplete("numbers") == "numbers")
        self.assertTrue(trie.autoComplete("nume") == "numerous")
        self.assertTrue(trie.autoComplete("numer") == "numerous")
        self.assertTrue(trie.autoComplete("numero") == "numerous")
        self.assertTrue(trie.autoComplete("numerou") == "numerous")
        self.assertTrue(trie.autoComplete("numerous") == "numerous")
        self.assertTrue(trie.autoComplete("nun") == None)
        self.assertTrue(trie.autoComplete("nuo") == None)
        self.assertTrue(trie.autoComplete("nup") == None)
        self.assertTrue(trie.autoComplete("nuq") == None)
        self.assertTrue(trie.autoComplete("nur") == None)
        self.assertTrue(trie.autoComplete("nus") == None)
        self.assertTrue(trie.autoComplete("nut") == None)
        self.assertTrue(trie.autoComplete("nuu") == None)
        self.assertTrue(trie.autoComplete("nuv") == None)
        self.assertTrue(trie.autoComplete("nuw") == None)
        self.assertTrue(trie.autoComplete("nux") == None)
        self.assertTrue(trie.autoComplete("nuy") == None)
        self.assertTrue(trie.autoComplete("nuz") == None)
        self.assertTrue(trie.autoComplete("nv") == None)
        self.assertTrue(trie.autoComplete("nva") == None)
        self.assertTrue(trie.autoComplete("nvb") == None)
        self.assertTrue(trie.autoComplete("nvc") == None)
        self.assertTrue(trie.autoComplete("nvd") == None)
        self.assertTrue(trie.autoComplete("nve") == None)
        self.assertTrue(trie.autoComplete("nvf") == None)
        self.assertTrue(trie.autoComplete("nvg") == None)
        self.assertTrue(trie.autoComplete("nvh") == None)
        self.assertTrue(trie.autoComplete("nvi") == None)
        self.assertTrue(trie.autoComplete("nvj") == None)
        self.assertTrue(trie.autoComplete("nvk") == None)
        self.assertTrue(trie.autoComplete("nvl") == None)
        self.assertTrue(trie.autoComplete("nvm") == None)
        self.assertTrue(trie.autoComplete("nvn") == None)
        self.assertTrue(trie.autoComplete("nvo") == None)
        self.assertTrue(trie.autoComplete("nvp") == None)
        self.assertTrue(trie.autoComplete("nvq") == None)
        self.assertTrue(trie.autoComplete("nvr") == None)
        self.assertTrue(trie.autoComplete("nvs") == None)
        self.assertTrue(trie.autoComplete("nvt") == None)
        self.assertTrue(trie.autoComplete("nvu") == None)
        self.assertTrue(trie.autoComplete("nvv") == None)
        self.assertTrue(trie.autoComplete("nvw") == None)
        self.assertTrue(trie.autoComplete("nvx") == None)
        self.assertTrue(trie.autoComplete("nvy") == None)
        self.assertTrue(trie.autoComplete("nvz") == None)
        self.assertTrue(trie.autoComplete("nw") == None)
        self.assertTrue(trie.autoComplete("nwa") == None)
        self.assertTrue(trie.autoComplete("nwb") == None)
        self.assertTrue(trie.autoComplete("nwc") == None)
        self.assertTrue(trie.autoComplete("nwd") == None)
        self.assertTrue(trie.autoComplete("nwe") == None)
        self.assertTrue(trie.autoComplete("nwf") == None)
        self.assertTrue(trie.autoComplete("nwg") == None)
        self.assertTrue(trie.autoComplete("nwh") == None)
        self.assertTrue(trie.autoComplete("nwi") == None)
        self.assertTrue(trie.autoComplete("nwj") == None)
        self.assertTrue(trie.autoComplete("nwk") == None)
        self.assertTrue(trie.autoComplete("nwl") == None)
        self.assertTrue(trie.autoComplete("nwm") == None)
        self.assertTrue(trie.autoComplete("nwn") == None)
        self.assertTrue(trie.autoComplete("nwo") == None)
        self.assertTrue(trie.autoComplete("nwp") == None)
        self.assertTrue(trie.autoComplete("nwq") == None)
        self.assertTrue(trie.autoComplete("nwr") == None)
        self.assertTrue(trie.autoComplete("nws") == None)
        self.assertTrue(trie.autoComplete("nwt") == None)
        self.assertTrue(trie.autoComplete("nwu") == None)
        self.assertTrue(trie.autoComplete("nwv") == None)
        self.assertTrue(trie.autoComplete("nww") == None)
        self.assertTrue(trie.autoComplete("nwx") == None)
        self.assertTrue(trie.autoComplete("nwy") == None)
        self.assertTrue(trie.autoComplete("nwz") == None)
        self.assertTrue(trie.autoComplete("nx") == None)
        self.assertTrue(trie.autoComplete("nxa") == None)
        self.assertTrue(trie.autoComplete("nxb") == None)
        self.assertTrue(trie.autoComplete("nxc") == None)
        self.assertTrue(trie.autoComplete("nxd") == None)
        self.assertTrue(trie.autoComplete("nxe") == None)
        self.assertTrue(trie.autoComplete("nxf") == None)
        self.assertTrue(trie.autoComplete("nxg") == None)
        self.assertTrue(trie.autoComplete("nxh") == None)
        self.assertTrue(trie.autoComplete("nxi") == None)
        self.assertTrue(trie.autoComplete("nxj") == None)
        self.assertTrue(trie.autoComplete("nxk") == None)
        self.assertTrue(trie.autoComplete("nxl") == None)
        self.assertTrue(trie.autoComplete("nxm") == None)
        self.assertTrue(trie.autoComplete("nxn") == None)
        self.assertTrue(trie.autoComplete("nxo") == None)
        self.assertTrue(trie.autoComplete("nxp") == None)
        self.assertTrue(trie.autoComplete("nxq") == None)
        self.assertTrue(trie.autoComplete("nxr") == None)
        self.assertTrue(trie.autoComplete("nxs") == None)
        self.assertTrue(trie.autoComplete("nxt") == None)
        self.assertTrue(trie.autoComplete("nxu") == None)
        self.assertTrue(trie.autoComplete("nxv") == None)
        self.assertTrue(trie.autoComplete("nxw") == None)
        self.assertTrue(trie.autoComplete("nxx") == None)
        self.assertTrue(trie.autoComplete("nxy") == None)
        self.assertTrue(trie.autoComplete("nxz") == None)
        self.assertTrue(trie.autoComplete("ny") == None)
        self.assertTrue(trie.autoComplete("nya") == None)
        self.assertTrue(trie.autoComplete("nyb") == None)
        self.assertTrue(trie.autoComplete("nyc") == None)
        self.assertTrue(trie.autoComplete("nyd") == None)
        self.assertTrue(trie.autoComplete("nye") == None)
        self.assertTrue(trie.autoComplete("nyf") == None)
        self.assertTrue(trie.autoComplete("nyg") == None)
        self.assertTrue(trie.autoComplete("nyh") == None)
        self.assertTrue(trie.autoComplete("nyi") == None)
        self.assertTrue(trie.autoComplete("nyj") == None)
        self.assertTrue(trie.autoComplete("nyk") == None)
        self.assertTrue(trie.autoComplete("nyl") == None)
        self.assertTrue(trie.autoComplete("nym") == None)
        self.assertTrue(trie.autoComplete("nyn") == None)
        self.assertTrue(trie.autoComplete("nyo") == None)
        self.assertTrue(trie.autoComplete("nyp") == None)
        self.assertTrue(trie.autoComplete("nyq") == None)
        self.assertTrue(trie.autoComplete("nyr") == None)
        self.assertTrue(trie.autoComplete("nys") == None)
        self.assertTrue(trie.autoComplete("nyt") == None)
        self.assertTrue(trie.autoComplete("nyu") == None)
        self.assertTrue(trie.autoComplete("nyv") == None)
        self.assertTrue(trie.autoComplete("nyw") == None)
        self.assertTrue(trie.autoComplete("nyx") == None)
        self.assertTrue(trie.autoComplete("nyy") == None)
        self.assertTrue(trie.autoComplete("nyz") == None)
        self.assertTrue(trie.autoComplete("nz") == None)
        self.assertTrue(trie.autoComplete("nza") == None)
        self.assertTrue(trie.autoComplete("nzb") == None)
        self.assertTrue(trie.autoComplete("nzc") == None)
        self.assertTrue(trie.autoComplete("nzd") == None)
        self.assertTrue(trie.autoComplete("nze") == None)
        self.assertTrue(trie.autoComplete("nzf") == None)
        self.assertTrue(trie.autoComplete("nzg") == None)
        self.assertTrue(trie.autoComplete("nzh") == None)
        self.assertTrue(trie.autoComplete("nzi") == None)
        self.assertTrue(trie.autoComplete("nzj") == None)
        self.assertTrue(trie.autoComplete("nzk") == None)
        self.assertTrue(trie.autoComplete("nzl") == None)
        self.assertTrue(trie.autoComplete("nzm") == None)
        self.assertTrue(trie.autoComplete("nzn") == None)
        self.assertTrue(trie.autoComplete("nzo") == None)
        self.assertTrue(trie.autoComplete("nzp") == None)
        self.assertTrue(trie.autoComplete("nzq") == None)
        self.assertTrue(trie.autoComplete("nzr") == None)
        self.assertTrue(trie.autoComplete("nzs") == None)
        self.assertTrue(trie.autoComplete("nzt") == None)
        self.assertTrue(trie.autoComplete("nzu") == None)
        self.assertTrue(trie.autoComplete("nzv") == None)
        self.assertTrue(trie.autoComplete("nzw") == None)
        self.assertTrue(trie.autoComplete("nzx") == None)
        self.assertTrue(trie.autoComplete("nzy") == None)
        self.assertTrue(trie.autoComplete("nzz") == None)
        self.assertTrue(trie.autoComplete("o") == "of")
        self.assertTrue(trie.autoComplete("oa") == "oath")
        self.assertTrue(trie.autoComplete("oaa") == None)
        self.assertTrue(trie.autoComplete("oab") == None)
        self.assertTrue(trie.autoComplete("oac") == None)
        self.assertTrue(trie.autoComplete("oad") == None)
        self.assertTrue(trie.autoComplete("oae") == None)
        self.assertTrue(trie.autoComplete("oaf") == None)
        self.assertTrue(trie.autoComplete("oag") == None)
        self.assertTrue(trie.autoComplete("oah") == None)
        self.assertTrue(trie.autoComplete("oai") == None)
        self.assertTrue(trie.autoComplete("oaj") == None)
        self.assertTrue(trie.autoComplete("oak") == None)
        self.assertTrue(trie.autoComplete("oal") == None)
        self.assertTrue(trie.autoComplete("oam") == None)
        self.assertTrue(trie.autoComplete("oan") == None)
        self.assertTrue(trie.autoComplete("oao") == None)
        self.assertTrue(trie.autoComplete("oap") == None)
        self.assertTrue(trie.autoComplete("oaq") == None)
        self.assertTrue(trie.autoComplete("oar") == None)
        self.assertTrue(trie.autoComplete("oas") == None)
        self.assertTrue(trie.autoComplete("oat") == "oath")
        self.assertTrue(trie.autoComplete("oath") == "oath")
        self.assertTrue(trie.autoComplete("oau") == None)
        self.assertTrue(trie.autoComplete("oav") == None)
        self.assertTrue(trie.autoComplete("oaw") == None)
        self.assertTrue(trie.autoComplete("oax") == None)
        self.assertTrue(trie.autoComplete("oay") == None)
        self.assertTrue(trie.autoComplete("oaz") == None)
        self.assertTrue(trie.autoComplete("ob") == "objections")
        self.assertTrue(trie.autoComplete("oba") == None)
        self.assertTrue(trie.autoComplete("obb") == None)
        self.assertTrue(trie.autoComplete("obc") == None)
        self.assertTrue(trie.autoComplete("obd") == None)
        self.assertTrue(trie.autoComplete("obe") == None)
        self.assertTrue(trie.autoComplete("obf") == None)
        self.assertTrue(trie.autoComplete("obg") == None)
        self.assertTrue(trie.autoComplete("obh") == None)
        self.assertTrue(trie.autoComplete("obi") == None)
        self.assertTrue(trie.autoComplete("obj") == "objections")
        self.assertTrue(trie.autoComplete("obje") == "objections")
        self.assertTrue(trie.autoComplete("objec") == "objections")
        self.assertTrue(trie.autoComplete("object") == "objections")
        self.assertTrue(trie.autoComplete("objecti") == "objections")
        self.assertTrue(trie.autoComplete("objectio") == "objections")
        self.assertTrue(trie.autoComplete("objection") == "objections")
        self.assertTrue(trie.autoComplete("objections") == "objections")
        self.assertTrue(trie.autoComplete("obk") == None)
        self.assertTrue(trie.autoComplete("obl") == "obligation")
        self.assertTrue(trie.autoComplete("obli") == "obligation")
        self.assertTrue(trie.autoComplete("oblig") == "obligation")
        self.assertTrue(trie.autoComplete("obliga") == "obligation")
        self.assertTrue(trie.autoComplete("obligat") == "obligation")
        self.assertTrue(trie.autoComplete("obligati") == "obligation")
        self.assertTrue(trie.autoComplete("obligatio") == "obligation")
        self.assertTrue(trie.autoComplete("obligation") == "obligation")
        self.assertTrue(trie.autoComplete("obligations") == "obligations")
        self.assertTrue(trie.autoComplete("oblige") == "obliged")
        self.assertTrue(trie.autoComplete("obliged") == "obliged")
        self.assertTrue(trie.autoComplete("obm") == None)
        self.assertTrue(trie.autoComplete("obn") == None)
        self.assertTrue(trie.autoComplete("obo") == None)
        self.assertTrue(trie.autoComplete("obp") == None)
        self.assertTrue(trie.autoComplete("obq") == None)
        self.assertTrue(trie.autoComplete("obr") == None)
        self.assertTrue(trie.autoComplete("obs") == None)
        self.assertTrue(trie.autoComplete("obt") == "obtaining")
        self.assertTrue(trie.autoComplete("obta") == "obtaining")
        self.assertTrue(trie.autoComplete("obtai") == "obtaining")
        self.assertTrue(trie.autoComplete("obtain") == "obtaining")
        self.assertTrue(trie.autoComplete("obtaini") == "obtaining")
        self.assertTrue(trie.autoComplete("obtainin") == "obtaining")
        self.assertTrue(trie.autoComplete("obtaining") == "obtaining")
        self.assertTrue(trie.autoComplete("obu") == None)
        self.assertTrue(trie.autoComplete("obv") == None)
        self.assertTrue(trie.autoComplete("obw") == None)
        self.assertTrue(trie.autoComplete("obx") == None)
        self.assertTrue(trie.autoComplete("oby") == None)
        self.assertTrue(trie.autoComplete("obz") == None)
        self.assertTrue(trie.autoComplete("oc") == "occasions")
        self.assertTrue(trie.autoComplete("oca") == None)
        self.assertTrue(trie.autoComplete("ocb") == None)
        self.assertTrue(trie.autoComplete("occ") == "occasions")
        self.assertTrue(trie.autoComplete("occa") == "occasions")
        self.assertTrue(trie.autoComplete("occas") == "occasions")
        self.assertTrue(trie.autoComplete("occasi") == "occasions")
        self.assertTrue(trie.autoComplete("occasio") == "occasions")
        self.assertTrue(trie.autoComplete("occasion") == "occasions")
        self.assertTrue(trie.autoComplete("occasions") == "occasions")
        self.assertTrue(trie.autoComplete("ocd") == None)
        self.assertTrue(trie.autoComplete("oce") == None)
        self.assertTrue(trie.autoComplete("ocf") == None)
        self.assertTrue(trie.autoComplete("ocg") == None)
        self.assertTrue(trie.autoComplete("och") == None)
        self.assertTrue(trie.autoComplete("oci") == None)
        self.assertTrue(trie.autoComplete("ocj") == None)
        self.assertTrue(trie.autoComplete("ock") == None)
        self.assertTrue(trie.autoComplete("ocl") == None)
        self.assertTrue(trie.autoComplete("ocm") == None)
        self.assertTrue(trie.autoComplete("ocn") == None)
        self.assertTrue(trie.autoComplete("oco") == None)
        self.assertTrue(trie.autoComplete("ocp") == None)
        self.assertTrue(trie.autoComplete("ocq") == None)
        self.assertTrue(trie.autoComplete("ocr") == None)
        self.assertTrue(trie.autoComplete("ocs") == None)
        self.assertTrue(trie.autoComplete("oct") == "october")
        self.assertTrue(trie.autoComplete("octo") == "october")
        self.assertTrue(trie.autoComplete("octob") == "october")
        self.assertTrue(trie.autoComplete("octobe") == "october")
        self.assertTrue(trie.autoComplete("october") == "october")
        self.assertTrue(trie.autoComplete("ocu") == None)
        self.assertTrue(trie.autoComplete("ocv") == None)
        self.assertTrue(trie.autoComplete("ocw") == None)
        self.assertTrue(trie.autoComplete("ocx") == None)
        self.assertTrue(trie.autoComplete("ocy") == None)
        self.assertTrue(trie.autoComplete("ocz") == None)
        self.assertTrue(trie.autoComplete("od") == None)
        self.assertTrue(trie.autoComplete("oda") == None)
        self.assertTrue(trie.autoComplete("odb") == None)
        self.assertTrue(trie.autoComplete("odc") == None)
        self.assertTrue(trie.autoComplete("odd") == None)
        self.assertTrue(trie.autoComplete("ode") == None)
        self.assertTrue(trie.autoComplete("odf") == None)
        self.assertTrue(trie.autoComplete("odg") == None)
        self.assertTrue(trie.autoComplete("odh") == None)
        self.assertTrue(trie.autoComplete("odi") == None)
        self.assertTrue(trie.autoComplete("odj") == None)
        self.assertTrue(trie.autoComplete("odk") == None)
        self.assertTrue(trie.autoComplete("odl") == None)
        self.assertTrue(trie.autoComplete("odm") == None)
        self.assertTrue(trie.autoComplete("odn") == None)
        self.assertTrue(trie.autoComplete("odo") == None)
        self.assertTrue(trie.autoComplete("odp") == None)
        self.assertTrue(trie.autoComplete("odq") == None)
        self.assertTrue(trie.autoComplete("odr") == None)
        self.assertTrue(trie.autoComplete("ods") == None)
        self.assertTrue(trie.autoComplete("odt") == None)
        self.assertTrue(trie.autoComplete("odu") == None)
        self.assertTrue(trie.autoComplete("odv") == None)
        self.assertTrue(trie.autoComplete("odw") == None)
        self.assertTrue(trie.autoComplete("odx") == None)
        self.assertTrue(trie.autoComplete("ody") == None)
        self.assertTrue(trie.autoComplete("odz") == None)
        self.assertTrue(trie.autoComplete("oe") == None)
        self.assertTrue(trie.autoComplete("oea") == None)
        self.assertTrue(trie.autoComplete("oeb") == None)
        self.assertTrue(trie.autoComplete("oec") == None)
        self.assertTrue(trie.autoComplete("oed") == None)
        self.assertTrue(trie.autoComplete("oee") == None)
        self.assertTrue(trie.autoComplete("oef") == None)
        self.assertTrue(trie.autoComplete("oeg") == None)
        self.assertTrue(trie.autoComplete("oeh") == None)
        self.assertTrue(trie.autoComplete("oei") == None)
        self.assertTrue(trie.autoComplete("oej") == None)
        self.assertTrue(trie.autoComplete("oek") == None)
        self.assertTrue(trie.autoComplete("oel") == None)
        self.assertTrue(trie.autoComplete("oem") == None)
        self.assertTrue(trie.autoComplete("oen") == None)
        self.assertTrue(trie.autoComplete("oeo") == None)
        self.assertTrue(trie.autoComplete("oep") == None)
        self.assertTrue(trie.autoComplete("oeq") == None)
        self.assertTrue(trie.autoComplete("oer") == None)
        self.assertTrue(trie.autoComplete("oes") == None)
        self.assertTrue(trie.autoComplete("oet") == None)
        self.assertTrue(trie.autoComplete("oeu") == None)
        self.assertTrue(trie.autoComplete("oev") == None)
        self.assertTrue(trie.autoComplete("oew") == None)
        self.assertTrue(trie.autoComplete("oex") == None)
        self.assertTrue(trie.autoComplete("oey") == None)
        self.assertTrue(trie.autoComplete("oez") == None)
        self.assertTrue(trie.autoComplete("of") == "of")
        self.assertTrue(trie.autoComplete("ofa") == None)
        self.assertTrue(trie.autoComplete("ofb") == None)
        self.assertTrue(trie.autoComplete("ofc") == None)
        self.assertTrue(trie.autoComplete("ofd") == None)
        self.assertTrue(trie.autoComplete("ofe") == None)
        self.assertTrue(trie.autoComplete("off") == "office")
        self.assertTrue(trie.autoComplete("offe") == "offenses")
        self.assertTrue(trie.autoComplete("offen") == "offenses")
        self.assertTrue(trie.autoComplete("offenc") == "offence")
        self.assertTrue(trie.autoComplete("offence") == "offence")
        self.assertTrue(trie.autoComplete("offens") == "offenses")
        self.assertTrue(trie.autoComplete("offense") == "offenses")
        self.assertTrue(trie.autoComplete("offenses") == "offenses")
        self.assertTrue(trie.autoComplete("offi") == "office")
        self.assertTrue(trie.autoComplete("offic") == "office")
        self.assertTrue(trie.autoComplete("office") == "office")
        self.assertTrue(trie.autoComplete("officer") == "officers")
        self.assertTrue(trie.autoComplete("officers") == "officers")
        self.assertTrue(trie.autoComplete("offices") == "offices")
        self.assertTrue(trie.autoComplete("ofg") == None)
        self.assertTrue(trie.autoComplete("ofh") == None)
        self.assertTrue(trie.autoComplete("ofi") == None)
        self.assertTrue(trie.autoComplete("ofj") == None)
        self.assertTrue(trie.autoComplete("ofk") == None)
        self.assertTrue(trie.autoComplete("ofl") == None)
        self.assertTrue(trie.autoComplete("ofm") == None)
        self.assertTrue(trie.autoComplete("ofn") == None)
        self.assertTrue(trie.autoComplete("ofo") == None)
        self.assertTrue(trie.autoComplete("ofp") == None)
        self.assertTrue(trie.autoComplete("ofq") == None)
        self.assertTrue(trie.autoComplete("ofr") == None)
        self.assertTrue(trie.autoComplete("ofs") == None)
        self.assertTrue(trie.autoComplete("oft") == None)
        self.assertTrue(trie.autoComplete("ofu") == None)
        self.assertTrue(trie.autoComplete("ofv") == None)
        self.assertTrue(trie.autoComplete("ofw") == None)
        self.assertTrue(trie.autoComplete("ofx") == None)
        self.assertTrue(trie.autoComplete("ofy") == None)
        self.assertTrue(trie.autoComplete("ofz") == None)
        self.assertTrue(trie.autoComplete("og") == None)
        self.assertTrue(trie.autoComplete("oga") == None)
        self.assertTrue(trie.autoComplete("ogb") == None)
        self.assertTrue(trie.autoComplete("ogc") == None)
        self.assertTrue(trie.autoComplete("ogd") == None)
        self.assertTrue(trie.autoComplete("oge") == None)
        self.assertTrue(trie.autoComplete("ogf") == None)
        self.assertTrue(trie.autoComplete("ogg") == None)
        self.assertTrue(trie.autoComplete("ogh") == None)
        self.assertTrue(trie.autoComplete("ogi") == None)
        self.assertTrue(trie.autoComplete("ogj") == None)
        self.assertTrue(trie.autoComplete("ogk") == None)
        self.assertTrue(trie.autoComplete("ogl") == None)
        self.assertTrue(trie.autoComplete("ogm") == None)
        self.assertTrue(trie.autoComplete("ogn") == None)
        self.assertTrue(trie.autoComplete("ogo") == None)
        self.assertTrue(trie.autoComplete("ogp") == None)
        self.assertTrue(trie.autoComplete("ogq") == None)
        self.assertTrue(trie.autoComplete("ogr") == None)
        self.assertTrue(trie.autoComplete("ogs") == None)
        self.assertTrue(trie.autoComplete("ogt") == None)
        self.assertTrue(trie.autoComplete("ogu") == None)
        self.assertTrue(trie.autoComplete("ogv") == None)
        self.assertTrue(trie.autoComplete("ogw") == None)
        self.assertTrue(trie.autoComplete("ogx") == None)
        self.assertTrue(trie.autoComplete("ogy") == None)
        self.assertTrue(trie.autoComplete("ogz") == None)
        self.assertTrue(trie.autoComplete("oh") == None)
        self.assertTrue(trie.autoComplete("oha") == None)
        self.assertTrue(trie.autoComplete("ohb") == None)
        self.assertTrue(trie.autoComplete("ohc") == None)
        self.assertTrue(trie.autoComplete("ohd") == None)
        self.assertTrue(trie.autoComplete("ohe") == None)
        self.assertTrue(trie.autoComplete("ohf") == None)
        self.assertTrue(trie.autoComplete("ohg") == None)
        self.assertTrue(trie.autoComplete("ohh") == None)
        self.assertTrue(trie.autoComplete("ohi") == None)
        self.assertTrue(trie.autoComplete("ohj") == None)
        self.assertTrue(trie.autoComplete("ohk") == None)
        self.assertTrue(trie.autoComplete("ohl") == None)
        self.assertTrue(trie.autoComplete("ohm") == None)
        self.assertTrue(trie.autoComplete("ohn") == None)
        self.assertTrue(trie.autoComplete("oho") == None)
        self.assertTrue(trie.autoComplete("ohp") == None)
        self.assertTrue(trie.autoComplete("ohq") == None)
        self.assertTrue(trie.autoComplete("ohr") == None)
        self.assertTrue(trie.autoComplete("ohs") == None)
        self.assertTrue(trie.autoComplete("oht") == None)
        self.assertTrue(trie.autoComplete("ohu") == None)
        self.assertTrue(trie.autoComplete("ohv") == None)
        self.assertTrue(trie.autoComplete("ohw") == None)
        self.assertTrue(trie.autoComplete("ohx") == None)
        self.assertTrue(trie.autoComplete("ohy") == None)
        self.assertTrue(trie.autoComplete("ohz") == None)
        self.assertTrue(trie.autoComplete("oi") == None)
        self.assertTrue(trie.autoComplete("oia") == None)
        self.assertTrue(trie.autoComplete("oib") == None)
        self.assertTrue(trie.autoComplete("oic") == None)
        self.assertTrue(trie.autoComplete("oid") == None)
        self.assertTrue(trie.autoComplete("oie") == None)
        self.assertTrue(trie.autoComplete("oif") == None)
        self.assertTrue(trie.autoComplete("oig") == None)
        self.assertTrue(trie.autoComplete("oih") == None)
        self.assertTrue(trie.autoComplete("oii") == None)
        self.assertTrue(trie.autoComplete("oij") == None)
        self.assertTrue(trie.autoComplete("oik") == None)
        self.assertTrue(trie.autoComplete("oil") == None)
        self.assertTrue(trie.autoComplete("oim") == None)
        self.assertTrue(trie.autoComplete("oin") == None)
        self.assertTrue(trie.autoComplete("oio") == None)
        self.assertTrue(trie.autoComplete("oip") == None)
        self.assertTrue(trie.autoComplete("oiq") == None)
        self.assertTrue(trie.autoComplete("oir") == None)
        self.assertTrue(trie.autoComplete("ois") == None)
        self.assertTrue(trie.autoComplete("oit") == None)
        self.assertTrue(trie.autoComplete("oiu") == None)
        self.assertTrue(trie.autoComplete("oiv") == None)
        self.assertTrue(trie.autoComplete("oiw") == None)
        self.assertTrue(trie.autoComplete("oix") == None)
        self.assertTrue(trie.autoComplete("oiy") == None)
        self.assertTrue(trie.autoComplete("oiz") == None)
        self.assertTrue(trie.autoComplete("oj") == None)
        self.assertTrue(trie.autoComplete("oja") == None)
        self.assertTrue(trie.autoComplete("ojb") == None)
        self.assertTrue(trie.autoComplete("ojc") == None)
        self.assertTrue(trie.autoComplete("ojd") == None)
        self.assertTrue(trie.autoComplete("oje") == None)
        self.assertTrue(trie.autoComplete("ojf") == None)
        self.assertTrue(trie.autoComplete("ojg") == None)
        self.assertTrue(trie.autoComplete("ojh") == None)
        self.assertTrue(trie.autoComplete("oji") == None)
        self.assertTrue(trie.autoComplete("ojj") == None)
        self.assertTrue(trie.autoComplete("ojk") == None)
        self.assertTrue(trie.autoComplete("ojl") == None)
        self.assertTrue(trie.autoComplete("ojm") == None)
        self.assertTrue(trie.autoComplete("ojn") == None)
        self.assertTrue(trie.autoComplete("ojo") == None)
        self.assertTrue(trie.autoComplete("ojp") == None)
        self.assertTrue(trie.autoComplete("ojq") == None)
        self.assertTrue(trie.autoComplete("ojr") == None)
        self.assertTrue(trie.autoComplete("ojs") == None)
        self.assertTrue(trie.autoComplete("ojt") == None)
        self.assertTrue(trie.autoComplete("oju") == None)
        self.assertTrue(trie.autoComplete("ojv") == None)
        self.assertTrue(trie.autoComplete("ojw") == None)
        self.assertTrue(trie.autoComplete("ojx") == None)
        self.assertTrue(trie.autoComplete("ojy") == None)
        self.assertTrue(trie.autoComplete("ojz") == None)
        self.assertTrue(trie.autoComplete("ok") == None)
        self.assertTrue(trie.autoComplete("oka") == None)
        self.assertTrue(trie.autoComplete("okb") == None)
        self.assertTrue(trie.autoComplete("okc") == None)
        self.assertTrue(trie.autoComplete("okd") == None)
        self.assertTrue(trie.autoComplete("oke") == None)
        self.assertTrue(trie.autoComplete("okf") == None)
        self.assertTrue(trie.autoComplete("okg") == None)
        self.assertTrue(trie.autoComplete("okh") == None)
        self.assertTrue(trie.autoComplete("oki") == None)
        self.assertTrue(trie.autoComplete("okj") == None)
        self.assertTrue(trie.autoComplete("okk") == None)
        self.assertTrue(trie.autoComplete("okl") == None)
        self.assertTrue(trie.autoComplete("okm") == None)
        self.assertTrue(trie.autoComplete("okn") == None)
        self.assertTrue(trie.autoComplete("oko") == None)
        self.assertTrue(trie.autoComplete("okp") == None)
        self.assertTrue(trie.autoComplete("okq") == None)
        self.assertTrue(trie.autoComplete("okr") == None)
        self.assertTrue(trie.autoComplete("oks") == None)
        self.assertTrue(trie.autoComplete("okt") == None)
        self.assertTrue(trie.autoComplete("oku") == None)
        self.assertTrue(trie.autoComplete("okv") == None)
        self.assertTrue(trie.autoComplete("okw") == None)
        self.assertTrue(trie.autoComplete("okx") == None)
        self.assertTrue(trie.autoComplete("oky") == None)
        self.assertTrue(trie.autoComplete("okz") == None)
        self.assertTrue(trie.autoComplete("ol") == "older")
        self.assertTrue(trie.autoComplete("ola") == None)
        self.assertTrue(trie.autoComplete("olb") == None)
        self.assertTrue(trie.autoComplete("olc") == None)
        self.assertTrue(trie.autoComplete("old") == "older")
        self.assertTrue(trie.autoComplete("olde") == "older")
        self.assertTrue(trie.autoComplete("older") == "older")
        self.assertTrue(trie.autoComplete("ole") == None)
        self.assertTrue(trie.autoComplete("olf") == None)
        self.assertTrue(trie.autoComplete("olg") == None)
        self.assertTrue(trie.autoComplete("olh") == None)
        self.assertTrue(trie.autoComplete("oli") == None)
        self.assertTrue(trie.autoComplete("olj") == None)
        self.assertTrue(trie.autoComplete("olk") == None)
        self.assertTrue(trie.autoComplete("oll") == None)
        self.assertTrue(trie.autoComplete("olm") == None)
        self.assertTrue(trie.autoComplete("oln") == None)
        self.assertTrue(trie.autoComplete("olo") == None)
        self.assertTrue(trie.autoComplete("olp") == None)
        self.assertTrue(trie.autoComplete("olq") == None)
        self.assertTrue(trie.autoComplete("olr") == None)
        self.assertTrue(trie.autoComplete("ols") == None)
        self.assertTrue(trie.autoComplete("olt") == None)
        self.assertTrue(trie.autoComplete("olu") == None)
        self.assertTrue(trie.autoComplete("olv") == None)
        self.assertTrue(trie.autoComplete("olw") == None)
        self.assertTrue(trie.autoComplete("olx") == None)
        self.assertTrue(trie.autoComplete("oly") == None)
        self.assertTrue(trie.autoComplete("olz") == None)
        self.assertTrue(trie.autoComplete("om") == None)
        self.assertTrue(trie.autoComplete("oma") == None)
        self.assertTrue(trie.autoComplete("omb") == None)
        self.assertTrue(trie.autoComplete("omc") == None)
        self.assertTrue(trie.autoComplete("omd") == None)
        self.assertTrue(trie.autoComplete("ome") == None)
        self.assertTrue(trie.autoComplete("omf") == None)
        self.assertTrue(trie.autoComplete("omg") == None)
        self.assertTrue(trie.autoComplete("omh") == None)
        self.assertTrue(trie.autoComplete("omi") == None)
        self.assertTrue(trie.autoComplete("omj") == None)
        self.assertTrue(trie.autoComplete("omk") == None)
        self.assertTrue(trie.autoComplete("oml") == None)
        self.assertTrue(trie.autoComplete("omm") == None)
        self.assertTrue(trie.autoComplete("omn") == None)
        self.assertTrue(trie.autoComplete("omo") == None)
        self.assertTrue(trie.autoComplete("omp") == None)
        self.assertTrue(trie.autoComplete("omq") == None)
        self.assertTrue(trie.autoComplete("omr") == None)
        self.assertTrue(trie.autoComplete("oms") == None)
        self.assertTrue(trie.autoComplete("omt") == None)
        self.assertTrue(trie.autoComplete("omu") == None)
        self.assertTrue(trie.autoComplete("omv") == None)
        self.assertTrue(trie.autoComplete("omw") == None)
        self.assertTrue(trie.autoComplete("omx") == None)
        self.assertTrue(trie.autoComplete("omy") == None)
        self.assertTrue(trie.autoComplete("omz") == None)
        self.assertTrue(trie.autoComplete("on") == "one")
        self.assertTrue(trie.autoComplete("ona") == None)
        self.assertTrue(trie.autoComplete("onb") == None)
        self.assertTrue(trie.autoComplete("onc") == "once")
        self.assertTrue(trie.autoComplete("once") == "once")
        self.assertTrue(trie.autoComplete("ond") == None)
        self.assertTrue(trie.autoComplete("one") == "one")
        self.assertTrue(trie.autoComplete("onf") == None)
        self.assertTrue(trie.autoComplete("ong") == None)
        self.assertTrue(trie.autoComplete("onh") == None)
        self.assertTrue(trie.autoComplete("oni") == None)
        self.assertTrue(trie.autoComplete("onj") == None)
        self.assertTrue(trie.autoComplete("onk") == None)
        self.assertTrue(trie.autoComplete("onl") == "only")
        self.assertTrue(trie.autoComplete("only") == "only")
        self.assertTrue(trie.autoComplete("onm") == None)
        self.assertTrue(trie.autoComplete("onn") == None)
        self.assertTrue(trie.autoComplete("ono") == None)
        self.assertTrue(trie.autoComplete("onp") == None)
        self.assertTrue(trie.autoComplete("onq") == None)
        self.assertTrue(trie.autoComplete("onr") == None)
        self.assertTrue(trie.autoComplete("ons") == None)
        self.assertTrue(trie.autoComplete("ont") == None)
        self.assertTrue(trie.autoComplete("onu") == None)
        self.assertTrue(trie.autoComplete("onv") == None)
        self.assertTrue(trie.autoComplete("onw") == None)
        self.assertTrue(trie.autoComplete("onx") == None)
        self.assertTrue(trie.autoComplete("ony") == None)
        self.assertTrue(trie.autoComplete("onz") == None)
        self.assertTrue(trie.autoComplete("oo") == None)
        self.assertTrue(trie.autoComplete("ooa") == None)
        self.assertTrue(trie.autoComplete("oob") == None)
        self.assertTrue(trie.autoComplete("ooc") == None)
        self.assertTrue(trie.autoComplete("ood") == None)
        self.assertTrue(trie.autoComplete("ooe") == None)
        self.assertTrue(trie.autoComplete("oof") == None)
        self.assertTrue(trie.autoComplete("oog") == None)
        self.assertTrue(trie.autoComplete("ooh") == None)
        self.assertTrue(trie.autoComplete("ooi") == None)
        self.assertTrue(trie.autoComplete("ooj") == None)
        self.assertTrue(trie.autoComplete("ook") == None)
        self.assertTrue(trie.autoComplete("ool") == None)
        self.assertTrue(trie.autoComplete("oom") == None)
        self.assertTrue(trie.autoComplete("oon") == None)
        self.assertTrue(trie.autoComplete("ooo") == None)
        self.assertTrue(trie.autoComplete("oop") == None)
        self.assertTrue(trie.autoComplete("ooq") == None)
        self.assertTrue(trie.autoComplete("oor") == None)
        self.assertTrue(trie.autoComplete("oos") == None)
        self.assertTrue(trie.autoComplete("oot") == None)
        self.assertTrue(trie.autoComplete("oou") == None)
        self.assertTrue(trie.autoComplete("oov") == None)
        self.assertTrue(trie.autoComplete("oow") == None)
        self.assertTrue(trie.autoComplete("oox") == None)
        self.assertTrue(trie.autoComplete("ooy") == None)
        self.assertTrue(trie.autoComplete("ooz") == None)
        self.assertTrue(trie.autoComplete("op") == "open")
        self.assertTrue(trie.autoComplete("opa") == None)
        self.assertTrue(trie.autoComplete("opb") == None)
        self.assertTrue(trie.autoComplete("opc") == None)
        self.assertTrue(trie.autoComplete("opd") == None)
        self.assertTrue(trie.autoComplete("ope") == "open")
        self.assertTrue(trie.autoComplete("open") == "open")
        self.assertTrue(trie.autoComplete("oper") == "operative")
        self.assertTrue(trie.autoComplete("opera") == "operative")
        self.assertTrue(trie.autoComplete("operat") == "operative")
        self.assertTrue(trie.autoComplete("operati") == "operative")
        self.assertTrue(trie.autoComplete("operativ") == "operative")
        self.assertTrue(trie.autoComplete("operative") == "operative")
        self.assertTrue(trie.autoComplete("opf") == None)
        self.assertTrue(trie.autoComplete("opg") == None)
        self.assertTrue(trie.autoComplete("oph") == None)
        self.assertTrue(trie.autoComplete("opi") == "opinion")
        self.assertTrue(trie.autoComplete("opin") == "opinion")
        self.assertTrue(trie.autoComplete("opini") == "opinion")
        self.assertTrue(trie.autoComplete("opinio") == "opinion")
        self.assertTrue(trie.autoComplete("opinion") == "opinion")
        self.assertTrue(trie.autoComplete("opj") == None)
        self.assertTrue(trie.autoComplete("opk") == None)
        self.assertTrue(trie.autoComplete("opl") == None)
        self.assertTrue(trie.autoComplete("opm") == None)
        self.assertTrue(trie.autoComplete("opn") == None)
        self.assertTrue(trie.autoComplete("opo") == None)
        self.assertTrue(trie.autoComplete("opp") == None)
        self.assertTrue(trie.autoComplete("opq") == None)
        self.assertTrue(trie.autoComplete("opr") == None)
        self.assertTrue(trie.autoComplete("ops") == None)
        self.assertTrue(trie.autoComplete("opt") == None)
        self.assertTrue(trie.autoComplete("opu") == None)
        self.assertTrue(trie.autoComplete("opv") == None)
        self.assertTrue(trie.autoComplete("opw") == None)
        self.assertTrue(trie.autoComplete("opx") == None)
        self.assertTrue(trie.autoComplete("opy") == None)
        self.assertTrue(trie.autoComplete("opz") == None)
        self.assertTrue(trie.autoComplete("oq") == None)
        self.assertTrue(trie.autoComplete("oqa") == None)
        self.assertTrue(trie.autoComplete("oqb") == None)
        self.assertTrue(trie.autoComplete("oqc") == None)
        self.assertTrue(trie.autoComplete("oqd") == None)
        self.assertTrue(trie.autoComplete("oqe") == None)
        self.assertTrue(trie.autoComplete("oqf") == None)
        self.assertTrue(trie.autoComplete("oqg") == None)
        self.assertTrue(trie.autoComplete("oqh") == None)
        self.assertTrue(trie.autoComplete("oqi") == None)
        self.assertTrue(trie.autoComplete("oqj") == None)
        self.assertTrue(trie.autoComplete("oqk") == None)
        self.assertTrue(trie.autoComplete("oql") == None)
        self.assertTrue(trie.autoComplete("oqm") == None)
        self.assertTrue(trie.autoComplete("oqn") == None)
        self.assertTrue(trie.autoComplete("oqo") == None)
        self.assertTrue(trie.autoComplete("oqp") == None)
        self.assertTrue(trie.autoComplete("oqq") == None)
        self.assertTrue(trie.autoComplete("oqr") == None)
        self.assertTrue(trie.autoComplete("oqs") == None)
        self.assertTrue(trie.autoComplete("oqt") == None)
        self.assertTrue(trie.autoComplete("oqu") == None)
        self.assertTrue(trie.autoComplete("oqv") == None)
        self.assertTrue(trie.autoComplete("oqw") == None)
        self.assertTrue(trie.autoComplete("oqx") == None)
        self.assertTrue(trie.autoComplete("oqy") == None)
        self.assertTrue(trie.autoComplete("oqz") == None)
        self.assertTrue(trie.autoComplete("or") == "or")
        self.assertTrue(trie.autoComplete("ora") == None)
        self.assertTrue(trie.autoComplete("orb") == None)
        self.assertTrue(trie.autoComplete("orc") == None)
        self.assertTrue(trie.autoComplete("ord") == "ordain")
        self.assertTrue(trie.autoComplete("orda") == "ordain")
        self.assertTrue(trie.autoComplete("ordai") == "ordain")
        self.assertTrue(trie.autoComplete("ordain") == "ordain")
        self.assertTrue(trie.autoComplete("orde") == "order")
        self.assertTrue(trie.autoComplete("order") == "order")
        self.assertTrue(trie.autoComplete("ore") == None)
        self.assertTrue(trie.autoComplete("orf") == None)
        self.assertTrue(trie.autoComplete("org") == "organizing")
        self.assertTrue(trie.autoComplete("orga") == "organizing")
        self.assertTrue(trie.autoComplete("organ") == "organizing")
        self.assertTrue(trie.autoComplete("organi") == "organizing")
        self.assertTrue(trie.autoComplete("organiz") == "organizing")
        self.assertTrue(trie.autoComplete("organizi") == "organizing")
        self.assertTrue(trie.autoComplete("organizin") == "organizing")
        self.assertTrue(trie.autoComplete("organizing") == "organizing")
        self.assertTrue(trie.autoComplete("orh") == None)
        self.assertTrue(trie.autoComplete("ori") == "original")
        self.assertTrue(trie.autoComplete("orig") == "original")
        self.assertTrue(trie.autoComplete("origi") == "original")
        self.assertTrue(trie.autoComplete("origin") == "original")
        self.assertTrue(trie.autoComplete("origina") == "original")
        self.assertTrue(trie.autoComplete("original") == "original")
        self.assertTrue(trie.autoComplete("originat") == "originate")
        self.assertTrue(trie.autoComplete("originate") == "originate")
        self.assertTrue(trie.autoComplete("originated") == "originated")
        self.assertTrue(trie.autoComplete("orj") == None)
        self.assertTrue(trie.autoComplete("ork") == None)
        self.assertTrue(trie.autoComplete("orl") == None)
        self.assertTrue(trie.autoComplete("orm") == None)
        self.assertTrue(trie.autoComplete("orn") == None)
        self.assertTrue(trie.autoComplete("oro") == None)
        self.assertTrue(trie.autoComplete("orp") == None)
        self.assertTrue(trie.autoComplete("orq") == None)
        self.assertTrue(trie.autoComplete("orr") == None)
        self.assertTrue(trie.autoComplete("ors") == None)
        self.assertTrue(trie.autoComplete("ort") == None)
        self.assertTrue(trie.autoComplete("oru") == None)
        self.assertTrue(trie.autoComplete("orv") == None)
        self.assertTrue(trie.autoComplete("orw") == None)
        self.assertTrue(trie.autoComplete("orx") == None)
        self.assertTrue(trie.autoComplete("ory") == None)
        self.assertTrue(trie.autoComplete("orz") == None)
        self.assertTrue(trie.autoComplete("os") == None)
        self.assertTrue(trie.autoComplete("osa") == None)
        self.assertTrue(trie.autoComplete("osb") == None)
        self.assertTrue(trie.autoComplete("osc") == None)
        self.assertTrue(trie.autoComplete("osd") == None)
        self.assertTrue(trie.autoComplete("ose") == None)
        self.assertTrue(trie.autoComplete("osf") == None)
        self.assertTrue(trie.autoComplete("osg") == None)
        self.assertTrue(trie.autoComplete("osh") == None)
        self.assertTrue(trie.autoComplete("osi") == None)
        self.assertTrue(trie.autoComplete("osj") == None)
        self.assertTrue(trie.autoComplete("osk") == None)
        self.assertTrue(trie.autoComplete("osl") == None)
        self.assertTrue(trie.autoComplete("osm") == None)
        self.assertTrue(trie.autoComplete("osn") == None)
        self.assertTrue(trie.autoComplete("oso") == None)
        self.assertTrue(trie.autoComplete("osp") == None)
        self.assertTrue(trie.autoComplete("osq") == None)
        self.assertTrue(trie.autoComplete("osr") == None)
        self.assertTrue(trie.autoComplete("oss") == None)
        self.assertTrue(trie.autoComplete("ost") == None)
        self.assertTrue(trie.autoComplete("osu") == None)
        self.assertTrue(trie.autoComplete("osv") == None)
        self.assertTrue(trie.autoComplete("osw") == None)
        self.assertTrue(trie.autoComplete("osx") == None)
        self.assertTrue(trie.autoComplete("osy") == None)
        self.assertTrue(trie.autoComplete("osz") == None)
        self.assertTrue(trie.autoComplete("ot") == "other")
        self.assertTrue(trie.autoComplete("ota") == None)
        self.assertTrue(trie.autoComplete("otb") == None)
        self.assertTrue(trie.autoComplete("otc") == None)
        self.assertTrue(trie.autoComplete("otd") == None)
        self.assertTrue(trie.autoComplete("ote") == None)
        self.assertTrue(trie.autoComplete("otf") == None)
        self.assertTrue(trie.autoComplete("otg") == None)
        self.assertTrue(trie.autoComplete("oth") == "other")
        self.assertTrue(trie.autoComplete("othe") == "other")
        self.assertTrue(trie.autoComplete("other") == "other")
        self.assertTrue(trie.autoComplete("others") == "others")
        self.assertTrue(trie.autoComplete("otherw") == "otherwise")
        self.assertTrue(trie.autoComplete("otherwi") == "otherwise")
        self.assertTrue(trie.autoComplete("otherwis") == "otherwise")
        self.assertTrue(trie.autoComplete("otherwise") == "otherwise")
        self.assertTrue(trie.autoComplete("oti") == None)
        self.assertTrue(trie.autoComplete("otj") == None)
        self.assertTrue(trie.autoComplete("otk") == None)
        self.assertTrue(trie.autoComplete("otl") == None)
        self.assertTrue(trie.autoComplete("otm") == None)
        self.assertTrue(trie.autoComplete("otn") == None)
        self.assertTrue(trie.autoComplete("oto") == None)
        self.assertTrue(trie.autoComplete("otp") == None)
        self.assertTrue(trie.autoComplete("otq") == None)
        self.assertTrue(trie.autoComplete("otr") == None)
        self.assertTrue(trie.autoComplete("ots") == None)
        self.assertTrue(trie.autoComplete("ott") == None)
        self.assertTrue(trie.autoComplete("otu") == None)
        self.assertTrue(trie.autoComplete("otv") == None)
        self.assertTrue(trie.autoComplete("otw") == None)
        self.assertTrue(trie.autoComplete("otx") == None)
        self.assertTrue(trie.autoComplete("oty") == None)
        self.assertTrue(trie.autoComplete("otz") == None)
        self.assertTrue(trie.autoComplete("ou") == "our")
        self.assertTrue(trie.autoComplete("oua") == None)
        self.assertTrue(trie.autoComplete("oub") == None)
        self.assertTrue(trie.autoComplete("ouc") == None)
        self.assertTrue(trie.autoComplete("oud") == None)
        self.assertTrue(trie.autoComplete("oue") == None)
        self.assertTrue(trie.autoComplete("ouf") == None)
        self.assertTrue(trie.autoComplete("oug") == None)
        self.assertTrue(trie.autoComplete("ouh") == None)
        self.assertTrue(trie.autoComplete("oui") == None)
        self.assertTrue(trie.autoComplete("ouj") == None)
        self.assertTrue(trie.autoComplete("ouk") == None)
        self.assertTrue(trie.autoComplete("oul") == None)
        self.assertTrue(trie.autoComplete("oum") == None)
        self.assertTrue(trie.autoComplete("oun") == None)
        self.assertTrue(trie.autoComplete("ouo") == None)
        self.assertTrue(trie.autoComplete("oup") == None)
        self.assertTrue(trie.autoComplete("ouq") == None)
        self.assertTrue(trie.autoComplete("our") == "our")
        self.assertTrue(trie.autoComplete("ours") == "ourselves")
        self.assertTrue(trie.autoComplete("ourse") == "ourselves")
        self.assertTrue(trie.autoComplete("oursel") == "ourselves")
        self.assertTrue(trie.autoComplete("ourselv") == "ourselves")
        self.assertTrue(trie.autoComplete("ourselve") == "ourselves")
        self.assertTrue(trie.autoComplete("ourselves") == "ourselves")
        self.assertTrue(trie.autoComplete("ous") == None)
        self.assertTrue(trie.autoComplete("out") == "out")
        self.assertTrue(trie.autoComplete("ouu") == None)
        self.assertTrue(trie.autoComplete("ouv") == None)
        self.assertTrue(trie.autoComplete("ouw") == None)
        self.assertTrue(trie.autoComplete("oux") == None)
        self.assertTrue(trie.autoComplete("ouy") == None)
        self.assertTrue(trie.autoComplete("ouz") == None)
        self.assertTrue(trie.autoComplete("ov") == "over")
        self.assertTrue(trie.autoComplete("ova") == None)
        self.assertTrue(trie.autoComplete("ovb") == None)
        self.assertTrue(trie.autoComplete("ovc") == None)
        self.assertTrue(trie.autoComplete("ovd") == None)
        self.assertTrue(trie.autoComplete("ove") == "over")
        self.assertTrue(trie.autoComplete("over") == "over")
        self.assertTrue(trie.autoComplete("overt") == "overt")
        self.assertTrue(trie.autoComplete("ovf") == None)
        self.assertTrue(trie.autoComplete("ovg") == None)
        self.assertTrue(trie.autoComplete("ovh") == None)
        self.assertTrue(trie.autoComplete("ovi") == None)
        self.assertTrue(trie.autoComplete("ovj") == None)
        self.assertTrue(trie.autoComplete("ovk") == None)
        self.assertTrue(trie.autoComplete("ovl") == None)
        self.assertTrue(trie.autoComplete("ovm") == None)
        self.assertTrue(trie.autoComplete("ovn") == None)
        self.assertTrue(trie.autoComplete("ovo") == None)
        self.assertTrue(trie.autoComplete("ovp") == None)
        self.assertTrue(trie.autoComplete("ovq") == None)
        self.assertTrue(trie.autoComplete("ovr") == None)
        self.assertTrue(trie.autoComplete("ovs") == None)
        self.assertTrue(trie.autoComplete("ovt") == None)
        self.assertTrue(trie.autoComplete("ovu") == None)
        self.assertTrue(trie.autoComplete("ovv") == None)
        self.assertTrue(trie.autoComplete("ovw") == None)
        self.assertTrue(trie.autoComplete("ovx") == None)
        self.assertTrue(trie.autoComplete("ovy") == None)
        self.assertTrue(trie.autoComplete("ovz") == None)
        self.assertTrue(trie.autoComplete("ow") == "own")
        self.assertTrue(trie.autoComplete("owa") == None)
        self.assertTrue(trie.autoComplete("owb") == None)
        self.assertTrue(trie.autoComplete("owc") == None)
        self.assertTrue(trie.autoComplete("owd") == None)
        self.assertTrue(trie.autoComplete("owe") == None)
        self.assertTrue(trie.autoComplete("owf") == None)
        self.assertTrue(trie.autoComplete("owg") == None)
        self.assertTrue(trie.autoComplete("owh") == None)
        self.assertTrue(trie.autoComplete("owi") == None)
        self.assertTrue(trie.autoComplete("owj") == None)
        self.assertTrue(trie.autoComplete("owk") == None)
        self.assertTrue(trie.autoComplete("owl") == None)
        self.assertTrue(trie.autoComplete("owm") == None)
        self.assertTrue(trie.autoComplete("own") == "own")
        self.assertTrue(trie.autoComplete("owne") == "owner")
        self.assertTrue(trie.autoComplete("owner") == "owner")
        self.assertTrue(trie.autoComplete("owo") == None)
        self.assertTrue(trie.autoComplete("owp") == None)
        self.assertTrue(trie.autoComplete("owq") == None)
        self.assertTrue(trie.autoComplete("owr") == None)
        self.assertTrue(trie.autoComplete("ows") == None)
        self.assertTrue(trie.autoComplete("owt") == None)
        self.assertTrue(trie.autoComplete("owu") == None)
        self.assertTrue(trie.autoComplete("owv") == None)
        self.assertTrue(trie.autoComplete("oww") == None)
        self.assertTrue(trie.autoComplete("owx") == None)
        self.assertTrue(trie.autoComplete("owy") == None)
        self.assertTrue(trie.autoComplete("owz") == None)
        self.assertTrue(trie.autoComplete("ox") == None)
        self.assertTrue(trie.autoComplete("oxa") == None)
        self.assertTrue(trie.autoComplete("oxb") == None)
        self.assertTrue(trie.autoComplete("oxc") == None)
        self.assertTrue(trie.autoComplete("oxd") == None)
        self.assertTrue(trie.autoComplete("oxe") == None)
        self.assertTrue(trie.autoComplete("oxf") == None)
        self.assertTrue(trie.autoComplete("oxg") == None)
        self.assertTrue(trie.autoComplete("oxh") == None)
        self.assertTrue(trie.autoComplete("oxi") == None)
        self.assertTrue(trie.autoComplete("oxj") == None)
        self.assertTrue(trie.autoComplete("oxk") == None)
        self.assertTrue(trie.autoComplete("oxl") == None)
        self.assertTrue(trie.autoComplete("oxm") == None)
        self.assertTrue(trie.autoComplete("oxn") == None)
        self.assertTrue(trie.autoComplete("oxo") == None)
        self.assertTrue(trie.autoComplete("oxp") == None)
        self.assertTrue(trie.autoComplete("oxq") == None)
        self.assertTrue(trie.autoComplete("oxr") == None)
        self.assertTrue(trie.autoComplete("oxs") == None)
        self.assertTrue(trie.autoComplete("oxt") == None)
        self.assertTrue(trie.autoComplete("oxu") == None)
        self.assertTrue(trie.autoComplete("oxv") == None)
        self.assertTrue(trie.autoComplete("oxw") == None)
        self.assertTrue(trie.autoComplete("oxx") == None)
        self.assertTrue(trie.autoComplete("oxy") == None)
        self.assertTrue(trie.autoComplete("oxz") == None)
        self.assertTrue(trie.autoComplete("oy") == None)
        self.assertTrue(trie.autoComplete("oya") == None)
        self.assertTrue(trie.autoComplete("oyb") == None)
        self.assertTrue(trie.autoComplete("oyc") == None)
        self.assertTrue(trie.autoComplete("oyd") == None)
        self.assertTrue(trie.autoComplete("oye") == None)
        self.assertTrue(trie.autoComplete("oyf") == None)
        self.assertTrue(trie.autoComplete("oyg") == None)
        self.assertTrue(trie.autoComplete("oyh") == None)
        self.assertTrue(trie.autoComplete("oyi") == None)
        self.assertTrue(trie.autoComplete("oyj") == None)
        self.assertTrue(trie.autoComplete("oyk") == None)
        self.assertTrue(trie.autoComplete("oyl") == None)
        self.assertTrue(trie.autoComplete("oym") == None)
        self.assertTrue(trie.autoComplete("oyn") == None)
        self.assertTrue(trie.autoComplete("oyo") == None)
        self.assertTrue(trie.autoComplete("oyp") == None)
        self.assertTrue(trie.autoComplete("oyq") == None)
        self.assertTrue(trie.autoComplete("oyr") == None)
        self.assertTrue(trie.autoComplete("oys") == None)
        self.assertTrue(trie.autoComplete("oyt") == None)
        self.assertTrue(trie.autoComplete("oyu") == None)
        self.assertTrue(trie.autoComplete("oyv") == None)
        self.assertTrue(trie.autoComplete("oyw") == None)
        self.assertTrue(trie.autoComplete("oyx") == None)
        self.assertTrue(trie.autoComplete("oyy") == None)
        self.assertTrue(trie.autoComplete("oyz") == None)
        self.assertTrue(trie.autoComplete("oz") == None)
        self.assertTrue(trie.autoComplete("oza") == None)
        self.assertTrue(trie.autoComplete("ozb") == None)
        self.assertTrue(trie.autoComplete("ozc") == None)
        self.assertTrue(trie.autoComplete("ozd") == None)
        self.assertTrue(trie.autoComplete("oze") == None)
        self.assertTrue(trie.autoComplete("ozf") == None)
        self.assertTrue(trie.autoComplete("ozg") == None)
        self.assertTrue(trie.autoComplete("ozh") == None)
        self.assertTrue(trie.autoComplete("ozi") == None)
        self.assertTrue(trie.autoComplete("ozj") == None)
        self.assertTrue(trie.autoComplete("ozk") == None)
        self.assertTrue(trie.autoComplete("ozl") == None)
        self.assertTrue(trie.autoComplete("ozm") == None)
        self.assertTrue(trie.autoComplete("ozn") == None)
        self.assertTrue(trie.autoComplete("ozo") == None)
        self.assertTrue(trie.autoComplete("ozp") == None)
        self.assertTrue(trie.autoComplete("ozq") == None)
        self.assertTrue(trie.autoComplete("ozr") == None)
        self.assertTrue(trie.autoComplete("ozs") == None)
        self.assertTrue(trie.autoComplete("ozt") == None)
        self.assertTrue(trie.autoComplete("ozu") == None)
        self.assertTrue(trie.autoComplete("ozv") == None)
        self.assertTrue(trie.autoComplete("ozw") == None)
        self.assertTrue(trie.autoComplete("ozx") == None)
        self.assertTrue(trie.autoComplete("ozy") == None)
        self.assertTrue(trie.autoComplete("ozz") == None)
        self.assertTrue(trie.autoComplete("p") == "president")
        self.assertTrue(trie.autoComplete("pa") == "party")
        self.assertTrue(trie.autoComplete("paa") == None)
        self.assertTrue(trie.autoComplete("pab") == None)
        self.assertTrue(trie.autoComplete("pac") == None)
        self.assertTrue(trie.autoComplete("pad") == None)
        self.assertTrue(trie.autoComplete("pae") == None)
        self.assertTrue(trie.autoComplete("paf") == None)
        self.assertTrue(trie.autoComplete("pag") == None)
        self.assertTrue(trie.autoComplete("pah") == None)
        self.assertTrue(trie.autoComplete("pai") == "paid")
        self.assertTrue(trie.autoComplete("paid") == "paid")
        self.assertTrue(trie.autoComplete("paj") == None)
        self.assertTrue(trie.autoComplete("pak") == None)
        self.assertTrue(trie.autoComplete("pal") == None)
        self.assertTrue(trie.autoComplete("pam") == None)
        self.assertTrue(trie.autoComplete("pan") == None)
        self.assertTrue(trie.autoComplete("pao") == None)
        self.assertTrue(trie.autoComplete("pap") == "papers")
        self.assertTrue(trie.autoComplete("pape") == "papers")
        self.assertTrue(trie.autoComplete("paper") == "papers")
        self.assertTrue(trie.autoComplete("papers") == "papers")
        self.assertTrue(trie.autoComplete("paq") == None)
        self.assertTrue(trie.autoComplete("par") == "party")
        self.assertTrue(trie.autoComplete("pard") == "pardons")
        self.assertTrue(trie.autoComplete("pardo") == "pardons")
        self.assertTrue(trie.autoComplete("pardon") == "pardons")
        self.assertTrue(trie.autoComplete("pardons") == "pardons")
        self.assertTrue(trie.autoComplete("part") == "party")
        self.assertTrue(trie.autoComplete("parti") == "particular")
        self.assertTrue(trie.autoComplete("partic") == "particular")
        self.assertTrue(trie.autoComplete("partici") == "participation")
        self.assertTrue(trie.autoComplete("particip") == "participation")
        self.assertTrue(trie.autoComplete("participa") == "participation")
        self.assertTrue(trie.autoComplete("participat") == "participation")
        self.assertTrue(trie.autoComplete("participati") == "participation")
        self.assertTrue(trie.autoComplete("participatio") == "participation")
        self.assertTrue(trie.autoComplete("participation") == "participation")
        self.assertTrue(trie.autoComplete("particu") == "particular")
        self.assertTrue(trie.autoComplete("particul") == "particular")
        self.assertTrue(trie.autoComplete("particula") == "particular")
        self.assertTrue(trie.autoComplete("particular") == "particular")
        self.assertTrue(trie.autoComplete("particularl") == "particularly")
        self.assertTrue(trie.autoComplete("particularly") == "particularly")
        self.assertTrue(trie.autoComplete("parts") == "parts")
        self.assertTrue(trie.autoComplete("party") == "party")
        self.assertTrue(trie.autoComplete("pas") == "pass")
        self.assertTrue(trie.autoComplete("pass") == "pass")
        self.assertTrue(trie.autoComplete("passe") == "passed")
        self.assertTrue(trie.autoComplete("passed") == "passed")
        self.assertTrue(trie.autoComplete("pat") == None)
        self.assertTrue(trie.autoComplete("pau") == None)
        self.assertTrue(trie.autoComplete("pav") == None)
        self.assertTrue(trie.autoComplete("paw") == None)
        self.assertTrue(trie.autoComplete("pax") == None)
        self.assertTrue(trie.autoComplete("pay") == "pay")
        self.assertTrue(trie.autoComplete("paym") == "payment")
        self.assertTrue(trie.autoComplete("payme") == "payment")
        self.assertTrue(trie.autoComplete("paymen") == "payment")
        self.assertTrue(trie.autoComplete("payment") == "payment")
        self.assertTrue(trie.autoComplete("paz") == None)
        self.assertTrue(trie.autoComplete("pb") == None)
        self.assertTrue(trie.autoComplete("pba") == None)
        self.assertTrue(trie.autoComplete("pbb") == None)
        self.assertTrue(trie.autoComplete("pbc") == None)
        self.assertTrue(trie.autoComplete("pbd") == None)
        self.assertTrue(trie.autoComplete("pbe") == None)
        self.assertTrue(trie.autoComplete("pbf") == None)
        self.assertTrue(trie.autoComplete("pbg") == None)
        self.assertTrue(trie.autoComplete("pbh") == None)
        self.assertTrue(trie.autoComplete("pbi") == None)
        self.assertTrue(trie.autoComplete("pbj") == None)
        self.assertTrue(trie.autoComplete("pbk") == None)
        self.assertTrue(trie.autoComplete("pbl") == None)
        self.assertTrue(trie.autoComplete("pbm") == None)
        self.assertTrue(trie.autoComplete("pbn") == None)
        self.assertTrue(trie.autoComplete("pbo") == None)
        self.assertTrue(trie.autoComplete("pbp") == None)
        self.assertTrue(trie.autoComplete("pbq") == None)
        self.assertTrue(trie.autoComplete("pbr") == None)
        self.assertTrue(trie.autoComplete("pbs") == None)
        self.assertTrue(trie.autoComplete("pbt") == None)
        self.assertTrue(trie.autoComplete("pbu") == None)
        self.assertTrue(trie.autoComplete("pbv") == None)
        self.assertTrue(trie.autoComplete("pbw") == None)
        self.assertTrue(trie.autoComplete("pbx") == None)
        self.assertTrue(trie.autoComplete("pby") == None)
        self.assertTrue(trie.autoComplete("pbz") == None)
        self.assertTrue(trie.autoComplete("pc") == None)
        self.assertTrue(trie.autoComplete("pca") == None)
        self.assertTrue(trie.autoComplete("pcb") == None)
        self.assertTrue(trie.autoComplete("pcc") == None)
        self.assertTrue(trie.autoComplete("pcd") == None)
        self.assertTrue(trie.autoComplete("pce") == None)
        self.assertTrue(trie.autoComplete("pcf") == None)
        self.assertTrue(trie.autoComplete("pcg") == None)
        self.assertTrue(trie.autoComplete("pch") == None)
        self.assertTrue(trie.autoComplete("pci") == None)
        self.assertTrue(trie.autoComplete("pcj") == None)
        self.assertTrue(trie.autoComplete("pck") == None)
        self.assertTrue(trie.autoComplete("pcl") == None)
        self.assertTrue(trie.autoComplete("pcm") == None)
        self.assertTrue(trie.autoComplete("pcn") == None)
        self.assertTrue(trie.autoComplete("pco") == None)
        self.assertTrue(trie.autoComplete("pcp") == None)
        self.assertTrue(trie.autoComplete("pcq") == None)
        self.assertTrue(trie.autoComplete("pcr") == None)
        self.assertTrue(trie.autoComplete("pcs") == None)
        self.assertTrue(trie.autoComplete("pct") == None)
        self.assertTrue(trie.autoComplete("pcu") == None)
        self.assertTrue(trie.autoComplete("pcv") == None)
        self.assertTrue(trie.autoComplete("pcw") == None)
        self.assertTrue(trie.autoComplete("pcx") == None)
        self.assertTrue(trie.autoComplete("pcy") == None)
        self.assertTrue(trie.autoComplete("pcz") == None)
        self.assertTrue(trie.autoComplete("pd") == None)
        self.assertTrue(trie.autoComplete("pda") == None)
        self.assertTrue(trie.autoComplete("pdb") == None)
        self.assertTrue(trie.autoComplete("pdc") == None)
        self.assertTrue(trie.autoComplete("pdd") == None)
        self.assertTrue(trie.autoComplete("pde") == None)
        self.assertTrue(trie.autoComplete("pdf") == None)
        self.assertTrue(trie.autoComplete("pdg") == None)
        self.assertTrue(trie.autoComplete("pdh") == None)
        self.assertTrue(trie.autoComplete("pdi") == None)
        self.assertTrue(trie.autoComplete("pdj") == None)
        self.assertTrue(trie.autoComplete("pdk") == None)
        self.assertTrue(trie.autoComplete("pdl") == None)
        self.assertTrue(trie.autoComplete("pdm") == None)
        self.assertTrue(trie.autoComplete("pdn") == None)
        self.assertTrue(trie.autoComplete("pdo") == None)
        self.assertTrue(trie.autoComplete("pdp") == None)
        self.assertTrue(trie.autoComplete("pdq") == None)
        self.assertTrue(trie.autoComplete("pdr") == None)
        self.assertTrue(trie.autoComplete("pds") == None)
        self.assertTrue(trie.autoComplete("pdt") == None)
        self.assertTrue(trie.autoComplete("pdu") == None)
        self.assertTrue(trie.autoComplete("pdv") == None)
        self.assertTrue(trie.autoComplete("pdw") == None)
        self.assertTrue(trie.autoComplete("pdx") == None)
        self.assertTrue(trie.autoComplete("pdy") == None)
        self.assertTrue(trie.autoComplete("pdz") == None)
        self.assertTrue(trie.autoComplete("pe") == "person")
        self.assertTrue(trie.autoComplete("pea") == "peace")
        self.assertTrue(trie.autoComplete("peac") == "peace")
        self.assertTrue(trie.autoComplete("peace") == "peace")
        self.assertTrue(trie.autoComplete("peacea") == "peaceably")
        self.assertTrue(trie.autoComplete("peaceab") == "peaceably")
        self.assertTrue(trie.autoComplete("peaceabl") == "peaceably")
        self.assertTrue(trie.autoComplete("peaceably") == "peaceably")
        self.assertTrue(trie.autoComplete("peb") == None)
        self.assertTrue(trie.autoComplete("pec") == None)
        self.assertTrue(trie.autoComplete("ped") == None)
        self.assertTrue(trie.autoComplete("pee") == None)
        self.assertTrue(trie.autoComplete("pef") == None)
        self.assertTrue(trie.autoComplete("peg") == None)
        self.assertTrue(trie.autoComplete("peh") == None)
        self.assertTrue(trie.autoComplete("pei") == None)
        self.assertTrue(trie.autoComplete("pej") == None)
        self.assertTrue(trie.autoComplete("pek") == None)
        self.assertTrue(trie.autoComplete("pel") == None)
        self.assertTrue(trie.autoComplete("pem") == None)
        self.assertTrue(trie.autoComplete("pen") == "penalties")
        self.assertTrue(trie.autoComplete("pena") == "penalties")
        self.assertTrue(trie.autoComplete("penal") == "penalties")
        self.assertTrue(trie.autoComplete("penalt") == "penalties")
        self.assertTrue(trie.autoComplete("penalti") == "penalties")
        self.assertTrue(trie.autoComplete("penaltie") == "penalties")
        self.assertTrue(trie.autoComplete("penalties") == "penalties")
        self.assertTrue(trie.autoComplete("penn") == "pennsylvania")
        self.assertTrue(trie.autoComplete("penns") == "pennsylvania")
        self.assertTrue(trie.autoComplete("pennsy") == "pennsylvania")
        self.assertTrue(trie.autoComplete("pennsyl") == "pennsylvania")
        self.assertTrue(trie.autoComplete("pennsylv") == "pennsylvania")
        self.assertTrue(trie.autoComplete("pennsylva") == "pennsylvania")
        self.assertTrue(trie.autoComplete("pennsylvan") == "pennsylvania")
        self.assertTrue(trie.autoComplete("pennsylvani") == "pennsylvania")
        self.assertTrue(trie.autoComplete("pennsylvania") == "pennsylvania")
        self.assertTrue(trie.autoComplete("pens") == "pensions")
        self.assertTrue(trie.autoComplete("pensi") == "pensions")
        self.assertTrue(trie.autoComplete("pensio") == "pensions")
        self.assertTrue(trie.autoComplete("pension") == "pensions")
        self.assertTrue(trie.autoComplete("pensions") == "pensions")
        self.assertTrue(trie.autoComplete("peo") == "people")
        self.assertTrue(trie.autoComplete("peop") == "people")
        self.assertTrue(trie.autoComplete("peopl") == "people")
        self.assertTrue(trie.autoComplete("people") == "people")
        self.assertTrue(trie.autoComplete("pep") == None)
        self.assertTrue(trie.autoComplete("peq") == None)
        self.assertTrue(trie.autoComplete("per") == "person")
        self.assertTrue(trie.autoComplete("perf") == "perfect")
        self.assertTrue(trie.autoComplete("perfe") == "perfect")
        self.assertTrue(trie.autoComplete("perfec") == "perfect")
        self.assertTrue(trie.autoComplete("perfect") == "perfect")
        self.assertTrue(trie.autoComplete("perfo") == "perform")
        self.assertTrue(trie.autoComplete("perfor") == "perform")
        self.assertTrue(trie.autoComplete("perform") == "perform")
        self.assertTrue(trie.autoComplete("peri") == "period")
        self.assertTrue(trie.autoComplete("perio") == "period")
        self.assertTrue(trie.autoComplete("period") == "period")
        self.assertTrue(trie.autoComplete("pers") == "person")
        self.assertTrue(trie.autoComplete("perso") == "person")
        self.assertTrue(trie.autoComplete("person") == "person")
        self.assertTrue(trie.autoComplete("persons") == "persons")
        self.assertTrue(trie.autoComplete("pes") == None)
        self.assertTrue(trie.autoComplete("pet") == "petition")
        self.assertTrue(trie.autoComplete("peti") == "petition")
        self.assertTrue(trie.autoComplete("petit") == "petition")
        self.assertTrue(trie.autoComplete("petiti") == "petition")
        self.assertTrue(trie.autoComplete("petitio") == "petition")
        self.assertTrue(trie.autoComplete("petition") == "petition")
        self.assertTrue(trie.autoComplete("peu") == None)
        self.assertTrue(trie.autoComplete("pev") == None)
        self.assertTrue(trie.autoComplete("pew") == None)
        self.assertTrue(trie.autoComplete("pex") == None)
        self.assertTrue(trie.autoComplete("pey") == None)
        self.assertTrue(trie.autoComplete("pez") == None)
        self.assertTrue(trie.autoComplete("pf") == None)
        self.assertTrue(trie.autoComplete("pfa") == None)
        self.assertTrue(trie.autoComplete("pfb") == None)
        self.assertTrue(trie.autoComplete("pfc") == None)
        self.assertTrue(trie.autoComplete("pfd") == None)
        self.assertTrue(trie.autoComplete("pfe") == None)
        self.assertTrue(trie.autoComplete("pff") == None)
        self.assertTrue(trie.autoComplete("pfg") == None)
        self.assertTrue(trie.autoComplete("pfh") == None)
        self.assertTrue(trie.autoComplete("pfi") == None)
        self.assertTrue(trie.autoComplete("pfj") == None)
        self.assertTrue(trie.autoComplete("pfk") == None)
        self.assertTrue(trie.autoComplete("pfl") == None)
        self.assertTrue(trie.autoComplete("pfm") == None)
        self.assertTrue(trie.autoComplete("pfn") == None)
        self.assertTrue(trie.autoComplete("pfo") == None)
        self.assertTrue(trie.autoComplete("pfp") == None)
        self.assertTrue(trie.autoComplete("pfq") == None)
        self.assertTrue(trie.autoComplete("pfr") == None)
        self.assertTrue(trie.autoComplete("pfs") == None)
        self.assertTrue(trie.autoComplete("pft") == None)
        self.assertTrue(trie.autoComplete("pfu") == None)
        self.assertTrue(trie.autoComplete("pfv") == None)
        self.assertTrue(trie.autoComplete("pfw") == None)
        self.assertTrue(trie.autoComplete("pfx") == None)
        self.assertTrue(trie.autoComplete("pfy") == None)
        self.assertTrue(trie.autoComplete("pfz") == None)
        self.assertTrue(trie.autoComplete("pg") == None)
        self.assertTrue(trie.autoComplete("pga") == None)
        self.assertTrue(trie.autoComplete("pgb") == None)
        self.assertTrue(trie.autoComplete("pgc") == None)
        self.assertTrue(trie.autoComplete("pgd") == None)
        self.assertTrue(trie.autoComplete("pge") == None)
        self.assertTrue(trie.autoComplete("pgf") == None)
        self.assertTrue(trie.autoComplete("pgg") == None)
        self.assertTrue(trie.autoComplete("pgh") == None)
        self.assertTrue(trie.autoComplete("pgi") == None)
        self.assertTrue(trie.autoComplete("pgj") == None)
        self.assertTrue(trie.autoComplete("pgk") == None)
        self.assertTrue(trie.autoComplete("pgl") == None)
        self.assertTrue(trie.autoComplete("pgm") == None)
        self.assertTrue(trie.autoComplete("pgn") == None)
        self.assertTrue(trie.autoComplete("pgo") == None)
        self.assertTrue(trie.autoComplete("pgp") == None)
        self.assertTrue(trie.autoComplete("pgq") == None)
        self.assertTrue(trie.autoComplete("pgr") == None)
        self.assertTrue(trie.autoComplete("pgs") == None)
        self.assertTrue(trie.autoComplete("pgt") == None)
        self.assertTrue(trie.autoComplete("pgu") == None)
        self.assertTrue(trie.autoComplete("pgv") == None)
        self.assertTrue(trie.autoComplete("pgw") == None)
        self.assertTrue(trie.autoComplete("pgx") == None)
        self.assertTrue(trie.autoComplete("pgy") == None)
        self.assertTrue(trie.autoComplete("pgz") == None)
        self.assertTrue(trie.autoComplete("ph") == None)
        self.assertTrue(trie.autoComplete("pha") == None)
        self.assertTrue(trie.autoComplete("phb") == None)
        self.assertTrue(trie.autoComplete("phc") == None)
        self.assertTrue(trie.autoComplete("phd") == None)
        self.assertTrue(trie.autoComplete("phe") == None)
        self.assertTrue(trie.autoComplete("phf") == None)
        self.assertTrue(trie.autoComplete("phg") == None)
        self.assertTrue(trie.autoComplete("phh") == None)
        self.assertTrue(trie.autoComplete("phi") == None)
        self.assertTrue(trie.autoComplete("phj") == None)
        self.assertTrue(trie.autoComplete("phk") == None)
        self.assertTrue(trie.autoComplete("phl") == None)
        self.assertTrue(trie.autoComplete("phm") == None)
        self.assertTrue(trie.autoComplete("phn") == None)
        self.assertTrue(trie.autoComplete("pho") == None)
        self.assertTrue(trie.autoComplete("php") == None)
        self.assertTrue(trie.autoComplete("phq") == None)
        self.assertTrue(trie.autoComplete("phr") == None)
        self.assertTrue(trie.autoComplete("phs") == None)
        self.assertTrue(trie.autoComplete("pht") == None)
        self.assertTrue(trie.autoComplete("phu") == None)
        self.assertTrue(trie.autoComplete("phv") == None)
        self.assertTrue(trie.autoComplete("phw") == None)
        self.assertTrue(trie.autoComplete("phx") == None)
        self.assertTrue(trie.autoComplete("phy") == None)
        self.assertTrue(trie.autoComplete("phz") == None)
        self.assertTrue(trie.autoComplete("pi") == "piracies")
        self.assertTrue(trie.autoComplete("pia") == None)
        self.assertTrue(trie.autoComplete("pib") == None)
        self.assertTrue(trie.autoComplete("pic") == None)
        self.assertTrue(trie.autoComplete("pid") == None)
        self.assertTrue(trie.autoComplete("pie") == None)
        self.assertTrue(trie.autoComplete("pif") == None)
        self.assertTrue(trie.autoComplete("pig") == None)
        self.assertTrue(trie.autoComplete("pih") == None)
        self.assertTrue(trie.autoComplete("pii") == None)
        self.assertTrue(trie.autoComplete("pij") == None)
        self.assertTrue(trie.autoComplete("pik") == None)
        self.assertTrue(trie.autoComplete("pil") == None)
        self.assertTrue(trie.autoComplete("pim") == None)
        self.assertTrue(trie.autoComplete("pin") == None)
        self.assertTrue(trie.autoComplete("pio") == None)
        self.assertTrue(trie.autoComplete("pip") == None)
        self.assertTrue(trie.autoComplete("piq") == None)
        self.assertTrue(trie.autoComplete("pir") == "piracies")
        self.assertTrue(trie.autoComplete("pira") == "piracies")
        self.assertTrue(trie.autoComplete("pirac") == "piracies")
        self.assertTrue(trie.autoComplete("piraci") == "piracies")
        self.assertTrue(trie.autoComplete("piracie") == "piracies")
        self.assertTrue(trie.autoComplete("piracies") == "piracies")
        self.assertTrue(trie.autoComplete("pis") == None)
        self.assertTrue(trie.autoComplete("pit") == None)
        self.assertTrue(trie.autoComplete("piu") == None)
        self.assertTrue(trie.autoComplete("piv") == None)
        self.assertTrue(trie.autoComplete("piw") == None)
        self.assertTrue(trie.autoComplete("pix") == None)
        self.assertTrue(trie.autoComplete("piy") == None)
        self.assertTrue(trie.autoComplete("piz") == None)
        self.assertTrue(trie.autoComplete("pj") == None)
        self.assertTrue(trie.autoComplete("pja") == None)
        self.assertTrue(trie.autoComplete("pjb") == None)
        self.assertTrue(trie.autoComplete("pjc") == None)
        self.assertTrue(trie.autoComplete("pjd") == None)
        self.assertTrue(trie.autoComplete("pje") == None)
        self.assertTrue(trie.autoComplete("pjf") == None)
        self.assertTrue(trie.autoComplete("pjg") == None)
        self.assertTrue(trie.autoComplete("pjh") == None)
        self.assertTrue(trie.autoComplete("pji") == None)
        self.assertTrue(trie.autoComplete("pjj") == None)
        self.assertTrue(trie.autoComplete("pjk") == None)
        self.assertTrue(trie.autoComplete("pjl") == None)
        self.assertTrue(trie.autoComplete("pjm") == None)
        self.assertTrue(trie.autoComplete("pjn") == None)
        self.assertTrue(trie.autoComplete("pjo") == None)
        self.assertTrue(trie.autoComplete("pjp") == None)
        self.assertTrue(trie.autoComplete("pjq") == None)
        self.assertTrue(trie.autoComplete("pjr") == None)
        self.assertTrue(trie.autoComplete("pjs") == None)
        self.assertTrue(trie.autoComplete("pjt") == None)
        self.assertTrue(trie.autoComplete("pju") == None)
        self.assertTrue(trie.autoComplete("pjv") == None)
        self.assertTrue(trie.autoComplete("pjw") == None)
        self.assertTrue(trie.autoComplete("pjx") == None)
        self.assertTrue(trie.autoComplete("pjy") == None)
        self.assertTrue(trie.autoComplete("pjz") == None)
        self.assertTrue(trie.autoComplete("pk") == None)
        self.assertTrue(trie.autoComplete("pka") == None)
        self.assertTrue(trie.autoComplete("pkb") == None)
        self.assertTrue(trie.autoComplete("pkc") == None)
        self.assertTrue(trie.autoComplete("pkd") == None)
        self.assertTrue(trie.autoComplete("pke") == None)
        self.assertTrue(trie.autoComplete("pkf") == None)
        self.assertTrue(trie.autoComplete("pkg") == None)
        self.assertTrue(trie.autoComplete("pkh") == None)
        self.assertTrue(trie.autoComplete("pki") == None)
        self.assertTrue(trie.autoComplete("pkj") == None)
        self.assertTrue(trie.autoComplete("pkk") == None)
        self.assertTrue(trie.autoComplete("pkl") == None)
        self.assertTrue(trie.autoComplete("pkm") == None)
        self.assertTrue(trie.autoComplete("pkn") == None)
        self.assertTrue(trie.autoComplete("pko") == None)
        self.assertTrue(trie.autoComplete("pkp") == None)
        self.assertTrue(trie.autoComplete("pkq") == None)
        self.assertTrue(trie.autoComplete("pkr") == None)
        self.assertTrue(trie.autoComplete("pks") == None)
        self.assertTrue(trie.autoComplete("pkt") == None)
        self.assertTrue(trie.autoComplete("pku") == None)
        self.assertTrue(trie.autoComplete("pkv") == None)
        self.assertTrue(trie.autoComplete("pkw") == None)
        self.assertTrue(trie.autoComplete("pkx") == None)
        self.assertTrue(trie.autoComplete("pky") == None)
        self.assertTrue(trie.autoComplete("pkz") == None)
        self.assertTrue(trie.autoComplete("pl") == "place")
        self.assertTrue(trie.autoComplete("pla") == "place")
        self.assertTrue(trie.autoComplete("plac") == "place")
        self.assertTrue(trie.autoComplete("place") == "place")
        self.assertTrue(trie.autoComplete("places") == "places")
        self.assertTrue(trie.autoComplete("plan") == "plantations")
        self.assertTrue(trie.autoComplete("plant") == "plantations")
        self.assertTrue(trie.autoComplete("planta") == "plantations")
        self.assertTrue(trie.autoComplete("plantat") == "plantations")
        self.assertTrue(trie.autoComplete("plantati") == "plantations")
        self.assertTrue(trie.autoComplete("plantatio") == "plantations")
        self.assertTrue(trie.autoComplete("plantation") == "plantations")
        self.assertTrue(trie.autoComplete("plantations") == "plantations")
        self.assertTrue(trie.autoComplete("plb") == None)
        self.assertTrue(trie.autoComplete("plc") == None)
        self.assertTrue(trie.autoComplete("pld") == None)
        self.assertTrue(trie.autoComplete("ple") == None)
        self.assertTrue(trie.autoComplete("plf") == None)
        self.assertTrue(trie.autoComplete("plg") == None)
        self.assertTrue(trie.autoComplete("plh") == None)
        self.assertTrue(trie.autoComplete("pli") == None)
        self.assertTrue(trie.autoComplete("plj") == None)
        self.assertTrue(trie.autoComplete("plk") == None)
        self.assertTrue(trie.autoComplete("pll") == None)
        self.assertTrue(trie.autoComplete("plm") == None)
        self.assertTrue(trie.autoComplete("pln") == None)
        self.assertTrue(trie.autoComplete("plo") == None)
        self.assertTrue(trie.autoComplete("plp") == None)
        self.assertTrue(trie.autoComplete("plq") == None)
        self.assertTrue(trie.autoComplete("plr") == None)
        self.assertTrue(trie.autoComplete("pls") == None)
        self.assertTrue(trie.autoComplete("plt") == None)
        self.assertTrue(trie.autoComplete("plu") == None)
        self.assertTrue(trie.autoComplete("plv") == None)
        self.assertTrue(trie.autoComplete("plw") == None)
        self.assertTrue(trie.autoComplete("plx") == None)
        self.assertTrue(trie.autoComplete("ply") == None)
        self.assertTrue(trie.autoComplete("plz") == None)
        self.assertTrue(trie.autoComplete("pm") == None)
        self.assertTrue(trie.autoComplete("pma") == None)
        self.assertTrue(trie.autoComplete("pmb") == None)
        self.assertTrue(trie.autoComplete("pmc") == None)
        self.assertTrue(trie.autoComplete("pmd") == None)
        self.assertTrue(trie.autoComplete("pme") == None)
        self.assertTrue(trie.autoComplete("pmf") == None)
        self.assertTrue(trie.autoComplete("pmg") == None)
        self.assertTrue(trie.autoComplete("pmh") == None)
        self.assertTrue(trie.autoComplete("pmi") == None)
        self.assertTrue(trie.autoComplete("pmj") == None)
        self.assertTrue(trie.autoComplete("pmk") == None)
        self.assertTrue(trie.autoComplete("pml") == None)
        self.assertTrue(trie.autoComplete("pmm") == None)
        self.assertTrue(trie.autoComplete("pmn") == None)
        self.assertTrue(trie.autoComplete("pmo") == None)
        self.assertTrue(trie.autoComplete("pmp") == None)
        self.assertTrue(trie.autoComplete("pmq") == None)
        self.assertTrue(trie.autoComplete("pmr") == None)
        self.assertTrue(trie.autoComplete("pms") == None)
        self.assertTrue(trie.autoComplete("pmt") == None)
        self.assertTrue(trie.autoComplete("pmu") == None)
        self.assertTrue(trie.autoComplete("pmv") == None)
        self.assertTrue(trie.autoComplete("pmw") == None)
        self.assertTrue(trie.autoComplete("pmx") == None)
        self.assertTrue(trie.autoComplete("pmy") == None)
        self.assertTrue(trie.autoComplete("pmz") == None)
        self.assertTrue(trie.autoComplete("pn") == None)
        self.assertTrue(trie.autoComplete("pna") == None)
        self.assertTrue(trie.autoComplete("pnb") == None)
        self.assertTrue(trie.autoComplete("pnc") == None)
        self.assertTrue(trie.autoComplete("pnd") == None)
        self.assertTrue(trie.autoComplete("pne") == None)
        self.assertTrue(trie.autoComplete("pnf") == None)
        self.assertTrue(trie.autoComplete("png") == None)
        self.assertTrue(trie.autoComplete("pnh") == None)
        self.assertTrue(trie.autoComplete("pni") == None)
        self.assertTrue(trie.autoComplete("pnj") == None)
        self.assertTrue(trie.autoComplete("pnk") == None)
        self.assertTrue(trie.autoComplete("pnl") == None)
        self.assertTrue(trie.autoComplete("pnm") == None)
        self.assertTrue(trie.autoComplete("pnn") == None)
        self.assertTrue(trie.autoComplete("pno") == None)
        self.assertTrue(trie.autoComplete("pnp") == None)
        self.assertTrue(trie.autoComplete("pnq") == None)
        self.assertTrue(trie.autoComplete("pnr") == None)
        self.assertTrue(trie.autoComplete("pns") == None)
        self.assertTrue(trie.autoComplete("pnt") == None)
        self.assertTrue(trie.autoComplete("pnu") == None)
        self.assertTrue(trie.autoComplete("pnv") == None)
        self.assertTrue(trie.autoComplete("pnw") == None)
        self.assertTrue(trie.autoComplete("pnx") == None)
        self.assertTrue(trie.autoComplete("pny") == None)
        self.assertTrue(trie.autoComplete("pnz") == None)
        self.assertTrue(trie.autoComplete("po") == "power")
        self.assertTrue(trie.autoComplete("poa") == None)
        self.assertTrue(trie.autoComplete("pob") == None)
        self.assertTrue(trie.autoComplete("poc") == None)
        self.assertTrue(trie.autoComplete("pod") == None)
        self.assertTrue(trie.autoComplete("poe") == None)
        self.assertTrue(trie.autoComplete("pof") == None)
        self.assertTrue(trie.autoComplete("pog") == None)
        self.assertTrue(trie.autoComplete("poh") == None)
        self.assertTrue(trie.autoComplete("poi") == None)
        self.assertTrue(trie.autoComplete("poj") == None)
        self.assertTrue(trie.autoComplete("pok") == None)
        self.assertTrue(trie.autoComplete("pol") == "poll")
        self.assertTrue(trie.autoComplete("poll") == "poll")
        self.assertTrue(trie.autoComplete("pom") == None)
        self.assertTrue(trie.autoComplete("pon") == None)
        self.assertTrue(trie.autoComplete("poo") == None)
        self.assertTrue(trie.autoComplete("pop") == "populous")
        self.assertTrue(trie.autoComplete("popu") == "populous")
        self.assertTrue(trie.autoComplete("popul") == "populous")
        self.assertTrue(trie.autoComplete("populo") == "populous")
        self.assertTrue(trie.autoComplete("populou") == "populous")
        self.assertTrue(trie.autoComplete("populous") == "populous")
        self.assertTrue(trie.autoComplete("poq") == None)
        self.assertTrue(trie.autoComplete("por") == "ports")
        self.assertTrue(trie.autoComplete("port") == "ports")
        self.assertTrue(trie.autoComplete("ports") == "ports")
        self.assertTrue(trie.autoComplete("pos") == "post")
        self.assertTrue(trie.autoComplete("poss") == "possession")
        self.assertTrue(trie.autoComplete("posse") == "possession")
        self.assertTrue(trie.autoComplete("posses") == "possession")
        self.assertTrue(trie.autoComplete("possess") == "possession")
        self.assertTrue(trie.autoComplete("possessi") == "possession")
        self.assertTrue(trie.autoComplete("possessio") == "possession")
        self.assertTrue(trie.autoComplete("possession") == "possession")
        self.assertTrue(trie.autoComplete("post") == "post")
        self.assertTrue(trie.autoComplete("poste") == "posterity")
        self.assertTrue(trie.autoComplete("poster") == "posterity")
        self.assertTrue(trie.autoComplete("posteri") == "posterity")
        self.assertTrue(trie.autoComplete("posterit") == "posterity")
        self.assertTrue(trie.autoComplete("posterity") == "posterity")
        self.assertTrue(trie.autoComplete("pot") == None)
        self.assertTrue(trie.autoComplete("pou") == None)
        self.assertTrue(trie.autoComplete("pov") == None)
        self.assertTrue(trie.autoComplete("pow") == "power")
        self.assertTrue(trie.autoComplete("powe") == "power")
        self.assertTrue(trie.autoComplete("power") == "power")
        self.assertTrue(trie.autoComplete("powers") == "powers")
        self.assertTrue(trie.autoComplete("pox") == None)
        self.assertTrue(trie.autoComplete("poy") == None)
        self.assertTrue(trie.autoComplete("poz") == None)
        self.assertTrue(trie.autoComplete("pp") == None)
        self.assertTrue(trie.autoComplete("ppa") == None)
        self.assertTrue(trie.autoComplete("ppb") == None)
        self.assertTrue(trie.autoComplete("ppc") == None)
        self.assertTrue(trie.autoComplete("ppd") == None)
        self.assertTrue(trie.autoComplete("ppe") == None)
        self.assertTrue(trie.autoComplete("ppf") == None)
        self.assertTrue(trie.autoComplete("ppg") == None)
        self.assertTrue(trie.autoComplete("pph") == None)
        self.assertTrue(trie.autoComplete("ppi") == None)
        self.assertTrue(trie.autoComplete("ppj") == None)
        self.assertTrue(trie.autoComplete("ppk") == None)
        self.assertTrue(trie.autoComplete("ppl") == None)
        self.assertTrue(trie.autoComplete("ppm") == None)
        self.assertTrue(trie.autoComplete("ppn") == None)
        self.assertTrue(trie.autoComplete("ppo") == None)
        self.assertTrue(trie.autoComplete("ppp") == None)
        self.assertTrue(trie.autoComplete("ppq") == None)
        self.assertTrue(trie.autoComplete("ppr") == None)
        self.assertTrue(trie.autoComplete("pps") == None)
        self.assertTrue(trie.autoComplete("ppt") == None)
        self.assertTrue(trie.autoComplete("ppu") == None)
        self.assertTrue(trie.autoComplete("ppv") == None)
        self.assertTrue(trie.autoComplete("ppw") == None)
        self.assertTrue(trie.autoComplete("ppx") == None)
        self.assertTrue(trie.autoComplete("ppy") == None)
        self.assertTrue(trie.autoComplete("ppz") == None)
        self.assertTrue(trie.autoComplete("pq") == None)
        self.assertTrue(trie.autoComplete("pqa") == None)
        self.assertTrue(trie.autoComplete("pqb") == None)
        self.assertTrue(trie.autoComplete("pqc") == None)
        self.assertTrue(trie.autoComplete("pqd") == None)
        self.assertTrue(trie.autoComplete("pqe") == None)
        self.assertTrue(trie.autoComplete("pqf") == None)
        self.assertTrue(trie.autoComplete("pqg") == None)
        self.assertTrue(trie.autoComplete("pqh") == None)
        self.assertTrue(trie.autoComplete("pqi") == None)
        self.assertTrue(trie.autoComplete("pqj") == None)
        self.assertTrue(trie.autoComplete("pqk") == None)
        self.assertTrue(trie.autoComplete("pql") == None)
        self.assertTrue(trie.autoComplete("pqm") == None)
        self.assertTrue(trie.autoComplete("pqn") == None)
        self.assertTrue(trie.autoComplete("pqo") == None)
        self.assertTrue(trie.autoComplete("pqp") == None)
        self.assertTrue(trie.autoComplete("pqq") == None)
        self.assertTrue(trie.autoComplete("pqr") == None)
        self.assertTrue(trie.autoComplete("pqs") == None)
        self.assertTrue(trie.autoComplete("pqt") == None)
        self.assertTrue(trie.autoComplete("pqu") == None)
        self.assertTrue(trie.autoComplete("pqv") == None)
        self.assertTrue(trie.autoComplete("pqw") == None)
        self.assertTrue(trie.autoComplete("pqx") == None)
        self.assertTrue(trie.autoComplete("pqy") == None)
        self.assertTrue(trie.autoComplete("pqz") == None)
        self.assertTrue(trie.autoComplete("pr") == "president")
        self.assertTrue(trie.autoComplete("pra") == None)
        self.assertTrue(trie.autoComplete("prb") == None)
        self.assertTrue(trie.autoComplete("prc") == None)
        self.assertTrue(trie.autoComplete("prd") == None)
        self.assertTrue(trie.autoComplete("pre") == "president")
        self.assertTrue(trie.autoComplete("pref") == "preference")
        self.assertTrue(trie.autoComplete("prefe") == "preference")
        self.assertTrue(trie.autoComplete("prefer") == "preference")
        self.assertTrue(trie.autoComplete("prefere") == "preference")
        self.assertTrue(trie.autoComplete("preferen") == "preference")
        self.assertTrue(trie.autoComplete("preferenc") == "preference")
        self.assertTrue(trie.autoComplete("preference") == "preference")
        self.assertTrue(trie.autoComplete("prej") == "prejudice")
        self.assertTrue(trie.autoComplete("preju") == "prejudice")
        self.assertTrue(trie.autoComplete("prejud") == "prejudice")
        self.assertTrue(trie.autoComplete("prejudi") == "prejudice")
        self.assertTrue(trie.autoComplete("prejudic") == "prejudice")
        self.assertTrue(trie.autoComplete("prejudice") == "prejudice")
        self.assertTrue(trie.autoComplete("pres") == "president")
        self.assertTrue(trie.autoComplete("presc") == "prescribed")
        self.assertTrue(trie.autoComplete("prescr") == "prescribed")
        self.assertTrue(trie.autoComplete("prescri") == "prescribed")
        self.assertTrue(trie.autoComplete("prescrib") == "prescribed")
        self.assertTrue(trie.autoComplete("prescribe") == "prescribed")
        self.assertTrue(trie.autoComplete("prescribed") == "prescribed")
        self.assertTrue(trie.autoComplete("prese") == "present")
        self.assertTrue(trie.autoComplete("presen") == "present")
        self.assertTrue(trie.autoComplete("presenc") == "presence")
        self.assertTrue(trie.autoComplete("presence") == "presence")
        self.assertTrue(trie.autoComplete("present") == "present")
        self.assertTrue(trie.autoComplete("presente") == "presented")
        self.assertTrue(trie.autoComplete("presented") == "presented")
        self.assertTrue(trie.autoComplete("presentm") == "presentment")
        self.assertTrue(trie.autoComplete("presentme") == "presentment")
        self.assertTrue(trie.autoComplete("presentmen") == "presentment")
        self.assertTrue(trie.autoComplete("presentment") == "presentment")
        self.assertTrue(trie.autoComplete("preser") == "preserve")
        self.assertTrue(trie.autoComplete("preserv") == "preserve")
        self.assertTrue(trie.autoComplete("preserve") == "preserve")
        self.assertTrue(trie.autoComplete("preserved") == "preserved")
        self.assertTrue(trie.autoComplete("presi") == "president")
        self.assertTrue(trie.autoComplete("presid") == "president")
        self.assertTrue(trie.autoComplete("preside") == "president")
        self.assertTrue(trie.autoComplete("presiden") == "president")
        self.assertTrue(trie.autoComplete("president") == "president")
        self.assertTrue(trie.autoComplete("press") == "press")
        self.assertTrue(trie.autoComplete("prev") == "prevent")
        self.assertTrue(trie.autoComplete("preve") == "prevent")
        self.assertTrue(trie.autoComplete("preven") == "prevent")
        self.assertTrue(trie.autoComplete("prevent") == "prevent")
        self.assertTrue(trie.autoComplete("previ") == "previously")
        self.assertTrue(trie.autoComplete("previo") == "previously")
        self.assertTrue(trie.autoComplete("previou") == "previously")
        self.assertTrue(trie.autoComplete("previous") == "previously")
        self.assertTrue(trie.autoComplete("previousl") == "previously")
        self.assertTrue(trie.autoComplete("previously") == "previously")
        self.assertTrue(trie.autoComplete("prf") == None)
        self.assertTrue(trie.autoComplete("prg") == None)
        self.assertTrue(trie.autoComplete("prh") == None)
        self.assertTrue(trie.autoComplete("pri") == "principal")
        self.assertTrue(trie.autoComplete("prim") == "primary")
        self.assertTrue(trie.autoComplete("prima") == "primary")
        self.assertTrue(trie.autoComplete("primar") == "primary")
        self.assertTrue(trie.autoComplete("primary") == "primary")
        self.assertTrue(trie.autoComplete("prin") == "principal")
        self.assertTrue(trie.autoComplete("princ") == "principal")
        self.assertTrue(trie.autoComplete("prince") == "prince")
        self.assertTrue(trie.autoComplete("princi") == "principal")
        self.assertTrue(trie.autoComplete("princip") == "principal")
        self.assertTrue(trie.autoComplete("principa") == "principal")
        self.assertTrue(trie.autoComplete("principal") == "principal")
        self.assertTrue(trie.autoComplete("prio") == "prior")
        self.assertTrue(trie.autoComplete("prior") == "prior")
        self.assertTrue(trie.autoComplete("priv") == "privileges")
        self.assertTrue(trie.autoComplete("priva") == "private")
        self.assertTrue(trie.autoComplete("privat") == "private")
        self.assertTrue(trie.autoComplete("private") == "private")
        self.assertTrue(trie.autoComplete("privi") == "privileges")
        self.assertTrue(trie.autoComplete("privil") == "privileges")
        self.assertTrue(trie.autoComplete("privile") == "privileges")
        self.assertTrue(trie.autoComplete("privileg") == "privileges")
        self.assertTrue(trie.autoComplete("privilege") == "privileges")
        self.assertTrue(trie.autoComplete("privileged") == "privileged")
        self.assertTrue(trie.autoComplete("privileges") == "privileges")
        self.assertTrue(trie.autoComplete("prj") == None)
        self.assertTrue(trie.autoComplete("prk") == None)
        self.assertTrue(trie.autoComplete("prl") == None)
        self.assertTrue(trie.autoComplete("prm") == None)
        self.assertTrue(trie.autoComplete("prn") == None)
        self.assertTrue(trie.autoComplete("pro") == "provide")
        self.assertTrue(trie.autoComplete("prob") == "probable")
        self.assertTrue(trie.autoComplete("proba") == "probable")
        self.assertTrue(trie.autoComplete("probab") == "probable")
        self.assertTrue(trie.autoComplete("probabl") == "probable")
        self.assertTrue(trie.autoComplete("probable") == "probable")
        self.assertTrue(trie.autoComplete("proc") == "proceedings")
        self.assertTrue(trie.autoComplete("proce") == "proceedings")
        self.assertTrue(trie.autoComplete("procee") == "proceedings")
        self.assertTrue(trie.autoComplete("proceed") == "proceedings")
        self.assertTrue(trie.autoComplete("proceedi") == "proceedings")
        self.assertTrue(trie.autoComplete("proceedin") == "proceedings")
        self.assertTrue(trie.autoComplete("proceeding") == "proceedings")
        self.assertTrue(trie.autoComplete("proceedings") == "proceedings")
        self.assertTrue(trie.autoComplete("proces") == "process")
        self.assertTrue(trie.autoComplete("process") == "process")
        self.assertTrue(trie.autoComplete("prod") == "produce")
        self.assertTrue(trie.autoComplete("produ") == "produce")
        self.assertTrue(trie.autoComplete("produc") == "produce")
        self.assertTrue(trie.autoComplete("produce") == "produce")
        self.assertTrue(trie.autoComplete("prof") == "profit")
        self.assertTrue(trie.autoComplete("profi") == "profit")
        self.assertTrue(trie.autoComplete("profit") == "profit")
        self.assertTrue(trie.autoComplete("prog") == "progress")
        self.assertTrue(trie.autoComplete("progr") == "progress")
        self.assertTrue(trie.autoComplete("progre") == "progress")
        self.assertTrue(trie.autoComplete("progres") == "progress")
        self.assertTrue(trie.autoComplete("progress") == "progress")
        self.assertTrue(trie.autoComplete("proh") == "prohibited")
        self.assertTrue(trie.autoComplete("prohi") == "prohibited")
        self.assertTrue(trie.autoComplete("prohib") == "prohibited")
        self.assertTrue(trie.autoComplete("prohibi") == "prohibited")
        self.assertTrue(trie.autoComplete("prohibit") == "prohibited")
        self.assertTrue(trie.autoComplete("prohibite") == "prohibited")
        self.assertTrue(trie.autoComplete("prohibited") == "prohibited")
        self.assertTrue(trie.autoComplete("prohibiti") == "prohibiting")
        self.assertTrue(trie.autoComplete("prohibitin") == "prohibiting")
        self.assertTrue(trie.autoComplete("prohibiting") == "prohibiting")
        self.assertTrue(trie.autoComplete("prom") == "promote")
        self.assertTrue(trie.autoComplete("promo") == "promote")
        self.assertTrue(trie.autoComplete("promot") == "promote")
        self.assertTrue(trie.autoComplete("promote") == "promote")
        self.assertTrue(trie.autoComplete("prop") == "proper")
        self.assertTrue(trie.autoComplete("prope") == "proper")
        self.assertTrue(trie.autoComplete("proper") == "proper")
        self.assertTrue(trie.autoComplete("propert") == "property")
        self.assertTrue(trie.autoComplete("property") == "property")
        self.assertTrue(trie.autoComplete("propo") == "proportion")
        self.assertTrue(trie.autoComplete("propor") == "proportion")
        self.assertTrue(trie.autoComplete("proport") == "proportion")
        self.assertTrue(trie.autoComplete("proporti") == "proportion")
        self.assertTrue(trie.autoComplete("proportio") == "proportion")
        self.assertTrue(trie.autoComplete("proportion") == "proportion")
        self.assertTrue(trie.autoComplete("propos") == "propose")
        self.assertTrue(trie.autoComplete("propose") == "propose")
        self.assertTrue(trie.autoComplete("proposed") == "proposed")
        self.assertTrue(trie.autoComplete("proposi") == "proposing")
        self.assertTrue(trie.autoComplete("proposin") == "proposing")
        self.assertTrue(trie.autoComplete("proposing") == "proposing")
        self.assertTrue(trie.autoComplete("pros") == "prosecuted")
        self.assertTrue(trie.autoComplete("prose") == "prosecuted")
        self.assertTrue(trie.autoComplete("prosec") == "prosecuted")
        self.assertTrue(trie.autoComplete("prosecu") == "prosecuted")
        self.assertTrue(trie.autoComplete("prosecut") == "prosecuted")
        self.assertTrue(trie.autoComplete("prosecute") == "prosecuted")
        self.assertTrue(trie.autoComplete("prosecuted") == "prosecuted")
        self.assertTrue(trie.autoComplete("prosecuti") == "prosecutions")
        self.assertTrue(trie.autoComplete("prosecutio") == "prosecutions")
        self.assertTrue(trie.autoComplete("prosecution") == "prosecutions")
        self.assertTrue(trie.autoComplete("prosecutions") == "prosecutions")
        self.assertTrue(trie.autoComplete("prot") == "protect")
        self.assertTrue(trie.autoComplete("prote") == "protect")
        self.assertTrue(trie.autoComplete("protec") == "protect")
        self.assertTrue(trie.autoComplete("protect") == "protect")
        self.assertTrue(trie.autoComplete("protecti") == "protection")
        self.assertTrue(trie.autoComplete("protectio") == "protection")
        self.assertTrue(trie.autoComplete("protection") == "protection")
        self.assertTrue(trie.autoComplete("prov") == "provide")
        self.assertTrue(trie.autoComplete("prove") == "proved")
        self.assertTrue(trie.autoComplete("proved") == "proved")
        self.assertTrue(trie.autoComplete("provi") == "provide")
        self.assertTrue(trie.autoComplete("provid") == "provide")
        self.assertTrue(trie.autoComplete("provide") == "provide")
        self.assertTrue(trie.autoComplete("provided") == "provided")
        self.assertTrue(trie.autoComplete("providen") == "providence")
        self.assertTrue(trie.autoComplete("providenc") == "providence")
        self.assertTrue(trie.autoComplete("providence") == "providence")
        self.assertTrue(trie.autoComplete("provis") == "provisions")
        self.assertTrue(trie.autoComplete("provisi") == "provisions")
        self.assertTrue(trie.autoComplete("provisio") == "provisions")
        self.assertTrue(trie.autoComplete("provision") == "provisions")
        self.assertTrue(trie.autoComplete("provisions") == "provisions")
        self.assertTrue(trie.autoComplete("prp") == None)
        self.assertTrue(trie.autoComplete("prq") == None)
        self.assertTrue(trie.autoComplete("prr") == None)
        self.assertTrue(trie.autoComplete("prs") == None)
        self.assertTrue(trie.autoComplete("prt") == None)
        self.assertTrue(trie.autoComplete("pru") == None)
        self.assertTrue(trie.autoComplete("prv") == None)
        self.assertTrue(trie.autoComplete("prw") == None)
        self.assertTrue(trie.autoComplete("prx") == None)
        self.assertTrue(trie.autoComplete("pry") == None)
        self.assertTrue(trie.autoComplete("prz") == None)
        self.assertTrue(trie.autoComplete("ps") == None)
        self.assertTrue(trie.autoComplete("psa") == None)
        self.assertTrue(trie.autoComplete("psb") == None)
        self.assertTrue(trie.autoComplete("psc") == None)
        self.assertTrue(trie.autoComplete("psd") == None)
        self.assertTrue(trie.autoComplete("pse") == None)
        self.assertTrue(trie.autoComplete("psf") == None)
        self.assertTrue(trie.autoComplete("psg") == None)
        self.assertTrue(trie.autoComplete("psh") == None)
        self.assertTrue(trie.autoComplete("psi") == None)
        self.assertTrue(trie.autoComplete("psj") == None)
        self.assertTrue(trie.autoComplete("psk") == None)
        self.assertTrue(trie.autoComplete("psl") == None)
        self.assertTrue(trie.autoComplete("psm") == None)
        self.assertTrue(trie.autoComplete("psn") == None)
        self.assertTrue(trie.autoComplete("pso") == None)
        self.assertTrue(trie.autoComplete("psp") == None)
        self.assertTrue(trie.autoComplete("psq") == None)
        self.assertTrue(trie.autoComplete("psr") == None)
        self.assertTrue(trie.autoComplete("pss") == None)
        self.assertTrue(trie.autoComplete("pst") == None)
        self.assertTrue(trie.autoComplete("psu") == None)
        self.assertTrue(trie.autoComplete("psv") == None)
        self.assertTrue(trie.autoComplete("psw") == None)
        self.assertTrue(trie.autoComplete("psx") == None)
        self.assertTrue(trie.autoComplete("psy") == None)
        self.assertTrue(trie.autoComplete("psz") == None)
        self.assertTrue(trie.autoComplete("pt") == None)
        self.assertTrue(trie.autoComplete("pta") == None)
        self.assertTrue(trie.autoComplete("ptb") == None)
        self.assertTrue(trie.autoComplete("ptc") == None)
        self.assertTrue(trie.autoComplete("ptd") == None)
        self.assertTrue(trie.autoComplete("pte") == None)
        self.assertTrue(trie.autoComplete("ptf") == None)
        self.assertTrue(trie.autoComplete("ptg") == None)
        self.assertTrue(trie.autoComplete("pth") == None)
        self.assertTrue(trie.autoComplete("pti") == None)
        self.assertTrue(trie.autoComplete("ptj") == None)
        self.assertTrue(trie.autoComplete("ptk") == None)
        self.assertTrue(trie.autoComplete("ptl") == None)
        self.assertTrue(trie.autoComplete("ptm") == None)
        self.assertTrue(trie.autoComplete("ptn") == None)
        self.assertTrue(trie.autoComplete("pto") == None)
        self.assertTrue(trie.autoComplete("ptp") == None)
        self.assertTrue(trie.autoComplete("ptq") == None)
        self.assertTrue(trie.autoComplete("ptr") == None)
        self.assertTrue(trie.autoComplete("pts") == None)
        self.assertTrue(trie.autoComplete("ptt") == None)
        self.assertTrue(trie.autoComplete("ptu") == None)
        self.assertTrue(trie.autoComplete("ptv") == None)
        self.assertTrue(trie.autoComplete("ptw") == None)
        self.assertTrue(trie.autoComplete("ptx") == None)
        self.assertTrue(trie.autoComplete("pty") == None)
        self.assertTrue(trie.autoComplete("ptz") == None)
        self.assertTrue(trie.autoComplete("pu") == "public")
        self.assertTrue(trie.autoComplete("pua") == None)
        self.assertTrue(trie.autoComplete("pub") == "public")
        self.assertTrue(trie.autoComplete("publ") == "public")
        self.assertTrue(trie.autoComplete("publi") == "public")
        self.assertTrue(trie.autoComplete("public") == "public")
        self.assertTrue(trie.autoComplete("publis") == "publish")
        self.assertTrue(trie.autoComplete("publish") == "publish")
        self.assertTrue(trie.autoComplete("publishe") == "published")
        self.assertTrue(trie.autoComplete("published") == "published")
        self.assertTrue(trie.autoComplete("puc") == None)
        self.assertTrue(trie.autoComplete("pud") == None)
        self.assertTrue(trie.autoComplete("pue") == None)
        self.assertTrue(trie.autoComplete("puf") == None)
        self.assertTrue(trie.autoComplete("pug") == None)
        self.assertTrue(trie.autoComplete("puh") == None)
        self.assertTrue(trie.autoComplete("pui") == None)
        self.assertTrue(trie.autoComplete("puj") == None)
        self.assertTrue(trie.autoComplete("puk") == None)
        self.assertTrue(trie.autoComplete("pul") == None)
        self.assertTrue(trie.autoComplete("pum") == None)
        self.assertTrue(trie.autoComplete("pun") == "punishment")
        self.assertTrue(trie.autoComplete("puni") == "punishment")
        self.assertTrue(trie.autoComplete("punis") == "punishment")
        self.assertTrue(trie.autoComplete("punish") == "punishment")
        self.assertTrue(trie.autoComplete("punishm") == "punishment")
        self.assertTrue(trie.autoComplete("punishme") == "punishment")
        self.assertTrue(trie.autoComplete("punishmen") == "punishment")
        self.assertTrue(trie.autoComplete("punishment") == "punishment")
        self.assertTrue(trie.autoComplete("punishments") == "punishments")
        self.assertTrue(trie.autoComplete("puo") == None)
        self.assertTrue(trie.autoComplete("pup") == None)
        self.assertTrue(trie.autoComplete("puq") == None)
        self.assertTrue(trie.autoComplete("pur") == "purpose")
        self.assertTrue(trie.autoComplete("purc") == "purchased")
        self.assertTrue(trie.autoComplete("purch") == "purchased")
        self.assertTrue(trie.autoComplete("purcha") == "purchased")
        self.assertTrue(trie.autoComplete("purchas") == "purchased")
        self.assertTrue(trie.autoComplete("purchase") == "purchased")
        self.assertTrue(trie.autoComplete("purchased") == "purchased")
        self.assertTrue(trie.autoComplete("purp") == "purpose")
        self.assertTrue(trie.autoComplete("purpo") == "purpose")
        self.assertTrue(trie.autoComplete("purpos") == "purpose")
        self.assertTrue(trie.autoComplete("purpose") == "purpose")
        self.assertTrue(trie.autoComplete("purposes") == "purposes")
        self.assertTrue(trie.autoComplete("purs") == "pursuance")
        self.assertTrue(trie.autoComplete("pursu") == "pursuance")
        self.assertTrue(trie.autoComplete("pursua") == "pursuance")
        self.assertTrue(trie.autoComplete("pursuan") == "pursuance")
        self.assertTrue(trie.autoComplete("pursuanc") == "pursuance")
        self.assertTrue(trie.autoComplete("pursuance") == "pursuance")
        self.assertTrue(trie.autoComplete("pus") == None)
        self.assertTrue(trie.autoComplete("put") == "put")
        self.assertTrue(trie.autoComplete("puu") == None)
        self.assertTrue(trie.autoComplete("puv") == None)
        self.assertTrue(trie.autoComplete("puw") == None)
        self.assertTrue(trie.autoComplete("pux") == None)
        self.assertTrue(trie.autoComplete("puy") == None)
        self.assertTrue(trie.autoComplete("puz") == None)
        self.assertTrue(trie.autoComplete("pv") == None)
        self.assertTrue(trie.autoComplete("pva") == None)
        self.assertTrue(trie.autoComplete("pvb") == None)
        self.assertTrue(trie.autoComplete("pvc") == None)
        self.assertTrue(trie.autoComplete("pvd") == None)
        self.assertTrue(trie.autoComplete("pve") == None)
        self.assertTrue(trie.autoComplete("pvf") == None)
        self.assertTrue(trie.autoComplete("pvg") == None)
        self.assertTrue(trie.autoComplete("pvh") == None)
        self.assertTrue(trie.autoComplete("pvi") == None)
        self.assertTrue(trie.autoComplete("pvj") == None)
        self.assertTrue(trie.autoComplete("pvk") == None)
        self.assertTrue(trie.autoComplete("pvl") == None)
        self.assertTrue(trie.autoComplete("pvm") == None)
        self.assertTrue(trie.autoComplete("pvn") == None)
        self.assertTrue(trie.autoComplete("pvo") == None)
        self.assertTrue(trie.autoComplete("pvp") == None)
        self.assertTrue(trie.autoComplete("pvq") == None)
        self.assertTrue(trie.autoComplete("pvr") == None)
        self.assertTrue(trie.autoComplete("pvs") == None)
        self.assertTrue(trie.autoComplete("pvt") == None)
        self.assertTrue(trie.autoComplete("pvu") == None)
        self.assertTrue(trie.autoComplete("pvv") == None)
        self.assertTrue(trie.autoComplete("pvw") == None)
        self.assertTrue(trie.autoComplete("pvx") == None)
        self.assertTrue(trie.autoComplete("pvy") == None)
        self.assertTrue(trie.autoComplete("pvz") == None)
        self.assertTrue(trie.autoComplete("pw") == None)
        self.assertTrue(trie.autoComplete("pwa") == None)
        self.assertTrue(trie.autoComplete("pwb") == None)
        self.assertTrue(trie.autoComplete("pwc") == None)
        self.assertTrue(trie.autoComplete("pwd") == None)
        self.assertTrue(trie.autoComplete("pwe") == None)
        self.assertTrue(trie.autoComplete("pwf") == None)
        self.assertTrue(trie.autoComplete("pwg") == None)
        self.assertTrue(trie.autoComplete("pwh") == None)
        self.assertTrue(trie.autoComplete("pwi") == None)
        self.assertTrue(trie.autoComplete("pwj") == None)
        self.assertTrue(trie.autoComplete("pwk") == None)
        self.assertTrue(trie.autoComplete("pwl") == None)
        self.assertTrue(trie.autoComplete("pwm") == None)
        self.assertTrue(trie.autoComplete("pwn") == None)
        self.assertTrue(trie.autoComplete("pwo") == None)
        self.assertTrue(trie.autoComplete("pwp") == None)
        self.assertTrue(trie.autoComplete("pwq") == None)
        self.assertTrue(trie.autoComplete("pwr") == None)
        self.assertTrue(trie.autoComplete("pws") == None)
        self.assertTrue(trie.autoComplete("pwt") == None)
        self.assertTrue(trie.autoComplete("pwu") == None)
        self.assertTrue(trie.autoComplete("pwv") == None)
        self.assertTrue(trie.autoComplete("pww") == None)
        self.assertTrue(trie.autoComplete("pwx") == None)
        self.assertTrue(trie.autoComplete("pwy") == None)
        self.assertTrue(trie.autoComplete("pwz") == None)
        self.assertTrue(trie.autoComplete("px") == None)
        self.assertTrue(trie.autoComplete("pxa") == None)
        self.assertTrue(trie.autoComplete("pxb") == None)
        self.assertTrue(trie.autoComplete("pxc") == None)
        self.assertTrue(trie.autoComplete("pxd") == None)
        self.assertTrue(trie.autoComplete("pxe") == None)
        self.assertTrue(trie.autoComplete("pxf") == None)
        self.assertTrue(trie.autoComplete("pxg") == None)
        self.assertTrue(trie.autoComplete("pxh") == None)
        self.assertTrue(trie.autoComplete("pxi") == None)
        self.assertTrue(trie.autoComplete("pxj") == None)
        self.assertTrue(trie.autoComplete("pxk") == None)
        self.assertTrue(trie.autoComplete("pxl") == None)
        self.assertTrue(trie.autoComplete("pxm") == None)
        self.assertTrue(trie.autoComplete("pxn") == None)
        self.assertTrue(trie.autoComplete("pxo") == None)
        self.assertTrue(trie.autoComplete("pxp") == None)
        self.assertTrue(trie.autoComplete("pxq") == None)
        self.assertTrue(trie.autoComplete("pxr") == None)
        self.assertTrue(trie.autoComplete("pxs") == None)
        self.assertTrue(trie.autoComplete("pxt") == None)
        self.assertTrue(trie.autoComplete("pxu") == None)
        self.assertTrue(trie.autoComplete("pxv") == None)
        self.assertTrue(trie.autoComplete("pxw") == None)
        self.assertTrue(trie.autoComplete("pxx") == None)
        self.assertTrue(trie.autoComplete("pxy") == None)
        self.assertTrue(trie.autoComplete("pxz") == None)
        self.assertTrue(trie.autoComplete("py") == None)
        self.assertTrue(trie.autoComplete("pya") == None)
        self.assertTrue(trie.autoComplete("pyb") == None)
        self.assertTrue(trie.autoComplete("pyc") == None)
        self.assertTrue(trie.autoComplete("pyd") == None)
        self.assertTrue(trie.autoComplete("pye") == None)
        self.assertTrue(trie.autoComplete("pyf") == None)
        self.assertTrue(trie.autoComplete("pyg") == None)
        self.assertTrue(trie.autoComplete("pyh") == None)
        self.assertTrue(trie.autoComplete("pyi") == None)
        self.assertTrue(trie.autoComplete("pyj") == None)
        self.assertTrue(trie.autoComplete("pyk") == None)
        self.assertTrue(trie.autoComplete("pyl") == None)
        self.assertTrue(trie.autoComplete("pym") == None)
        self.assertTrue(trie.autoComplete("pyn") == None)
        self.assertTrue(trie.autoComplete("pyo") == None)
        self.assertTrue(trie.autoComplete("pyp") == None)
        self.assertTrue(trie.autoComplete("pyq") == None)
        self.assertTrue(trie.autoComplete("pyr") == None)
        self.assertTrue(trie.autoComplete("pys") == None)
        self.assertTrue(trie.autoComplete("pyt") == None)
        self.assertTrue(trie.autoComplete("pyu") == None)
        self.assertTrue(trie.autoComplete("pyv") == None)
        self.assertTrue(trie.autoComplete("pyw") == None)
        self.assertTrue(trie.autoComplete("pyx") == None)
        self.assertTrue(trie.autoComplete("pyy") == None)
        self.assertTrue(trie.autoComplete("pyz") == None)
        self.assertTrue(trie.autoComplete("pz") == None)
        self.assertTrue(trie.autoComplete("pza") == None)
        self.assertTrue(trie.autoComplete("pzb") == None)
        self.assertTrue(trie.autoComplete("pzc") == None)
        self.assertTrue(trie.autoComplete("pzd") == None)
        self.assertTrue(trie.autoComplete("pze") == None)
        self.assertTrue(trie.autoComplete("pzf") == None)
        self.assertTrue(trie.autoComplete("pzg") == None)
        self.assertTrue(trie.autoComplete("pzh") == None)
        self.assertTrue(trie.autoComplete("pzi") == None)
        self.assertTrue(trie.autoComplete("pzj") == None)
        self.assertTrue(trie.autoComplete("pzk") == None)
        self.assertTrue(trie.autoComplete("pzl") == None)
        self.assertTrue(trie.autoComplete("pzm") == None)
        self.assertTrue(trie.autoComplete("pzn") == None)
        self.assertTrue(trie.autoComplete("pzo") == None)
        self.assertTrue(trie.autoComplete("pzp") == None)
        self.assertTrue(trie.autoComplete("pzq") == None)
        self.assertTrue(trie.autoComplete("pzr") == None)
        self.assertTrue(trie.autoComplete("pzs") == None)
        self.assertTrue(trie.autoComplete("pzt") == None)
        self.assertTrue(trie.autoComplete("pzu") == None)
        self.assertTrue(trie.autoComplete("pzv") == None)
        self.assertTrue(trie.autoComplete("pzw") == None)
        self.assertTrue(trie.autoComplete("pzx") == None)
        self.assertTrue(trie.autoComplete("pzy") == None)
        self.assertTrue(trie.autoComplete("pzz") == None)
        self.assertTrue(trie.autoComplete("q") == "quorum")
        self.assertTrue(trie.autoComplete("qa") == None)
        self.assertTrue(trie.autoComplete("qaa") == None)
        self.assertTrue(trie.autoComplete("qab") == None)
        self.assertTrue(trie.autoComplete("qac") == None)
        self.assertTrue(trie.autoComplete("qad") == None)
        self.assertTrue(trie.autoComplete("qae") == None)
        self.assertTrue(trie.autoComplete("qaf") == None)
        self.assertTrue(trie.autoComplete("qag") == None)
        self.assertTrue(trie.autoComplete("qah") == None)
        self.assertTrue(trie.autoComplete("qai") == None)
        self.assertTrue(trie.autoComplete("qaj") == None)
        self.assertTrue(trie.autoComplete("qak") == None)
        self.assertTrue(trie.autoComplete("qal") == None)
        self.assertTrue(trie.autoComplete("qam") == None)
        self.assertTrue(trie.autoComplete("qan") == None)
        self.assertTrue(trie.autoComplete("qao") == None)
        self.assertTrue(trie.autoComplete("qap") == None)
        self.assertTrue(trie.autoComplete("qaq") == None)
        self.assertTrue(trie.autoComplete("qar") == None)
        self.assertTrue(trie.autoComplete("qas") == None)
        self.assertTrue(trie.autoComplete("qat") == None)
        self.assertTrue(trie.autoComplete("qau") == None)
        self.assertTrue(trie.autoComplete("qav") == None)
        self.assertTrue(trie.autoComplete("qaw") == None)
        self.assertTrue(trie.autoComplete("qax") == None)
        self.assertTrue(trie.autoComplete("qay") == None)
        self.assertTrue(trie.autoComplete("qaz") == None)
        self.assertTrue(trie.autoComplete("qb") == None)
        self.assertTrue(trie.autoComplete("qba") == None)
        self.assertTrue(trie.autoComplete("qbb") == None)
        self.assertTrue(trie.autoComplete("qbc") == None)
        self.assertTrue(trie.autoComplete("qbd") == None)
        self.assertTrue(trie.autoComplete("qbe") == None)
        self.assertTrue(trie.autoComplete("qbf") == None)
        self.assertTrue(trie.autoComplete("qbg") == None)
        self.assertTrue(trie.autoComplete("qbh") == None)
        self.assertTrue(trie.autoComplete("qbi") == None)
        self.assertTrue(trie.autoComplete("qbj") == None)
        self.assertTrue(trie.autoComplete("qbk") == None)
        self.assertTrue(trie.autoComplete("qbl") == None)
        self.assertTrue(trie.autoComplete("qbm") == None)
        self.assertTrue(trie.autoComplete("qbn") == None)
        self.assertTrue(trie.autoComplete("qbo") == None)
        self.assertTrue(trie.autoComplete("qbp") == None)
        self.assertTrue(trie.autoComplete("qbq") == None)
        self.assertTrue(trie.autoComplete("qbr") == None)
        self.assertTrue(trie.autoComplete("qbs") == None)
        self.assertTrue(trie.autoComplete("qbt") == None)
        self.assertTrue(trie.autoComplete("qbu") == None)
        self.assertTrue(trie.autoComplete("qbv") == None)
        self.assertTrue(trie.autoComplete("qbw") == None)
        self.assertTrue(trie.autoComplete("qbx") == None)
        self.assertTrue(trie.autoComplete("qby") == None)
        self.assertTrue(trie.autoComplete("qbz") == None)
        self.assertTrue(trie.autoComplete("qc") == None)
        self.assertTrue(trie.autoComplete("qca") == None)
        self.assertTrue(trie.autoComplete("qcb") == None)
        self.assertTrue(trie.autoComplete("qcc") == None)
        self.assertTrue(trie.autoComplete("qcd") == None)
        self.assertTrue(trie.autoComplete("qce") == None)
        self.assertTrue(trie.autoComplete("qcf") == None)
        self.assertTrue(trie.autoComplete("qcg") == None)
        self.assertTrue(trie.autoComplete("qch") == None)
        self.assertTrue(trie.autoComplete("qci") == None)
        self.assertTrue(trie.autoComplete("qcj") == None)
        self.assertTrue(trie.autoComplete("qck") == None)
        self.assertTrue(trie.autoComplete("qcl") == None)
        self.assertTrue(trie.autoComplete("qcm") == None)
        self.assertTrue(trie.autoComplete("qcn") == None)
        self.assertTrue(trie.autoComplete("qco") == None)
        self.assertTrue(trie.autoComplete("qcp") == None)
        self.assertTrue(trie.autoComplete("qcq") == None)
        self.assertTrue(trie.autoComplete("qcr") == None)
        self.assertTrue(trie.autoComplete("qcs") == None)
        self.assertTrue(trie.autoComplete("qct") == None)
        self.assertTrue(trie.autoComplete("qcu") == None)
        self.assertTrue(trie.autoComplete("qcv") == None)
        self.assertTrue(trie.autoComplete("qcw") == None)
        self.assertTrue(trie.autoComplete("qcx") == None)
        self.assertTrue(trie.autoComplete("qcy") == None)
        self.assertTrue(trie.autoComplete("qcz") == None)
        self.assertTrue(trie.autoComplete("qd") == None)
        self.assertTrue(trie.autoComplete("qda") == None)
        self.assertTrue(trie.autoComplete("qdb") == None)
        self.assertTrue(trie.autoComplete("qdc") == None)
        self.assertTrue(trie.autoComplete("qdd") == None)
        self.assertTrue(trie.autoComplete("qde") == None)
        self.assertTrue(trie.autoComplete("qdf") == None)
        self.assertTrue(trie.autoComplete("qdg") == None)
        self.assertTrue(trie.autoComplete("qdh") == None)
        self.assertTrue(trie.autoComplete("qdi") == None)
        self.assertTrue(trie.autoComplete("qdj") == None)
        self.assertTrue(trie.autoComplete("qdk") == None)
        self.assertTrue(trie.autoComplete("qdl") == None)
        self.assertTrue(trie.autoComplete("qdm") == None)
        self.assertTrue(trie.autoComplete("qdn") == None)
        self.assertTrue(trie.autoComplete("qdo") == None)
        self.assertTrue(trie.autoComplete("qdp") == None)
        self.assertTrue(trie.autoComplete("qdq") == None)
        self.assertTrue(trie.autoComplete("qdr") == None)
        self.assertTrue(trie.autoComplete("qds") == None)
        self.assertTrue(trie.autoComplete("qdt") == None)
        self.assertTrue(trie.autoComplete("qdu") == None)
        self.assertTrue(trie.autoComplete("qdv") == None)
        self.assertTrue(trie.autoComplete("qdw") == None)
        self.assertTrue(trie.autoComplete("qdx") == None)
        self.assertTrue(trie.autoComplete("qdy") == None)
        self.assertTrue(trie.autoComplete("qdz") == None)
        self.assertTrue(trie.autoComplete("qe") == None)
        self.assertTrue(trie.autoComplete("qea") == None)
        self.assertTrue(trie.autoComplete("qeb") == None)
        self.assertTrue(trie.autoComplete("qec") == None)
        self.assertTrue(trie.autoComplete("qed") == None)
        self.assertTrue(trie.autoComplete("qee") == None)
        self.assertTrue(trie.autoComplete("qef") == None)
        self.assertTrue(trie.autoComplete("qeg") == None)
        self.assertTrue(trie.autoComplete("qeh") == None)
        self.assertTrue(trie.autoComplete("qei") == None)
        self.assertTrue(trie.autoComplete("qej") == None)
        self.assertTrue(trie.autoComplete("qek") == None)
        self.assertTrue(trie.autoComplete("qel") == None)
        self.assertTrue(trie.autoComplete("qem") == None)
        self.assertTrue(trie.autoComplete("qen") == None)
        self.assertTrue(trie.autoComplete("qeo") == None)
        self.assertTrue(trie.autoComplete("qep") == None)
        self.assertTrue(trie.autoComplete("qeq") == None)
        self.assertTrue(trie.autoComplete("qer") == None)
        self.assertTrue(trie.autoComplete("qes") == None)
        self.assertTrue(trie.autoComplete("qet") == None)
        self.assertTrue(trie.autoComplete("qeu") == None)
        self.assertTrue(trie.autoComplete("qev") == None)
        self.assertTrue(trie.autoComplete("qew") == None)
        self.assertTrue(trie.autoComplete("qex") == None)
        self.assertTrue(trie.autoComplete("qey") == None)
        self.assertTrue(trie.autoComplete("qez") == None)
        self.assertTrue(trie.autoComplete("qf") == None)
        self.assertTrue(trie.autoComplete("qfa") == None)
        self.assertTrue(trie.autoComplete("qfb") == None)
        self.assertTrue(trie.autoComplete("qfc") == None)
        self.assertTrue(trie.autoComplete("qfd") == None)
        self.assertTrue(trie.autoComplete("qfe") == None)
        self.assertTrue(trie.autoComplete("qff") == None)
        self.assertTrue(trie.autoComplete("qfg") == None)
        self.assertTrue(trie.autoComplete("qfh") == None)
        self.assertTrue(trie.autoComplete("qfi") == None)
        self.assertTrue(trie.autoComplete("qfj") == None)
        self.assertTrue(trie.autoComplete("qfk") == None)
        self.assertTrue(trie.autoComplete("qfl") == None)
        self.assertTrue(trie.autoComplete("qfm") == None)
        self.assertTrue(trie.autoComplete("qfn") == None)
        self.assertTrue(trie.autoComplete("qfo") == None)
        self.assertTrue(trie.autoComplete("qfp") == None)
        self.assertTrue(trie.autoComplete("qfq") == None)
        self.assertTrue(trie.autoComplete("qfr") == None)
        self.assertTrue(trie.autoComplete("qfs") == None)
        self.assertTrue(trie.autoComplete("qft") == None)
        self.assertTrue(trie.autoComplete("qfu") == None)
        self.assertTrue(trie.autoComplete("qfv") == None)
        self.assertTrue(trie.autoComplete("qfw") == None)
        self.assertTrue(trie.autoComplete("qfx") == None)
        self.assertTrue(trie.autoComplete("qfy") == None)
        self.assertTrue(trie.autoComplete("qfz") == None)
        self.assertTrue(trie.autoComplete("qg") == None)
        self.assertTrue(trie.autoComplete("qga") == None)
        self.assertTrue(trie.autoComplete("qgb") == None)
        self.assertTrue(trie.autoComplete("qgc") == None)
        self.assertTrue(trie.autoComplete("qgd") == None)
        self.assertTrue(trie.autoComplete("qge") == None)
        self.assertTrue(trie.autoComplete("qgf") == None)
        self.assertTrue(trie.autoComplete("qgg") == None)
        self.assertTrue(trie.autoComplete("qgh") == None)
        self.assertTrue(trie.autoComplete("qgi") == None)
        self.assertTrue(trie.autoComplete("qgj") == None)
        self.assertTrue(trie.autoComplete("qgk") == None)
        self.assertTrue(trie.autoComplete("qgl") == None)
        self.assertTrue(trie.autoComplete("qgm") == None)
        self.assertTrue(trie.autoComplete("qgn") == None)
        self.assertTrue(trie.autoComplete("qgo") == None)
        self.assertTrue(trie.autoComplete("qgp") == None)
        self.assertTrue(trie.autoComplete("qgq") == None)
        self.assertTrue(trie.autoComplete("qgr") == None)
        self.assertTrue(trie.autoComplete("qgs") == None)
        self.assertTrue(trie.autoComplete("qgt") == None)
        self.assertTrue(trie.autoComplete("qgu") == None)
        self.assertTrue(trie.autoComplete("qgv") == None)
        self.assertTrue(trie.autoComplete("qgw") == None)
        self.assertTrue(trie.autoComplete("qgx") == None)
        self.assertTrue(trie.autoComplete("qgy") == None)
        self.assertTrue(trie.autoComplete("qgz") == None)
        self.assertTrue(trie.autoComplete("qh") == None)
        self.assertTrue(trie.autoComplete("qha") == None)
        self.assertTrue(trie.autoComplete("qhb") == None)
        self.assertTrue(trie.autoComplete("qhc") == None)
        self.assertTrue(trie.autoComplete("qhd") == None)
        self.assertTrue(trie.autoComplete("qhe") == None)
        self.assertTrue(trie.autoComplete("qhf") == None)
        self.assertTrue(trie.autoComplete("qhg") == None)
        self.assertTrue(trie.autoComplete("qhh") == None)
        self.assertTrue(trie.autoComplete("qhi") == None)
        self.assertTrue(trie.autoComplete("qhj") == None)
        self.assertTrue(trie.autoComplete("qhk") == None)
        self.assertTrue(trie.autoComplete("qhl") == None)
        self.assertTrue(trie.autoComplete("qhm") == None)
        self.assertTrue(trie.autoComplete("qhn") == None)
        self.assertTrue(trie.autoComplete("qho") == None)
        self.assertTrue(trie.autoComplete("qhp") == None)
        self.assertTrue(trie.autoComplete("qhq") == None)
        self.assertTrue(trie.autoComplete("qhr") == None)
        self.assertTrue(trie.autoComplete("qhs") == None)
        self.assertTrue(trie.autoComplete("qht") == None)
        self.assertTrue(trie.autoComplete("qhu") == None)
        self.assertTrue(trie.autoComplete("qhv") == None)
        self.assertTrue(trie.autoComplete("qhw") == None)
        self.assertTrue(trie.autoComplete("qhx") == None)
        self.assertTrue(trie.autoComplete("qhy") == None)
        self.assertTrue(trie.autoComplete("qhz") == None)
        self.assertTrue(trie.autoComplete("qi") == None)
        self.assertTrue(trie.autoComplete("qia") == None)
        self.assertTrue(trie.autoComplete("qib") == None)
        self.assertTrue(trie.autoComplete("qic") == None)
        self.assertTrue(trie.autoComplete("qid") == None)
        self.assertTrue(trie.autoComplete("qie") == None)
        self.assertTrue(trie.autoComplete("qif") == None)
        self.assertTrue(trie.autoComplete("qig") == None)
        self.assertTrue(trie.autoComplete("qih") == None)
        self.assertTrue(trie.autoComplete("qii") == None)
        self.assertTrue(trie.autoComplete("qij") == None)
        self.assertTrue(trie.autoComplete("qik") == None)
        self.assertTrue(trie.autoComplete("qil") == None)
        self.assertTrue(trie.autoComplete("qim") == None)
        self.assertTrue(trie.autoComplete("qin") == None)
        self.assertTrue(trie.autoComplete("qio") == None)
        self.assertTrue(trie.autoComplete("qip") == None)
        self.assertTrue(trie.autoComplete("qiq") == None)
        self.assertTrue(trie.autoComplete("qir") == None)
        self.assertTrue(trie.autoComplete("qis") == None)
        self.assertTrue(trie.autoComplete("qit") == None)
        self.assertTrue(trie.autoComplete("qiu") == None)
        self.assertTrue(trie.autoComplete("qiv") == None)
        self.assertTrue(trie.autoComplete("qiw") == None)
        self.assertTrue(trie.autoComplete("qix") == None)
        self.assertTrue(trie.autoComplete("qiy") == None)
        self.assertTrue(trie.autoComplete("qiz") == None)
        self.assertTrue(trie.autoComplete("qj") == None)
        self.assertTrue(trie.autoComplete("qja") == None)
        self.assertTrue(trie.autoComplete("qjb") == None)
        self.assertTrue(trie.autoComplete("qjc") == None)
        self.assertTrue(trie.autoComplete("qjd") == None)
        self.assertTrue(trie.autoComplete("qje") == None)
        self.assertTrue(trie.autoComplete("qjf") == None)
        self.assertTrue(trie.autoComplete("qjg") == None)
        self.assertTrue(trie.autoComplete("qjh") == None)
        self.assertTrue(trie.autoComplete("qji") == None)
        self.assertTrue(trie.autoComplete("qjj") == None)
        self.assertTrue(trie.autoComplete("qjk") == None)
        self.assertTrue(trie.autoComplete("qjl") == None)
        self.assertTrue(trie.autoComplete("qjm") == None)
        self.assertTrue(trie.autoComplete("qjn") == None)
        self.assertTrue(trie.autoComplete("qjo") == None)
        self.assertTrue(trie.autoComplete("qjp") == None)
        self.assertTrue(trie.autoComplete("qjq") == None)
        self.assertTrue(trie.autoComplete("qjr") == None)
        self.assertTrue(trie.autoComplete("qjs") == None)
        self.assertTrue(trie.autoComplete("qjt") == None)
        self.assertTrue(trie.autoComplete("qju") == None)
        self.assertTrue(trie.autoComplete("qjv") == None)
        self.assertTrue(trie.autoComplete("qjw") == None)
        self.assertTrue(trie.autoComplete("qjx") == None)
        self.assertTrue(trie.autoComplete("qjy") == None)
        self.assertTrue(trie.autoComplete("qjz") == None)
        self.assertTrue(trie.autoComplete("qk") == None)
        self.assertTrue(trie.autoComplete("qka") == None)
        self.assertTrue(trie.autoComplete("qkb") == None)
        self.assertTrue(trie.autoComplete("qkc") == None)
        self.assertTrue(trie.autoComplete("qkd") == None)
        self.assertTrue(trie.autoComplete("qke") == None)
        self.assertTrue(trie.autoComplete("qkf") == None)
        self.assertTrue(trie.autoComplete("qkg") == None)
        self.assertTrue(trie.autoComplete("qkh") == None)
        self.assertTrue(trie.autoComplete("qki") == None)
        self.assertTrue(trie.autoComplete("qkj") == None)
        self.assertTrue(trie.autoComplete("qkk") == None)
        self.assertTrue(trie.autoComplete("qkl") == None)
        self.assertTrue(trie.autoComplete("qkm") == None)
        self.assertTrue(trie.autoComplete("qkn") == None)
        self.assertTrue(trie.autoComplete("qko") == None)
        self.assertTrue(trie.autoComplete("qkp") == None)
        self.assertTrue(trie.autoComplete("qkq") == None)
        self.assertTrue(trie.autoComplete("qkr") == None)
        self.assertTrue(trie.autoComplete("qks") == None)
        self.assertTrue(trie.autoComplete("qkt") == None)
        self.assertTrue(trie.autoComplete("qku") == None)
        self.assertTrue(trie.autoComplete("qkv") == None)
        self.assertTrue(trie.autoComplete("qkw") == None)
        self.assertTrue(trie.autoComplete("qkx") == None)
        self.assertTrue(trie.autoComplete("qky") == None)
        self.assertTrue(trie.autoComplete("qkz") == None)
        self.assertTrue(trie.autoComplete("ql") == None)
        self.assertTrue(trie.autoComplete("qla") == None)
        self.assertTrue(trie.autoComplete("qlb") == None)
        self.assertTrue(trie.autoComplete("qlc") == None)
        self.assertTrue(trie.autoComplete("qld") == None)
        self.assertTrue(trie.autoComplete("qle") == None)
        self.assertTrue(trie.autoComplete("qlf") == None)
        self.assertTrue(trie.autoComplete("qlg") == None)
        self.assertTrue(trie.autoComplete("qlh") == None)
        self.assertTrue(trie.autoComplete("qli") == None)
        self.assertTrue(trie.autoComplete("qlj") == None)
        self.assertTrue(trie.autoComplete("qlk") == None)
        self.assertTrue(trie.autoComplete("qll") == None)
        self.assertTrue(trie.autoComplete("qlm") == None)
        self.assertTrue(trie.autoComplete("qln") == None)
        self.assertTrue(trie.autoComplete("qlo") == None)
        self.assertTrue(trie.autoComplete("qlp") == None)
        self.assertTrue(trie.autoComplete("qlq") == None)
        self.assertTrue(trie.autoComplete("qlr") == None)
        self.assertTrue(trie.autoComplete("qls") == None)
        self.assertTrue(trie.autoComplete("qlt") == None)
        self.assertTrue(trie.autoComplete("qlu") == None)
        self.assertTrue(trie.autoComplete("qlv") == None)
        self.assertTrue(trie.autoComplete("qlw") == None)
        self.assertTrue(trie.autoComplete("qlx") == None)
        self.assertTrue(trie.autoComplete("qly") == None)
        self.assertTrue(trie.autoComplete("qlz") == None)
        self.assertTrue(trie.autoComplete("qm") == None)
        self.assertTrue(trie.autoComplete("qma") == None)
        self.assertTrue(trie.autoComplete("qmb") == None)
        self.assertTrue(trie.autoComplete("qmc") == None)
        self.assertTrue(trie.autoComplete("qmd") == None)
        self.assertTrue(trie.autoComplete("qme") == None)
        self.assertTrue(trie.autoComplete("qmf") == None)
        self.assertTrue(trie.autoComplete("qmg") == None)
        self.assertTrue(trie.autoComplete("qmh") == None)
        self.assertTrue(trie.autoComplete("qmi") == None)
        self.assertTrue(trie.autoComplete("qmj") == None)
        self.assertTrue(trie.autoComplete("qmk") == None)
        self.assertTrue(trie.autoComplete("qml") == None)
        self.assertTrue(trie.autoComplete("qmm") == None)
        self.assertTrue(trie.autoComplete("qmn") == None)
        self.assertTrue(trie.autoComplete("qmo") == None)
        self.assertTrue(trie.autoComplete("qmp") == None)
        self.assertTrue(trie.autoComplete("qmq") == None)
        self.assertTrue(trie.autoComplete("qmr") == None)
        self.assertTrue(trie.autoComplete("qms") == None)
        self.assertTrue(trie.autoComplete("qmt") == None)
        self.assertTrue(trie.autoComplete("qmu") == None)
        self.assertTrue(trie.autoComplete("qmv") == None)
        self.assertTrue(trie.autoComplete("qmw") == None)
        self.assertTrue(trie.autoComplete("qmx") == None)
        self.assertTrue(trie.autoComplete("qmy") == None)
        self.assertTrue(trie.autoComplete("qmz") == None)
        self.assertTrue(trie.autoComplete("qn") == None)
        self.assertTrue(trie.autoComplete("qna") == None)
        self.assertTrue(trie.autoComplete("qnb") == None)
        self.assertTrue(trie.autoComplete("qnc") == None)
        self.assertTrue(trie.autoComplete("qnd") == None)
        self.assertTrue(trie.autoComplete("qne") == None)
        self.assertTrue(trie.autoComplete("qnf") == None)
        self.assertTrue(trie.autoComplete("qng") == None)
        self.assertTrue(trie.autoComplete("qnh") == None)
        self.assertTrue(trie.autoComplete("qni") == None)
        self.assertTrue(trie.autoComplete("qnj") == None)
        self.assertTrue(trie.autoComplete("qnk") == None)
        self.assertTrue(trie.autoComplete("qnl") == None)
        self.assertTrue(trie.autoComplete("qnm") == None)
        self.assertTrue(trie.autoComplete("qnn") == None)
        self.assertTrue(trie.autoComplete("qno") == None)
        self.assertTrue(trie.autoComplete("qnp") == None)
        self.assertTrue(trie.autoComplete("qnq") == None)
        self.assertTrue(trie.autoComplete("qnr") == None)
        self.assertTrue(trie.autoComplete("qns") == None)
        self.assertTrue(trie.autoComplete("qnt") == None)
        self.assertTrue(trie.autoComplete("qnu") == None)
        self.assertTrue(trie.autoComplete("qnv") == None)
        self.assertTrue(trie.autoComplete("qnw") == None)
        self.assertTrue(trie.autoComplete("qnx") == None)
        self.assertTrue(trie.autoComplete("qny") == None)
        self.assertTrue(trie.autoComplete("qnz") == None)
        self.assertTrue(trie.autoComplete("qo") == None)
        self.assertTrue(trie.autoComplete("qoa") == None)
        self.assertTrue(trie.autoComplete("qob") == None)
        self.assertTrue(trie.autoComplete("qoc") == None)
        self.assertTrue(trie.autoComplete("qod") == None)
        self.assertTrue(trie.autoComplete("qoe") == None)
        self.assertTrue(trie.autoComplete("qof") == None)
        self.assertTrue(trie.autoComplete("qog") == None)
        self.assertTrue(trie.autoComplete("qoh") == None)
        self.assertTrue(trie.autoComplete("qoi") == None)
        self.assertTrue(trie.autoComplete("qoj") == None)
        self.assertTrue(trie.autoComplete("qok") == None)
        self.assertTrue(trie.autoComplete("qol") == None)
        self.assertTrue(trie.autoComplete("qom") == None)
        self.assertTrue(trie.autoComplete("qon") == None)
        self.assertTrue(trie.autoComplete("qoo") == None)
        self.assertTrue(trie.autoComplete("qop") == None)
        self.assertTrue(trie.autoComplete("qoq") == None)
        self.assertTrue(trie.autoComplete("qor") == None)
        self.assertTrue(trie.autoComplete("qos") == None)
        self.assertTrue(trie.autoComplete("qot") == None)
        self.assertTrue(trie.autoComplete("qou") == None)
        self.assertTrue(trie.autoComplete("qov") == None)
        self.assertTrue(trie.autoComplete("qow") == None)
        self.assertTrue(trie.autoComplete("qox") == None)
        self.assertTrue(trie.autoComplete("qoy") == None)
        self.assertTrue(trie.autoComplete("qoz") == None)
        self.assertTrue(trie.autoComplete("qp") == None)
        self.assertTrue(trie.autoComplete("qpa") == None)
        self.assertTrue(trie.autoComplete("qpb") == None)
        self.assertTrue(trie.autoComplete("qpc") == None)
        self.assertTrue(trie.autoComplete("qpd") == None)
        self.assertTrue(trie.autoComplete("qpe") == None)
        self.assertTrue(trie.autoComplete("qpf") == None)
        self.assertTrue(trie.autoComplete("qpg") == None)
        self.assertTrue(trie.autoComplete("qph") == None)
        self.assertTrue(trie.autoComplete("qpi") == None)
        self.assertTrue(trie.autoComplete("qpj") == None)
        self.assertTrue(trie.autoComplete("qpk") == None)
        self.assertTrue(trie.autoComplete("qpl") == None)
        self.assertTrue(trie.autoComplete("qpm") == None)
        self.assertTrue(trie.autoComplete("qpn") == None)
        self.assertTrue(trie.autoComplete("qpo") == None)
        self.assertTrue(trie.autoComplete("qpp") == None)
        self.assertTrue(trie.autoComplete("qpq") == None)
        self.assertTrue(trie.autoComplete("qpr") == None)
        self.assertTrue(trie.autoComplete("qps") == None)
        self.assertTrue(trie.autoComplete("qpt") == None)
        self.assertTrue(trie.autoComplete("qpu") == None)
        self.assertTrue(trie.autoComplete("qpv") == None)
        self.assertTrue(trie.autoComplete("qpw") == None)
        self.assertTrue(trie.autoComplete("qpx") == None)
        self.assertTrue(trie.autoComplete("qpy") == None)
        self.assertTrue(trie.autoComplete("qpz") == None)
        self.assertTrue(trie.autoComplete("qq") == None)
        self.assertTrue(trie.autoComplete("qqa") == None)
        self.assertTrue(trie.autoComplete("qqb") == None)
        self.assertTrue(trie.autoComplete("qqc") == None)
        self.assertTrue(trie.autoComplete("qqd") == None)
        self.assertTrue(trie.autoComplete("qqe") == None)
        self.assertTrue(trie.autoComplete("qqf") == None)
        self.assertTrue(trie.autoComplete("qqg") == None)
        self.assertTrue(trie.autoComplete("qqh") == None)
        self.assertTrue(trie.autoComplete("qqi") == None)
        self.assertTrue(trie.autoComplete("qqj") == None)
        self.assertTrue(trie.autoComplete("qqk") == None)
        self.assertTrue(trie.autoComplete("qql") == None)
        self.assertTrue(trie.autoComplete("qqm") == None)
        self.assertTrue(trie.autoComplete("qqn") == None)
        self.assertTrue(trie.autoComplete("qqo") == None)
        self.assertTrue(trie.autoComplete("qqp") == None)
        self.assertTrue(trie.autoComplete("qqq") == None)
        self.assertTrue(trie.autoComplete("qqr") == None)
        self.assertTrue(trie.autoComplete("qqs") == None)
        self.assertTrue(trie.autoComplete("qqt") == None)
        self.assertTrue(trie.autoComplete("qqu") == None)
        self.assertTrue(trie.autoComplete("qqv") == None)
        self.assertTrue(trie.autoComplete("qqw") == None)
        self.assertTrue(trie.autoComplete("qqx") == None)
        self.assertTrue(trie.autoComplete("qqy") == None)
        self.assertTrue(trie.autoComplete("qqz") == None)
        self.assertTrue(trie.autoComplete("qr") == None)
        self.assertTrue(trie.autoComplete("qra") == None)
        self.assertTrue(trie.autoComplete("qrb") == None)
        self.assertTrue(trie.autoComplete("qrc") == None)
        self.assertTrue(trie.autoComplete("qrd") == None)
        self.assertTrue(trie.autoComplete("qre") == None)
        self.assertTrue(trie.autoComplete("qrf") == None)
        self.assertTrue(trie.autoComplete("qrg") == None)
        self.assertTrue(trie.autoComplete("qrh") == None)
        self.assertTrue(trie.autoComplete("qri") == None)
        self.assertTrue(trie.autoComplete("qrj") == None)
        self.assertTrue(trie.autoComplete("qrk") == None)
        self.assertTrue(trie.autoComplete("qrl") == None)
        self.assertTrue(trie.autoComplete("qrm") == None)
        self.assertTrue(trie.autoComplete("qrn") == None)
        self.assertTrue(trie.autoComplete("qro") == None)
        self.assertTrue(trie.autoComplete("qrp") == None)
        self.assertTrue(trie.autoComplete("qrq") == None)
        self.assertTrue(trie.autoComplete("qrr") == None)
        self.assertTrue(trie.autoComplete("qrs") == None)
        self.assertTrue(trie.autoComplete("qrt") == None)
        self.assertTrue(trie.autoComplete("qru") == None)
        self.assertTrue(trie.autoComplete("qrv") == None)
        self.assertTrue(trie.autoComplete("qrw") == None)
        self.assertTrue(trie.autoComplete("qrx") == None)
        self.assertTrue(trie.autoComplete("qry") == None)
        self.assertTrue(trie.autoComplete("qrz") == None)
        self.assertTrue(trie.autoComplete("qs") == None)
        self.assertTrue(trie.autoComplete("qsa") == None)
        self.assertTrue(trie.autoComplete("qsb") == None)
        self.assertTrue(trie.autoComplete("qsc") == None)
        self.assertTrue(trie.autoComplete("qsd") == None)
        self.assertTrue(trie.autoComplete("qse") == None)
        self.assertTrue(trie.autoComplete("qsf") == None)
        self.assertTrue(trie.autoComplete("qsg") == None)
        self.assertTrue(trie.autoComplete("qsh") == None)
        self.assertTrue(trie.autoComplete("qsi") == None)
        self.assertTrue(trie.autoComplete("qsj") == None)
        self.assertTrue(trie.autoComplete("qsk") == None)
        self.assertTrue(trie.autoComplete("qsl") == None)
        self.assertTrue(trie.autoComplete("qsm") == None)
        self.assertTrue(trie.autoComplete("qsn") == None)
        self.assertTrue(trie.autoComplete("qso") == None)
        self.assertTrue(trie.autoComplete("qsp") == None)
        self.assertTrue(trie.autoComplete("qsq") == None)
        self.assertTrue(trie.autoComplete("qsr") == None)
        self.assertTrue(trie.autoComplete("qss") == None)
        self.assertTrue(trie.autoComplete("qst") == None)
        self.assertTrue(trie.autoComplete("qsu") == None)
        self.assertTrue(trie.autoComplete("qsv") == None)
        self.assertTrue(trie.autoComplete("qsw") == None)
        self.assertTrue(trie.autoComplete("qsx") == None)
        self.assertTrue(trie.autoComplete("qsy") == None)
        self.assertTrue(trie.autoComplete("qsz") == None)
        self.assertTrue(trie.autoComplete("qt") == None)
        self.assertTrue(trie.autoComplete("qta") == None)
        self.assertTrue(trie.autoComplete("qtb") == None)
        self.assertTrue(trie.autoComplete("qtc") == None)
        self.assertTrue(trie.autoComplete("qtd") == None)
        self.assertTrue(trie.autoComplete("qte") == None)
        self.assertTrue(trie.autoComplete("qtf") == None)
        self.assertTrue(trie.autoComplete("qtg") == None)
        self.assertTrue(trie.autoComplete("qth") == None)
        self.assertTrue(trie.autoComplete("qti") == None)
        self.assertTrue(trie.autoComplete("qtj") == None)
        self.assertTrue(trie.autoComplete("qtk") == None)
        self.assertTrue(trie.autoComplete("qtl") == None)
        self.assertTrue(trie.autoComplete("qtm") == None)
        self.assertTrue(trie.autoComplete("qtn") == None)
        self.assertTrue(trie.autoComplete("qto") == None)
        self.assertTrue(trie.autoComplete("qtp") == None)
        self.assertTrue(trie.autoComplete("qtq") == None)
        self.assertTrue(trie.autoComplete("qtr") == None)
        self.assertTrue(trie.autoComplete("qts") == None)
        self.assertTrue(trie.autoComplete("qtt") == None)
        self.assertTrue(trie.autoComplete("qtu") == None)
        self.assertTrue(trie.autoComplete("qtv") == None)
        self.assertTrue(trie.autoComplete("qtw") == None)
        self.assertTrue(trie.autoComplete("qtx") == None)
        self.assertTrue(trie.autoComplete("qty") == None)
        self.assertTrue(trie.autoComplete("qtz") == None)
        self.assertTrue(trie.autoComplete("qu") == "quorum")
        self.assertTrue(trie.autoComplete("qua") == "qualifications")
        self.assertTrue(trie.autoComplete("qual") == "qualifications")
        self.assertTrue(trie.autoComplete("quali") == "qualifications")
        self.assertTrue(trie.autoComplete("qualif") == "qualifications")
        self.assertTrue(trie.autoComplete("qualifi") == "qualifications")
        self.assertTrue(trie.autoComplete("qualific") == "qualifications")
        self.assertTrue(trie.autoComplete("qualifica") == "qualifications")
        self.assertTrue(trie.autoComplete("qualificat") == "qualifications")
        self.assertTrue(trie.autoComplete("qualificati") == "qualifications")
        self.assertTrue(trie.autoComplete("qualificatio") == "qualifications")
        self.assertTrue(trie.autoComplete("qualification") == "qualifications")
        self.assertTrue(trie.autoComplete("qualifications") == "qualifications")
        self.assertTrue(trie.autoComplete("qualifie") == "qualified")
        self.assertTrue(trie.autoComplete("qualified") == "qualified")
        self.assertTrue(trie.autoComplete("qualify") == "qualify")
        self.assertTrue(trie.autoComplete("quar") == "quartered")
        self.assertTrue(trie.autoComplete("quart") == "quartered")
        self.assertTrue(trie.autoComplete("quarte") == "quartered")
        self.assertTrue(trie.autoComplete("quarter") == "quartered")
        self.assertTrue(trie.autoComplete("quartere") == "quartered")
        self.assertTrue(trie.autoComplete("quartered") == "quartered")
        self.assertTrue(trie.autoComplete("qub") == None)
        self.assertTrue(trie.autoComplete("quc") == None)
        self.assertTrue(trie.autoComplete("qud") == None)
        self.assertTrue(trie.autoComplete("que") == "question")
        self.assertTrue(trie.autoComplete("ques") == "question")
        self.assertTrue(trie.autoComplete("quest") == "question")
        self.assertTrue(trie.autoComplete("questi") == "question")
        self.assertTrue(trie.autoComplete("questio") == "question")
        self.assertTrue(trie.autoComplete("question") == "question")
        self.assertTrue(trie.autoComplete("questione") == "questioned")
        self.assertTrue(trie.autoComplete("questioned") == "questioned")
        self.assertTrue(trie.autoComplete("quf") == None)
        self.assertTrue(trie.autoComplete("qug") == None)
        self.assertTrue(trie.autoComplete("quh") == None)
        self.assertTrue(trie.autoComplete("qui") == None)
        self.assertTrue(trie.autoComplete("quj") == None)
        self.assertTrue(trie.autoComplete("quk") == None)
        self.assertTrue(trie.autoComplete("qul") == None)
        self.assertTrue(trie.autoComplete("qum") == None)
        self.assertTrue(trie.autoComplete("qun") == None)
        self.assertTrue(trie.autoComplete("quo") == "quorum")
        self.assertTrue(trie.autoComplete("quor") == "quorum")
        self.assertTrue(trie.autoComplete("quoru") == "quorum")
        self.assertTrue(trie.autoComplete("quorum") == "quorum")
        self.assertTrue(trie.autoComplete("qup") == None)
        self.assertTrue(trie.autoComplete("quq") == None)
        self.assertTrue(trie.autoComplete("qur") == None)
        self.assertTrue(trie.autoComplete("qus") == None)
        self.assertTrue(trie.autoComplete("qut") == None)
        self.assertTrue(trie.autoComplete("quu") == None)
        self.assertTrue(trie.autoComplete("quv") == None)
        self.assertTrue(trie.autoComplete("quw") == None)
        self.assertTrue(trie.autoComplete("qux") == None)
        self.assertTrue(trie.autoComplete("quy") == None)
        self.assertTrue(trie.autoComplete("quz") == None)
        self.assertTrue(trie.autoComplete("qv") == None)
        self.assertTrue(trie.autoComplete("qva") == None)
        self.assertTrue(trie.autoComplete("qvb") == None)
        self.assertTrue(trie.autoComplete("qvc") == None)
        self.assertTrue(trie.autoComplete("qvd") == None)
        self.assertTrue(trie.autoComplete("qve") == None)
        self.assertTrue(trie.autoComplete("qvf") == None)
        self.assertTrue(trie.autoComplete("qvg") == None)
        self.assertTrue(trie.autoComplete("qvh") == None)
        self.assertTrue(trie.autoComplete("qvi") == None)
        self.assertTrue(trie.autoComplete("qvj") == None)
        self.assertTrue(trie.autoComplete("qvk") == None)
        self.assertTrue(trie.autoComplete("qvl") == None)
        self.assertTrue(trie.autoComplete("qvm") == None)
        self.assertTrue(trie.autoComplete("qvn") == None)
        self.assertTrue(trie.autoComplete("qvo") == None)
        self.assertTrue(trie.autoComplete("qvp") == None)
        self.assertTrue(trie.autoComplete("qvq") == None)
        self.assertTrue(trie.autoComplete("qvr") == None)
        self.assertTrue(trie.autoComplete("qvs") == None)
        self.assertTrue(trie.autoComplete("qvt") == None)
        self.assertTrue(trie.autoComplete("qvu") == None)
        self.assertTrue(trie.autoComplete("qvv") == None)
        self.assertTrue(trie.autoComplete("qvw") == None)
        self.assertTrue(trie.autoComplete("qvx") == None)
        self.assertTrue(trie.autoComplete("qvy") == None)
        self.assertTrue(trie.autoComplete("qvz") == None)
        self.assertTrue(trie.autoComplete("qw") == None)
        self.assertTrue(trie.autoComplete("qwa") == None)
        self.assertTrue(trie.autoComplete("qwb") == None)
        self.assertTrue(trie.autoComplete("qwc") == None)
        self.assertTrue(trie.autoComplete("qwd") == None)
        self.assertTrue(trie.autoComplete("qwe") == None)
        self.assertTrue(trie.autoComplete("qwf") == None)
        self.assertTrue(trie.autoComplete("qwg") == None)
        self.assertTrue(trie.autoComplete("qwh") == None)
        self.assertTrue(trie.autoComplete("qwi") == None)
        self.assertTrue(trie.autoComplete("qwj") == None)
        self.assertTrue(trie.autoComplete("qwk") == None)
        self.assertTrue(trie.autoComplete("qwl") == None)
        self.assertTrue(trie.autoComplete("qwm") == None)
        self.assertTrue(trie.autoComplete("qwn") == None)
        self.assertTrue(trie.autoComplete("qwo") == None)
        self.assertTrue(trie.autoComplete("qwp") == None)
        self.assertTrue(trie.autoComplete("qwq") == None)
        self.assertTrue(trie.autoComplete("qwr") == None)
        self.assertTrue(trie.autoComplete("qws") == None)
        self.assertTrue(trie.autoComplete("qwt") == None)
        self.assertTrue(trie.autoComplete("qwu") == None)
        self.assertTrue(trie.autoComplete("qwv") == None)
        self.assertTrue(trie.autoComplete("qww") == None)
        self.assertTrue(trie.autoComplete("qwx") == None)
        self.assertTrue(trie.autoComplete("qwy") == None)
        self.assertTrue(trie.autoComplete("qwz") == None)
        self.assertTrue(trie.autoComplete("qx") == None)
        self.assertTrue(trie.autoComplete("qxa") == None)
        self.assertTrue(trie.autoComplete("qxb") == None)
        self.assertTrue(trie.autoComplete("qxc") == None)
        self.assertTrue(trie.autoComplete("qxd") == None)
        self.assertTrue(trie.autoComplete("qxe") == None)
        self.assertTrue(trie.autoComplete("qxf") == None)
        self.assertTrue(trie.autoComplete("qxg") == None)
        self.assertTrue(trie.autoComplete("qxh") == None)
        self.assertTrue(trie.autoComplete("qxi") == None)
        self.assertTrue(trie.autoComplete("qxj") == None)
        self.assertTrue(trie.autoComplete("qxk") == None)
        self.assertTrue(trie.autoComplete("qxl") == None)
        self.assertTrue(trie.autoComplete("qxm") == None)
        self.assertTrue(trie.autoComplete("qxn") == None)
        self.assertTrue(trie.autoComplete("qxo") == None)
        self.assertTrue(trie.autoComplete("qxp") == None)
        self.assertTrue(trie.autoComplete("qxq") == None)
        self.assertTrue(trie.autoComplete("qxr") == None)
        self.assertTrue(trie.autoComplete("qxs") == None)
        self.assertTrue(trie.autoComplete("qxt") == None)
        self.assertTrue(trie.autoComplete("qxu") == None)
        self.assertTrue(trie.autoComplete("qxv") == None)
        self.assertTrue(trie.autoComplete("qxw") == None)
        self.assertTrue(trie.autoComplete("qxx") == None)
        self.assertTrue(trie.autoComplete("qxy") == None)
        self.assertTrue(trie.autoComplete("qxz") == None)
        self.assertTrue(trie.autoComplete("qy") == None)
        self.assertTrue(trie.autoComplete("qya") == None)
        self.assertTrue(trie.autoComplete("qyb") == None)
        self.assertTrue(trie.autoComplete("qyc") == None)
        self.assertTrue(trie.autoComplete("qyd") == None)
        self.assertTrue(trie.autoComplete("qye") == None)
        self.assertTrue(trie.autoComplete("qyf") == None)
        self.assertTrue(trie.autoComplete("qyg") == None)
        self.assertTrue(trie.autoComplete("qyh") == None)
        self.assertTrue(trie.autoComplete("qyi") == None)
        self.assertTrue(trie.autoComplete("qyj") == None)
        self.assertTrue(trie.autoComplete("qyk") == None)
        self.assertTrue(trie.autoComplete("qyl") == None)
        self.assertTrue(trie.autoComplete("qym") == None)
        self.assertTrue(trie.autoComplete("qyn") == None)
        self.assertTrue(trie.autoComplete("qyo") == None)
        self.assertTrue(trie.autoComplete("qyp") == None)
        self.assertTrue(trie.autoComplete("qyq") == None)
        self.assertTrue(trie.autoComplete("qyr") == None)
        self.assertTrue(trie.autoComplete("qys") == None)
        self.assertTrue(trie.autoComplete("qyt") == None)
        self.assertTrue(trie.autoComplete("qyu") == None)
        self.assertTrue(trie.autoComplete("qyv") == None)
        self.assertTrue(trie.autoComplete("qyw") == None)
        self.assertTrue(trie.autoComplete("qyx") == None)
        self.assertTrue(trie.autoComplete("qyy") == None)
        self.assertTrue(trie.autoComplete("qyz") == None)
        self.assertTrue(trie.autoComplete("qz") == None)
        self.assertTrue(trie.autoComplete("qza") == None)
        self.assertTrue(trie.autoComplete("qzb") == None)
        self.assertTrue(trie.autoComplete("qzc") == None)
        self.assertTrue(trie.autoComplete("qzd") == None)
        self.assertTrue(trie.autoComplete("qze") == None)
        self.assertTrue(trie.autoComplete("qzf") == None)
        self.assertTrue(trie.autoComplete("qzg") == None)
        self.assertTrue(trie.autoComplete("qzh") == None)
        self.assertTrue(trie.autoComplete("qzi") == None)
        self.assertTrue(trie.autoComplete("qzj") == None)
        self.assertTrue(trie.autoComplete("qzk") == None)
        self.assertTrue(trie.autoComplete("qzl") == None)
        self.assertTrue(trie.autoComplete("qzm") == None)
        self.assertTrue(trie.autoComplete("qzn") == None)
        self.assertTrue(trie.autoComplete("qzo") == None)
        self.assertTrue(trie.autoComplete("qzp") == None)
        self.assertTrue(trie.autoComplete("qzq") == None)
        self.assertTrue(trie.autoComplete("qzr") == None)
        self.assertTrue(trie.autoComplete("qzs") == None)
        self.assertTrue(trie.autoComplete("qzt") == None)
        self.assertTrue(trie.autoComplete("qzu") == None)
        self.assertTrue(trie.autoComplete("qzv") == None)
        self.assertTrue(trie.autoComplete("qzw") == None)
        self.assertTrue(trie.autoComplete("qzx") == None)
        self.assertTrue(trie.autoComplete("qzy") == None)
        self.assertTrue(trie.autoComplete("qzz") == None)
        self.assertTrue(trie.autoComplete("r") == "representatives")
        self.assertTrue(trie.autoComplete("ra") == "ratified")
        self.assertTrue(trie.autoComplete("raa") == None)
        self.assertTrue(trie.autoComplete("rab") == None)
        self.assertTrue(trie.autoComplete("rac") == "race")
        self.assertTrue(trie.autoComplete("race") == "race")
        self.assertTrue(trie.autoComplete("rad") == None)
        self.assertTrue(trie.autoComplete("rae") == None)
        self.assertTrue(trie.autoComplete("raf") == None)
        self.assertTrue(trie.autoComplete("rag") == None)
        self.assertTrue(trie.autoComplete("rah") == None)
        self.assertTrue(trie.autoComplete("rai") == "raise")
        self.assertTrue(trie.autoComplete("rais") == "raise")
        self.assertTrue(trie.autoComplete("raise") == "raise")
        self.assertTrue(trie.autoComplete("raisi") == "raising")
        self.assertTrue(trie.autoComplete("raisin") == "raising")
        self.assertTrue(trie.autoComplete("raising") == "raising")
        self.assertTrue(trie.autoComplete("raj") == None)
        self.assertTrue(trie.autoComplete("rak") == None)
        self.assertTrue(trie.autoComplete("ral") == None)
        self.assertTrue(trie.autoComplete("ram") == None)
        self.assertTrue(trie.autoComplete("ran") == None)
        self.assertTrue(trie.autoComplete("rao") == None)
        self.assertTrue(trie.autoComplete("rap") == None)
        self.assertTrue(trie.autoComplete("raq") == None)
        self.assertTrue(trie.autoComplete("rar") == None)
        self.assertTrue(trie.autoComplete("ras") == None)
        self.assertTrue(trie.autoComplete("rat") == "ratified")
        self.assertTrue(trie.autoComplete("rati") == "ratified")
        self.assertTrue(trie.autoComplete("ratif") == "ratified")
        self.assertTrue(trie.autoComplete("ratifi") == "ratified")
        self.assertTrue(trie.autoComplete("ratific") == "ratification")
        self.assertTrue(trie.autoComplete("ratifica") == "ratification")
        self.assertTrue(trie.autoComplete("ratificat") == "ratification")
        self.assertTrue(trie.autoComplete("ratificati") == "ratification")
        self.assertTrue(trie.autoComplete("ratificatio") == "ratification")
        self.assertTrue(trie.autoComplete("ratification") == "ratification")
        self.assertTrue(trie.autoComplete("ratifie") == "ratified")
        self.assertTrue(trie.autoComplete("ratified") == "ratified")
        self.assertTrue(trie.autoComplete("ratify") == "ratifying")
        self.assertTrue(trie.autoComplete("ratifyi") == "ratifying")
        self.assertTrue(trie.autoComplete("ratifyin") == "ratifying")
        self.assertTrue(trie.autoComplete("ratifying") == "ratifying")
        self.assertTrue(trie.autoComplete("rau") == None)
        self.assertTrue(trie.autoComplete("rav") == None)
        self.assertTrue(trie.autoComplete("raw") == None)
        self.assertTrue(trie.autoComplete("rax") == None)
        self.assertTrue(trie.autoComplete("ray") == None)
        self.assertTrue(trie.autoComplete("raz") == None)
        self.assertTrue(trie.autoComplete("rb") == None)
        self.assertTrue(trie.autoComplete("rba") == None)
        self.assertTrue(trie.autoComplete("rbb") == None)
        self.assertTrue(trie.autoComplete("rbc") == None)
        self.assertTrue(trie.autoComplete("rbd") == None)
        self.assertTrue(trie.autoComplete("rbe") == None)
        self.assertTrue(trie.autoComplete("rbf") == None)
        self.assertTrue(trie.autoComplete("rbg") == None)
        self.assertTrue(trie.autoComplete("rbh") == None)
        self.assertTrue(trie.autoComplete("rbi") == None)
        self.assertTrue(trie.autoComplete("rbj") == None)
        self.assertTrue(trie.autoComplete("rbk") == None)
        self.assertTrue(trie.autoComplete("rbl") == None)
        self.assertTrue(trie.autoComplete("rbm") == None)
        self.assertTrue(trie.autoComplete("rbn") == None)
        self.assertTrue(trie.autoComplete("rbo") == None)
        self.assertTrue(trie.autoComplete("rbp") == None)
        self.assertTrue(trie.autoComplete("rbq") == None)
        self.assertTrue(trie.autoComplete("rbr") == None)
        self.assertTrue(trie.autoComplete("rbs") == None)
        self.assertTrue(trie.autoComplete("rbt") == None)
        self.assertTrue(trie.autoComplete("rbu") == None)
        self.assertTrue(trie.autoComplete("rbv") == None)
        self.assertTrue(trie.autoComplete("rbw") == None)
        self.assertTrue(trie.autoComplete("rbx") == None)
        self.assertTrue(trie.autoComplete("rby") == None)
        self.assertTrue(trie.autoComplete("rbz") == None)
        self.assertTrue(trie.autoComplete("rc") == None)
        self.assertTrue(trie.autoComplete("rca") == None)
        self.assertTrue(trie.autoComplete("rcb") == None)
        self.assertTrue(trie.autoComplete("rcc") == None)
        self.assertTrue(trie.autoComplete("rcd") == None)
        self.assertTrue(trie.autoComplete("rce") == None)
        self.assertTrue(trie.autoComplete("rcf") == None)
        self.assertTrue(trie.autoComplete("rcg") == None)
        self.assertTrue(trie.autoComplete("rch") == None)
        self.assertTrue(trie.autoComplete("rci") == None)
        self.assertTrue(trie.autoComplete("rcj") == None)
        self.assertTrue(trie.autoComplete("rck") == None)
        self.assertTrue(trie.autoComplete("rcl") == None)
        self.assertTrue(trie.autoComplete("rcm") == None)
        self.assertTrue(trie.autoComplete("rcn") == None)
        self.assertTrue(trie.autoComplete("rco") == None)
        self.assertTrue(trie.autoComplete("rcp") == None)
        self.assertTrue(trie.autoComplete("rcq") == None)
        self.assertTrue(trie.autoComplete("rcr") == None)
        self.assertTrue(trie.autoComplete("rcs") == None)
        self.assertTrue(trie.autoComplete("rct") == None)
        self.assertTrue(trie.autoComplete("rcu") == None)
        self.assertTrue(trie.autoComplete("rcv") == None)
        self.assertTrue(trie.autoComplete("rcw") == None)
        self.assertTrue(trie.autoComplete("rcx") == None)
        self.assertTrue(trie.autoComplete("rcy") == None)
        self.assertTrue(trie.autoComplete("rcz") == None)
        self.assertTrue(trie.autoComplete("rd") == None)
        self.assertTrue(trie.autoComplete("rda") == None)
        self.assertTrue(trie.autoComplete("rdb") == None)
        self.assertTrue(trie.autoComplete("rdc") == None)
        self.assertTrue(trie.autoComplete("rdd") == None)
        self.assertTrue(trie.autoComplete("rde") == None)
        self.assertTrue(trie.autoComplete("rdf") == None)
        self.assertTrue(trie.autoComplete("rdg") == None)
        self.assertTrue(trie.autoComplete("rdh") == None)
        self.assertTrue(trie.autoComplete("rdi") == None)
        self.assertTrue(trie.autoComplete("rdj") == None)
        self.assertTrue(trie.autoComplete("rdk") == None)
        self.assertTrue(trie.autoComplete("rdl") == None)
        self.assertTrue(trie.autoComplete("rdm") == None)
        self.assertTrue(trie.autoComplete("rdn") == None)
        self.assertTrue(trie.autoComplete("rdo") == None)
        self.assertTrue(trie.autoComplete("rdp") == None)
        self.assertTrue(trie.autoComplete("rdq") == None)
        self.assertTrue(trie.autoComplete("rdr") == None)
        self.assertTrue(trie.autoComplete("rds") == None)
        self.assertTrue(trie.autoComplete("rdt") == None)
        self.assertTrue(trie.autoComplete("rdu") == None)
        self.assertTrue(trie.autoComplete("rdv") == None)
        self.assertTrue(trie.autoComplete("rdw") == None)
        self.assertTrue(trie.autoComplete("rdx") == None)
        self.assertTrue(trie.autoComplete("rdy") == None)
        self.assertTrue(trie.autoComplete("rdz") == None)
        self.assertTrue(trie.autoComplete("re") == "representatives")
        self.assertTrue(trie.autoComplete("rea") == "reason")
        self.assertTrue(trie.autoComplete("reas") == "reason")
        self.assertTrue(trie.autoComplete("reaso") == "reason")
        self.assertTrue(trie.autoComplete("reason") == "reason")
        self.assertTrue(trie.autoComplete("reb") == "rebellion")
        self.assertTrue(trie.autoComplete("rebe") == "rebellion")
        self.assertTrue(trie.autoComplete("rebel") == "rebellion")
        self.assertTrue(trie.autoComplete("rebell") == "rebellion")
        self.assertTrue(trie.autoComplete("rebelli") == "rebellion")
        self.assertTrue(trie.autoComplete("rebellio") == "rebellion")
        self.assertTrue(trie.autoComplete("rebellion") == "rebellion")
        self.assertTrue(trie.autoComplete("rec") == "receive")
        self.assertTrue(trie.autoComplete("rece") == "receive")
        self.assertTrue(trie.autoComplete("recei") == "receive")
        self.assertTrue(trie.autoComplete("receip") == "receipt")
        self.assertTrue(trie.autoComplete("receipt") == "receipt")
        self.assertTrue(trie.autoComplete("receipts") == "receipts")
        self.assertTrue(trie.autoComplete("receiv") == "receive")
        self.assertTrue(trie.autoComplete("receive") == "receive")
        self.assertTrue(trie.autoComplete("reces") == "recess")
        self.assertTrue(trie.autoComplete("recess") == "recess")
        self.assertTrue(trie.autoComplete("reco") == "records")
        self.assertTrue(trie.autoComplete("recom") == "recommend")
        self.assertTrue(trie.autoComplete("recomm") == "recommend")
        self.assertTrue(trie.autoComplete("recomme") == "recommend")
        self.assertTrue(trie.autoComplete("recommen") == "recommend")
        self.assertTrue(trie.autoComplete("recommend") == "recommend")
        self.assertTrue(trie.autoComplete("recon") == "reconsider")
        self.assertTrue(trie.autoComplete("recons") == "reconsider")
        self.assertTrue(trie.autoComplete("reconsi") == "reconsider")
        self.assertTrue(trie.autoComplete("reconsid") == "reconsider")
        self.assertTrue(trie.autoComplete("reconside") == "reconsider")
        self.assertTrue(trie.autoComplete("reconsider") == "reconsider")
        self.assertTrue(trie.autoComplete("reconsidera") == "reconsideration")
        self.assertTrue(trie.autoComplete("reconsiderat") == "reconsideration")
        self.assertTrue(trie.autoComplete("reconsiderati") == "reconsideration")
        self.assertTrue(trie.autoComplete("reconsideratio") == "reconsideration")
        self.assertTrue(trie.autoComplete("reconsideration") == "reconsideration")
        self.assertTrue(trie.autoComplete("reconsidere") == "reconsidered")
        self.assertTrue(trie.autoComplete("reconsidered") == "reconsidered")
        self.assertTrue(trie.autoComplete("recor") == "records")
        self.assertTrue(trie.autoComplete("record") == "records")
        self.assertTrue(trie.autoComplete("records") == "records")
        self.assertTrue(trie.autoComplete("red") == "redress")
        self.assertTrue(trie.autoComplete("redr") == "redress")
        self.assertTrue(trie.autoComplete("redre") == "redress")
        self.assertTrue(trie.autoComplete("redres") == "redress")
        self.assertTrue(trie.autoComplete("redress") == "redress")
        self.assertTrue(trie.autoComplete("redu") == "reduced")
        self.assertTrue(trie.autoComplete("reduc") == "reduced")
        self.assertTrue(trie.autoComplete("reduce") == "reduced")
        self.assertTrue(trie.autoComplete("reduced") == "reduced")
        self.assertTrue(trie.autoComplete("ree") == "reexamined")
        self.assertTrue(trie.autoComplete("reex") == "reexamined")
        self.assertTrue(trie.autoComplete("reexa") == "reexamined")
        self.assertTrue(trie.autoComplete("reexam") == "reexamined")
        self.assertTrue(trie.autoComplete("reexami") == "reexamined")
        self.assertTrue(trie.autoComplete("reexamin") == "reexamined")
        self.assertTrue(trie.autoComplete("reexamine") == "reexamined")
        self.assertTrue(trie.autoComplete("reexamined") == "reexamined")
        self.assertTrue(trie.autoComplete("ref") == None)
        self.assertTrue(trie.autoComplete("reg") == "regulation")
        self.assertTrue(trie.autoComplete("rega") == "regard")
        self.assertTrue(trie.autoComplete("regar") == "regard")
        self.assertTrue(trie.autoComplete("regard") == "regard")
        self.assertTrue(trie.autoComplete("regu") == "regulation")
        self.assertTrue(trie.autoComplete("regul") == "regulation")
        self.assertTrue(trie.autoComplete("regula") == "regulation")
        self.assertTrue(trie.autoComplete("regular") == "regular")
        self.assertTrue(trie.autoComplete("regulat") == "regulation")
        self.assertTrue(trie.autoComplete("regulate") == "regulate")
        self.assertTrue(trie.autoComplete("regulated") == "regulated")
        self.assertTrue(trie.autoComplete("regulati") == "regulation")
        self.assertTrue(trie.autoComplete("regulatio") == "regulation")
        self.assertTrue(trie.autoComplete("regulation") == "regulation")
        self.assertTrue(trie.autoComplete("regulations") == "regulations")
        self.assertTrue(trie.autoComplete("reh") == None)
        self.assertTrue(trie.autoComplete("rei") == None)
        self.assertTrue(trie.autoComplete("rej") == None)
        self.assertTrue(trie.autoComplete("rek") == None)
        self.assertTrue(trie.autoComplete("rel") == "relating")
        self.assertTrue(trie.autoComplete("rela") == "relating")
        self.assertTrue(trie.autoComplete("relat") == "relating")
        self.assertTrue(trie.autoComplete("relati") == "relating")
        self.assertTrue(trie.autoComplete("relatin") == "relating")
        self.assertTrue(trie.autoComplete("relating") == "relating")
        self.assertTrue(trie.autoComplete("reli") == "religion")
        self.assertTrue(trie.autoComplete("relig") == "religion")
        self.assertTrue(trie.autoComplete("religi") == "religion")
        self.assertTrue(trie.autoComplete("religio") == "religion")
        self.assertTrue(trie.autoComplete("religion") == "religion")
        self.assertTrue(trie.autoComplete("religiou") == "religious")
        self.assertTrue(trie.autoComplete("religious") == "religious")
        self.assertTrue(trie.autoComplete("rem") == "removal")
        self.assertTrue(trie.autoComplete("rema") == "remain")
        self.assertTrue(trie.autoComplete("remai") == "remain")
        self.assertTrue(trie.autoComplete("remain") == "remain")
        self.assertTrue(trie.autoComplete("remaind") == "remainder")
        self.assertTrue(trie.autoComplete("remainde") == "remainder")
        self.assertTrue(trie.autoComplete("remainder") == "remainder")
        self.assertTrue(trie.autoComplete("remo") == "removal")
        self.assertTrue(trie.autoComplete("remov") == "removal")
        self.assertTrue(trie.autoComplete("remova") == "removal")
        self.assertTrue(trie.autoComplete("removal") == "removal")
        self.assertTrue(trie.autoComplete("remove") == "removed")
        self.assertTrue(trie.autoComplete("removed") == "removed")
        self.assertTrue(trie.autoComplete("ren") == None)
        self.assertTrue(trie.autoComplete("reo") == None)
        self.assertTrue(trie.autoComplete("rep") == "representatives")
        self.assertTrue(trie.autoComplete("repa") == "repassed")
        self.assertTrue(trie.autoComplete("repas") == "repassed")
        self.assertTrue(trie.autoComplete("repass") == "repassed")
        self.assertTrue(trie.autoComplete("repasse") == "repassed")
        self.assertTrue(trie.autoComplete("repassed") == "repassed")
        self.assertTrue(trie.autoComplete("repe") == "repealed")
        self.assertTrue(trie.autoComplete("repea") == "repealed")
        self.assertTrue(trie.autoComplete("repeal") == "repealed")
        self.assertTrue(trie.autoComplete("repeale") == "repealed")
        self.assertTrue(trie.autoComplete("repealed") == "repealed")
        self.assertTrue(trie.autoComplete("repel") == "repel")
        self.assertTrue(trie.autoComplete("repr") == "representatives")
        self.assertTrue(trie.autoComplete("repre") == "representatives")
        self.assertTrue(trie.autoComplete("repres") == "representatives")
        self.assertTrue(trie.autoComplete("represe") == "representatives")
        self.assertTrue(trie.autoComplete("represen") == "representatives")
        self.assertTrue(trie.autoComplete("represent") == "representatives")
        self.assertTrue(trie.autoComplete("representa") == "representatives")
        self.assertTrue(trie.autoComplete("representat") == "representatives")
        self.assertTrue(trie.autoComplete("representati") == "representatives")
        self.assertTrue(trie.autoComplete("representatio") == "representation")
        self.assertTrue(trie.autoComplete("representation") == "representation")
        self.assertTrue(trie.autoComplete("representativ") == "representatives")
        self.assertTrue(trie.autoComplete("representative") == "representatives")
        self.assertTrue(trie.autoComplete("representatives") == "representatives")
        self.assertTrue(trie.autoComplete("repri") == "reprisal")
        self.assertTrue(trie.autoComplete("reprie") == "reprieves")
        self.assertTrue(trie.autoComplete("repriev") == "reprieves")
        self.assertTrue(trie.autoComplete("reprieve") == "reprieves")
        self.assertTrue(trie.autoComplete("reprieves") == "reprieves")
        self.assertTrue(trie.autoComplete("repris") == "reprisal")
        self.assertTrue(trie.autoComplete("reprisa") == "reprisal")
        self.assertTrue(trie.autoComplete("reprisal") == "reprisal")
        self.assertTrue(trie.autoComplete("repu") == "republican")
        self.assertTrue(trie.autoComplete("repub") == "republican")
        self.assertTrue(trie.autoComplete("republ") == "republican")
        self.assertTrue(trie.autoComplete("republi") == "republican")
        self.assertTrue(trie.autoComplete("republic") == "republican")
        self.assertTrue(trie.autoComplete("republica") == "republican")
        self.assertTrue(trie.autoComplete("republican") == "republican")
        self.assertTrue(trie.autoComplete("req") == "require")
        self.assertTrue(trie.autoComplete("requ") == "require")
        self.assertTrue(trie.autoComplete("requi") == "require")
        self.assertTrue(trie.autoComplete("requir") == "require")
        self.assertTrue(trie.autoComplete("require") == "require")
        self.assertTrue(trie.autoComplete("required") == "required")
        self.assertTrue(trie.autoComplete("requis") == "requisite")
        self.assertTrue(trie.autoComplete("requisi") == "requisite")
        self.assertTrue(trie.autoComplete("requisit") == "requisite")
        self.assertTrue(trie.autoComplete("requisite") == "requisite")
        self.assertTrue(trie.autoComplete("rer") == None)
        self.assertTrue(trie.autoComplete("res") == "respective")
        self.assertTrue(trie.autoComplete("rese") == "reserved")
        self.assertTrue(trie.autoComplete("reser") == "reserved")
        self.assertTrue(trie.autoComplete("reserv") == "reserved")
        self.assertTrue(trie.autoComplete("reserve") == "reserved")
        self.assertTrue(trie.autoComplete("reserved") == "reserved")
        self.assertTrue(trie.autoComplete("reservi") == "reserving")
        self.assertTrue(trie.autoComplete("reservin") == "reserving")
        self.assertTrue(trie.autoComplete("reserving") == "reserving")
        self.assertTrue(trie.autoComplete("resi") == "resignation")
        self.assertTrue(trie.autoComplete("resid") == "reside")
        self.assertTrue(trie.autoComplete("reside") == "reside")
        self.assertTrue(trie.autoComplete("residen") == "resident")
        self.assertTrue(trie.autoComplete("resident") == "resident")
        self.assertTrue(trie.autoComplete("resig") == "resignation")
        self.assertTrue(trie.autoComplete("resign") == "resignation")
        self.assertTrue(trie.autoComplete("resigna") == "resignation")
        self.assertTrue(trie.autoComplete("resignat") == "resignation")
        self.assertTrue(trie.autoComplete("resignati") == "resignation")
        self.assertTrue(trie.autoComplete("resignatio") == "resignation")
        self.assertTrue(trie.autoComplete("resignation") == "resignation")
        self.assertTrue(trie.autoComplete("reso") == "resolution")
        self.assertTrue(trie.autoComplete("resol") == "resolution")
        self.assertTrue(trie.autoComplete("resolu") == "resolution")
        self.assertTrue(trie.autoComplete("resolut") == "resolution")
        self.assertTrue(trie.autoComplete("resoluti") == "resolution")
        self.assertTrue(trie.autoComplete("resolutio") == "resolution")
        self.assertTrue(trie.autoComplete("resolution") == "resolution")
        self.assertTrue(trie.autoComplete("resp") == "respective")
        self.assertTrue(trie.autoComplete("respe") == "respective")
        self.assertTrue(trie.autoComplete("respec") == "respective")
        self.assertTrue(trie.autoComplete("respect") == "respective")
        self.assertTrue(trie.autoComplete("respecti") == "respective")
        self.assertTrue(trie.autoComplete("respectin") == "respecting")
        self.assertTrue(trie.autoComplete("respecting") == "respecting")
        self.assertTrue(trie.autoComplete("respectiv") == "respective")
        self.assertTrue(trie.autoComplete("respective") == "respective")
        self.assertTrue(trie.autoComplete("respectivel") == "respectively")
        self.assertTrue(trie.autoComplete("respectively") == "respectively")
        self.assertTrue(trie.autoComplete("resu") == "resume")
        self.assertTrue(trie.autoComplete("resum") == "resume")
        self.assertTrue(trie.autoComplete("resume") == "resume")
        self.assertTrue(trie.autoComplete("ret") == "return")
        self.assertTrue(trie.autoComplete("reta") == "retained")
        self.assertTrue(trie.autoComplete("retai") == "retained")
        self.assertTrue(trie.autoComplete("retain") == "retained")
        self.assertTrue(trie.autoComplete("retaine") == "retained")
        self.assertTrue(trie.autoComplete("retained") == "retained")
        self.assertTrue(trie.autoComplete("retu") == "return")
        self.assertTrue(trie.autoComplete("retur") == "return")
        self.assertTrue(trie.autoComplete("return") == "return")
        self.assertTrue(trie.autoComplete("returne") == "returned")
        self.assertTrue(trie.autoComplete("returned") == "returned")
        self.assertTrue(trie.autoComplete("returni") == "returning")
        self.assertTrue(trie.autoComplete("returnin") == "returning")
        self.assertTrue(trie.autoComplete("returning") == "returning")
        self.assertTrue(trie.autoComplete("returns") == "returns")
        self.assertTrue(trie.autoComplete("reu") == None)
        self.assertTrue(trie.autoComplete("rev") == "revenue")
        self.assertTrue(trie.autoComplete("reve") == "revenue")
        self.assertTrue(trie.autoComplete("reven") == "revenue")
        self.assertTrue(trie.autoComplete("revenu") == "revenue")
        self.assertTrue(trie.autoComplete("revenue") == "revenue")
        self.assertTrue(trie.autoComplete("revi") == "revision")
        self.assertTrue(trie.autoComplete("revis") == "revision")
        self.assertTrue(trie.autoComplete("revisi") == "revision")
        self.assertTrue(trie.autoComplete("revisio") == "revision")
        self.assertTrue(trie.autoComplete("revision") == "revision")
        self.assertTrue(trie.autoComplete("rew") == None)
        self.assertTrue(trie.autoComplete("rex") == None)
        self.assertTrue(trie.autoComplete("rey") == None)
        self.assertTrue(trie.autoComplete("rez") == None)
        self.assertTrue(trie.autoComplete("rf") == None)
        self.assertTrue(trie.autoComplete("rfa") == None)
        self.assertTrue(trie.autoComplete("rfb") == None)
        self.assertTrue(trie.autoComplete("rfc") == None)
        self.assertTrue(trie.autoComplete("rfd") == None)
        self.assertTrue(trie.autoComplete("rfe") == None)
        self.assertTrue(trie.autoComplete("rff") == None)
        self.assertTrue(trie.autoComplete("rfg") == None)
        self.assertTrue(trie.autoComplete("rfh") == None)
        self.assertTrue(trie.autoComplete("rfi") == None)
        self.assertTrue(trie.autoComplete("rfj") == None)
        self.assertTrue(trie.autoComplete("rfk") == None)
        self.assertTrue(trie.autoComplete("rfl") == None)
        self.assertTrue(trie.autoComplete("rfm") == None)
        self.assertTrue(trie.autoComplete("rfn") == None)
        self.assertTrue(trie.autoComplete("rfo") == None)
        self.assertTrue(trie.autoComplete("rfp") == None)
        self.assertTrue(trie.autoComplete("rfq") == None)
        self.assertTrue(trie.autoComplete("rfr") == None)
        self.assertTrue(trie.autoComplete("rfs") == None)
        self.assertTrue(trie.autoComplete("rft") == None)
        self.assertTrue(trie.autoComplete("rfu") == None)
        self.assertTrue(trie.autoComplete("rfv") == None)
        self.assertTrue(trie.autoComplete("rfw") == None)
        self.assertTrue(trie.autoComplete("rfx") == None)
        self.assertTrue(trie.autoComplete("rfy") == None)
        self.assertTrue(trie.autoComplete("rfz") == None)
        self.assertTrue(trie.autoComplete("rg") == None)
        self.assertTrue(trie.autoComplete("rga") == None)
        self.assertTrue(trie.autoComplete("rgb") == None)
        self.assertTrue(trie.autoComplete("rgc") == None)
        self.assertTrue(trie.autoComplete("rgd") == None)
        self.assertTrue(trie.autoComplete("rge") == None)
        self.assertTrue(trie.autoComplete("rgf") == None)
        self.assertTrue(trie.autoComplete("rgg") == None)
        self.assertTrue(trie.autoComplete("rgh") == None)
        self.assertTrue(trie.autoComplete("rgi") == None)
        self.assertTrue(trie.autoComplete("rgj") == None)
        self.assertTrue(trie.autoComplete("rgk") == None)
        self.assertTrue(trie.autoComplete("rgl") == None)
        self.assertTrue(trie.autoComplete("rgm") == None)
        self.assertTrue(trie.autoComplete("rgn") == None)
        self.assertTrue(trie.autoComplete("rgo") == None)
        self.assertTrue(trie.autoComplete("rgp") == None)
        self.assertTrue(trie.autoComplete("rgq") == None)
        self.assertTrue(trie.autoComplete("rgr") == None)
        self.assertTrue(trie.autoComplete("rgs") == None)
        self.assertTrue(trie.autoComplete("rgt") == None)
        self.assertTrue(trie.autoComplete("rgu") == None)
        self.assertTrue(trie.autoComplete("rgv") == None)
        self.assertTrue(trie.autoComplete("rgw") == None)
        self.assertTrue(trie.autoComplete("rgx") == None)
        self.assertTrue(trie.autoComplete("rgy") == None)
        self.assertTrue(trie.autoComplete("rgz") == None)
        self.assertTrue(trie.autoComplete("rh") == "rhode")
        self.assertTrue(trie.autoComplete("rha") == None)
        self.assertTrue(trie.autoComplete("rhb") == None)
        self.assertTrue(trie.autoComplete("rhc") == None)
        self.assertTrue(trie.autoComplete("rhd") == None)
        self.assertTrue(trie.autoComplete("rhe") == None)
        self.assertTrue(trie.autoComplete("rhf") == None)
        self.assertTrue(trie.autoComplete("rhg") == None)
        self.assertTrue(trie.autoComplete("rhh") == None)
        self.assertTrue(trie.autoComplete("rhi") == None)
        self.assertTrue(trie.autoComplete("rhj") == None)
        self.assertTrue(trie.autoComplete("rhk") == None)
        self.assertTrue(trie.autoComplete("rhl") == None)
        self.assertTrue(trie.autoComplete("rhm") == None)
        self.assertTrue(trie.autoComplete("rhn") == None)
        self.assertTrue(trie.autoComplete("rho") == "rhode")
        self.assertTrue(trie.autoComplete("rhod") == "rhode")
        self.assertTrue(trie.autoComplete("rhode") == "rhode")
        self.assertTrue(trie.autoComplete("rhp") == None)
        self.assertTrue(trie.autoComplete("rhq") == None)
        self.assertTrue(trie.autoComplete("rhr") == None)
        self.assertTrue(trie.autoComplete("rhs") == None)
        self.assertTrue(trie.autoComplete("rht") == None)
        self.assertTrue(trie.autoComplete("rhu") == None)
        self.assertTrue(trie.autoComplete("rhv") == None)
        self.assertTrue(trie.autoComplete("rhw") == None)
        self.assertTrue(trie.autoComplete("rhx") == None)
        self.assertTrue(trie.autoComplete("rhy") == None)
        self.assertTrue(trie.autoComplete("rhz") == None)
        self.assertTrue(trie.autoComplete("ri") == "right")
        self.assertTrue(trie.autoComplete("ria") == None)
        self.assertTrue(trie.autoComplete("rib") == None)
        self.assertTrue(trie.autoComplete("ric") == None)
        self.assertTrue(trie.autoComplete("rid") == None)
        self.assertTrue(trie.autoComplete("rie") == None)
        self.assertTrue(trie.autoComplete("rif") == None)
        self.assertTrue(trie.autoComplete("rig") == "right")
        self.assertTrue(trie.autoComplete("righ") == "right")
        self.assertTrue(trie.autoComplete("right") == "right")
        self.assertTrue(trie.autoComplete("rights") == "rights")
        self.assertTrue(trie.autoComplete("rih") == None)
        self.assertTrue(trie.autoComplete("rii") == None)
        self.assertTrue(trie.autoComplete("rij") == None)
        self.assertTrue(trie.autoComplete("rik") == None)
        self.assertTrue(trie.autoComplete("ril") == None)
        self.assertTrue(trie.autoComplete("rim") == None)
        self.assertTrue(trie.autoComplete("rin") == None)
        self.assertTrue(trie.autoComplete("rio") == None)
        self.assertTrue(trie.autoComplete("rip") == None)
        self.assertTrue(trie.autoComplete("riq") == None)
        self.assertTrue(trie.autoComplete("rir") == None)
        self.assertTrue(trie.autoComplete("ris") == None)
        self.assertTrue(trie.autoComplete("rit") == None)
        self.assertTrue(trie.autoComplete("riu") == None)
        self.assertTrue(trie.autoComplete("riv") == None)
        self.assertTrue(trie.autoComplete("riw") == None)
        self.assertTrue(trie.autoComplete("rix") == None)
        self.assertTrue(trie.autoComplete("riy") == None)
        self.assertTrue(trie.autoComplete("riz") == None)
        self.assertTrue(trie.autoComplete("rj") == None)
        self.assertTrue(trie.autoComplete("rja") == None)
        self.assertTrue(trie.autoComplete("rjb") == None)
        self.assertTrue(trie.autoComplete("rjc") == None)
        self.assertTrue(trie.autoComplete("rjd") == None)
        self.assertTrue(trie.autoComplete("rje") == None)
        self.assertTrue(trie.autoComplete("rjf") == None)
        self.assertTrue(trie.autoComplete("rjg") == None)
        self.assertTrue(trie.autoComplete("rjh") == None)
        self.assertTrue(trie.autoComplete("rji") == None)
        self.assertTrue(trie.autoComplete("rjj") == None)
        self.assertTrue(trie.autoComplete("rjk") == None)
        self.assertTrue(trie.autoComplete("rjl") == None)
        self.assertTrue(trie.autoComplete("rjm") == None)
        self.assertTrue(trie.autoComplete("rjn") == None)
        self.assertTrue(trie.autoComplete("rjo") == None)
        self.assertTrue(trie.autoComplete("rjp") == None)
        self.assertTrue(trie.autoComplete("rjq") == None)
        self.assertTrue(trie.autoComplete("rjr") == None)
        self.assertTrue(trie.autoComplete("rjs") == None)
        self.assertTrue(trie.autoComplete("rjt") == None)
        self.assertTrue(trie.autoComplete("rju") == None)
        self.assertTrue(trie.autoComplete("rjv") == None)
        self.assertTrue(trie.autoComplete("rjw") == None)
        self.assertTrue(trie.autoComplete("rjx") == None)
        self.assertTrue(trie.autoComplete("rjy") == None)
        self.assertTrue(trie.autoComplete("rjz") == None)
        self.assertTrue(trie.autoComplete("rk") == None)
        self.assertTrue(trie.autoComplete("rka") == None)
        self.assertTrue(trie.autoComplete("rkb") == None)
        self.assertTrue(trie.autoComplete("rkc") == None)
        self.assertTrue(trie.autoComplete("rkd") == None)
        self.assertTrue(trie.autoComplete("rke") == None)
        self.assertTrue(trie.autoComplete("rkf") == None)
        self.assertTrue(trie.autoComplete("rkg") == None)
        self.assertTrue(trie.autoComplete("rkh") == None)
        self.assertTrue(trie.autoComplete("rki") == None)
        self.assertTrue(trie.autoComplete("rkj") == None)
        self.assertTrue(trie.autoComplete("rkk") == None)
        self.assertTrue(trie.autoComplete("rkl") == None)
        self.assertTrue(trie.autoComplete("rkm") == None)
        self.assertTrue(trie.autoComplete("rkn") == None)
        self.assertTrue(trie.autoComplete("rko") == None)
        self.assertTrue(trie.autoComplete("rkp") == None)
        self.assertTrue(trie.autoComplete("rkq") == None)
        self.assertTrue(trie.autoComplete("rkr") == None)
        self.assertTrue(trie.autoComplete("rks") == None)
        self.assertTrue(trie.autoComplete("rkt") == None)
        self.assertTrue(trie.autoComplete("rku") == None)
        self.assertTrue(trie.autoComplete("rkv") == None)
        self.assertTrue(trie.autoComplete("rkw") == None)
        self.assertTrue(trie.autoComplete("rkx") == None)
        self.assertTrue(trie.autoComplete("rky") == None)
        self.assertTrue(trie.autoComplete("rkz") == None)
        self.assertTrue(trie.autoComplete("rl") == None)
        self.assertTrue(trie.autoComplete("rla") == None)
        self.assertTrue(trie.autoComplete("rlb") == None)
        self.assertTrue(trie.autoComplete("rlc") == None)
        self.assertTrue(trie.autoComplete("rld") == None)
        self.assertTrue(trie.autoComplete("rle") == None)
        self.assertTrue(trie.autoComplete("rlf") == None)
        self.assertTrue(trie.autoComplete("rlg") == None)
        self.assertTrue(trie.autoComplete("rlh") == None)
        self.assertTrue(trie.autoComplete("rli") == None)
        self.assertTrue(trie.autoComplete("rlj") == None)
        self.assertTrue(trie.autoComplete("rlk") == None)
        self.assertTrue(trie.autoComplete("rll") == None)
        self.assertTrue(trie.autoComplete("rlm") == None)
        self.assertTrue(trie.autoComplete("rln") == None)
        self.assertTrue(trie.autoComplete("rlo") == None)
        self.assertTrue(trie.autoComplete("rlp") == None)
        self.assertTrue(trie.autoComplete("rlq") == None)
        self.assertTrue(trie.autoComplete("rlr") == None)
        self.assertTrue(trie.autoComplete("rls") == None)
        self.assertTrue(trie.autoComplete("rlt") == None)
        self.assertTrue(trie.autoComplete("rlu") == None)
        self.assertTrue(trie.autoComplete("rlv") == None)
        self.assertTrue(trie.autoComplete("rlw") == None)
        self.assertTrue(trie.autoComplete("rlx") == None)
        self.assertTrue(trie.autoComplete("rly") == None)
        self.assertTrue(trie.autoComplete("rlz") == None)
        self.assertTrue(trie.autoComplete("rm") == None)
        self.assertTrue(trie.autoComplete("rma") == None)
        self.assertTrue(trie.autoComplete("rmb") == None)
        self.assertTrue(trie.autoComplete("rmc") == None)
        self.assertTrue(trie.autoComplete("rmd") == None)
        self.assertTrue(trie.autoComplete("rme") == None)
        self.assertTrue(trie.autoComplete("rmf") == None)
        self.assertTrue(trie.autoComplete("rmg") == None)
        self.assertTrue(trie.autoComplete("rmh") == None)
        self.assertTrue(trie.autoComplete("rmi") == None)
        self.assertTrue(trie.autoComplete("rmj") == None)
        self.assertTrue(trie.autoComplete("rmk") == None)
        self.assertTrue(trie.autoComplete("rml") == None)
        self.assertTrue(trie.autoComplete("rmm") == None)
        self.assertTrue(trie.autoComplete("rmn") == None)
        self.assertTrue(trie.autoComplete("rmo") == None)
        self.assertTrue(trie.autoComplete("rmp") == None)
        self.assertTrue(trie.autoComplete("rmq") == None)
        self.assertTrue(trie.autoComplete("rmr") == None)
        self.assertTrue(trie.autoComplete("rms") == None)
        self.assertTrue(trie.autoComplete("rmt") == None)
        self.assertTrue(trie.autoComplete("rmu") == None)
        self.assertTrue(trie.autoComplete("rmv") == None)
        self.assertTrue(trie.autoComplete("rmw") == None)
        self.assertTrue(trie.autoComplete("rmx") == None)
        self.assertTrue(trie.autoComplete("rmy") == None)
        self.assertTrue(trie.autoComplete("rmz") == None)
        self.assertTrue(trie.autoComplete("rn") == None)
        self.assertTrue(trie.autoComplete("rna") == None)
        self.assertTrue(trie.autoComplete("rnb") == None)
        self.assertTrue(trie.autoComplete("rnc") == None)
        self.assertTrue(trie.autoComplete("rnd") == None)
        self.assertTrue(trie.autoComplete("rne") == None)
        self.assertTrue(trie.autoComplete("rnf") == None)
        self.assertTrue(trie.autoComplete("rng") == None)
        self.assertTrue(trie.autoComplete("rnh") == None)
        self.assertTrue(trie.autoComplete("rni") == None)
        self.assertTrue(trie.autoComplete("rnj") == None)
        self.assertTrue(trie.autoComplete("rnk") == None)
        self.assertTrue(trie.autoComplete("rnl") == None)
        self.assertTrue(trie.autoComplete("rnm") == None)
        self.assertTrue(trie.autoComplete("rnn") == None)
        self.assertTrue(trie.autoComplete("rno") == None)
        self.assertTrue(trie.autoComplete("rnp") == None)
        self.assertTrue(trie.autoComplete("rnq") == None)
        self.assertTrue(trie.autoComplete("rnr") == None)
        self.assertTrue(trie.autoComplete("rns") == None)
        self.assertTrue(trie.autoComplete("rnt") == None)
        self.assertTrue(trie.autoComplete("rnu") == None)
        self.assertTrue(trie.autoComplete("rnv") == None)
        self.assertTrue(trie.autoComplete("rnw") == None)
        self.assertTrue(trie.autoComplete("rnx") == None)
        self.assertTrue(trie.autoComplete("rny") == None)
        self.assertTrue(trie.autoComplete("rnz") == None)
        self.assertTrue(trie.autoComplete("ro") == "roads")
        self.assertTrue(trie.autoComplete("roa") == "roads")
        self.assertTrue(trie.autoComplete("road") == "roads")
        self.assertTrue(trie.autoComplete("roads") == "roads")
        self.assertTrue(trie.autoComplete("rob") == None)
        self.assertTrue(trie.autoComplete("roc") == None)
        self.assertTrue(trie.autoComplete("rod") == None)
        self.assertTrue(trie.autoComplete("roe") == None)
        self.assertTrue(trie.autoComplete("rof") == None)
        self.assertTrue(trie.autoComplete("rog") == None)
        self.assertTrue(trie.autoComplete("roh") == None)
        self.assertTrue(trie.autoComplete("roi") == None)
        self.assertTrue(trie.autoComplete("roj") == None)
        self.assertTrue(trie.autoComplete("rok") == None)
        self.assertTrue(trie.autoComplete("rol") == None)
        self.assertTrue(trie.autoComplete("rom") == None)
        self.assertTrue(trie.autoComplete("ron") == None)
        self.assertTrue(trie.autoComplete("roo") == None)
        self.assertTrue(trie.autoComplete("rop") == None)
        self.assertTrue(trie.autoComplete("roq") == None)
        self.assertTrue(trie.autoComplete("ror") == None)
        self.assertTrue(trie.autoComplete("ros") == None)
        self.assertTrue(trie.autoComplete("rot") == None)
        self.assertTrue(trie.autoComplete("rou") == None)
        self.assertTrue(trie.autoComplete("rov") == None)
        self.assertTrue(trie.autoComplete("row") == None)
        self.assertTrue(trie.autoComplete("rox") == None)
        self.assertTrue(trie.autoComplete("roy") == None)
        self.assertTrue(trie.autoComplete("roz") == None)
        self.assertTrue(trie.autoComplete("rp") == None)
        self.assertTrue(trie.autoComplete("rpa") == None)
        self.assertTrue(trie.autoComplete("rpb") == None)
        self.assertTrue(trie.autoComplete("rpc") == None)
        self.assertTrue(trie.autoComplete("rpd") == None)
        self.assertTrue(trie.autoComplete("rpe") == None)
        self.assertTrue(trie.autoComplete("rpf") == None)
        self.assertTrue(trie.autoComplete("rpg") == None)
        self.assertTrue(trie.autoComplete("rph") == None)
        self.assertTrue(trie.autoComplete("rpi") == None)
        self.assertTrue(trie.autoComplete("rpj") == None)
        self.assertTrue(trie.autoComplete("rpk") == None)
        self.assertTrue(trie.autoComplete("rpl") == None)
        self.assertTrue(trie.autoComplete("rpm") == None)
        self.assertTrue(trie.autoComplete("rpn") == None)
        self.assertTrue(trie.autoComplete("rpo") == None)
        self.assertTrue(trie.autoComplete("rpp") == None)
        self.assertTrue(trie.autoComplete("rpq") == None)
        self.assertTrue(trie.autoComplete("rpr") == None)
        self.assertTrue(trie.autoComplete("rps") == None)
        self.assertTrue(trie.autoComplete("rpt") == None)
        self.assertTrue(trie.autoComplete("rpu") == None)
        self.assertTrue(trie.autoComplete("rpv") == None)
        self.assertTrue(trie.autoComplete("rpw") == None)
        self.assertTrue(trie.autoComplete("rpx") == None)
        self.assertTrue(trie.autoComplete("rpy") == None)
        self.assertTrue(trie.autoComplete("rpz") == None)
        self.assertTrue(trie.autoComplete("rq") == None)
        self.assertTrue(trie.autoComplete("rqa") == None)
        self.assertTrue(trie.autoComplete("rqb") == None)
        self.assertTrue(trie.autoComplete("rqc") == None)
        self.assertTrue(trie.autoComplete("rqd") == None)
        self.assertTrue(trie.autoComplete("rqe") == None)
        self.assertTrue(trie.autoComplete("rqf") == None)
        self.assertTrue(trie.autoComplete("rqg") == None)
        self.assertTrue(trie.autoComplete("rqh") == None)
        self.assertTrue(trie.autoComplete("rqi") == None)
        self.assertTrue(trie.autoComplete("rqj") == None)
        self.assertTrue(trie.autoComplete("rqk") == None)
        self.assertTrue(trie.autoComplete("rql") == None)
        self.assertTrue(trie.autoComplete("rqm") == None)
        self.assertTrue(trie.autoComplete("rqn") == None)
        self.assertTrue(trie.autoComplete("rqo") == None)
        self.assertTrue(trie.autoComplete("rqp") == None)
        self.assertTrue(trie.autoComplete("rqq") == None)
        self.assertTrue(trie.autoComplete("rqr") == None)
        self.assertTrue(trie.autoComplete("rqs") == None)
        self.assertTrue(trie.autoComplete("rqt") == None)
        self.assertTrue(trie.autoComplete("rqu") == None)
        self.assertTrue(trie.autoComplete("rqv") == None)
        self.assertTrue(trie.autoComplete("rqw") == None)
        self.assertTrue(trie.autoComplete("rqx") == None)
        self.assertTrue(trie.autoComplete("rqy") == None)
        self.assertTrue(trie.autoComplete("rqz") == None)
        self.assertTrue(trie.autoComplete("rr") == None)
        self.assertTrue(trie.autoComplete("rra") == None)
        self.assertTrue(trie.autoComplete("rrb") == None)
        self.assertTrue(trie.autoComplete("rrc") == None)
        self.assertTrue(trie.autoComplete("rrd") == None)
        self.assertTrue(trie.autoComplete("rre") == None)
        self.assertTrue(trie.autoComplete("rrf") == None)
        self.assertTrue(trie.autoComplete("rrg") == None)
        self.assertTrue(trie.autoComplete("rrh") == None)
        self.assertTrue(trie.autoComplete("rri") == None)
        self.assertTrue(trie.autoComplete("rrj") == None)
        self.assertTrue(trie.autoComplete("rrk") == None)
        self.assertTrue(trie.autoComplete("rrl") == None)
        self.assertTrue(trie.autoComplete("rrm") == None)
        self.assertTrue(trie.autoComplete("rrn") == None)
        self.assertTrue(trie.autoComplete("rro") == None)
        self.assertTrue(trie.autoComplete("rrp") == None)
        self.assertTrue(trie.autoComplete("rrq") == None)
        self.assertTrue(trie.autoComplete("rrr") == None)
        self.assertTrue(trie.autoComplete("rrs") == None)
        self.assertTrue(trie.autoComplete("rrt") == None)
        self.assertTrue(trie.autoComplete("rru") == None)
        self.assertTrue(trie.autoComplete("rrv") == None)
        self.assertTrue(trie.autoComplete("rrw") == None)
        self.assertTrue(trie.autoComplete("rrx") == None)
        self.assertTrue(trie.autoComplete("rry") == None)
        self.assertTrue(trie.autoComplete("rrz") == None)
        self.assertTrue(trie.autoComplete("rs") == None)
        self.assertTrue(trie.autoComplete("rsa") == None)
        self.assertTrue(trie.autoComplete("rsb") == None)
        self.assertTrue(trie.autoComplete("rsc") == None)
        self.assertTrue(trie.autoComplete("rsd") == None)
        self.assertTrue(trie.autoComplete("rse") == None)
        self.assertTrue(trie.autoComplete("rsf") == None)
        self.assertTrue(trie.autoComplete("rsg") == None)
        self.assertTrue(trie.autoComplete("rsh") == None)
        self.assertTrue(trie.autoComplete("rsi") == None)
        self.assertTrue(trie.autoComplete("rsj") == None)
        self.assertTrue(trie.autoComplete("rsk") == None)
        self.assertTrue(trie.autoComplete("rsl") == None)
        self.assertTrue(trie.autoComplete("rsm") == None)
        self.assertTrue(trie.autoComplete("rsn") == None)
        self.assertTrue(trie.autoComplete("rso") == None)
        self.assertTrue(trie.autoComplete("rsp") == None)
        self.assertTrue(trie.autoComplete("rsq") == None)
        self.assertTrue(trie.autoComplete("rsr") == None)
        self.assertTrue(trie.autoComplete("rss") == None)
        self.assertTrue(trie.autoComplete("rst") == None)
        self.assertTrue(trie.autoComplete("rsu") == None)
        self.assertTrue(trie.autoComplete("rsv") == None)
        self.assertTrue(trie.autoComplete("rsw") == None)
        self.assertTrue(trie.autoComplete("rsx") == None)
        self.assertTrue(trie.autoComplete("rsy") == None)
        self.assertTrue(trie.autoComplete("rsz") == None)
        self.assertTrue(trie.autoComplete("rt") == None)
        self.assertTrue(trie.autoComplete("rta") == None)
        self.assertTrue(trie.autoComplete("rtb") == None)
        self.assertTrue(trie.autoComplete("rtc") == None)
        self.assertTrue(trie.autoComplete("rtd") == None)
        self.assertTrue(trie.autoComplete("rte") == None)
        self.assertTrue(trie.autoComplete("rtf") == None)
        self.assertTrue(trie.autoComplete("rtg") == None)
        self.assertTrue(trie.autoComplete("rth") == None)
        self.assertTrue(trie.autoComplete("rti") == None)
        self.assertTrue(trie.autoComplete("rtj") == None)
        self.assertTrue(trie.autoComplete("rtk") == None)
        self.assertTrue(trie.autoComplete("rtl") == None)
        self.assertTrue(trie.autoComplete("rtm") == None)
        self.assertTrue(trie.autoComplete("rtn") == None)
        self.assertTrue(trie.autoComplete("rto") == None)
        self.assertTrue(trie.autoComplete("rtp") == None)
        self.assertTrue(trie.autoComplete("rtq") == None)
        self.assertTrue(trie.autoComplete("rtr") == None)
        self.assertTrue(trie.autoComplete("rts") == None)
        self.assertTrue(trie.autoComplete("rtt") == None)
        self.assertTrue(trie.autoComplete("rtu") == None)
        self.assertTrue(trie.autoComplete("rtv") == None)
        self.assertTrue(trie.autoComplete("rtw") == None)
        self.assertTrue(trie.autoComplete("rtx") == None)
        self.assertTrue(trie.autoComplete("rty") == None)
        self.assertTrue(trie.autoComplete("rtz") == None)
        self.assertTrue(trie.autoComplete("ru") == "rules")
        self.assertTrue(trie.autoComplete("rua") == None)
        self.assertTrue(trie.autoComplete("rub") == None)
        self.assertTrue(trie.autoComplete("ruc") == None)
        self.assertTrue(trie.autoComplete("rud") == None)
        self.assertTrue(trie.autoComplete("rue") == None)
        self.assertTrue(trie.autoComplete("ruf") == None)
        self.assertTrue(trie.autoComplete("rug") == None)
        self.assertTrue(trie.autoComplete("ruh") == None)
        self.assertTrue(trie.autoComplete("rui") == None)
        self.assertTrue(trie.autoComplete("ruj") == None)
        self.assertTrue(trie.autoComplete("ruk") == None)
        self.assertTrue(trie.autoComplete("rul") == "rules")
        self.assertTrue(trie.autoComplete("rule") == "rules")
        self.assertTrue(trie.autoComplete("rules") == "rules")
        self.assertTrue(trie.autoComplete("rum") == None)
        self.assertTrue(trie.autoComplete("run") == None)
        self.assertTrue(trie.autoComplete("ruo") == None)
        self.assertTrue(trie.autoComplete("rup") == None)
        self.assertTrue(trie.autoComplete("ruq") == None)
        self.assertTrue(trie.autoComplete("rur") == None)
        self.assertTrue(trie.autoComplete("rus") == None)
        self.assertTrue(trie.autoComplete("rut") == None)
        self.assertTrue(trie.autoComplete("ruu") == None)
        self.assertTrue(trie.autoComplete("ruv") == None)
        self.assertTrue(trie.autoComplete("ruw") == None)
        self.assertTrue(trie.autoComplete("rux") == None)
        self.assertTrue(trie.autoComplete("ruy") == None)
        self.assertTrue(trie.autoComplete("ruz") == None)
        self.assertTrue(trie.autoComplete("rv") == None)
        self.assertTrue(trie.autoComplete("rva") == None)
        self.assertTrue(trie.autoComplete("rvb") == None)
        self.assertTrue(trie.autoComplete("rvc") == None)
        self.assertTrue(trie.autoComplete("rvd") == None)
        self.assertTrue(trie.autoComplete("rve") == None)
        self.assertTrue(trie.autoComplete("rvf") == None)
        self.assertTrue(trie.autoComplete("rvg") == None)
        self.assertTrue(trie.autoComplete("rvh") == None)
        self.assertTrue(trie.autoComplete("rvi") == None)
        self.assertTrue(trie.autoComplete("rvj") == None)
        self.assertTrue(trie.autoComplete("rvk") == None)
        self.assertTrue(trie.autoComplete("rvl") == None)
        self.assertTrue(trie.autoComplete("rvm") == None)
        self.assertTrue(trie.autoComplete("rvn") == None)
        self.assertTrue(trie.autoComplete("rvo") == None)
        self.assertTrue(trie.autoComplete("rvp") == None)
        self.assertTrue(trie.autoComplete("rvq") == None)
        self.assertTrue(trie.autoComplete("rvr") == None)
        self.assertTrue(trie.autoComplete("rvs") == None)
        self.assertTrue(trie.autoComplete("rvt") == None)
        self.assertTrue(trie.autoComplete("rvu") == None)
        self.assertTrue(trie.autoComplete("rvv") == None)
        self.assertTrue(trie.autoComplete("rvw") == None)
        self.assertTrue(trie.autoComplete("rvx") == None)
        self.assertTrue(trie.autoComplete("rvy") == None)
        self.assertTrue(trie.autoComplete("rvz") == None)
        self.assertTrue(trie.autoComplete("rw") == None)
        self.assertTrue(trie.autoComplete("rwa") == None)
        self.assertTrue(trie.autoComplete("rwb") == None)
        self.assertTrue(trie.autoComplete("rwc") == None)
        self.assertTrue(trie.autoComplete("rwd") == None)
        self.assertTrue(trie.autoComplete("rwe") == None)
        self.assertTrue(trie.autoComplete("rwf") == None)
        self.assertTrue(trie.autoComplete("rwg") == None)
        self.assertTrue(trie.autoComplete("rwh") == None)
        self.assertTrue(trie.autoComplete("rwi") == None)
        self.assertTrue(trie.autoComplete("rwj") == None)
        self.assertTrue(trie.autoComplete("rwk") == None)
        self.assertTrue(trie.autoComplete("rwl") == None)
        self.assertTrue(trie.autoComplete("rwm") == None)
        self.assertTrue(trie.autoComplete("rwn") == None)
        self.assertTrue(trie.autoComplete("rwo") == None)
        self.assertTrue(trie.autoComplete("rwp") == None)
        self.assertTrue(trie.autoComplete("rwq") == None)
        self.assertTrue(trie.autoComplete("rwr") == None)
        self.assertTrue(trie.autoComplete("rws") == None)
        self.assertTrue(trie.autoComplete("rwt") == None)
        self.assertTrue(trie.autoComplete("rwu") == None)
        self.assertTrue(trie.autoComplete("rwv") == None)
        self.assertTrue(trie.autoComplete("rww") == None)
        self.assertTrue(trie.autoComplete("rwx") == None)
        self.assertTrue(trie.autoComplete("rwy") == None)
        self.assertTrue(trie.autoComplete("rwz") == None)
        self.assertTrue(trie.autoComplete("rx") == None)
        self.assertTrue(trie.autoComplete("rxa") == None)
        self.assertTrue(trie.autoComplete("rxb") == None)
        self.assertTrue(trie.autoComplete("rxc") == None)
        self.assertTrue(trie.autoComplete("rxd") == None)
        self.assertTrue(trie.autoComplete("rxe") == None)
        self.assertTrue(trie.autoComplete("rxf") == None)
        self.assertTrue(trie.autoComplete("rxg") == None)
        self.assertTrue(trie.autoComplete("rxh") == None)
        self.assertTrue(trie.autoComplete("rxi") == None)
        self.assertTrue(trie.autoComplete("rxj") == None)
        self.assertTrue(trie.autoComplete("rxk") == None)
        self.assertTrue(trie.autoComplete("rxl") == None)
        self.assertTrue(trie.autoComplete("rxm") == None)
        self.assertTrue(trie.autoComplete("rxn") == None)
        self.assertTrue(trie.autoComplete("rxo") == None)
        self.assertTrue(trie.autoComplete("rxp") == None)
        self.assertTrue(trie.autoComplete("rxq") == None)
        self.assertTrue(trie.autoComplete("rxr") == None)
        self.assertTrue(trie.autoComplete("rxs") == None)
        self.assertTrue(trie.autoComplete("rxt") == None)
        self.assertTrue(trie.autoComplete("rxu") == None)
        self.assertTrue(trie.autoComplete("rxv") == None)
        self.assertTrue(trie.autoComplete("rxw") == None)
        self.assertTrue(trie.autoComplete("rxx") == None)
        self.assertTrue(trie.autoComplete("rxy") == None)
        self.assertTrue(trie.autoComplete("rxz") == None)
        self.assertTrue(trie.autoComplete("ry") == None)
        self.assertTrue(trie.autoComplete("rya") == None)
        self.assertTrue(trie.autoComplete("ryb") == None)
        self.assertTrue(trie.autoComplete("ryc") == None)
        self.assertTrue(trie.autoComplete("ryd") == None)
        self.assertTrue(trie.autoComplete("rye") == None)
        self.assertTrue(trie.autoComplete("ryf") == None)
        self.assertTrue(trie.autoComplete("ryg") == None)
        self.assertTrue(trie.autoComplete("ryh") == None)
        self.assertTrue(trie.autoComplete("ryi") == None)
        self.assertTrue(trie.autoComplete("ryj") == None)
        self.assertTrue(trie.autoComplete("ryk") == None)
        self.assertTrue(trie.autoComplete("ryl") == None)
        self.assertTrue(trie.autoComplete("rym") == None)
        self.assertTrue(trie.autoComplete("ryn") == None)
        self.assertTrue(trie.autoComplete("ryo") == None)
        self.assertTrue(trie.autoComplete("ryp") == None)
        self.assertTrue(trie.autoComplete("ryq") == None)
        self.assertTrue(trie.autoComplete("ryr") == None)
        self.assertTrue(trie.autoComplete("rys") == None)
        self.assertTrue(trie.autoComplete("ryt") == None)
        self.assertTrue(trie.autoComplete("ryu") == None)
        self.assertTrue(trie.autoComplete("ryv") == None)
        self.assertTrue(trie.autoComplete("ryw") == None)
        self.assertTrue(trie.autoComplete("ryx") == None)
        self.assertTrue(trie.autoComplete("ryy") == None)
        self.assertTrue(trie.autoComplete("ryz") == None)
        self.assertTrue(trie.autoComplete("rz") == None)
        self.assertTrue(trie.autoComplete("rza") == None)
        self.assertTrue(trie.autoComplete("rzb") == None)
        self.assertTrue(trie.autoComplete("rzc") == None)
        self.assertTrue(trie.autoComplete("rzd") == None)
        self.assertTrue(trie.autoComplete("rze") == None)
        self.assertTrue(trie.autoComplete("rzf") == None)
        self.assertTrue(trie.autoComplete("rzg") == None)
        self.assertTrue(trie.autoComplete("rzh") == None)
        self.assertTrue(trie.autoComplete("rzi") == None)
        self.assertTrue(trie.autoComplete("rzj") == None)
        self.assertTrue(trie.autoComplete("rzk") == None)
        self.assertTrue(trie.autoComplete("rzl") == None)
        self.assertTrue(trie.autoComplete("rzm") == None)
        self.assertTrue(trie.autoComplete("rzn") == None)
        self.assertTrue(trie.autoComplete("rzo") == None)
        self.assertTrue(trie.autoComplete("rzp") == None)
        self.assertTrue(trie.autoComplete("rzq") == None)
        self.assertTrue(trie.autoComplete("rzr") == None)
        self.assertTrue(trie.autoComplete("rzs") == None)
        self.assertTrue(trie.autoComplete("rzt") == None)
        self.assertTrue(trie.autoComplete("rzu") == None)
        self.assertTrue(trie.autoComplete("rzv") == None)
        self.assertTrue(trie.autoComplete("rzw") == None)
        self.assertTrue(trie.autoComplete("rzx") == None)
        self.assertTrue(trie.autoComplete("rzy") == None)
        self.assertTrue(trie.autoComplete("rzz") == None)
        self.assertTrue(trie.autoComplete("s") == "shall")
        self.assertTrue(trie.autoComplete("sa") == "same")
        self.assertTrue(trie.autoComplete("saa") == None)
        self.assertTrue(trie.autoComplete("sab") == None)
        self.assertTrue(trie.autoComplete("sac") == None)
        self.assertTrue(trie.autoComplete("sad") == None)
        self.assertTrue(trie.autoComplete("sae") == None)
        self.assertTrue(trie.autoComplete("saf") == "safety")
        self.assertTrue(trie.autoComplete("safe") == "safety")
        self.assertTrue(trie.autoComplete("safet") == "safety")
        self.assertTrue(trie.autoComplete("safety") == "safety")
        self.assertTrue(trie.autoComplete("sag") == None)
        self.assertTrue(trie.autoComplete("sah") == None)
        self.assertTrue(trie.autoComplete("sai") == "said")
        self.assertTrue(trie.autoComplete("said") == "said")
        self.assertTrue(trie.autoComplete("saj") == None)
        self.assertTrue(trie.autoComplete("sak") == None)
        self.assertTrue(trie.autoComplete("sal") == "sale")
        self.assertTrue(trie.autoComplete("sale") == "sale")
        self.assertTrue(trie.autoComplete("sam") == "same")
        self.assertTrue(trie.autoComplete("same") == "same")
        self.assertTrue(trie.autoComplete("san") == None)
        self.assertTrue(trie.autoComplete("sao") == None)
        self.assertTrue(trie.autoComplete("sap") == None)
        self.assertTrue(trie.autoComplete("saq") == None)
        self.assertTrue(trie.autoComplete("sar") == None)
        self.assertTrue(trie.autoComplete("sas") == None)
        self.assertTrue(trie.autoComplete("sat") == None)
        self.assertTrue(trie.autoComplete("sau") == None)
        self.assertTrue(trie.autoComplete("sav") == None)
        self.assertTrue(trie.autoComplete("saw") == None)
        self.assertTrue(trie.autoComplete("sax") == None)
        self.assertTrue(trie.autoComplete("say") == None)
        self.assertTrue(trie.autoComplete("saz") == None)
        self.assertTrue(trie.autoComplete("sb") == None)
        self.assertTrue(trie.autoComplete("sba") == None)
        self.assertTrue(trie.autoComplete("sbb") == None)
        self.assertTrue(trie.autoComplete("sbc") == None)
        self.assertTrue(trie.autoComplete("sbd") == None)
        self.assertTrue(trie.autoComplete("sbe") == None)
        self.assertTrue(trie.autoComplete("sbf") == None)
        self.assertTrue(trie.autoComplete("sbg") == None)
        self.assertTrue(trie.autoComplete("sbh") == None)
        self.assertTrue(trie.autoComplete("sbi") == None)
        self.assertTrue(trie.autoComplete("sbj") == None)
        self.assertTrue(trie.autoComplete("sbk") == None)
        self.assertTrue(trie.autoComplete("sbl") == None)
        self.assertTrue(trie.autoComplete("sbm") == None)
        self.assertTrue(trie.autoComplete("sbn") == None)
        self.assertTrue(trie.autoComplete("sbo") == None)
        self.assertTrue(trie.autoComplete("sbp") == None)
        self.assertTrue(trie.autoComplete("sbq") == None)
        self.assertTrue(trie.autoComplete("sbr") == None)
        self.assertTrue(trie.autoComplete("sbs") == None)
        self.assertTrue(trie.autoComplete("sbt") == None)
        self.assertTrue(trie.autoComplete("sbu") == None)
        self.assertTrue(trie.autoComplete("sbv") == None)
        self.assertTrue(trie.autoComplete("sbw") == None)
        self.assertTrue(trie.autoComplete("sbx") == None)
        self.assertTrue(trie.autoComplete("sby") == None)
        self.assertTrue(trie.autoComplete("sbz") == None)
        self.assertTrue(trie.autoComplete("sc") == "science")
        self.assertTrue(trie.autoComplete("sca") == None)
        self.assertTrue(trie.autoComplete("scb") == None)
        self.assertTrue(trie.autoComplete("scc") == None)
        self.assertTrue(trie.autoComplete("scd") == None)
        self.assertTrue(trie.autoComplete("sce") == None)
        self.assertTrue(trie.autoComplete("scf") == None)
        self.assertTrue(trie.autoComplete("scg") == None)
        self.assertTrue(trie.autoComplete("sch") == None)
        self.assertTrue(trie.autoComplete("sci") == "science")
        self.assertTrue(trie.autoComplete("scie") == "science")
        self.assertTrue(trie.autoComplete("scien") == "science")
        self.assertTrue(trie.autoComplete("scienc") == "science")
        self.assertTrue(trie.autoComplete("science") == "science")
        self.assertTrue(trie.autoComplete("scj") == None)
        self.assertTrue(trie.autoComplete("sck") == None)
        self.assertTrue(trie.autoComplete("scl") == None)
        self.assertTrue(trie.autoComplete("scm") == None)
        self.assertTrue(trie.autoComplete("scn") == None)
        self.assertTrue(trie.autoComplete("sco") == None)
        self.assertTrue(trie.autoComplete("scp") == None)
        self.assertTrue(trie.autoComplete("scq") == None)
        self.assertTrue(trie.autoComplete("scr") == None)
        self.assertTrue(trie.autoComplete("scs") == None)
        self.assertTrue(trie.autoComplete("sct") == None)
        self.assertTrue(trie.autoComplete("scu") == None)
        self.assertTrue(trie.autoComplete("scv") == None)
        self.assertTrue(trie.autoComplete("scw") == None)
        self.assertTrue(trie.autoComplete("scx") == None)
        self.assertTrue(trie.autoComplete("scy") == None)
        self.assertTrue(trie.autoComplete("scz") == None)
        self.assertTrue(trie.autoComplete("sd") == None)
        self.assertTrue(trie.autoComplete("sda") == None)
        self.assertTrue(trie.autoComplete("sdb") == None)
        self.assertTrue(trie.autoComplete("sdc") == None)
        self.assertTrue(trie.autoComplete("sdd") == None)
        self.assertTrue(trie.autoComplete("sde") == None)
        self.assertTrue(trie.autoComplete("sdf") == None)
        self.assertTrue(trie.autoComplete("sdg") == None)
        self.assertTrue(trie.autoComplete("sdh") == None)
        self.assertTrue(trie.autoComplete("sdi") == None)
        self.assertTrue(trie.autoComplete("sdj") == None)
        self.assertTrue(trie.autoComplete("sdk") == None)
        self.assertTrue(trie.autoComplete("sdl") == None)
        self.assertTrue(trie.autoComplete("sdm") == None)
        self.assertTrue(trie.autoComplete("sdn") == None)
        self.assertTrue(trie.autoComplete("sdo") == None)
        self.assertTrue(trie.autoComplete("sdp") == None)
        self.assertTrue(trie.autoComplete("sdq") == None)
        self.assertTrue(trie.autoComplete("sdr") == None)
        self.assertTrue(trie.autoComplete("sds") == None)
        self.assertTrue(trie.autoComplete("sdt") == None)
        self.assertTrue(trie.autoComplete("sdu") == None)
        self.assertTrue(trie.autoComplete("sdv") == None)
        self.assertTrue(trie.autoComplete("sdw") == None)
        self.assertTrue(trie.autoComplete("sdx") == None)
        self.assertTrue(trie.autoComplete("sdy") == None)
        self.assertTrue(trie.autoComplete("sdz") == None)
        self.assertTrue(trie.autoComplete("se") == "section")
        self.assertTrue(trie.autoComplete("sea") == "seat")
        self.assertTrue(trie.autoComplete("seal") == "sealed")
        self.assertTrue(trie.autoComplete("seale") == "sealed")
        self.assertTrue(trie.autoComplete("sealed") == "sealed")
        self.assertTrue(trie.autoComplete("sear") == "searched")
        self.assertTrue(trie.autoComplete("searc") == "searched")
        self.assertTrue(trie.autoComplete("search") == "searched")
        self.assertTrue(trie.autoComplete("searche") == "searched")
        self.assertTrue(trie.autoComplete("searched") == "searched")
        self.assertTrue(trie.autoComplete("searches") == "searches")
        self.assertTrue(trie.autoComplete("seas") == "seas")
        self.assertTrue(trie.autoComplete("seat") == "seat")
        self.assertTrue(trie.autoComplete("seats") == "seats")
        self.assertTrue(trie.autoComplete("seb") == None)
        self.assertTrue(trie.autoComplete("sec") == "section")
        self.assertTrue(trie.autoComplete("seco") == "second")
        self.assertTrue(trie.autoComplete("secon") == "second")
        self.assertTrue(trie.autoComplete("second") == "second")
        self.assertTrue(trie.autoComplete("secr") == "secrecy")
        self.assertTrue(trie.autoComplete("secre") == "secrecy")
        self.assertTrue(trie.autoComplete("secrec") == "secrecy")
        self.assertTrue(trie.autoComplete("secrecy") == "secrecy")
        self.assertTrue(trie.autoComplete("sect") == "section")
        self.assertTrue(trie.autoComplete("secti") == "section")
        self.assertTrue(trie.autoComplete("sectio") == "section")
        self.assertTrue(trie.autoComplete("section") == "section")
        self.assertTrue(trie.autoComplete("sections") == "sections")
        self.assertTrue(trie.autoComplete("secu") == "secure")
        self.assertTrue(trie.autoComplete("secur") == "secure")
        self.assertTrue(trie.autoComplete("secure") == "secure")
        self.assertTrue(trie.autoComplete("securi") == "securing")
        self.assertTrue(trie.autoComplete("securin") == "securing")
        self.assertTrue(trie.autoComplete("securing") == "securing")
        self.assertTrue(trie.autoComplete("securit") == "securities")
        self.assertTrue(trie.autoComplete("securiti") == "securities")
        self.assertTrue(trie.autoComplete("securitie") == "securities")
        self.assertTrue(trie.autoComplete("securities") == "securities")
        self.assertTrue(trie.autoComplete("security") == "security")
        self.assertTrue(trie.autoComplete("sed") == None)
        self.assertTrue(trie.autoComplete("see") == None)
        self.assertTrue(trie.autoComplete("sef") == None)
        self.assertTrue(trie.autoComplete("seg") == None)
        self.assertTrue(trie.autoComplete("seh") == None)
        self.assertTrue(trie.autoComplete("sei") == "seized")
        self.assertTrue(trie.autoComplete("seiz") == "seized")
        self.assertTrue(trie.autoComplete("seize") == "seized")
        self.assertTrue(trie.autoComplete("seized") == "seized")
        self.assertTrue(trie.autoComplete("seizu") == "seizures")
        self.assertTrue(trie.autoComplete("seizur") == "seizures")
        self.assertTrue(trie.autoComplete("seizure") == "seizures")
        self.assertTrue(trie.autoComplete("seizures") == "seizures")
        self.assertTrue(trie.autoComplete("sej") == None)
        self.assertTrue(trie.autoComplete("sek") == None)
        self.assertTrue(trie.autoComplete("sel") == "selected")
        self.assertTrue(trie.autoComplete("sele") == "selected")
        self.assertTrue(trie.autoComplete("selec") == "selected")
        self.assertTrue(trie.autoComplete("select") == "selected")
        self.assertTrue(trie.autoComplete("selecte") == "selected")
        self.assertTrue(trie.autoComplete("selected") == "selected")
        self.assertTrue(trie.autoComplete("sem") == None)
        self.assertTrue(trie.autoComplete("sen") == "senate")
        self.assertTrue(trie.autoComplete("sena") == "senate")
        self.assertTrue(trie.autoComplete("senat") == "senate")
        self.assertTrue(trie.autoComplete("senate") == "senate")
        self.assertTrue(trie.autoComplete("senato") == "senators")
        self.assertTrue(trie.autoComplete("senator") == "senators")
        self.assertTrue(trie.autoComplete("senators") == "senators")
        self.assertTrue(trie.autoComplete("sent") == "sent")
        self.assertTrue(trie.autoComplete("seo") == None)
        self.assertTrue(trie.autoComplete("sep") == None)
        self.assertTrue(trie.autoComplete("seq") == None)
        self.assertTrue(trie.autoComplete("ser") == "service")
        self.assertTrue(trie.autoComplete("serv") == "service")
        self.assertTrue(trie.autoComplete("servi") == "service")
        self.assertTrue(trie.autoComplete("servic") == "service")
        self.assertTrue(trie.autoComplete("service") == "service")
        self.assertTrue(trie.autoComplete("services") == "services")
        self.assertTrue(trie.autoComplete("servit") == "servitude")
        self.assertTrue(trie.autoComplete("servitu") == "servitude")
        self.assertTrue(trie.autoComplete("servitud") == "servitude")
        self.assertTrue(trie.autoComplete("servitude") == "servitude")
        self.assertTrue(trie.autoComplete("ses") == "session")
        self.assertTrue(trie.autoComplete("sess") == "session")
        self.assertTrue(trie.autoComplete("sessi") == "session")
        self.assertTrue(trie.autoComplete("sessio") == "session")
        self.assertTrue(trie.autoComplete("session") == "session")
        self.assertTrue(trie.autoComplete("set") == None)
        self.assertTrue(trie.autoComplete("seu") == None)
        self.assertTrue(trie.autoComplete("sev") == "several")
        self.assertTrue(trie.autoComplete("seve") == "several")
        self.assertTrue(trie.autoComplete("seven") == "seven")
        self.assertTrue(trie.autoComplete("sevent") == "seventh")
        self.assertTrue(trie.autoComplete("sevente") == "seventeenth")
        self.assertTrue(trie.autoComplete("seventee") == "seventeenth")
        self.assertTrue(trie.autoComplete("seventeen") == "seventeenth")
        self.assertTrue(trie.autoComplete("seventeent") == "seventeenth")
        self.assertTrue(trie.autoComplete("seventeenth") == "seventeenth")
        self.assertTrue(trie.autoComplete("seventh") == "seventh")
        self.assertTrue(trie.autoComplete("sever") == "several")
        self.assertTrue(trie.autoComplete("severa") == "several")
        self.assertTrue(trie.autoComplete("several") == "several")
        self.assertTrue(trie.autoComplete("sew") == None)
        self.assertTrue(trie.autoComplete("sex") == "sex")
        self.assertTrue(trie.autoComplete("sey") == None)
        self.assertTrue(trie.autoComplete("sez") == None)
        self.assertTrue(trie.autoComplete("sf") == None)
        self.assertTrue(trie.autoComplete("sfa") == None)
        self.assertTrue(trie.autoComplete("sfb") == None)
        self.assertTrue(trie.autoComplete("sfc") == None)
        self.assertTrue(trie.autoComplete("sfd") == None)
        self.assertTrue(trie.autoComplete("sfe") == None)
        self.assertTrue(trie.autoComplete("sff") == None)
        self.assertTrue(trie.autoComplete("sfg") == None)
        self.assertTrue(trie.autoComplete("sfh") == None)
        self.assertTrue(trie.autoComplete("sfi") == None)
        self.assertTrue(trie.autoComplete("sfj") == None)
        self.assertTrue(trie.autoComplete("sfk") == None)
        self.assertTrue(trie.autoComplete("sfl") == None)
        self.assertTrue(trie.autoComplete("sfm") == None)
        self.assertTrue(trie.autoComplete("sfn") == None)
        self.assertTrue(trie.autoComplete("sfo") == None)
        self.assertTrue(trie.autoComplete("sfp") == None)
        self.assertTrue(trie.autoComplete("sfq") == None)
        self.assertTrue(trie.autoComplete("sfr") == None)
        self.assertTrue(trie.autoComplete("sfs") == None)
        self.assertTrue(trie.autoComplete("sft") == None)
        self.assertTrue(trie.autoComplete("sfu") == None)
        self.assertTrue(trie.autoComplete("sfv") == None)
        self.assertTrue(trie.autoComplete("sfw") == None)
        self.assertTrue(trie.autoComplete("sfx") == None)
        self.assertTrue(trie.autoComplete("sfy") == None)
        self.assertTrue(trie.autoComplete("sfz") == None)
        self.assertTrue(trie.autoComplete("sg") == None)
        self.assertTrue(trie.autoComplete("sga") == None)
        self.assertTrue(trie.autoComplete("sgb") == None)
        self.assertTrue(trie.autoComplete("sgc") == None)
        self.assertTrue(trie.autoComplete("sgd") == None)
        self.assertTrue(trie.autoComplete("sge") == None)
        self.assertTrue(trie.autoComplete("sgf") == None)
        self.assertTrue(trie.autoComplete("sgg") == None)
        self.assertTrue(trie.autoComplete("sgh") == None)
        self.assertTrue(trie.autoComplete("sgi") == None)
        self.assertTrue(trie.autoComplete("sgj") == None)
        self.assertTrue(trie.autoComplete("sgk") == None)
        self.assertTrue(trie.autoComplete("sgl") == None)
        self.assertTrue(trie.autoComplete("sgm") == None)
        self.assertTrue(trie.autoComplete("sgn") == None)
        self.assertTrue(trie.autoComplete("sgo") == None)
        self.assertTrue(trie.autoComplete("sgp") == None)
        self.assertTrue(trie.autoComplete("sgq") == None)
        self.assertTrue(trie.autoComplete("sgr") == None)
        self.assertTrue(trie.autoComplete("sgs") == None)
        self.assertTrue(trie.autoComplete("sgt") == None)
        self.assertTrue(trie.autoComplete("sgu") == None)
        self.assertTrue(trie.autoComplete("sgv") == None)
        self.assertTrue(trie.autoComplete("sgw") == None)
        self.assertTrue(trie.autoComplete("sgx") == None)
        self.assertTrue(trie.autoComplete("sgy") == None)
        self.assertTrue(trie.autoComplete("sgz") == None)
        self.assertTrue(trie.autoComplete("sh") == "shall")
        self.assertTrue(trie.autoComplete("sha") == "shall")
        self.assertTrue(trie.autoComplete("shal") == "shall")
        self.assertTrue(trie.autoComplete("shall") == "shall")
        self.assertTrue(trie.autoComplete("shb") == None)
        self.assertTrue(trie.autoComplete("shc") == None)
        self.assertTrue(trie.autoComplete("shd") == None)
        self.assertTrue(trie.autoComplete("she") == None)
        self.assertTrue(trie.autoComplete("shf") == None)
        self.assertTrue(trie.autoComplete("shg") == None)
        self.assertTrue(trie.autoComplete("shh") == None)
        self.assertTrue(trie.autoComplete("shi") == "ships")
        self.assertTrue(trie.autoComplete("ship") == "ships")
        self.assertTrue(trie.autoComplete("ships") == "ships")
        self.assertTrue(trie.autoComplete("shj") == None)
        self.assertTrue(trie.autoComplete("shk") == None)
        self.assertTrue(trie.autoComplete("shl") == None)
        self.assertTrue(trie.autoComplete("shm") == None)
        self.assertTrue(trie.autoComplete("shn") == None)
        self.assertTrue(trie.autoComplete("sho") == "should")
        self.assertTrue(trie.autoComplete("shou") == "should")
        self.assertTrue(trie.autoComplete("shoul") == "should")
        self.assertTrue(trie.autoComplete("should") == "should")
        self.assertTrue(trie.autoComplete("shp") == None)
        self.assertTrue(trie.autoComplete("shq") == None)
        self.assertTrue(trie.autoComplete("shr") == None)
        self.assertTrue(trie.autoComplete("shs") == None)
        self.assertTrue(trie.autoComplete("sht") == None)
        self.assertTrue(trie.autoComplete("shu") == None)
        self.assertTrue(trie.autoComplete("shv") == None)
        self.assertTrue(trie.autoComplete("shw") == None)
        self.assertTrue(trie.autoComplete("shx") == None)
        self.assertTrue(trie.autoComplete("shy") == None)
        self.assertTrue(trie.autoComplete("shz") == None)
        self.assertTrue(trie.autoComplete("si") == "six")
        self.assertTrue(trie.autoComplete("sia") == None)
        self.assertTrue(trie.autoComplete("sib") == None)
        self.assertTrue(trie.autoComplete("sic") == None)
        self.assertTrue(trie.autoComplete("sid") == None)
        self.assertTrue(trie.autoComplete("sie") == None)
        self.assertTrue(trie.autoComplete("sif") == None)
        self.assertTrue(trie.autoComplete("sig") == "sign")
        self.assertTrue(trie.autoComplete("sign") == "sign")
        self.assertTrue(trie.autoComplete("signe") == "signed")
        self.assertTrue(trie.autoComplete("signed") == "signed")
        self.assertTrue(trie.autoComplete("sih") == None)
        self.assertTrue(trie.autoComplete("sii") == None)
        self.assertTrue(trie.autoComplete("sij") == None)
        self.assertTrue(trie.autoComplete("sik") == None)
        self.assertTrue(trie.autoComplete("sil") == "silver")
        self.assertTrue(trie.autoComplete("silv") == "silver")
        self.assertTrue(trie.autoComplete("silve") == "silver")
        self.assertTrue(trie.autoComplete("silver") == "silver")
        self.assertTrue(trie.autoComplete("sim") == None)
        self.assertTrue(trie.autoComplete("sin") == None)
        self.assertTrue(trie.autoComplete("sio") == None)
        self.assertTrue(trie.autoComplete("sip") == None)
        self.assertTrue(trie.autoComplete("siq") == None)
        self.assertTrue(trie.autoComplete("sir") == None)
        self.assertTrue(trie.autoComplete("sis") == None)
        self.assertTrue(trie.autoComplete("sit") == "sitting")
        self.assertTrue(trie.autoComplete("sitt") == "sitting")
        self.assertTrue(trie.autoComplete("sitti") == "sitting")
        self.assertTrue(trie.autoComplete("sittin") == "sitting")
        self.assertTrue(trie.autoComplete("sitting") == "sitting")
        self.assertTrue(trie.autoComplete("siu") == None)
        self.assertTrue(trie.autoComplete("siv") == None)
        self.assertTrue(trie.autoComplete("siw") == None)
        self.assertTrue(trie.autoComplete("six") == "six")
        self.assertTrue(trie.autoComplete("sixt") == "sixth")
        self.assertTrue(trie.autoComplete("sixte") == "sixteenth")
        self.assertTrue(trie.autoComplete("sixtee") == "sixteenth")
        self.assertTrue(trie.autoComplete("sixteen") == "sixteenth")
        self.assertTrue(trie.autoComplete("sixteent") == "sixteenth")
        self.assertTrue(trie.autoComplete("sixteenth") == "sixteenth")
        self.assertTrue(trie.autoComplete("sixth") == "sixth")
        self.assertTrue(trie.autoComplete("siy") == None)
        self.assertTrue(trie.autoComplete("siz") == None)
        self.assertTrue(trie.autoComplete("sj") == None)
        self.assertTrue(trie.autoComplete("sja") == None)
        self.assertTrue(trie.autoComplete("sjb") == None)
        self.assertTrue(trie.autoComplete("sjc") == None)
        self.assertTrue(trie.autoComplete("sjd") == None)
        self.assertTrue(trie.autoComplete("sje") == None)
        self.assertTrue(trie.autoComplete("sjf") == None)
        self.assertTrue(trie.autoComplete("sjg") == None)
        self.assertTrue(trie.autoComplete("sjh") == None)
        self.assertTrue(trie.autoComplete("sji") == None)
        self.assertTrue(trie.autoComplete("sjj") == None)
        self.assertTrue(trie.autoComplete("sjk") == None)
        self.assertTrue(trie.autoComplete("sjl") == None)
        self.assertTrue(trie.autoComplete("sjm") == None)
        self.assertTrue(trie.autoComplete("sjn") == None)
        self.assertTrue(trie.autoComplete("sjo") == None)
        self.assertTrue(trie.autoComplete("sjp") == None)
        self.assertTrue(trie.autoComplete("sjq") == None)
        self.assertTrue(trie.autoComplete("sjr") == None)
        self.assertTrue(trie.autoComplete("sjs") == None)
        self.assertTrue(trie.autoComplete("sjt") == None)
        self.assertTrue(trie.autoComplete("sju") == None)
        self.assertTrue(trie.autoComplete("sjv") == None)
        self.assertTrue(trie.autoComplete("sjw") == None)
        self.assertTrue(trie.autoComplete("sjx") == None)
        self.assertTrue(trie.autoComplete("sjy") == None)
        self.assertTrue(trie.autoComplete("sjz") == None)
        self.assertTrue(trie.autoComplete("sk") == None)
        self.assertTrue(trie.autoComplete("ska") == None)
        self.assertTrue(trie.autoComplete("skb") == None)
        self.assertTrue(trie.autoComplete("skc") == None)
        self.assertTrue(trie.autoComplete("skd") == None)
        self.assertTrue(trie.autoComplete("ske") == None)
        self.assertTrue(trie.autoComplete("skf") == None)
        self.assertTrue(trie.autoComplete("skg") == None)
        self.assertTrue(trie.autoComplete("skh") == None)
        self.assertTrue(trie.autoComplete("ski") == None)
        self.assertTrue(trie.autoComplete("skj") == None)
        self.assertTrue(trie.autoComplete("skk") == None)
        self.assertTrue(trie.autoComplete("skl") == None)
        self.assertTrue(trie.autoComplete("skm") == None)
        self.assertTrue(trie.autoComplete("skn") == None)
        self.assertTrue(trie.autoComplete("sko") == None)
        self.assertTrue(trie.autoComplete("skp") == None)
        self.assertTrue(trie.autoComplete("skq") == None)
        self.assertTrue(trie.autoComplete("skr") == None)
        self.assertTrue(trie.autoComplete("sks") == None)
        self.assertTrue(trie.autoComplete("skt") == None)
        self.assertTrue(trie.autoComplete("sku") == None)
        self.assertTrue(trie.autoComplete("skv") == None)
        self.assertTrue(trie.autoComplete("skw") == None)
        self.assertTrue(trie.autoComplete("skx") == None)
        self.assertTrue(trie.autoComplete("sky") == None)
        self.assertTrue(trie.autoComplete("skz") == None)
        self.assertTrue(trie.autoComplete("sl") == "slave")
        self.assertTrue(trie.autoComplete("sla") == "slave")
        self.assertTrue(trie.autoComplete("slav") == "slave")
        self.assertTrue(trie.autoComplete("slave") == "slave")
        self.assertTrue(trie.autoComplete("slaver") == "slavery")
        self.assertTrue(trie.autoComplete("slavery") == "slavery")
        self.assertTrue(trie.autoComplete("slb") == None)
        self.assertTrue(trie.autoComplete("slc") == None)
        self.assertTrue(trie.autoComplete("sld") == None)
        self.assertTrue(trie.autoComplete("sle") == None)
        self.assertTrue(trie.autoComplete("slf") == None)
        self.assertTrue(trie.autoComplete("slg") == None)
        self.assertTrue(trie.autoComplete("slh") == None)
        self.assertTrue(trie.autoComplete("sli") == None)
        self.assertTrue(trie.autoComplete("slj") == None)
        self.assertTrue(trie.autoComplete("slk") == None)
        self.assertTrue(trie.autoComplete("sll") == None)
        self.assertTrue(trie.autoComplete("slm") == None)
        self.assertTrue(trie.autoComplete("sln") == None)
        self.assertTrue(trie.autoComplete("slo") == None)
        self.assertTrue(trie.autoComplete("slp") == None)
        self.assertTrue(trie.autoComplete("slq") == None)
        self.assertTrue(trie.autoComplete("slr") == None)
        self.assertTrue(trie.autoComplete("sls") == None)
        self.assertTrue(trie.autoComplete("slt") == None)
        self.assertTrue(trie.autoComplete("slu") == None)
        self.assertTrue(trie.autoComplete("slv") == None)
        self.assertTrue(trie.autoComplete("slw") == None)
        self.assertTrue(trie.autoComplete("slx") == None)
        self.assertTrue(trie.autoComplete("sly") == None)
        self.assertTrue(trie.autoComplete("slz") == None)
        self.assertTrue(trie.autoComplete("sm") == "smaller")
        self.assertTrue(trie.autoComplete("sma") == "smaller")
        self.assertTrue(trie.autoComplete("smal") == "smaller")
        self.assertTrue(trie.autoComplete("small") == "smaller")
        self.assertTrue(trie.autoComplete("smalle") == "smaller")
        self.assertTrue(trie.autoComplete("smaller") == "smaller")
        self.assertTrue(trie.autoComplete("smb") == None)
        self.assertTrue(trie.autoComplete("smc") == None)
        self.assertTrue(trie.autoComplete("smd") == None)
        self.assertTrue(trie.autoComplete("sme") == None)
        self.assertTrue(trie.autoComplete("smf") == None)
        self.assertTrue(trie.autoComplete("smg") == None)
        self.assertTrue(trie.autoComplete("smh") == None)
        self.assertTrue(trie.autoComplete("smi") == None)
        self.assertTrue(trie.autoComplete("smj") == None)
        self.assertTrue(trie.autoComplete("smk") == None)
        self.assertTrue(trie.autoComplete("sml") == None)
        self.assertTrue(trie.autoComplete("smm") == None)
        self.assertTrue(trie.autoComplete("smn") == None)
        self.assertTrue(trie.autoComplete("smo") == None)
        self.assertTrue(trie.autoComplete("smp") == None)
        self.assertTrue(trie.autoComplete("smq") == None)
        self.assertTrue(trie.autoComplete("smr") == None)
        self.assertTrue(trie.autoComplete("sms") == None)
        self.assertTrue(trie.autoComplete("smt") == None)
        self.assertTrue(trie.autoComplete("smu") == None)
        self.assertTrue(trie.autoComplete("smv") == None)
        self.assertTrue(trie.autoComplete("smw") == None)
        self.assertTrue(trie.autoComplete("smx") == None)
        self.assertTrue(trie.autoComplete("smy") == None)
        self.assertTrue(trie.autoComplete("smz") == None)
        self.assertTrue(trie.autoComplete("sn") == None)
        self.assertTrue(trie.autoComplete("sna") == None)
        self.assertTrue(trie.autoComplete("snb") == None)
        self.assertTrue(trie.autoComplete("snc") == None)
        self.assertTrue(trie.autoComplete("snd") == None)
        self.assertTrue(trie.autoComplete("sne") == None)
        self.assertTrue(trie.autoComplete("snf") == None)
        self.assertTrue(trie.autoComplete("sng") == None)
        self.assertTrue(trie.autoComplete("snh") == None)
        self.assertTrue(trie.autoComplete("sni") == None)
        self.assertTrue(trie.autoComplete("snj") == None)
        self.assertTrue(trie.autoComplete("snk") == None)
        self.assertTrue(trie.autoComplete("snl") == None)
        self.assertTrue(trie.autoComplete("snm") == None)
        self.assertTrue(trie.autoComplete("snn") == None)
        self.assertTrue(trie.autoComplete("sno") == None)
        self.assertTrue(trie.autoComplete("snp") == None)
        self.assertTrue(trie.autoComplete("snq") == None)
        self.assertTrue(trie.autoComplete("snr") == None)
        self.assertTrue(trie.autoComplete("sns") == None)
        self.assertTrue(trie.autoComplete("snt") == None)
        self.assertTrue(trie.autoComplete("snu") == None)
        self.assertTrue(trie.autoComplete("snv") == None)
        self.assertTrue(trie.autoComplete("snw") == None)
        self.assertTrue(trie.autoComplete("snx") == None)
        self.assertTrue(trie.autoComplete("sny") == None)
        self.assertTrue(trie.autoComplete("snz") == None)
        self.assertTrue(trie.autoComplete("so") == "so")
        self.assertTrue(trie.autoComplete("soa") == None)
        self.assertTrue(trie.autoComplete("sob") == None)
        self.assertTrue(trie.autoComplete("soc") == None)
        self.assertTrue(trie.autoComplete("sod") == None)
        self.assertTrue(trie.autoComplete("soe") == None)
        self.assertTrue(trie.autoComplete("sof") == None)
        self.assertTrue(trie.autoComplete("sog") == None)
        self.assertTrue(trie.autoComplete("soh") == None)
        self.assertTrue(trie.autoComplete("soi") == None)
        self.assertTrue(trie.autoComplete("soj") == None)
        self.assertTrue(trie.autoComplete("sok") == None)
        self.assertTrue(trie.autoComplete("sol") == "sole")
        self.assertTrue(trie.autoComplete("sold") == "soldier")
        self.assertTrue(trie.autoComplete("soldi") == "soldier")
        self.assertTrue(trie.autoComplete("soldie") == "soldier")
        self.assertTrue(trie.autoComplete("soldier") == "soldier")
        self.assertTrue(trie.autoComplete("sole") == "sole")
        self.assertTrue(trie.autoComplete("solem") == "solemnly")
        self.assertTrue(trie.autoComplete("solemn") == "solemnly")
        self.assertTrue(trie.autoComplete("solemnl") == "solemnly")
        self.assertTrue(trie.autoComplete("solemnly") == "solemnly")
        self.assertTrue(trie.autoComplete("som") == "some")
        self.assertTrue(trie.autoComplete("some") == "some")
        self.assertTrue(trie.autoComplete("son") == None)
        self.assertTrue(trie.autoComplete("soo") == None)
        self.assertTrue(trie.autoComplete("sop") == None)
        self.assertTrue(trie.autoComplete("soq") == None)
        self.assertTrue(trie.autoComplete("sor") == None)
        self.assertTrue(trie.autoComplete("sos") == None)
        self.assertTrue(trie.autoComplete("sot") == None)
        self.assertTrue(trie.autoComplete("sou") == "source")
        self.assertTrue(trie.autoComplete("sour") == "source")
        self.assertTrue(trie.autoComplete("sourc") == "source")
        self.assertTrue(trie.autoComplete("source") == "source")
        self.assertTrue(trie.autoComplete("sout") == "south")
        self.assertTrue(trie.autoComplete("south") == "south")
        self.assertTrue(trie.autoComplete("sov") == None)
        self.assertTrue(trie.autoComplete("sow") == None)
        self.assertTrue(trie.autoComplete("sox") == None)
        self.assertTrue(trie.autoComplete("soy") == None)
        self.assertTrue(trie.autoComplete("soz") == None)
        self.assertTrue(trie.autoComplete("sp") == "speaker")
        self.assertTrue(trie.autoComplete("spa") == None)
        self.assertTrue(trie.autoComplete("spb") == None)
        self.assertTrue(trie.autoComplete("spc") == None)
        self.assertTrue(trie.autoComplete("spd") == None)
        self.assertTrue(trie.autoComplete("spe") == "speaker")
        self.assertTrue(trie.autoComplete("spea") == "speaker")
        self.assertTrue(trie.autoComplete("speak") == "speaker")
        self.assertTrue(trie.autoComplete("speake") == "speaker")
        self.assertTrue(trie.autoComplete("speaker") == "speaker")
        self.assertTrue(trie.autoComplete("spee") == "speech")
        self.assertTrue(trie.autoComplete("speec") == "speech")
        self.assertTrue(trie.autoComplete("speech") == "speech")
        self.assertTrue(trie.autoComplete("speed") == "speedy")
        self.assertTrue(trie.autoComplete("speedy") == "speedy")
        self.assertTrue(trie.autoComplete("spf") == None)
        self.assertTrue(trie.autoComplete("spg") == None)
        self.assertTrue(trie.autoComplete("sph") == None)
        self.assertTrue(trie.autoComplete("spi") == None)
        self.assertTrue(trie.autoComplete("spj") == None)
        self.assertTrue(trie.autoComplete("spk") == None)
        self.assertTrue(trie.autoComplete("spl") == None)
        self.assertTrue(trie.autoComplete("spm") == None)
        self.assertTrue(trie.autoComplete("spn") == None)
        self.assertTrue(trie.autoComplete("spo") == None)
        self.assertTrue(trie.autoComplete("spp") == None)
        self.assertTrue(trie.autoComplete("spq") == None)
        self.assertTrue(trie.autoComplete("spr") == None)
        self.assertTrue(trie.autoComplete("sps") == None)
        self.assertTrue(trie.autoComplete("spt") == None)
        self.assertTrue(trie.autoComplete("spu") == None)
        self.assertTrue(trie.autoComplete("spv") == None)
        self.assertTrue(trie.autoComplete("spw") == None)
        self.assertTrue(trie.autoComplete("spx") == None)
        self.assertTrue(trie.autoComplete("spy") == None)
        self.assertTrue(trie.autoComplete("spz") == None)
        self.assertTrue(trie.autoComplete("sq") == "square")
        self.assertTrue(trie.autoComplete("sqa") == None)
        self.assertTrue(trie.autoComplete("sqb") == None)
        self.assertTrue(trie.autoComplete("sqc") == None)
        self.assertTrue(trie.autoComplete("sqd") == None)
        self.assertTrue(trie.autoComplete("sqe") == None)
        self.assertTrue(trie.autoComplete("sqf") == None)
        self.assertTrue(trie.autoComplete("sqg") == None)
        self.assertTrue(trie.autoComplete("sqh") == None)
        self.assertTrue(trie.autoComplete("sqi") == None)
        self.assertTrue(trie.autoComplete("sqj") == None)
        self.assertTrue(trie.autoComplete("sqk") == None)
        self.assertTrue(trie.autoComplete("sql") == None)
        self.assertTrue(trie.autoComplete("sqm") == None)
        self.assertTrue(trie.autoComplete("sqn") == None)
        self.assertTrue(trie.autoComplete("sqo") == None)
        self.assertTrue(trie.autoComplete("sqp") == None)
        self.assertTrue(trie.autoComplete("sqq") == None)
        self.assertTrue(trie.autoComplete("sqr") == None)
        self.assertTrue(trie.autoComplete("sqs") == None)
        self.assertTrue(trie.autoComplete("sqt") == None)
        self.assertTrue(trie.autoComplete("squ") == "square")
        self.assertTrue(trie.autoComplete("squa") == "square")
        self.assertTrue(trie.autoComplete("squar") == "square")
        self.assertTrue(trie.autoComplete("square") == "square")
        self.assertTrue(trie.autoComplete("sqv") == None)
        self.assertTrue(trie.autoComplete("sqw") == None)
        self.assertTrue(trie.autoComplete("sqx") == None)
        self.assertTrue(trie.autoComplete("sqy") == None)
        self.assertTrue(trie.autoComplete("sqz") == None)
        self.assertTrue(trie.autoComplete("sr") == None)
        self.assertTrue(trie.autoComplete("sra") == None)
        self.assertTrue(trie.autoComplete("srb") == None)
        self.assertTrue(trie.autoComplete("src") == None)
        self.assertTrue(trie.autoComplete("srd") == None)
        self.assertTrue(trie.autoComplete("sre") == None)
        self.assertTrue(trie.autoComplete("srf") == None)
        self.assertTrue(trie.autoComplete("srg") == None)
        self.assertTrue(trie.autoComplete("srh") == None)
        self.assertTrue(trie.autoComplete("sri") == None)
        self.assertTrue(trie.autoComplete("srj") == None)
        self.assertTrue(trie.autoComplete("srk") == None)
        self.assertTrue(trie.autoComplete("srl") == None)
        self.assertTrue(trie.autoComplete("srm") == None)
        self.assertTrue(trie.autoComplete("srn") == None)
        self.assertTrue(trie.autoComplete("sro") == None)
        self.assertTrue(trie.autoComplete("srp") == None)
        self.assertTrue(trie.autoComplete("srq") == None)
        self.assertTrue(trie.autoComplete("srr") == None)
        self.assertTrue(trie.autoComplete("srs") == None)
        self.assertTrue(trie.autoComplete("srt") == None)
        self.assertTrue(trie.autoComplete("sru") == None)
        self.assertTrue(trie.autoComplete("srv") == None)
        self.assertTrue(trie.autoComplete("srw") == None)
        self.assertTrue(trie.autoComplete("srx") == None)
        self.assertTrue(trie.autoComplete("sry") == None)
        self.assertTrue(trie.autoComplete("srz") == None)
        self.assertTrue(trie.autoComplete("ss") == None)
        self.assertTrue(trie.autoComplete("ssa") == None)
        self.assertTrue(trie.autoComplete("ssb") == None)
        self.assertTrue(trie.autoComplete("ssc") == None)
        self.assertTrue(trie.autoComplete("ssd") == None)
        self.assertTrue(trie.autoComplete("sse") == None)
        self.assertTrue(trie.autoComplete("ssf") == None)
        self.assertTrue(trie.autoComplete("ssg") == None)
        self.assertTrue(trie.autoComplete("ssh") == None)
        self.assertTrue(trie.autoComplete("ssi") == None)
        self.assertTrue(trie.autoComplete("ssj") == None)
        self.assertTrue(trie.autoComplete("ssk") == None)
        self.assertTrue(trie.autoComplete("ssl") == None)
        self.assertTrue(trie.autoComplete("ssm") == None)
        self.assertTrue(trie.autoComplete("ssn") == None)
        self.assertTrue(trie.autoComplete("sso") == None)
        self.assertTrue(trie.autoComplete("ssp") == None)
        self.assertTrue(trie.autoComplete("ssq") == None)
        self.assertTrue(trie.autoComplete("ssr") == None)
        self.assertTrue(trie.autoComplete("sss") == None)
        self.assertTrue(trie.autoComplete("sst") == None)
        self.assertTrue(trie.autoComplete("ssu") == None)
        self.assertTrue(trie.autoComplete("ssv") == None)
        self.assertTrue(trie.autoComplete("ssw") == None)
        self.assertTrue(trie.autoComplete("ssx") == None)
        self.assertTrue(trie.autoComplete("ssy") == None)
        self.assertTrue(trie.autoComplete("ssz") == None)
        self.assertTrue(trie.autoComplete("st") == "states")
        self.assertTrue(trie.autoComplete("sta") == "states")
        self.assertTrue(trie.autoComplete("stan") == "standard")
        self.assertTrue(trie.autoComplete("stand") == "standard")
        self.assertTrue(trie.autoComplete("standa") == "standard")
        self.assertTrue(trie.autoComplete("standar") == "standard")
        self.assertTrue(trie.autoComplete("standard") == "standard")
        self.assertTrue(trie.autoComplete("stat") == "states")
        self.assertTrue(trie.autoComplete("state") == "states")
        self.assertTrue(trie.autoComplete("stated") == "stated")
        self.assertTrue(trie.autoComplete("statem") == "statement")
        self.assertTrue(trie.autoComplete("stateme") == "statement")
        self.assertTrue(trie.autoComplete("statemen") == "statement")
        self.assertTrue(trie.autoComplete("statement") == "statement")
        self.assertTrue(trie.autoComplete("states") == "states")
        self.assertTrue(trie.autoComplete("stb") == None)
        self.assertTrue(trie.autoComplete("stc") == None)
        self.assertTrue(trie.autoComplete("std") == None)
        self.assertTrue(trie.autoComplete("ste") == None)
        self.assertTrue(trie.autoComplete("stf") == None)
        self.assertTrue(trie.autoComplete("stg") == None)
        self.assertTrue(trie.autoComplete("sth") == None)
        self.assertTrue(trie.autoComplete("sti") == None)
        self.assertTrue(trie.autoComplete("stj") == None)
        self.assertTrue(trie.autoComplete("stk") == None)
        self.assertTrue(trie.autoComplete("stl") == None)
        self.assertTrue(trie.autoComplete("stm") == None)
        self.assertTrue(trie.autoComplete("stn") == None)
        self.assertTrue(trie.autoComplete("sto") == None)
        self.assertTrue(trie.autoComplete("stp") == None)
        self.assertTrue(trie.autoComplete("stq") == None)
        self.assertTrue(trie.autoComplete("str") == None)
        self.assertTrue(trie.autoComplete("sts") == None)
        self.assertTrue(trie.autoComplete("stt") == None)
        self.assertTrue(trie.autoComplete("stu") == None)
        self.assertTrue(trie.autoComplete("stv") == None)
        self.assertTrue(trie.autoComplete("stw") == None)
        self.assertTrue(trie.autoComplete("stx") == None)
        self.assertTrue(trie.autoComplete("sty") == None)
        self.assertTrue(trie.autoComplete("stz") == None)
        self.assertTrue(trie.autoComplete("su") == "such")
        self.assertTrue(trie.autoComplete("sua") == None)
        self.assertTrue(trie.autoComplete("sub") == "subject")
        self.assertTrue(trie.autoComplete("subj") == "subject")
        self.assertTrue(trie.autoComplete("subje") == "subject")
        self.assertTrue(trie.autoComplete("subjec") == "subject")
        self.assertTrue(trie.autoComplete("subject") == "subject")
        self.assertTrue(trie.autoComplete("subjects") == "subjects")
        self.assertTrue(trie.autoComplete("subm") == "submission")
        self.assertTrue(trie.autoComplete("submi") == "submission")
        self.assertTrue(trie.autoComplete("submis") == "submission")
        self.assertTrue(trie.autoComplete("submiss") == "submission")
        self.assertTrue(trie.autoComplete("submissi") == "submission")
        self.assertTrue(trie.autoComplete("submissio") == "submission")
        self.assertTrue(trie.autoComplete("submission") == "submission")
        self.assertTrue(trie.autoComplete("subs") == "subsequent")
        self.assertTrue(trie.autoComplete("subse") == "subsequent")
        self.assertTrue(trie.autoComplete("subseq") == "subsequent")
        self.assertTrue(trie.autoComplete("subsequ") == "subsequent")
        self.assertTrue(trie.autoComplete("subseque") == "subsequent")
        self.assertTrue(trie.autoComplete("subsequen") == "subsequent")
        self.assertTrue(trie.autoComplete("subsequent") == "subsequent")
        self.assertTrue(trie.autoComplete("suc") == "such")
        self.assertTrue(trie.autoComplete("succ") == "successors")
        self.assertTrue(trie.autoComplete("succe") == "successors")
        self.assertTrue(trie.autoComplete("succes") == "successors")
        self.assertTrue(trie.autoComplete("success") == "successors")
        self.assertTrue(trie.autoComplete("successo") == "successors")
        self.assertTrue(trie.autoComplete("successor") == "successors")
        self.assertTrue(trie.autoComplete("successors") == "successors")
        self.assertTrue(trie.autoComplete("such") == "such")
        self.assertTrue(trie.autoComplete("sud") == None)
        self.assertTrue(trie.autoComplete("sue") == None)
        self.assertTrue(trie.autoComplete("suf") == "sufficient")
        self.assertTrue(trie.autoComplete("suff") == "sufficient")
        self.assertTrue(trie.autoComplete("suffi") == "sufficient")
        self.assertTrue(trie.autoComplete("suffic") == "sufficient")
        self.assertTrue(trie.autoComplete("suffici") == "sufficient")
        self.assertTrue(trie.autoComplete("sufficie") == "sufficient")
        self.assertTrue(trie.autoComplete("sufficien") == "sufficient")
        self.assertTrue(trie.autoComplete("sufficient") == "sufficient")
        self.assertTrue(trie.autoComplete("suffr") == "suffrage")
        self.assertTrue(trie.autoComplete("suffra") == "suffrage")
        self.assertTrue(trie.autoComplete("suffrag") == "suffrage")
        self.assertTrue(trie.autoComplete("suffrage") == "suffrage")
        self.assertTrue(trie.autoComplete("sug") == None)
        self.assertTrue(trie.autoComplete("suh") == None)
        self.assertTrue(trie.autoComplete("sui") == "suit")
        self.assertTrue(trie.autoComplete("suit") == "suit")
        self.assertTrue(trie.autoComplete("suits") == "suits")
        self.assertTrue(trie.autoComplete("suj") == None)
        self.assertTrue(trie.autoComplete("suk") == None)
        self.assertTrue(trie.autoComplete("sul") == None)
        self.assertTrue(trie.autoComplete("sum") == None)
        self.assertTrue(trie.autoComplete("sun") == "sundays")
        self.assertTrue(trie.autoComplete("sund") == "sundays")
        self.assertTrue(trie.autoComplete("sunda") == "sundays")
        self.assertTrue(trie.autoComplete("sunday") == "sundays")
        self.assertTrue(trie.autoComplete("sundays") == "sundays")
        self.assertTrue(trie.autoComplete("suo") == None)
        self.assertTrue(trie.autoComplete("sup") == "supreme")
        self.assertTrue(trie.autoComplete("supp") == "support")
        self.assertTrue(trie.autoComplete("suppo") == "support")
        self.assertTrue(trie.autoComplete("suppor") == "support")
        self.assertTrue(trie.autoComplete("support") == "support")
        self.assertTrue(trie.autoComplete("supporte") == "supported")
        self.assertTrue(trie.autoComplete("supported") == "supported")
        self.assertTrue(trie.autoComplete("suppr") == "suppress")
        self.assertTrue(trie.autoComplete("suppre") == "suppress")
        self.assertTrue(trie.autoComplete("suppres") == "suppress")
        self.assertTrue(trie.autoComplete("suppress") == "suppress")
        self.assertTrue(trie.autoComplete("suppressi") == "suppressing")
        self.assertTrue(trie.autoComplete("suppressin") == "suppressing")
        self.assertTrue(trie.autoComplete("suppressing") == "suppressing")
        self.assertTrue(trie.autoComplete("supr") == "supreme")
        self.assertTrue(trie.autoComplete("supre") == "supreme")
        self.assertTrue(trie.autoComplete("suprem") == "supreme")
        self.assertTrue(trie.autoComplete("supreme") == "supreme")
        self.assertTrue(trie.autoComplete("suq") == None)
        self.assertTrue(trie.autoComplete("sur") == None)
        self.assertTrue(trie.autoComplete("sus") == "suspended")
        self.assertTrue(trie.autoComplete("susp") == "suspended")
        self.assertTrue(trie.autoComplete("suspe") == "suspended")
        self.assertTrue(trie.autoComplete("suspen") == "suspended")
        self.assertTrue(trie.autoComplete("suspend") == "suspended")
        self.assertTrue(trie.autoComplete("suspende") == "suspended")
        self.assertTrue(trie.autoComplete("suspended") == "suspended")
        self.assertTrue(trie.autoComplete("sut") == None)
        self.assertTrue(trie.autoComplete("suu") == None)
        self.assertTrue(trie.autoComplete("suv") == None)
        self.assertTrue(trie.autoComplete("suw") == None)
        self.assertTrue(trie.autoComplete("sux") == None)
        self.assertTrue(trie.autoComplete("suy") == None)
        self.assertTrue(trie.autoComplete("suz") == None)
        self.assertTrue(trie.autoComplete("sv") == None)
        self.assertTrue(trie.autoComplete("sva") == None)
        self.assertTrue(trie.autoComplete("svb") == None)
        self.assertTrue(trie.autoComplete("svc") == None)
        self.assertTrue(trie.autoComplete("svd") == None)
        self.assertTrue(trie.autoComplete("sve") == None)
        self.assertTrue(trie.autoComplete("svf") == None)
        self.assertTrue(trie.autoComplete("svg") == None)
        self.assertTrue(trie.autoComplete("svh") == None)
        self.assertTrue(trie.autoComplete("svi") == None)
        self.assertTrue(trie.autoComplete("svj") == None)
        self.assertTrue(trie.autoComplete("svk") == None)
        self.assertTrue(trie.autoComplete("svl") == None)
        self.assertTrue(trie.autoComplete("svm") == None)
        self.assertTrue(trie.autoComplete("svn") == None)
        self.assertTrue(trie.autoComplete("svo") == None)
        self.assertTrue(trie.autoComplete("svp") == None)
        self.assertTrue(trie.autoComplete("svq") == None)
        self.assertTrue(trie.autoComplete("svr") == None)
        self.assertTrue(trie.autoComplete("svs") == None)
        self.assertTrue(trie.autoComplete("svt") == None)
        self.assertTrue(trie.autoComplete("svu") == None)
        self.assertTrue(trie.autoComplete("svv") == None)
        self.assertTrue(trie.autoComplete("svw") == None)
        self.assertTrue(trie.autoComplete("svx") == None)
        self.assertTrue(trie.autoComplete("svy") == None)
        self.assertTrue(trie.autoComplete("svz") == None)
        self.assertTrue(trie.autoComplete("sw") == "swear")
        self.assertTrue(trie.autoComplete("swa") == None)
        self.assertTrue(trie.autoComplete("swb") == None)
        self.assertTrue(trie.autoComplete("swc") == None)
        self.assertTrue(trie.autoComplete("swd") == None)
        self.assertTrue(trie.autoComplete("swe") == "swear")
        self.assertTrue(trie.autoComplete("swea") == "swear")
        self.assertTrue(trie.autoComplete("swear") == "swear")
        self.assertTrue(trie.autoComplete("swf") == None)
        self.assertTrue(trie.autoComplete("swg") == None)
        self.assertTrue(trie.autoComplete("swh") == None)
        self.assertTrue(trie.autoComplete("swi") == None)
        self.assertTrue(trie.autoComplete("swj") == None)
        self.assertTrue(trie.autoComplete("swk") == None)
        self.assertTrue(trie.autoComplete("swl") == None)
        self.assertTrue(trie.autoComplete("swm") == None)
        self.assertTrue(trie.autoComplete("swn") == None)
        self.assertTrue(trie.autoComplete("swo") == None)
        self.assertTrue(trie.autoComplete("swp") == None)
        self.assertTrue(trie.autoComplete("swq") == None)
        self.assertTrue(trie.autoComplete("swr") == None)
        self.assertTrue(trie.autoComplete("sws") == None)
        self.assertTrue(trie.autoComplete("swt") == None)
        self.assertTrue(trie.autoComplete("swu") == None)
        self.assertTrue(trie.autoComplete("swv") == None)
        self.assertTrue(trie.autoComplete("sww") == None)
        self.assertTrue(trie.autoComplete("swx") == None)
        self.assertTrue(trie.autoComplete("swy") == None)
        self.assertTrue(trie.autoComplete("swz") == None)
        self.assertTrue(trie.autoComplete("sx") == None)
        self.assertTrue(trie.autoComplete("sxa") == None)
        self.assertTrue(trie.autoComplete("sxb") == None)
        self.assertTrue(trie.autoComplete("sxc") == None)
        self.assertTrue(trie.autoComplete("sxd") == None)
        self.assertTrue(trie.autoComplete("sxe") == None)
        self.assertTrue(trie.autoComplete("sxf") == None)
        self.assertTrue(trie.autoComplete("sxg") == None)
        self.assertTrue(trie.autoComplete("sxh") == None)
        self.assertTrue(trie.autoComplete("sxi") == None)
        self.assertTrue(trie.autoComplete("sxj") == None)
        self.assertTrue(trie.autoComplete("sxk") == None)
        self.assertTrue(trie.autoComplete("sxl") == None)
        self.assertTrue(trie.autoComplete("sxm") == None)
        self.assertTrue(trie.autoComplete("sxn") == None)
        self.assertTrue(trie.autoComplete("sxo") == None)
        self.assertTrue(trie.autoComplete("sxp") == None)
        self.assertTrue(trie.autoComplete("sxq") == None)
        self.assertTrue(trie.autoComplete("sxr") == None)
        self.assertTrue(trie.autoComplete("sxs") == None)
        self.assertTrue(trie.autoComplete("sxt") == None)
        self.assertTrue(trie.autoComplete("sxu") == None)
        self.assertTrue(trie.autoComplete("sxv") == None)
        self.assertTrue(trie.autoComplete("sxw") == None)
        self.assertTrue(trie.autoComplete("sxx") == None)
        self.assertTrue(trie.autoComplete("sxy") == None)
        self.assertTrue(trie.autoComplete("sxz") == None)
        self.assertTrue(trie.autoComplete("sy") == None)
        self.assertTrue(trie.autoComplete("sya") == None)
        self.assertTrue(trie.autoComplete("syb") == None)
        self.assertTrue(trie.autoComplete("syc") == None)
        self.assertTrue(trie.autoComplete("syd") == None)
        self.assertTrue(trie.autoComplete("sye") == None)
        self.assertTrue(trie.autoComplete("syf") == None)
        self.assertTrue(trie.autoComplete("syg") == None)
        self.assertTrue(trie.autoComplete("syh") == None)
        self.assertTrue(trie.autoComplete("syi") == None)
        self.assertTrue(trie.autoComplete("syj") == None)
        self.assertTrue(trie.autoComplete("syk") == None)
        self.assertTrue(trie.autoComplete("syl") == None)
        self.assertTrue(trie.autoComplete("sym") == None)
        self.assertTrue(trie.autoComplete("syn") == None)
        self.assertTrue(trie.autoComplete("syo") == None)
        self.assertTrue(trie.autoComplete("syp") == None)
        self.assertTrue(trie.autoComplete("syq") == None)
        self.assertTrue(trie.autoComplete("syr") == None)
        self.assertTrue(trie.autoComplete("sys") == None)
        self.assertTrue(trie.autoComplete("syt") == None)
        self.assertTrue(trie.autoComplete("syu") == None)
        self.assertTrue(trie.autoComplete("syv") == None)
        self.assertTrue(trie.autoComplete("syw") == None)
        self.assertTrue(trie.autoComplete("syx") == None)
        self.assertTrue(trie.autoComplete("syy") == None)
        self.assertTrue(trie.autoComplete("syz") == None)
        self.assertTrue(trie.autoComplete("sz") == None)
        self.assertTrue(trie.autoComplete("sza") == None)
        self.assertTrue(trie.autoComplete("szb") == None)
        self.assertTrue(trie.autoComplete("szc") == None)
        self.assertTrue(trie.autoComplete("szd") == None)
        self.assertTrue(trie.autoComplete("sze") == None)
        self.assertTrue(trie.autoComplete("szf") == None)
        self.assertTrue(trie.autoComplete("szg") == None)
        self.assertTrue(trie.autoComplete("szh") == None)
        self.assertTrue(trie.autoComplete("szi") == None)
        self.assertTrue(trie.autoComplete("szj") == None)
        self.assertTrue(trie.autoComplete("szk") == None)
        self.assertTrue(trie.autoComplete("szl") == None)
        self.assertTrue(trie.autoComplete("szm") == None)
        self.assertTrue(trie.autoComplete("szn") == None)
        self.assertTrue(trie.autoComplete("szo") == None)
        self.assertTrue(trie.autoComplete("szp") == None)
        self.assertTrue(trie.autoComplete("szq") == None)
        self.assertTrue(trie.autoComplete("szr") == None)
        self.assertTrue(trie.autoComplete("szs") == None)
        self.assertTrue(trie.autoComplete("szt") == None)
        self.assertTrue(trie.autoComplete("szu") == None)
        self.assertTrue(trie.autoComplete("szv") == None)
        self.assertTrue(trie.autoComplete("szw") == None)
        self.assertTrue(trie.autoComplete("szx") == None)
        self.assertTrue(trie.autoComplete("szy") == None)
        self.assertTrue(trie.autoComplete("szz") == None)
        self.assertTrue(trie.autoComplete("t") == "the")
        self.assertTrue(trie.autoComplete("ta") == "take")
        self.assertTrue(trie.autoComplete("taa") == None)
        self.assertTrue(trie.autoComplete("tab") == None)
        self.assertTrue(trie.autoComplete("tac") == None)
        self.assertTrue(trie.autoComplete("tad") == None)
        self.assertTrue(trie.autoComplete("tae") == None)
        self.assertTrue(trie.autoComplete("taf") == None)
        self.assertTrue(trie.autoComplete("tag") == None)
        self.assertTrue(trie.autoComplete("tah") == None)
        self.assertTrue(trie.autoComplete("tai") == None)
        self.assertTrue(trie.autoComplete("taj") == None)
        self.assertTrue(trie.autoComplete("tak") == "take")
        self.assertTrue(trie.autoComplete("take") == "take")
        self.assertTrue(trie.autoComplete("taken") == "taken")
        self.assertTrue(trie.autoComplete("tal") == None)
        self.assertTrue(trie.autoComplete("tam") == None)
        self.assertTrue(trie.autoComplete("tan") == None)
        self.assertTrue(trie.autoComplete("tao") == None)
        self.assertTrue(trie.autoComplete("tap") == None)
        self.assertTrue(trie.autoComplete("taq") == None)
        self.assertTrue(trie.autoComplete("tar") == None)
        self.assertTrue(trie.autoComplete("tas") == None)
        self.assertTrue(trie.autoComplete("tat") == None)
        self.assertTrue(trie.autoComplete("tau") == None)
        self.assertTrue(trie.autoComplete("tav") == None)
        self.assertTrue(trie.autoComplete("taw") == None)
        self.assertTrue(trie.autoComplete("tax") == "tax")
        self.assertTrue(trie.autoComplete("taxe") == "taxes")
        self.assertTrue(trie.autoComplete("taxed") == "taxed")
        self.assertTrue(trie.autoComplete("taxes") == "taxes")
        self.assertTrue(trie.autoComplete("tay") == None)
        self.assertTrue(trie.autoComplete("taz") == None)
        self.assertTrue(trie.autoComplete("tb") == None)
        self.assertTrue(trie.autoComplete("tba") == None)
        self.assertTrue(trie.autoComplete("tbb") == None)
        self.assertTrue(trie.autoComplete("tbc") == None)
        self.assertTrue(trie.autoComplete("tbd") == None)
        self.assertTrue(trie.autoComplete("tbe") == None)
        self.assertTrue(trie.autoComplete("tbf") == None)
        self.assertTrue(trie.autoComplete("tbg") == None)
        self.assertTrue(trie.autoComplete("tbh") == None)
        self.assertTrue(trie.autoComplete("tbi") == None)
        self.assertTrue(trie.autoComplete("tbj") == None)
        self.assertTrue(trie.autoComplete("tbk") == None)
        self.assertTrue(trie.autoComplete("tbl") == None)
        self.assertTrue(trie.autoComplete("tbm") == None)
        self.assertTrue(trie.autoComplete("tbn") == None)
        self.assertTrue(trie.autoComplete("tbo") == None)
        self.assertTrue(trie.autoComplete("tbp") == None)
        self.assertTrue(trie.autoComplete("tbq") == None)
        self.assertTrue(trie.autoComplete("tbr") == None)
        self.assertTrue(trie.autoComplete("tbs") == None)
        self.assertTrue(trie.autoComplete("tbt") == None)
        self.assertTrue(trie.autoComplete("tbu") == None)
        self.assertTrue(trie.autoComplete("tbv") == None)
        self.assertTrue(trie.autoComplete("tbw") == None)
        self.assertTrue(trie.autoComplete("tbx") == None)
        self.assertTrue(trie.autoComplete("tby") == None)
        self.assertTrue(trie.autoComplete("tbz") == None)
        self.assertTrue(trie.autoComplete("tc") == None)
        self.assertTrue(trie.autoComplete("tca") == None)
        self.assertTrue(trie.autoComplete("tcb") == None)
        self.assertTrue(trie.autoComplete("tcc") == None)
        self.assertTrue(trie.autoComplete("tcd") == None)
        self.assertTrue(trie.autoComplete("tce") == None)
        self.assertTrue(trie.autoComplete("tcf") == None)
        self.assertTrue(trie.autoComplete("tcg") == None)
        self.assertTrue(trie.autoComplete("tch") == None)
        self.assertTrue(trie.autoComplete("tci") == None)
        self.assertTrue(trie.autoComplete("tcj") == None)
        self.assertTrue(trie.autoComplete("tck") == None)
        self.assertTrue(trie.autoComplete("tcl") == None)
        self.assertTrue(trie.autoComplete("tcm") == None)
        self.assertTrue(trie.autoComplete("tcn") == None)
        self.assertTrue(trie.autoComplete("tco") == None)
        self.assertTrue(trie.autoComplete("tcp") == None)
        self.assertTrue(trie.autoComplete("tcq") == None)
        self.assertTrue(trie.autoComplete("tcr") == None)
        self.assertTrue(trie.autoComplete("tcs") == None)
        self.assertTrue(trie.autoComplete("tct") == None)
        self.assertTrue(trie.autoComplete("tcu") == None)
        self.assertTrue(trie.autoComplete("tcv") == None)
        self.assertTrue(trie.autoComplete("tcw") == None)
        self.assertTrue(trie.autoComplete("tcx") == None)
        self.assertTrue(trie.autoComplete("tcy") == None)
        self.assertTrue(trie.autoComplete("tcz") == None)
        self.assertTrue(trie.autoComplete("td") == None)
        self.assertTrue(trie.autoComplete("tda") == None)
        self.assertTrue(trie.autoComplete("tdb") == None)
        self.assertTrue(trie.autoComplete("tdc") == None)
        self.assertTrue(trie.autoComplete("tdd") == None)
        self.assertTrue(trie.autoComplete("tde") == None)
        self.assertTrue(trie.autoComplete("tdf") == None)
        self.assertTrue(trie.autoComplete("tdg") == None)
        self.assertTrue(trie.autoComplete("tdh") == None)
        self.assertTrue(trie.autoComplete("tdi") == None)
        self.assertTrue(trie.autoComplete("tdj") == None)
        self.assertTrue(trie.autoComplete("tdk") == None)
        self.assertTrue(trie.autoComplete("tdl") == None)
        self.assertTrue(trie.autoComplete("tdm") == None)
        self.assertTrue(trie.autoComplete("tdn") == None)
        self.assertTrue(trie.autoComplete("tdo") == None)
        self.assertTrue(trie.autoComplete("tdp") == None)
        self.assertTrue(trie.autoComplete("tdq") == None)
        self.assertTrue(trie.autoComplete("tdr") == None)
        self.assertTrue(trie.autoComplete("tds") == None)
        self.assertTrue(trie.autoComplete("tdt") == None)
        self.assertTrue(trie.autoComplete("tdu") == None)
        self.assertTrue(trie.autoComplete("tdv") == None)
        self.assertTrue(trie.autoComplete("tdw") == None)
        self.assertTrue(trie.autoComplete("tdx") == None)
        self.assertTrue(trie.autoComplete("tdy") == None)
        self.assertTrue(trie.autoComplete("tdz") == None)
        self.assertTrue(trie.autoComplete("te") == "term")
        self.assertTrue(trie.autoComplete("tea") == None)
        self.assertTrue(trie.autoComplete("teb") == None)
        self.assertTrue(trie.autoComplete("tec") == None)
        self.assertTrue(trie.autoComplete("ted") == None)
        self.assertTrue(trie.autoComplete("tee") == None)
        self.assertTrue(trie.autoComplete("tef") == None)
        self.assertTrue(trie.autoComplete("teg") == None)
        self.assertTrue(trie.autoComplete("teh") == None)
        self.assertTrue(trie.autoComplete("tei") == None)
        self.assertTrue(trie.autoComplete("tej") == None)
        self.assertTrue(trie.autoComplete("tek") == None)
        self.assertTrue(trie.autoComplete("tel") == None)
        self.assertTrue(trie.autoComplete("tem") == "tempore")
        self.assertTrue(trie.autoComplete("temp") == "tempore")
        self.assertTrue(trie.autoComplete("tempo") == "tempore")
        self.assertTrue(trie.autoComplete("tempor") == "tempore")
        self.assertTrue(trie.autoComplete("tempora") == "temporary")
        self.assertTrue(trie.autoComplete("temporar") == "temporary")
        self.assertTrue(trie.autoComplete("temporary") == "temporary")
        self.assertTrue(trie.autoComplete("tempore") == "tempore")
        self.assertTrue(trie.autoComplete("ten") == "ten")
        self.assertTrue(trie.autoComplete("tend") == "tender")
        self.assertTrue(trie.autoComplete("tende") == "tender")
        self.assertTrue(trie.autoComplete("tender") == "tender")
        self.assertTrue(trie.autoComplete("tent") == "tenth")
        self.assertTrue(trie.autoComplete("tenth") == "tenth")
        self.assertTrue(trie.autoComplete("teo") == None)
        self.assertTrue(trie.autoComplete("tep") == None)
        self.assertTrue(trie.autoComplete("teq") == None)
        self.assertTrue(trie.autoComplete("ter") == "term")
        self.assertTrue(trie.autoComplete("term") == "term")
        self.assertTrue(trie.autoComplete("terms") == "terms")
        self.assertTrue(trie.autoComplete("terr") == "territory")
        self.assertTrue(trie.autoComplete("terri") == "territory")
        self.assertTrue(trie.autoComplete("territ") == "territory")
        self.assertTrue(trie.autoComplete("territo") == "territory")
        self.assertTrue(trie.autoComplete("territor") == "territory")
        self.assertTrue(trie.autoComplete("territory") == "territory")
        self.assertTrue(trie.autoComplete("tes") == "test")
        self.assertTrue(trie.autoComplete("test") == "test")
        self.assertTrue(trie.autoComplete("testi") == "testimony")
        self.assertTrue(trie.autoComplete("testim") == "testimony")
        self.assertTrue(trie.autoComplete("testimo") == "testimony")
        self.assertTrue(trie.autoComplete("testimon") == "testimony")
        self.assertTrue(trie.autoComplete("testimony") == "testimony")
        self.assertTrue(trie.autoComplete("tet") == None)
        self.assertTrue(trie.autoComplete("teu") == None)
        self.assertTrue(trie.autoComplete("tev") == None)
        self.assertTrue(trie.autoComplete("tew") == None)
        self.assertTrue(trie.autoComplete("tex") == None)
        self.assertTrue(trie.autoComplete("tey") == None)
        self.assertTrue(trie.autoComplete("tez") == None)
        self.assertTrue(trie.autoComplete("tf") == None)
        self.assertTrue(trie.autoComplete("tfa") == None)
        self.assertTrue(trie.autoComplete("tfb") == None)
        self.assertTrue(trie.autoComplete("tfc") == None)
        self.assertTrue(trie.autoComplete("tfd") == None)
        self.assertTrue(trie.autoComplete("tfe") == None)
        self.assertTrue(trie.autoComplete("tff") == None)
        self.assertTrue(trie.autoComplete("tfg") == None)
        self.assertTrue(trie.autoComplete("tfh") == None)
        self.assertTrue(trie.autoComplete("tfi") == None)
        self.assertTrue(trie.autoComplete("tfj") == None)
        self.assertTrue(trie.autoComplete("tfk") == None)
        self.assertTrue(trie.autoComplete("tfl") == None)
        self.assertTrue(trie.autoComplete("tfm") == None)
        self.assertTrue(trie.autoComplete("tfn") == None)
        self.assertTrue(trie.autoComplete("tfo") == None)
        self.assertTrue(trie.autoComplete("tfp") == None)
        self.assertTrue(trie.autoComplete("tfq") == None)
        self.assertTrue(trie.autoComplete("tfr") == None)
        self.assertTrue(trie.autoComplete("tfs") == None)
        self.assertTrue(trie.autoComplete("tft") == None)
        self.assertTrue(trie.autoComplete("tfu") == None)
        self.assertTrue(trie.autoComplete("tfv") == None)
        self.assertTrue(trie.autoComplete("tfw") == None)
        self.assertTrue(trie.autoComplete("tfx") == None)
        self.assertTrue(trie.autoComplete("tfy") == None)
        self.assertTrue(trie.autoComplete("tfz") == None)
        self.assertTrue(trie.autoComplete("tg") == None)
        self.assertTrue(trie.autoComplete("tga") == None)
        self.assertTrue(trie.autoComplete("tgb") == None)
        self.assertTrue(trie.autoComplete("tgc") == None)
        self.assertTrue(trie.autoComplete("tgd") == None)
        self.assertTrue(trie.autoComplete("tge") == None)
        self.assertTrue(trie.autoComplete("tgf") == None)
        self.assertTrue(trie.autoComplete("tgg") == None)
        self.assertTrue(trie.autoComplete("tgh") == None)
        self.assertTrue(trie.autoComplete("tgi") == None)
        self.assertTrue(trie.autoComplete("tgj") == None)
        self.assertTrue(trie.autoComplete("tgk") == None)
        self.assertTrue(trie.autoComplete("tgl") == None)
        self.assertTrue(trie.autoComplete("tgm") == None)
        self.assertTrue(trie.autoComplete("tgn") == None)
        self.assertTrue(trie.autoComplete("tgo") == None)
        self.assertTrue(trie.autoComplete("tgp") == None)
        self.assertTrue(trie.autoComplete("tgq") == None)
        self.assertTrue(trie.autoComplete("tgr") == None)
        self.assertTrue(trie.autoComplete("tgs") == None)
        self.assertTrue(trie.autoComplete("tgt") == None)
        self.assertTrue(trie.autoComplete("tgu") == None)
        self.assertTrue(trie.autoComplete("tgv") == None)
        self.assertTrue(trie.autoComplete("tgw") == None)
        self.assertTrue(trie.autoComplete("tgx") == None)
        self.assertTrue(trie.autoComplete("tgy") == None)
        self.assertTrue(trie.autoComplete("tgz") == None)
        self.assertTrue(trie.autoComplete("th") == "the")
        self.assertTrue(trie.autoComplete("tha") == "that")
        self.assertTrue(trie.autoComplete("than") == "than")
        self.assertTrue(trie.autoComplete("that") == "that")
        self.assertTrue(trie.autoComplete("thb") == None)
        self.assertTrue(trie.autoComplete("thc") == None)
        self.assertTrue(trie.autoComplete("thd") == None)
        self.assertTrue(trie.autoComplete("the") == "the")
        self.assertTrue(trie.autoComplete("thei") == "their")
        self.assertTrue(trie.autoComplete("their") == "their")
        self.assertTrue(trie.autoComplete("them") == "them")
        self.assertTrue(trie.autoComplete("thems") == "themselves")
        self.assertTrue(trie.autoComplete("themse") == "themselves")
        self.assertTrue(trie.autoComplete("themsel") == "themselves")
        self.assertTrue(trie.autoComplete("themselv") == "themselves")
        self.assertTrue(trie.autoComplete("themselve") == "themselves")
        self.assertTrue(trie.autoComplete("themselves") == "themselves")
        self.assertTrue(trie.autoComplete("then") == "then")
        self.assertTrue(trie.autoComplete("ther") == "thereof")
        self.assertTrue(trie.autoComplete("there") == "thereof")
        self.assertTrue(trie.autoComplete("therea") == "thereafter")
        self.assertTrue(trie.autoComplete("thereaf") == "thereafter")
        self.assertTrue(trie.autoComplete("thereaft") == "thereafter")
        self.assertTrue(trie.autoComplete("thereafte") == "thereafter")
        self.assertTrue(trie.autoComplete("thereafter") == "thereafter")
        self.assertTrue(trie.autoComplete("thereb") == "thereby")
        self.assertTrue(trie.autoComplete("thereby") == "thereby")
        self.assertTrue(trie.autoComplete("therei") == "therein")
        self.assertTrue(trie.autoComplete("therein") == "therein")
        self.assertTrue(trie.autoComplete("thereo") == "thereof")
        self.assertTrue(trie.autoComplete("thereof") == "thereof")
        self.assertTrue(trie.autoComplete("thereu") == "thereupon")
        self.assertTrue(trie.autoComplete("thereup") == "thereupon")
        self.assertTrue(trie.autoComplete("thereupo") == "thereupon")
        self.assertTrue(trie.autoComplete("thereupon") == "thereupon")
        self.assertTrue(trie.autoComplete("they") == "they")
        self.assertTrue(trie.autoComplete("thf") == None)
        self.assertTrue(trie.autoComplete("thg") == None)
        self.assertTrue(trie.autoComplete("thh") == None)
        self.assertTrue(trie.autoComplete("thi") == "this")
        self.assertTrue(trie.autoComplete("thin") == "think")
        self.assertTrue(trie.autoComplete("thing") == "thing")
        self.assertTrue(trie.autoComplete("things") == "things")
        self.assertTrue(trie.autoComplete("think") == "think")
        self.assertTrue(trie.autoComplete("thir") == "thirds")
        self.assertTrue(trie.autoComplete("third") == "thirds")
        self.assertTrue(trie.autoComplete("thirds") == "thirds")
        self.assertTrue(trie.autoComplete("thirt") == "thirty")
        self.assertTrue(trie.autoComplete("thirte") == "thirteen")
        self.assertTrue(trie.autoComplete("thirtee") == "thirteen")
        self.assertTrue(trie.autoComplete("thirteen") == "thirteen")
        self.assertTrue(trie.autoComplete("thirty") == "thirty")
        self.assertTrue(trie.autoComplete("this") == "this")
        self.assertTrue(trie.autoComplete("thj") == None)
        self.assertTrue(trie.autoComplete("thk") == None)
        self.assertTrue(trie.autoComplete("thl") == None)
        self.assertTrue(trie.autoComplete("thm") == None)
        self.assertTrue(trie.autoComplete("thn") == None)
        self.assertTrue(trie.autoComplete("tho") == "those")
        self.assertTrue(trie.autoComplete("thos") == "those")
        self.assertTrue(trie.autoComplete("those") == "those")
        self.assertTrue(trie.autoComplete("thou") == "thousand")
        self.assertTrue(trie.autoComplete("thous") == "thousand")
        self.assertTrue(trie.autoComplete("thousa") == "thousand")
        self.assertTrue(trie.autoComplete("thousan") == "thousand")
        self.assertTrue(trie.autoComplete("thousand") == "thousand")
        self.assertTrue(trie.autoComplete("thp") == None)
        self.assertTrue(trie.autoComplete("thq") == None)
        self.assertTrue(trie.autoComplete("thr") == "three")
        self.assertTrue(trie.autoComplete("thre") == "three")
        self.assertTrue(trie.autoComplete("three") == "three")
        self.assertTrue(trie.autoComplete("thro") == "throughout")
        self.assertTrue(trie.autoComplete("throu") == "throughout")
        self.assertTrue(trie.autoComplete("throug") == "throughout")
        self.assertTrue(trie.autoComplete("through") == "throughout")
        self.assertTrue(trie.autoComplete("througho") == "throughout")
        self.assertTrue(trie.autoComplete("throughou") == "throughout")
        self.assertTrue(trie.autoComplete("throughout") == "throughout")
        self.assertTrue(trie.autoComplete("ths") == None)
        self.assertTrue(trie.autoComplete("tht") == None)
        self.assertTrue(trie.autoComplete("thu") == None)
        self.assertTrue(trie.autoComplete("thv") == None)
        self.assertTrue(trie.autoComplete("thw") == None)
        self.assertTrue(trie.autoComplete("thx") == None)
        self.assertTrue(trie.autoComplete("thy") == None)
        self.assertTrue(trie.autoComplete("thz") == None)
        self.assertTrue(trie.autoComplete("ti") == "time")
        self.assertTrue(trie.autoComplete("tia") == None)
        self.assertTrue(trie.autoComplete("tib") == None)
        self.assertTrue(trie.autoComplete("tic") == None)
        self.assertTrue(trie.autoComplete("tid") == None)
        self.assertTrue(trie.autoComplete("tie") == None)
        self.assertTrue(trie.autoComplete("tif") == None)
        self.assertTrue(trie.autoComplete("tig") == None)
        self.assertTrue(trie.autoComplete("tih") == None)
        self.assertTrue(trie.autoComplete("tii") == None)
        self.assertTrue(trie.autoComplete("tij") == None)
        self.assertTrue(trie.autoComplete("tik") == None)
        self.assertTrue(trie.autoComplete("til") == None)
        self.assertTrue(trie.autoComplete("tim") == "time")
        self.assertTrue(trie.autoComplete("time") == "time")
        self.assertTrue(trie.autoComplete("times") == "times")
        self.assertTrue(trie.autoComplete("tin") == None)
        self.assertTrue(trie.autoComplete("tio") == None)
        self.assertTrue(trie.autoComplete("tip") == None)
        self.assertTrue(trie.autoComplete("tiq") == None)
        self.assertTrue(trie.autoComplete("tir") == None)
        self.assertTrue(trie.autoComplete("tis") == None)
        self.assertTrue(trie.autoComplete("tit") == "title")
        self.assertTrue(trie.autoComplete("titl") == "title")
        self.assertTrue(trie.autoComplete("title") == "title")
        self.assertTrue(trie.autoComplete("tiu") == None)
        self.assertTrue(trie.autoComplete("tiv") == None)
        self.assertTrue(trie.autoComplete("tiw") == None)
        self.assertTrue(trie.autoComplete("tix") == None)
        self.assertTrue(trie.autoComplete("tiy") == None)
        self.assertTrue(trie.autoComplete("tiz") == None)
        self.assertTrue(trie.autoComplete("tj") == None)
        self.assertTrue(trie.autoComplete("tja") == None)
        self.assertTrue(trie.autoComplete("tjb") == None)
        self.assertTrue(trie.autoComplete("tjc") == None)
        self.assertTrue(trie.autoComplete("tjd") == None)
        self.assertTrue(trie.autoComplete("tje") == None)
        self.assertTrue(trie.autoComplete("tjf") == None)
        self.assertTrue(trie.autoComplete("tjg") == None)
        self.assertTrue(trie.autoComplete("tjh") == None)
        self.assertTrue(trie.autoComplete("tji") == None)
        self.assertTrue(trie.autoComplete("tjj") == None)
        self.assertTrue(trie.autoComplete("tjk") == None)
        self.assertTrue(trie.autoComplete("tjl") == None)
        self.assertTrue(trie.autoComplete("tjm") == None)
        self.assertTrue(trie.autoComplete("tjn") == None)
        self.assertTrue(trie.autoComplete("tjo") == None)
        self.assertTrue(trie.autoComplete("tjp") == None)
        self.assertTrue(trie.autoComplete("tjq") == None)
        self.assertTrue(trie.autoComplete("tjr") == None)
        self.assertTrue(trie.autoComplete("tjs") == None)
        self.assertTrue(trie.autoComplete("tjt") == None)
        self.assertTrue(trie.autoComplete("tju") == None)
        self.assertTrue(trie.autoComplete("tjv") == None)
        self.assertTrue(trie.autoComplete("tjw") == None)
        self.assertTrue(trie.autoComplete("tjx") == None)
        self.assertTrue(trie.autoComplete("tjy") == None)
        self.assertTrue(trie.autoComplete("tjz") == None)
        self.assertTrue(trie.autoComplete("tk") == None)
        self.assertTrue(trie.autoComplete("tka") == None)
        self.assertTrue(trie.autoComplete("tkb") == None)
        self.assertTrue(trie.autoComplete("tkc") == None)
        self.assertTrue(trie.autoComplete("tkd") == None)
        self.assertTrue(trie.autoComplete("tke") == None)
        self.assertTrue(trie.autoComplete("tkf") == None)
        self.assertTrue(trie.autoComplete("tkg") == None)
        self.assertTrue(trie.autoComplete("tkh") == None)
        self.assertTrue(trie.autoComplete("tki") == None)
        self.assertTrue(trie.autoComplete("tkj") == None)
        self.assertTrue(trie.autoComplete("tkk") == None)
        self.assertTrue(trie.autoComplete("tkl") == None)
        self.assertTrue(trie.autoComplete("tkm") == None)
        self.assertTrue(trie.autoComplete("tkn") == None)
        self.assertTrue(trie.autoComplete("tko") == None)
        self.assertTrue(trie.autoComplete("tkp") == None)
        self.assertTrue(trie.autoComplete("tkq") == None)
        self.assertTrue(trie.autoComplete("tkr") == None)
        self.assertTrue(trie.autoComplete("tks") == None)
        self.assertTrue(trie.autoComplete("tkt") == None)
        self.assertTrue(trie.autoComplete("tku") == None)
        self.assertTrue(trie.autoComplete("tkv") == None)
        self.assertTrue(trie.autoComplete("tkw") == None)
        self.assertTrue(trie.autoComplete("tkx") == None)
        self.assertTrue(trie.autoComplete("tky") == None)
        self.assertTrue(trie.autoComplete("tkz") == None)
        self.assertTrue(trie.autoComplete("tl") == None)
        self.assertTrue(trie.autoComplete("tla") == None)
        self.assertTrue(trie.autoComplete("tlb") == None)
        self.assertTrue(trie.autoComplete("tlc") == None)
        self.assertTrue(trie.autoComplete("tld") == None)
        self.assertTrue(trie.autoComplete("tle") == None)
        self.assertTrue(trie.autoComplete("tlf") == None)
        self.assertTrue(trie.autoComplete("tlg") == None)
        self.assertTrue(trie.autoComplete("tlh") == None)
        self.assertTrue(trie.autoComplete("tli") == None)
        self.assertTrue(trie.autoComplete("tlj") == None)
        self.assertTrue(trie.autoComplete("tlk") == None)
        self.assertTrue(trie.autoComplete("tll") == None)
        self.assertTrue(trie.autoComplete("tlm") == None)
        self.assertTrue(trie.autoComplete("tln") == None)
        self.assertTrue(trie.autoComplete("tlo") == None)
        self.assertTrue(trie.autoComplete("tlp") == None)
        self.assertTrue(trie.autoComplete("tlq") == None)
        self.assertTrue(trie.autoComplete("tlr") == None)
        self.assertTrue(trie.autoComplete("tls") == None)
        self.assertTrue(trie.autoComplete("tlt") == None)
        self.assertTrue(trie.autoComplete("tlu") == None)
        self.assertTrue(trie.autoComplete("tlv") == None)
        self.assertTrue(trie.autoComplete("tlw") == None)
        self.assertTrue(trie.autoComplete("tlx") == None)
        self.assertTrue(trie.autoComplete("tly") == None)
        self.assertTrue(trie.autoComplete("tlz") == None)
        self.assertTrue(trie.autoComplete("tm") == None)
        self.assertTrue(trie.autoComplete("tma") == None)
        self.assertTrue(trie.autoComplete("tmb") == None)
        self.assertTrue(trie.autoComplete("tmc") == None)
        self.assertTrue(trie.autoComplete("tmd") == None)
        self.assertTrue(trie.autoComplete("tme") == None)
        self.assertTrue(trie.autoComplete("tmf") == None)
        self.assertTrue(trie.autoComplete("tmg") == None)
        self.assertTrue(trie.autoComplete("tmh") == None)
        self.assertTrue(trie.autoComplete("tmi") == None)
        self.assertTrue(trie.autoComplete("tmj") == None)
        self.assertTrue(trie.autoComplete("tmk") == None)
        self.assertTrue(trie.autoComplete("tml") == None)
        self.assertTrue(trie.autoComplete("tmm") == None)
        self.assertTrue(trie.autoComplete("tmn") == None)
        self.assertTrue(trie.autoComplete("tmo") == None)
        self.assertTrue(trie.autoComplete("tmp") == None)
        self.assertTrue(trie.autoComplete("tmq") == None)
        self.assertTrue(trie.autoComplete("tmr") == None)
        self.assertTrue(trie.autoComplete("tms") == None)
        self.assertTrue(trie.autoComplete("tmt") == None)
        self.assertTrue(trie.autoComplete("tmu") == None)
        self.assertTrue(trie.autoComplete("tmv") == None)
        self.assertTrue(trie.autoComplete("tmw") == None)
        self.assertTrue(trie.autoComplete("tmx") == None)
        self.assertTrue(trie.autoComplete("tmy") == None)
        self.assertTrue(trie.autoComplete("tmz") == None)
        self.assertTrue(trie.autoComplete("tn") == None)
        self.assertTrue(trie.autoComplete("tna") == None)
        self.assertTrue(trie.autoComplete("tnb") == None)
        self.assertTrue(trie.autoComplete("tnc") == None)
        self.assertTrue(trie.autoComplete("tnd") == None)
        self.assertTrue(trie.autoComplete("tne") == None)
        self.assertTrue(trie.autoComplete("tnf") == None)
        self.assertTrue(trie.autoComplete("tng") == None)
        self.assertTrue(trie.autoComplete("tnh") == None)
        self.assertTrue(trie.autoComplete("tni") == None)
        self.assertTrue(trie.autoComplete("tnj") == None)
        self.assertTrue(trie.autoComplete("tnk") == None)
        self.assertTrue(trie.autoComplete("tnl") == None)
        self.assertTrue(trie.autoComplete("tnm") == None)
        self.assertTrue(trie.autoComplete("tnn") == None)
        self.assertTrue(trie.autoComplete("tno") == None)
        self.assertTrue(trie.autoComplete("tnp") == None)
        self.assertTrue(trie.autoComplete("tnq") == None)
        self.assertTrue(trie.autoComplete("tnr") == None)
        self.assertTrue(trie.autoComplete("tns") == None)
        self.assertTrue(trie.autoComplete("tnt") == None)
        self.assertTrue(trie.autoComplete("tnu") == None)
        self.assertTrue(trie.autoComplete("tnv") == None)
        self.assertTrue(trie.autoComplete("tnw") == None)
        self.assertTrue(trie.autoComplete("tnx") == None)
        self.assertTrue(trie.autoComplete("tny") == None)
        self.assertTrue(trie.autoComplete("tnz") == None)
        self.assertTrue(trie.autoComplete("to") == "to")
        self.assertTrue(trie.autoComplete("toa") == None)
        self.assertTrue(trie.autoComplete("tob") == None)
        self.assertTrue(trie.autoComplete("toc") == None)
        self.assertTrue(trie.autoComplete("tod") == None)
        self.assertTrue(trie.autoComplete("toe") == None)
        self.assertTrue(trie.autoComplete("tof") == None)
        self.assertTrue(trie.autoComplete("tog") == "together")
        self.assertTrue(trie.autoComplete("toge") == "together")
        self.assertTrue(trie.autoComplete("toget") == "together")
        self.assertTrue(trie.autoComplete("togeth") == "together")
        self.assertTrue(trie.autoComplete("togethe") == "together")
        self.assertTrue(trie.autoComplete("together") == "together")
        self.assertTrue(trie.autoComplete("toh") == None)
        self.assertTrue(trie.autoComplete("toi") == None)
        self.assertTrue(trie.autoComplete("toj") == None)
        self.assertTrue(trie.autoComplete("tok") == None)
        self.assertTrue(trie.autoComplete("tol") == None)
        self.assertTrue(trie.autoComplete("tom") == None)
        self.assertTrue(trie.autoComplete("ton") == "tonnage")
        self.assertTrue(trie.autoComplete("tonn") == "tonnage")
        self.assertTrue(trie.autoComplete("tonna") == "tonnage")
        self.assertTrue(trie.autoComplete("tonnag") == "tonnage")
        self.assertTrue(trie.autoComplete("tonnage") == "tonnage")
        self.assertTrue(trie.autoComplete("too") == None)
        self.assertTrue(trie.autoComplete("top") == None)
        self.assertTrue(trie.autoComplete("toq") == None)
        self.assertTrue(trie.autoComplete("tor") == None)
        self.assertTrue(trie.autoComplete("tos") == None)
        self.assertTrue(trie.autoComplete("tot") == None)
        self.assertTrue(trie.autoComplete("tou") == None)
        self.assertTrue(trie.autoComplete("tov") == None)
        self.assertTrue(trie.autoComplete("tow") == None)
        self.assertTrue(trie.autoComplete("tox") == None)
        self.assertTrue(trie.autoComplete("toy") == None)
        self.assertTrue(trie.autoComplete("toz") == None)
        self.assertTrue(trie.autoComplete("tp") == None)
        self.assertTrue(trie.autoComplete("tpa") == None)
        self.assertTrue(trie.autoComplete("tpb") == None)
        self.assertTrue(trie.autoComplete("tpc") == None)
        self.assertTrue(trie.autoComplete("tpd") == None)
        self.assertTrue(trie.autoComplete("tpe") == None)
        self.assertTrue(trie.autoComplete("tpf") == None)
        self.assertTrue(trie.autoComplete("tpg") == None)
        self.assertTrue(trie.autoComplete("tph") == None)
        self.assertTrue(trie.autoComplete("tpi") == None)
        self.assertTrue(trie.autoComplete("tpj") == None)
        self.assertTrue(trie.autoComplete("tpk") == None)
        self.assertTrue(trie.autoComplete("tpl") == None)
        self.assertTrue(trie.autoComplete("tpm") == None)
        self.assertTrue(trie.autoComplete("tpn") == None)
        self.assertTrue(trie.autoComplete("tpo") == None)
        self.assertTrue(trie.autoComplete("tpp") == None)
        self.assertTrue(trie.autoComplete("tpq") == None)
        self.assertTrue(trie.autoComplete("tpr") == None)
        self.assertTrue(trie.autoComplete("tps") == None)
        self.assertTrue(trie.autoComplete("tpt") == None)
        self.assertTrue(trie.autoComplete("tpu") == None)
        self.assertTrue(trie.autoComplete("tpv") == None)
        self.assertTrue(trie.autoComplete("tpw") == None)
        self.assertTrue(trie.autoComplete("tpx") == None)
        self.assertTrue(trie.autoComplete("tpy") == None)
        self.assertTrue(trie.autoComplete("tpz") == None)
        self.assertTrue(trie.autoComplete("tq") == None)
        self.assertTrue(trie.autoComplete("tqa") == None)
        self.assertTrue(trie.autoComplete("tqb") == None)
        self.assertTrue(trie.autoComplete("tqc") == None)
        self.assertTrue(trie.autoComplete("tqd") == None)
        self.assertTrue(trie.autoComplete("tqe") == None)
        self.assertTrue(trie.autoComplete("tqf") == None)
        self.assertTrue(trie.autoComplete("tqg") == None)
        self.assertTrue(trie.autoComplete("tqh") == None)
        self.assertTrue(trie.autoComplete("tqi") == None)
        self.assertTrue(trie.autoComplete("tqj") == None)
        self.assertTrue(trie.autoComplete("tqk") == None)
        self.assertTrue(trie.autoComplete("tql") == None)
        self.assertTrue(trie.autoComplete("tqm") == None)
        self.assertTrue(trie.autoComplete("tqn") == None)
        self.assertTrue(trie.autoComplete("tqo") == None)
        self.assertTrue(trie.autoComplete("tqp") == None)
        self.assertTrue(trie.autoComplete("tqq") == None)
        self.assertTrue(trie.autoComplete("tqr") == None)
        self.assertTrue(trie.autoComplete("tqs") == None)
        self.assertTrue(trie.autoComplete("tqt") == None)
        self.assertTrue(trie.autoComplete("tqu") == None)
        self.assertTrue(trie.autoComplete("tqv") == None)
        self.assertTrue(trie.autoComplete("tqw") == None)
        self.assertTrue(trie.autoComplete("tqx") == None)
        self.assertTrue(trie.autoComplete("tqy") == None)
        self.assertTrue(trie.autoComplete("tqz") == None)
        self.assertTrue(trie.autoComplete("tr") == "treason")
        self.assertTrue(trie.autoComplete("tra") == "transmit")
        self.assertTrue(trie.autoComplete("trai") == "training")
        self.assertTrue(trie.autoComplete("train") == "training")
        self.assertTrue(trie.autoComplete("traini") == "training")
        self.assertTrue(trie.autoComplete("trainin") == "training")
        self.assertTrue(trie.autoComplete("training") == "training")
        self.assertTrue(trie.autoComplete("tran") == "transmit")
        self.assertTrue(trie.autoComplete("tranq") == "tranquility")
        self.assertTrue(trie.autoComplete("tranqu") == "tranquility")
        self.assertTrue(trie.autoComplete("tranqui") == "tranquility")
        self.assertTrue(trie.autoComplete("tranquil") == "tranquility")
        self.assertTrue(trie.autoComplete("tranquili") == "tranquility")
        self.assertTrue(trie.autoComplete("tranquilit") == "tranquility")
        self.assertTrue(trie.autoComplete("tranquility") == "tranquility")
        self.assertTrue(trie.autoComplete("trans") == "transmit")
        self.assertTrue(trie.autoComplete("transm") == "transmit")
        self.assertTrue(trie.autoComplete("transmi") == "transmit")
        self.assertTrue(trie.autoComplete("transmit") == "transmit")
        self.assertTrue(trie.autoComplete("transmits") == "transmits")
        self.assertTrue(trie.autoComplete("transp") == "transportation")
        self.assertTrue(trie.autoComplete("transpo") == "transportation")
        self.assertTrue(trie.autoComplete("transpor") == "transportation")
        self.assertTrue(trie.autoComplete("transport") == "transportation")
        self.assertTrue(trie.autoComplete("transporta") == "transportation")
        self.assertTrue(trie.autoComplete("transportat") == "transportation")
        self.assertTrue(trie.autoComplete("transportati") == "transportation")
        self.assertTrue(trie.autoComplete("transportatio") == "transportation")
        self.assertTrue(trie.autoComplete("transportation") == "transportation")
        self.assertTrue(trie.autoComplete("trb") == None)
        self.assertTrue(trie.autoComplete("trc") == None)
        self.assertTrue(trie.autoComplete("trd") == None)
        self.assertTrue(trie.autoComplete("tre") == "treason")
        self.assertTrue(trie.autoComplete("trea") == "treason")
        self.assertTrue(trie.autoComplete("treas") == "treason")
        self.assertTrue(trie.autoComplete("treaso") == "treason")
        self.assertTrue(trie.autoComplete("treason") == "treason")
        self.assertTrue(trie.autoComplete("treasu") == "treasury")
        self.assertTrue(trie.autoComplete("treasur") == "treasury")
        self.assertTrue(trie.autoComplete("treasury") == "treasury")
        self.assertTrue(trie.autoComplete("treat") == "treaties")
        self.assertTrue(trie.autoComplete("treati") == "treaties")
        self.assertTrue(trie.autoComplete("treatie") == "treaties")
        self.assertTrue(trie.autoComplete("treaties") == "treaties")
        self.assertTrue(trie.autoComplete("treaty") == "treaty")
        self.assertTrue(trie.autoComplete("trf") == None)
        self.assertTrue(trie.autoComplete("trg") == None)
        self.assertTrue(trie.autoComplete("trh") == None)
        self.assertTrue(trie.autoComplete("tri") == "trial")
        self.assertTrue(trie.autoComplete("tria") == "trial")
        self.assertTrue(trie.autoComplete("trial") == "trial")
        self.assertTrue(trie.autoComplete("trib") == "tribes")
        self.assertTrue(trie.autoComplete("tribe") == "tribes")
        self.assertTrue(trie.autoComplete("tribes") == "tribes")
        self.assertTrue(trie.autoComplete("tribu") == "tribunals")
        self.assertTrue(trie.autoComplete("tribun") == "tribunals")
        self.assertTrue(trie.autoComplete("tribuna") == "tribunals")
        self.assertTrue(trie.autoComplete("tribunal") == "tribunals")
        self.assertTrue(trie.autoComplete("tribunals") == "tribunals")
        self.assertTrue(trie.autoComplete("trie") == "tried")
        self.assertTrue(trie.autoComplete("tried") == "tried")
        self.assertTrue(trie.autoComplete("trj") == None)
        self.assertTrue(trie.autoComplete("trk") == None)
        self.assertTrue(trie.autoComplete("trl") == None)
        self.assertTrue(trie.autoComplete("trm") == None)
        self.assertTrue(trie.autoComplete("trn") == None)
        self.assertTrue(trie.autoComplete("tro") == "troops")
        self.assertTrue(trie.autoComplete("troo") == "troops")
        self.assertTrue(trie.autoComplete("troop") == "troops")
        self.assertTrue(trie.autoComplete("troops") == "troops")
        self.assertTrue(trie.autoComplete("trp") == None)
        self.assertTrue(trie.autoComplete("trq") == None)
        self.assertTrue(trie.autoComplete("trr") == None)
        self.assertTrue(trie.autoComplete("trs") == None)
        self.assertTrue(trie.autoComplete("trt") == None)
        self.assertTrue(trie.autoComplete("tru") == "trust")
        self.assertTrue(trie.autoComplete("trus") == "trust")
        self.assertTrue(trie.autoComplete("trust") == "trust")
        self.assertTrue(trie.autoComplete("trv") == None)
        self.assertTrue(trie.autoComplete("trw") == None)
        self.assertTrue(trie.autoComplete("trx") == None)
        self.assertTrue(trie.autoComplete("try") == "try")
        self.assertTrue(trie.autoComplete("trz") == None)
        self.assertTrue(trie.autoComplete("ts") == None)
        self.assertTrue(trie.autoComplete("tsa") == None)
        self.assertTrue(trie.autoComplete("tsb") == None)
        self.assertTrue(trie.autoComplete("tsc") == None)
        self.assertTrue(trie.autoComplete("tsd") == None)
        self.assertTrue(trie.autoComplete("tse") == None)
        self.assertTrue(trie.autoComplete("tsf") == None)
        self.assertTrue(trie.autoComplete("tsg") == None)
        self.assertTrue(trie.autoComplete("tsh") == None)
        self.assertTrue(trie.autoComplete("tsi") == None)
        self.assertTrue(trie.autoComplete("tsj") == None)
        self.assertTrue(trie.autoComplete("tsk") == None)
        self.assertTrue(trie.autoComplete("tsl") == None)
        self.assertTrue(trie.autoComplete("tsm") == None)
        self.assertTrue(trie.autoComplete("tsn") == None)
        self.assertTrue(trie.autoComplete("tso") == None)
        self.assertTrue(trie.autoComplete("tsp") == None)
        self.assertTrue(trie.autoComplete("tsq") == None)
        self.assertTrue(trie.autoComplete("tsr") == None)
        self.assertTrue(trie.autoComplete("tss") == None)
        self.assertTrue(trie.autoComplete("tst") == None)
        self.assertTrue(trie.autoComplete("tsu") == None)
        self.assertTrue(trie.autoComplete("tsv") == None)
        self.assertTrue(trie.autoComplete("tsw") == None)
        self.assertTrue(trie.autoComplete("tsx") == None)
        self.assertTrue(trie.autoComplete("tsy") == None)
        self.assertTrue(trie.autoComplete("tsz") == None)
        self.assertTrue(trie.autoComplete("tt") == None)
        self.assertTrue(trie.autoComplete("tta") == None)
        self.assertTrue(trie.autoComplete("ttb") == None)
        self.assertTrue(trie.autoComplete("ttc") == None)
        self.assertTrue(trie.autoComplete("ttd") == None)
        self.assertTrue(trie.autoComplete("tte") == None)
        self.assertTrue(trie.autoComplete("ttf") == None)
        self.assertTrue(trie.autoComplete("ttg") == None)
        self.assertTrue(trie.autoComplete("tth") == None)
        self.assertTrue(trie.autoComplete("tti") == None)
        self.assertTrue(trie.autoComplete("ttj") == None)
        self.assertTrue(trie.autoComplete("ttk") == None)
        self.assertTrue(trie.autoComplete("ttl") == None)
        self.assertTrue(trie.autoComplete("ttm") == None)
        self.assertTrue(trie.autoComplete("ttn") == None)
        self.assertTrue(trie.autoComplete("tto") == None)
        self.assertTrue(trie.autoComplete("ttp") == None)
        self.assertTrue(trie.autoComplete("ttq") == None)
        self.assertTrue(trie.autoComplete("ttr") == None)
        self.assertTrue(trie.autoComplete("tts") == None)
        self.assertTrue(trie.autoComplete("ttt") == None)
        self.assertTrue(trie.autoComplete("ttu") == None)
        self.assertTrue(trie.autoComplete("ttv") == None)
        self.assertTrue(trie.autoComplete("ttw") == None)
        self.assertTrue(trie.autoComplete("ttx") == None)
        self.assertTrue(trie.autoComplete("tty") == None)
        self.assertTrue(trie.autoComplete("ttz") == None)
        self.assertTrue(trie.autoComplete("tu") == None)
        self.assertTrue(trie.autoComplete("tua") == None)
        self.assertTrue(trie.autoComplete("tub") == None)
        self.assertTrue(trie.autoComplete("tuc") == None)
        self.assertTrue(trie.autoComplete("tud") == None)
        self.assertTrue(trie.autoComplete("tue") == None)
        self.assertTrue(trie.autoComplete("tuf") == None)
        self.assertTrue(trie.autoComplete("tug") == None)
        self.assertTrue(trie.autoComplete("tuh") == None)
        self.assertTrue(trie.autoComplete("tui") == None)
        self.assertTrue(trie.autoComplete("tuj") == None)
        self.assertTrue(trie.autoComplete("tuk") == None)
        self.assertTrue(trie.autoComplete("tul") == None)
        self.assertTrue(trie.autoComplete("tum") == None)
        self.assertTrue(trie.autoComplete("tun") == None)
        self.assertTrue(trie.autoComplete("tuo") == None)
        self.assertTrue(trie.autoComplete("tup") == None)
        self.assertTrue(trie.autoComplete("tuq") == None)
        self.assertTrue(trie.autoComplete("tur") == None)
        self.assertTrue(trie.autoComplete("tus") == None)
        self.assertTrue(trie.autoComplete("tut") == None)
        self.assertTrue(trie.autoComplete("tuu") == None)
        self.assertTrue(trie.autoComplete("tuv") == None)
        self.assertTrue(trie.autoComplete("tuw") == None)
        self.assertTrue(trie.autoComplete("tux") == None)
        self.assertTrue(trie.autoComplete("tuy") == None)
        self.assertTrue(trie.autoComplete("tuz") == None)
        self.assertTrue(trie.autoComplete("tv") == None)
        self.assertTrue(trie.autoComplete("tva") == None)
        self.assertTrue(trie.autoComplete("tvb") == None)
        self.assertTrue(trie.autoComplete("tvc") == None)
        self.assertTrue(trie.autoComplete("tvd") == None)
        self.assertTrue(trie.autoComplete("tve") == None)
        self.assertTrue(trie.autoComplete("tvf") == None)
        self.assertTrue(trie.autoComplete("tvg") == None)
        self.assertTrue(trie.autoComplete("tvh") == None)
        self.assertTrue(trie.autoComplete("tvi") == None)
        self.assertTrue(trie.autoComplete("tvj") == None)
        self.assertTrue(trie.autoComplete("tvk") == None)
        self.assertTrue(trie.autoComplete("tvl") == None)
        self.assertTrue(trie.autoComplete("tvm") == None)
        self.assertTrue(trie.autoComplete("tvn") == None)
        self.assertTrue(trie.autoComplete("tvo") == None)
        self.assertTrue(trie.autoComplete("tvp") == None)
        self.assertTrue(trie.autoComplete("tvq") == None)
        self.assertTrue(trie.autoComplete("tvr") == None)
        self.assertTrue(trie.autoComplete("tvs") == None)
        self.assertTrue(trie.autoComplete("tvt") == None)
        self.assertTrue(trie.autoComplete("tvu") == None)
        self.assertTrue(trie.autoComplete("tvv") == None)
        self.assertTrue(trie.autoComplete("tvw") == None)
        self.assertTrue(trie.autoComplete("tvx") == None)
        self.assertTrue(trie.autoComplete("tvy") == None)
        self.assertTrue(trie.autoComplete("tvz") == None)
        self.assertTrue(trie.autoComplete("tw") == "two")
        self.assertTrue(trie.autoComplete("twa") == None)
        self.assertTrue(trie.autoComplete("twb") == None)
        self.assertTrue(trie.autoComplete("twc") == None)
        self.assertTrue(trie.autoComplete("twd") == None)
        self.assertTrue(trie.autoComplete("twe") == "twenty")
        self.assertTrue(trie.autoComplete("twel") == "twelfth")
        self.assertTrue(trie.autoComplete("twelf") == "twelfth")
        self.assertTrue(trie.autoComplete("twelft") == "twelfth")
        self.assertTrue(trie.autoComplete("twelfth") == "twelfth")
        self.assertTrue(trie.autoComplete("twen") == "twenty")
        self.assertTrue(trie.autoComplete("twent") == "twenty")
        self.assertTrue(trie.autoComplete("twenti") == "twentieth")
        self.assertTrue(trie.autoComplete("twentie") == "twentieth")
        self.assertTrue(trie.autoComplete("twentiet") == "twentieth")
        self.assertTrue(trie.autoComplete("twentieth") == "twentieth")
        self.assertTrue(trie.autoComplete("twenty") == "twenty")
        self.assertTrue(trie.autoComplete("twf") == None)
        self.assertTrue(trie.autoComplete("twg") == None)
        self.assertTrue(trie.autoComplete("twh") == None)
        self.assertTrue(trie.autoComplete("twi") == "twice")
        self.assertTrue(trie.autoComplete("twic") == "twice")
        self.assertTrue(trie.autoComplete("twice") == "twice")
        self.assertTrue(trie.autoComplete("twj") == None)
        self.assertTrue(trie.autoComplete("twk") == None)
        self.assertTrue(trie.autoComplete("twl") == None)
        self.assertTrue(trie.autoComplete("twm") == None)
        self.assertTrue(trie.autoComplete("twn") == None)
        self.assertTrue(trie.autoComplete("two") == "two")
        self.assertTrue(trie.autoComplete("twp") == None)
        self.assertTrue(trie.autoComplete("twq") == None)
        self.assertTrue(trie.autoComplete("twr") == None)
        self.assertTrue(trie.autoComplete("tws") == None)
        self.assertTrue(trie.autoComplete("twt") == None)
        self.assertTrue(trie.autoComplete("twu") == None)
        self.assertTrue(trie.autoComplete("twv") == None)
        self.assertTrue(trie.autoComplete("tww") == None)
        self.assertTrue(trie.autoComplete("twx") == None)
        self.assertTrue(trie.autoComplete("twy") == None)
        self.assertTrue(trie.autoComplete("twz") == None)
        self.assertTrue(trie.autoComplete("tx") == None)
        self.assertTrue(trie.autoComplete("txa") == None)
        self.assertTrue(trie.autoComplete("txb") == None)
        self.assertTrue(trie.autoComplete("txc") == None)
        self.assertTrue(trie.autoComplete("txd") == None)
        self.assertTrue(trie.autoComplete("txe") == None)
        self.assertTrue(trie.autoComplete("txf") == None)
        self.assertTrue(trie.autoComplete("txg") == None)
        self.assertTrue(trie.autoComplete("txh") == None)
        self.assertTrue(trie.autoComplete("txi") == None)
        self.assertTrue(trie.autoComplete("txj") == None)
        self.assertTrue(trie.autoComplete("txk") == None)
        self.assertTrue(trie.autoComplete("txl") == None)
        self.assertTrue(trie.autoComplete("txm") == None)
        self.assertTrue(trie.autoComplete("txn") == None)
        self.assertTrue(trie.autoComplete("txo") == None)
        self.assertTrue(trie.autoComplete("txp") == None)
        self.assertTrue(trie.autoComplete("txq") == None)
        self.assertTrue(trie.autoComplete("txr") == None)
        self.assertTrue(trie.autoComplete("txs") == None)
        self.assertTrue(trie.autoComplete("txt") == None)
        self.assertTrue(trie.autoComplete("txu") == None)
        self.assertTrue(trie.autoComplete("txv") == None)
        self.assertTrue(trie.autoComplete("txw") == None)
        self.assertTrue(trie.autoComplete("txx") == None)
        self.assertTrue(trie.autoComplete("txy") == None)
        self.assertTrue(trie.autoComplete("txz") == None)
        self.assertTrue(trie.autoComplete("ty") == None)
        self.assertTrue(trie.autoComplete("tya") == None)
        self.assertTrue(trie.autoComplete("tyb") == None)
        self.assertTrue(trie.autoComplete("tyc") == None)
        self.assertTrue(trie.autoComplete("tyd") == None)
        self.assertTrue(trie.autoComplete("tye") == None)
        self.assertTrue(trie.autoComplete("tyf") == None)
        self.assertTrue(trie.autoComplete("tyg") == None)
        self.assertTrue(trie.autoComplete("tyh") == None)
        self.assertTrue(trie.autoComplete("tyi") == None)
        self.assertTrue(trie.autoComplete("tyj") == None)
        self.assertTrue(trie.autoComplete("tyk") == None)
        self.assertTrue(trie.autoComplete("tyl") == None)
        self.assertTrue(trie.autoComplete("tym") == None)
        self.assertTrue(trie.autoComplete("tyn") == None)
        self.assertTrue(trie.autoComplete("tyo") == None)
        self.assertTrue(trie.autoComplete("typ") == None)
        self.assertTrue(trie.autoComplete("tyq") == None)
        self.assertTrue(trie.autoComplete("tyr") == None)
        self.assertTrue(trie.autoComplete("tys") == None)
        self.assertTrue(trie.autoComplete("tyt") == None)
        self.assertTrue(trie.autoComplete("tyu") == None)
        self.assertTrue(trie.autoComplete("tyv") == None)
        self.assertTrue(trie.autoComplete("tyw") == None)
        self.assertTrue(trie.autoComplete("tyx") == None)
        self.assertTrue(trie.autoComplete("tyy") == None)
        self.assertTrue(trie.autoComplete("tyz") == None)
        self.assertTrue(trie.autoComplete("tz") == None)
        self.assertTrue(trie.autoComplete("tza") == None)
        self.assertTrue(trie.autoComplete("tzb") == None)
        self.assertTrue(trie.autoComplete("tzc") == None)
        self.assertTrue(trie.autoComplete("tzd") == None)
        self.assertTrue(trie.autoComplete("tze") == None)
        self.assertTrue(trie.autoComplete("tzf") == None)
        self.assertTrue(trie.autoComplete("tzg") == None)
        self.assertTrue(trie.autoComplete("tzh") == None)
        self.assertTrue(trie.autoComplete("tzi") == None)
        self.assertTrue(trie.autoComplete("tzj") == None)
        self.assertTrue(trie.autoComplete("tzk") == None)
        self.assertTrue(trie.autoComplete("tzl") == None)
        self.assertTrue(trie.autoComplete("tzm") == None)
        self.assertTrue(trie.autoComplete("tzn") == None)
        self.assertTrue(trie.autoComplete("tzo") == None)
        self.assertTrue(trie.autoComplete("tzp") == None)
        self.assertTrue(trie.autoComplete("tzq") == None)
        self.assertTrue(trie.autoComplete("tzr") == None)
        self.assertTrue(trie.autoComplete("tzs") == None)
        self.assertTrue(trie.autoComplete("tzt") == None)
        self.assertTrue(trie.autoComplete("tzu") == None)
        self.assertTrue(trie.autoComplete("tzv") == None)
        self.assertTrue(trie.autoComplete("tzw") == None)
        self.assertTrue(trie.autoComplete("tzx") == None)
        self.assertTrue(trie.autoComplete("tzy") == None)
        self.assertTrue(trie.autoComplete("tzz") == None)
        self.assertTrue(trie.autoComplete("u") == "united")
        self.assertTrue(trie.autoComplete("ua") == None)
        self.assertTrue(trie.autoComplete("uaa") == None)
        self.assertTrue(trie.autoComplete("uab") == None)
        self.assertTrue(trie.autoComplete("uac") == None)
        self.assertTrue(trie.autoComplete("uad") == None)
        self.assertTrue(trie.autoComplete("uae") == None)
        self.assertTrue(trie.autoComplete("uaf") == None)
        self.assertTrue(trie.autoComplete("uag") == None)
        self.assertTrue(trie.autoComplete("uah") == None)
        self.assertTrue(trie.autoComplete("uai") == None)
        self.assertTrue(trie.autoComplete("uaj") == None)
        self.assertTrue(trie.autoComplete("uak") == None)
        self.assertTrue(trie.autoComplete("ual") == None)
        self.assertTrue(trie.autoComplete("uam") == None)
        self.assertTrue(trie.autoComplete("uan") == None)
        self.assertTrue(trie.autoComplete("uao") == None)
        self.assertTrue(trie.autoComplete("uap") == None)
        self.assertTrue(trie.autoComplete("uaq") == None)
        self.assertTrue(trie.autoComplete("uar") == None)
        self.assertTrue(trie.autoComplete("uas") == None)
        self.assertTrue(trie.autoComplete("uat") == None)
        self.assertTrue(trie.autoComplete("uau") == None)
        self.assertTrue(trie.autoComplete("uav") == None)
        self.assertTrue(trie.autoComplete("uaw") == None)
        self.assertTrue(trie.autoComplete("uax") == None)
        self.assertTrue(trie.autoComplete("uay") == None)
        self.assertTrue(trie.autoComplete("uaz") == None)
        self.assertTrue(trie.autoComplete("ub") == None)
        self.assertTrue(trie.autoComplete("uba") == None)
        self.assertTrue(trie.autoComplete("ubb") == None)
        self.assertTrue(trie.autoComplete("ubc") == None)
        self.assertTrue(trie.autoComplete("ubd") == None)
        self.assertTrue(trie.autoComplete("ube") == None)
        self.assertTrue(trie.autoComplete("ubf") == None)
        self.assertTrue(trie.autoComplete("ubg") == None)
        self.assertTrue(trie.autoComplete("ubh") == None)
        self.assertTrue(trie.autoComplete("ubi") == None)
        self.assertTrue(trie.autoComplete("ubj") == None)
        self.assertTrue(trie.autoComplete("ubk") == None)
        self.assertTrue(trie.autoComplete("ubl") == None)
        self.assertTrue(trie.autoComplete("ubm") == None)
        self.assertTrue(trie.autoComplete("ubn") == None)
        self.assertTrue(trie.autoComplete("ubo") == None)
        self.assertTrue(trie.autoComplete("ubp") == None)
        self.assertTrue(trie.autoComplete("ubq") == None)
        self.assertTrue(trie.autoComplete("ubr") == None)
        self.assertTrue(trie.autoComplete("ubs") == None)
        self.assertTrue(trie.autoComplete("ubt") == None)
        self.assertTrue(trie.autoComplete("ubu") == None)
        self.assertTrue(trie.autoComplete("ubv") == None)
        self.assertTrue(trie.autoComplete("ubw") == None)
        self.assertTrue(trie.autoComplete("ubx") == None)
        self.assertTrue(trie.autoComplete("uby") == None)
        self.assertTrue(trie.autoComplete("ubz") == None)
        self.assertTrue(trie.autoComplete("uc") == None)
        self.assertTrue(trie.autoComplete("uca") == None)
        self.assertTrue(trie.autoComplete("ucb") == None)
        self.assertTrue(trie.autoComplete("ucc") == None)
        self.assertTrue(trie.autoComplete("ucd") == None)
        self.assertTrue(trie.autoComplete("uce") == None)
        self.assertTrue(trie.autoComplete("ucf") == None)
        self.assertTrue(trie.autoComplete("ucg") == None)
        self.assertTrue(trie.autoComplete("uch") == None)
        self.assertTrue(trie.autoComplete("uci") == None)
        self.assertTrue(trie.autoComplete("ucj") == None)
        self.assertTrue(trie.autoComplete("uck") == None)
        self.assertTrue(trie.autoComplete("ucl") == None)
        self.assertTrue(trie.autoComplete("ucm") == None)
        self.assertTrue(trie.autoComplete("ucn") == None)
        self.assertTrue(trie.autoComplete("uco") == None)
        self.assertTrue(trie.autoComplete("ucp") == None)
        self.assertTrue(trie.autoComplete("ucq") == None)
        self.assertTrue(trie.autoComplete("ucr") == None)
        self.assertTrue(trie.autoComplete("ucs") == None)
        self.assertTrue(trie.autoComplete("uct") == None)
        self.assertTrue(trie.autoComplete("ucu") == None)
        self.assertTrue(trie.autoComplete("ucv") == None)
        self.assertTrue(trie.autoComplete("ucw") == None)
        self.assertTrue(trie.autoComplete("ucx") == None)
        self.assertTrue(trie.autoComplete("ucy") == None)
        self.assertTrue(trie.autoComplete("ucz") == None)
        self.assertTrue(trie.autoComplete("ud") == None)
        self.assertTrue(trie.autoComplete("uda") == None)
        self.assertTrue(trie.autoComplete("udb") == None)
        self.assertTrue(trie.autoComplete("udc") == None)
        self.assertTrue(trie.autoComplete("udd") == None)
        self.assertTrue(trie.autoComplete("ude") == None)
        self.assertTrue(trie.autoComplete("udf") == None)
        self.assertTrue(trie.autoComplete("udg") == None)
        self.assertTrue(trie.autoComplete("udh") == None)
        self.assertTrue(trie.autoComplete("udi") == None)
        self.assertTrue(trie.autoComplete("udj") == None)
        self.assertTrue(trie.autoComplete("udk") == None)
        self.assertTrue(trie.autoComplete("udl") == None)
        self.assertTrue(trie.autoComplete("udm") == None)
        self.assertTrue(trie.autoComplete("udn") == None)
        self.assertTrue(trie.autoComplete("udo") == None)
        self.assertTrue(trie.autoComplete("udp") == None)
        self.assertTrue(trie.autoComplete("udq") == None)
        self.assertTrue(trie.autoComplete("udr") == None)
        self.assertTrue(trie.autoComplete("uds") == None)
        self.assertTrue(trie.autoComplete("udt") == None)
        self.assertTrue(trie.autoComplete("udu") == None)
        self.assertTrue(trie.autoComplete("udv") == None)
        self.assertTrue(trie.autoComplete("udw") == None)
        self.assertTrue(trie.autoComplete("udx") == None)
        self.assertTrue(trie.autoComplete("udy") == None)
        self.assertTrue(trie.autoComplete("udz") == None)
        self.assertTrue(trie.autoComplete("ue") == None)
        self.assertTrue(trie.autoComplete("uea") == None)
        self.assertTrue(trie.autoComplete("ueb") == None)
        self.assertTrue(trie.autoComplete("uec") == None)
        self.assertTrue(trie.autoComplete("ued") == None)
        self.assertTrue(trie.autoComplete("uee") == None)
        self.assertTrue(trie.autoComplete("uef") == None)
        self.assertTrue(trie.autoComplete("ueg") == None)
        self.assertTrue(trie.autoComplete("ueh") == None)
        self.assertTrue(trie.autoComplete("uei") == None)
        self.assertTrue(trie.autoComplete("uej") == None)
        self.assertTrue(trie.autoComplete("uek") == None)
        self.assertTrue(trie.autoComplete("uel") == None)
        self.assertTrue(trie.autoComplete("uem") == None)
        self.assertTrue(trie.autoComplete("uen") == None)
        self.assertTrue(trie.autoComplete("ueo") == None)
        self.assertTrue(trie.autoComplete("uep") == None)
        self.assertTrue(trie.autoComplete("ueq") == None)
        self.assertTrue(trie.autoComplete("uer") == None)
        self.assertTrue(trie.autoComplete("ues") == None)
        self.assertTrue(trie.autoComplete("uet") == None)
        self.assertTrue(trie.autoComplete("ueu") == None)
        self.assertTrue(trie.autoComplete("uev") == None)
        self.assertTrue(trie.autoComplete("uew") == None)
        self.assertTrue(trie.autoComplete("uex") == None)
        self.assertTrue(trie.autoComplete("uey") == None)
        self.assertTrue(trie.autoComplete("uez") == None)
        self.assertTrue(trie.autoComplete("uf") == None)
        self.assertTrue(trie.autoComplete("ufa") == None)
        self.assertTrue(trie.autoComplete("ufb") == None)
        self.assertTrue(trie.autoComplete("ufc") == None)
        self.assertTrue(trie.autoComplete("ufd") == None)
        self.assertTrue(trie.autoComplete("ufe") == None)
        self.assertTrue(trie.autoComplete("uff") == None)
        self.assertTrue(trie.autoComplete("ufg") == None)
        self.assertTrue(trie.autoComplete("ufh") == None)
        self.assertTrue(trie.autoComplete("ufi") == None)
        self.assertTrue(trie.autoComplete("ufj") == None)
        self.assertTrue(trie.autoComplete("ufk") == None)
        self.assertTrue(trie.autoComplete("ufl") == None)
        self.assertTrue(trie.autoComplete("ufm") == None)
        self.assertTrue(trie.autoComplete("ufn") == None)
        self.assertTrue(trie.autoComplete("ufo") == None)
        self.assertTrue(trie.autoComplete("ufp") == None)
        self.assertTrue(trie.autoComplete("ufq") == None)
        self.assertTrue(trie.autoComplete("ufr") == None)
        self.assertTrue(trie.autoComplete("ufs") == None)
        self.assertTrue(trie.autoComplete("uft") == None)
        self.assertTrue(trie.autoComplete("ufu") == None)
        self.assertTrue(trie.autoComplete("ufv") == None)
        self.assertTrue(trie.autoComplete("ufw") == None)
        self.assertTrue(trie.autoComplete("ufx") == None)
        self.assertTrue(trie.autoComplete("ufy") == None)
        self.assertTrue(trie.autoComplete("ufz") == None)
        self.assertTrue(trie.autoComplete("ug") == None)
        self.assertTrue(trie.autoComplete("uga") == None)
        self.assertTrue(trie.autoComplete("ugb") == None)
        self.assertTrue(trie.autoComplete("ugc") == None)
        self.assertTrue(trie.autoComplete("ugd") == None)
        self.assertTrue(trie.autoComplete("uge") == None)
        self.assertTrue(trie.autoComplete("ugf") == None)
        self.assertTrue(trie.autoComplete("ugg") == None)
        self.assertTrue(trie.autoComplete("ugh") == None)
        self.assertTrue(trie.autoComplete("ugi") == None)
        self.assertTrue(trie.autoComplete("ugj") == None)
        self.assertTrue(trie.autoComplete("ugk") == None)
        self.assertTrue(trie.autoComplete("ugl") == None)
        self.assertTrue(trie.autoComplete("ugm") == None)
        self.assertTrue(trie.autoComplete("ugn") == None)
        self.assertTrue(trie.autoComplete("ugo") == None)
        self.assertTrue(trie.autoComplete("ugp") == None)
        self.assertTrue(trie.autoComplete("ugq") == None)
        self.assertTrue(trie.autoComplete("ugr") == None)
        self.assertTrue(trie.autoComplete("ugs") == None)
        self.assertTrue(trie.autoComplete("ugt") == None)
        self.assertTrue(trie.autoComplete("ugu") == None)
        self.assertTrue(trie.autoComplete("ugv") == None)
        self.assertTrue(trie.autoComplete("ugw") == None)
        self.assertTrue(trie.autoComplete("ugx") == None)
        self.assertTrue(trie.autoComplete("ugy") == None)
        self.assertTrue(trie.autoComplete("ugz") == None)
        self.assertTrue(trie.autoComplete("uh") == None)
        self.assertTrue(trie.autoComplete("uha") == None)
        self.assertTrue(trie.autoComplete("uhb") == None)
        self.assertTrue(trie.autoComplete("uhc") == None)
        self.assertTrue(trie.autoComplete("uhd") == None)
        self.assertTrue(trie.autoComplete("uhe") == None)
        self.assertTrue(trie.autoComplete("uhf") == None)
        self.assertTrue(trie.autoComplete("uhg") == None)
        self.assertTrue(trie.autoComplete("uhh") == None)
        self.assertTrue(trie.autoComplete("uhi") == None)
        self.assertTrue(trie.autoComplete("uhj") == None)
        self.assertTrue(trie.autoComplete("uhk") == None)
        self.assertTrue(trie.autoComplete("uhl") == None)
        self.assertTrue(trie.autoComplete("uhm") == None)
        self.assertTrue(trie.autoComplete("uhn") == None)
        self.assertTrue(trie.autoComplete("uho") == None)
        self.assertTrue(trie.autoComplete("uhp") == None)
        self.assertTrue(trie.autoComplete("uhq") == None)
        self.assertTrue(trie.autoComplete("uhr") == None)
        self.assertTrue(trie.autoComplete("uhs") == None)
        self.assertTrue(trie.autoComplete("uht") == None)
        self.assertTrue(trie.autoComplete("uhu") == None)
        self.assertTrue(trie.autoComplete("uhv") == None)
        self.assertTrue(trie.autoComplete("uhw") == None)
        self.assertTrue(trie.autoComplete("uhx") == None)
        self.assertTrue(trie.autoComplete("uhy") == None)
        self.assertTrue(trie.autoComplete("uhz") == None)
        self.assertTrue(trie.autoComplete("ui") == None)
        self.assertTrue(trie.autoComplete("uia") == None)
        self.assertTrue(trie.autoComplete("uib") == None)
        self.assertTrue(trie.autoComplete("uic") == None)
        self.assertTrue(trie.autoComplete("uid") == None)
        self.assertTrue(trie.autoComplete("uie") == None)
        self.assertTrue(trie.autoComplete("uif") == None)
        self.assertTrue(trie.autoComplete("uig") == None)
        self.assertTrue(trie.autoComplete("uih") == None)
        self.assertTrue(trie.autoComplete("uii") == None)
        self.assertTrue(trie.autoComplete("uij") == None)
        self.assertTrue(trie.autoComplete("uik") == None)
        self.assertTrue(trie.autoComplete("uil") == None)
        self.assertTrue(trie.autoComplete("uim") == None)
        self.assertTrue(trie.autoComplete("uin") == None)
        self.assertTrue(trie.autoComplete("uio") == None)
        self.assertTrue(trie.autoComplete("uip") == None)
        self.assertTrue(trie.autoComplete("uiq") == None)
        self.assertTrue(trie.autoComplete("uir") == None)
        self.assertTrue(trie.autoComplete("uis") == None)
        self.assertTrue(trie.autoComplete("uit") == None)
        self.assertTrue(trie.autoComplete("uiu") == None)
        self.assertTrue(trie.autoComplete("uiv") == None)
        self.assertTrue(trie.autoComplete("uiw") == None)
        self.assertTrue(trie.autoComplete("uix") == None)
        self.assertTrue(trie.autoComplete("uiy") == None)
        self.assertTrue(trie.autoComplete("uiz") == None)
        self.assertTrue(trie.autoComplete("uj") == None)
        self.assertTrue(trie.autoComplete("uja") == None)
        self.assertTrue(trie.autoComplete("ujb") == None)
        self.assertTrue(trie.autoComplete("ujc") == None)
        self.assertTrue(trie.autoComplete("ujd") == None)
        self.assertTrue(trie.autoComplete("uje") == None)
        self.assertTrue(trie.autoComplete("ujf") == None)
        self.assertTrue(trie.autoComplete("ujg") == None)
        self.assertTrue(trie.autoComplete("ujh") == None)
        self.assertTrue(trie.autoComplete("uji") == None)
        self.assertTrue(trie.autoComplete("ujj") == None)
        self.assertTrue(trie.autoComplete("ujk") == None)
        self.assertTrue(trie.autoComplete("ujl") == None)
        self.assertTrue(trie.autoComplete("ujm") == None)
        self.assertTrue(trie.autoComplete("ujn") == None)
        self.assertTrue(trie.autoComplete("ujo") == None)
        self.assertTrue(trie.autoComplete("ujp") == None)
        self.assertTrue(trie.autoComplete("ujq") == None)
        self.assertTrue(trie.autoComplete("ujr") == None)
        self.assertTrue(trie.autoComplete("ujs") == None)
        self.assertTrue(trie.autoComplete("ujt") == None)
        self.assertTrue(trie.autoComplete("uju") == None)
        self.assertTrue(trie.autoComplete("ujv") == None)
        self.assertTrue(trie.autoComplete("ujw") == None)
        self.assertTrue(trie.autoComplete("ujx") == None)
        self.assertTrue(trie.autoComplete("ujy") == None)
        self.assertTrue(trie.autoComplete("ujz") == None)
        self.assertTrue(trie.autoComplete("uk") == None)
        self.assertTrue(trie.autoComplete("uka") == None)
        self.assertTrue(trie.autoComplete("ukb") == None)
        self.assertTrue(trie.autoComplete("ukc") == None)
        self.assertTrue(trie.autoComplete("ukd") == None)
        self.assertTrue(trie.autoComplete("uke") == None)
        self.assertTrue(trie.autoComplete("ukf") == None)
        self.assertTrue(trie.autoComplete("ukg") == None)
        self.assertTrue(trie.autoComplete("ukh") == None)
        self.assertTrue(trie.autoComplete("uki") == None)
        self.assertTrue(trie.autoComplete("ukj") == None)
        self.assertTrue(trie.autoComplete("ukk") == None)
        self.assertTrue(trie.autoComplete("ukl") == None)
        self.assertTrue(trie.autoComplete("ukm") == None)
        self.assertTrue(trie.autoComplete("ukn") == None)
        self.assertTrue(trie.autoComplete("uko") == None)
        self.assertTrue(trie.autoComplete("ukp") == None)
        self.assertTrue(trie.autoComplete("ukq") == None)
        self.assertTrue(trie.autoComplete("ukr") == None)
        self.assertTrue(trie.autoComplete("uks") == None)
        self.assertTrue(trie.autoComplete("ukt") == None)
        self.assertTrue(trie.autoComplete("uku") == None)
        self.assertTrue(trie.autoComplete("ukv") == None)
        self.assertTrue(trie.autoComplete("ukw") == None)
        self.assertTrue(trie.autoComplete("ukx") == None)
        self.assertTrue(trie.autoComplete("uky") == None)
        self.assertTrue(trie.autoComplete("ukz") == None)
        self.assertTrue(trie.autoComplete("ul") == None)
        self.assertTrue(trie.autoComplete("ula") == None)
        self.assertTrue(trie.autoComplete("ulb") == None)
        self.assertTrue(trie.autoComplete("ulc") == None)
        self.assertTrue(trie.autoComplete("uld") == None)
        self.assertTrue(trie.autoComplete("ule") == None)
        self.assertTrue(trie.autoComplete("ulf") == None)
        self.assertTrue(trie.autoComplete("ulg") == None)
        self.assertTrue(trie.autoComplete("ulh") == None)
        self.assertTrue(trie.autoComplete("uli") == None)
        self.assertTrue(trie.autoComplete("ulj") == None)
        self.assertTrue(trie.autoComplete("ulk") == None)
        self.assertTrue(trie.autoComplete("ull") == None)
        self.assertTrue(trie.autoComplete("ulm") == None)
        self.assertTrue(trie.autoComplete("uln") == None)
        self.assertTrue(trie.autoComplete("ulo") == None)
        self.assertTrue(trie.autoComplete("ulp") == None)
        self.assertTrue(trie.autoComplete("ulq") == None)
        self.assertTrue(trie.autoComplete("ulr") == None)
        self.assertTrue(trie.autoComplete("uls") == None)
        self.assertTrue(trie.autoComplete("ult") == None)
        self.assertTrue(trie.autoComplete("ulu") == None)
        self.assertTrue(trie.autoComplete("ulv") == None)
        self.assertTrue(trie.autoComplete("ulw") == None)
        self.assertTrue(trie.autoComplete("ulx") == None)
        self.assertTrue(trie.autoComplete("uly") == None)
        self.assertTrue(trie.autoComplete("ulz") == None)
        self.assertTrue(trie.autoComplete("um") == None)
        self.assertTrue(trie.autoComplete("uma") == None)
        self.assertTrue(trie.autoComplete("umb") == None)
        self.assertTrue(trie.autoComplete("umc") == None)
        self.assertTrue(trie.autoComplete("umd") == None)
        self.assertTrue(trie.autoComplete("ume") == None)
        self.assertTrue(trie.autoComplete("umf") == None)
        self.assertTrue(trie.autoComplete("umg") == None)
        self.assertTrue(trie.autoComplete("umh") == None)
        self.assertTrue(trie.autoComplete("umi") == None)
        self.assertTrue(trie.autoComplete("umj") == None)
        self.assertTrue(trie.autoComplete("umk") == None)
        self.assertTrue(trie.autoComplete("uml") == None)
        self.assertTrue(trie.autoComplete("umm") == None)
        self.assertTrue(trie.autoComplete("umn") == None)
        self.assertTrue(trie.autoComplete("umo") == None)
        self.assertTrue(trie.autoComplete("ump") == None)
        self.assertTrue(trie.autoComplete("umq") == None)
        self.assertTrue(trie.autoComplete("umr") == None)
        self.assertTrue(trie.autoComplete("ums") == None)
        self.assertTrue(trie.autoComplete("umt") == None)
        self.assertTrue(trie.autoComplete("umu") == None)
        self.assertTrue(trie.autoComplete("umv") == None)
        self.assertTrue(trie.autoComplete("umw") == None)
        self.assertTrue(trie.autoComplete("umx") == None)
        self.assertTrue(trie.autoComplete("umy") == None)
        self.assertTrue(trie.autoComplete("umz") == None)
        self.assertTrue(trie.autoComplete("un") == "united")
        self.assertTrue(trie.autoComplete("una") == "unable")
        self.assertTrue(trie.autoComplete("unab") == "unable")
        self.assertTrue(trie.autoComplete("unabl") == "unable")
        self.assertTrue(trie.autoComplete("unable") == "unable")
        self.assertTrue(trie.autoComplete("unb") == None)
        self.assertTrue(trie.autoComplete("unc") == None)
        self.assertTrue(trie.autoComplete("und") == "under")
        self.assertTrue(trie.autoComplete("unde") == "under")
        self.assertTrue(trie.autoComplete("under") == "under")
        self.assertTrue(trie.autoComplete("une") == None)
        self.assertTrue(trie.autoComplete("unf") == None)
        self.assertTrue(trie.autoComplete("ung") == None)
        self.assertTrue(trie.autoComplete("unh") == None)
        self.assertTrue(trie.autoComplete("uni") == "united")
        self.assertTrue(trie.autoComplete("unif") == "uniform")
        self.assertTrue(trie.autoComplete("unifo") == "uniform")
        self.assertTrue(trie.autoComplete("unifor") == "uniform")
        self.assertTrue(trie.autoComplete("uniform") == "uniform")
        self.assertTrue(trie.autoComplete("unio") == "union")
        self.assertTrue(trie.autoComplete("union") == "union")
        self.assertTrue(trie.autoComplete("unit") == "united")
        self.assertTrue(trie.autoComplete("unite") == "united")
        self.assertTrue(trie.autoComplete("united") == "united")
        self.assertTrue(trie.autoComplete("unj") == None)
        self.assertTrue(trie.autoComplete("unk") == None)
        self.assertTrue(trie.autoComplete("unl") == "unless")
        self.assertTrue(trie.autoComplete("unle") == "unless")
        self.assertTrue(trie.autoComplete("unles") == "unless")
        self.assertTrue(trie.autoComplete("unless") == "unless")
        self.assertTrue(trie.autoComplete("unm") == None)
        self.assertTrue(trie.autoComplete("unn") == None)
        self.assertTrue(trie.autoComplete("uno") == None)
        self.assertTrue(trie.autoComplete("unp") == None)
        self.assertTrue(trie.autoComplete("unq") == None)
        self.assertTrue(trie.autoComplete("unr") == "unreasonable")
        self.assertTrue(trie.autoComplete("unre") == "unreasonable")
        self.assertTrue(trie.autoComplete("unrea") == "unreasonable")
        self.assertTrue(trie.autoComplete("unreas") == "unreasonable")
        self.assertTrue(trie.autoComplete("unreaso") == "unreasonable")
        self.assertTrue(trie.autoComplete("unreason") == "unreasonable")
        self.assertTrue(trie.autoComplete("unreasona") == "unreasonable")
        self.assertTrue(trie.autoComplete("unreasonab") == "unreasonable")
        self.assertTrue(trie.autoComplete("unreasonabl") == "unreasonable")
        self.assertTrue(trie.autoComplete("unreasonable") == "unreasonable")
        self.assertTrue(trie.autoComplete("uns") == None)
        self.assertTrue(trie.autoComplete("unt") == "until")
        self.assertTrue(trie.autoComplete("unti") == "until")
        self.assertTrue(trie.autoComplete("until") == "until")
        self.assertTrue(trie.autoComplete("unu") == "unusual")
        self.assertTrue(trie.autoComplete("unus") == "unusual")
        self.assertTrue(trie.autoComplete("unusu") == "unusual")
        self.assertTrue(trie.autoComplete("unusua") == "unusual")
        self.assertTrue(trie.autoComplete("unusual") == "unusual")
        self.assertTrue(trie.autoComplete("unv") == None)
        self.assertTrue(trie.autoComplete("unw") == None)
        self.assertTrue(trie.autoComplete("unx") == None)
        self.assertTrue(trie.autoComplete("uny") == None)
        self.assertTrue(trie.autoComplete("unz") == None)
        self.assertTrue(trie.autoComplete("uo") == None)
        self.assertTrue(trie.autoComplete("uoa") == None)
        self.assertTrue(trie.autoComplete("uob") == None)
        self.assertTrue(trie.autoComplete("uoc") == None)
        self.assertTrue(trie.autoComplete("uod") == None)
        self.assertTrue(trie.autoComplete("uoe") == None)
        self.assertTrue(trie.autoComplete("uof") == None)
        self.assertTrue(trie.autoComplete("uog") == None)
        self.assertTrue(trie.autoComplete("uoh") == None)
        self.assertTrue(trie.autoComplete("uoi") == None)
        self.assertTrue(trie.autoComplete("uoj") == None)
        self.assertTrue(trie.autoComplete("uok") == None)
        self.assertTrue(trie.autoComplete("uol") == None)
        self.assertTrue(trie.autoComplete("uom") == None)
        self.assertTrue(trie.autoComplete("uon") == None)
        self.assertTrue(trie.autoComplete("uoo") == None)
        self.assertTrue(trie.autoComplete("uop") == None)
        self.assertTrue(trie.autoComplete("uoq") == None)
        self.assertTrue(trie.autoComplete("uor") == None)
        self.assertTrue(trie.autoComplete("uos") == None)
        self.assertTrue(trie.autoComplete("uot") == None)
        self.assertTrue(trie.autoComplete("uou") == None)
        self.assertTrue(trie.autoComplete("uov") == None)
        self.assertTrue(trie.autoComplete("uow") == None)
        self.assertTrue(trie.autoComplete("uox") == None)
        self.assertTrue(trie.autoComplete("uoy") == None)
        self.assertTrue(trie.autoComplete("uoz") == None)
        self.assertTrue(trie.autoComplete("up") == "upon")
        self.assertTrue(trie.autoComplete("upa") == None)
        self.assertTrue(trie.autoComplete("upb") == None)
        self.assertTrue(trie.autoComplete("upc") == None)
        self.assertTrue(trie.autoComplete("upd") == None)
        self.assertTrue(trie.autoComplete("upe") == None)
        self.assertTrue(trie.autoComplete("upf") == None)
        self.assertTrue(trie.autoComplete("upg") == None)
        self.assertTrue(trie.autoComplete("uph") == None)
        self.assertTrue(trie.autoComplete("upi") == None)
        self.assertTrue(trie.autoComplete("upj") == None)
        self.assertTrue(trie.autoComplete("upk") == None)
        self.assertTrue(trie.autoComplete("upl") == None)
        self.assertTrue(trie.autoComplete("upm") == None)
        self.assertTrue(trie.autoComplete("upn") == None)
        self.assertTrue(trie.autoComplete("upo") == "upon")
        self.assertTrue(trie.autoComplete("upon") == "upon")
        self.assertTrue(trie.autoComplete("upp") == None)
        self.assertTrue(trie.autoComplete("upq") == None)
        self.assertTrue(trie.autoComplete("upr") == None)
        self.assertTrue(trie.autoComplete("ups") == None)
        self.assertTrue(trie.autoComplete("upt") == None)
        self.assertTrue(trie.autoComplete("upu") == None)
        self.assertTrue(trie.autoComplete("upv") == None)
        self.assertTrue(trie.autoComplete("upw") == None)
        self.assertTrue(trie.autoComplete("upx") == None)
        self.assertTrue(trie.autoComplete("upy") == None)
        self.assertTrue(trie.autoComplete("upz") == None)
        self.assertTrue(trie.autoComplete("uq") == None)
        self.assertTrue(trie.autoComplete("uqa") == None)
        self.assertTrue(trie.autoComplete("uqb") == None)
        self.assertTrue(trie.autoComplete("uqc") == None)
        self.assertTrue(trie.autoComplete("uqd") == None)
        self.assertTrue(trie.autoComplete("uqe") == None)
        self.assertTrue(trie.autoComplete("uqf") == None)
        self.assertTrue(trie.autoComplete("uqg") == None)
        self.assertTrue(trie.autoComplete("uqh") == None)
        self.assertTrue(trie.autoComplete("uqi") == None)
        self.assertTrue(trie.autoComplete("uqj") == None)
        self.assertTrue(trie.autoComplete("uqk") == None)
        self.assertTrue(trie.autoComplete("uql") == None)
        self.assertTrue(trie.autoComplete("uqm") == None)
        self.assertTrue(trie.autoComplete("uqn") == None)
        self.assertTrue(trie.autoComplete("uqo") == None)
        self.assertTrue(trie.autoComplete("uqp") == None)
        self.assertTrue(trie.autoComplete("uqq") == None)
        self.assertTrue(trie.autoComplete("uqr") == None)
        self.assertTrue(trie.autoComplete("uqs") == None)
        self.assertTrue(trie.autoComplete("uqt") == None)
        self.assertTrue(trie.autoComplete("uqu") == None)
        self.assertTrue(trie.autoComplete("uqv") == None)
        self.assertTrue(trie.autoComplete("uqw") == None)
        self.assertTrue(trie.autoComplete("uqx") == None)
        self.assertTrue(trie.autoComplete("uqy") == None)
        self.assertTrue(trie.autoComplete("uqz") == None)
        self.assertTrue(trie.autoComplete("ur") == None)
        self.assertTrue(trie.autoComplete("ura") == None)
        self.assertTrue(trie.autoComplete("urb") == None)
        self.assertTrue(trie.autoComplete("urc") == None)
        self.assertTrue(trie.autoComplete("urd") == None)
        self.assertTrue(trie.autoComplete("ure") == None)
        self.assertTrue(trie.autoComplete("urf") == None)
        self.assertTrue(trie.autoComplete("urg") == None)
        self.assertTrue(trie.autoComplete("urh") == None)
        self.assertTrue(trie.autoComplete("uri") == None)
        self.assertTrue(trie.autoComplete("urj") == None)
        self.assertTrue(trie.autoComplete("urk") == None)
        self.assertTrue(trie.autoComplete("url") == None)
        self.assertTrue(trie.autoComplete("urm") == None)
        self.assertTrue(trie.autoComplete("urn") == None)
        self.assertTrue(trie.autoComplete("uro") == None)
        self.assertTrue(trie.autoComplete("urp") == None)
        self.assertTrue(trie.autoComplete("urq") == None)
        self.assertTrue(trie.autoComplete("urr") == None)
        self.assertTrue(trie.autoComplete("urs") == None)
        self.assertTrue(trie.autoComplete("urt") == None)
        self.assertTrue(trie.autoComplete("uru") == None)
        self.assertTrue(trie.autoComplete("urv") == None)
        self.assertTrue(trie.autoComplete("urw") == None)
        self.assertTrue(trie.autoComplete("urx") == None)
        self.assertTrue(trie.autoComplete("ury") == None)
        self.assertTrue(trie.autoComplete("urz") == None)
        self.assertTrue(trie.autoComplete("us") == "use")
        self.assertTrue(trie.autoComplete("usa") == None)
        self.assertTrue(trie.autoComplete("usb") == None)
        self.assertTrue(trie.autoComplete("usc") == None)
        self.assertTrue(trie.autoComplete("usd") == None)
        self.assertTrue(trie.autoComplete("use") == "use")
        self.assertTrue(trie.autoComplete("usef") == "useful")
        self.assertTrue(trie.autoComplete("usefu") == "useful")
        self.assertTrue(trie.autoComplete("useful") == "useful")
        self.assertTrue(trie.autoComplete("usf") == None)
        self.assertTrue(trie.autoComplete("usg") == None)
        self.assertTrue(trie.autoComplete("ush") == None)
        self.assertTrue(trie.autoComplete("usi") == None)
        self.assertTrue(trie.autoComplete("usj") == None)
        self.assertTrue(trie.autoComplete("usk") == None)
        self.assertTrue(trie.autoComplete("usl") == None)
        self.assertTrue(trie.autoComplete("usm") == None)
        self.assertTrue(trie.autoComplete("usn") == None)
        self.assertTrue(trie.autoComplete("uso") == None)
        self.assertTrue(trie.autoComplete("usp") == None)
        self.assertTrue(trie.autoComplete("usq") == None)
        self.assertTrue(trie.autoComplete("usr") == None)
        self.assertTrue(trie.autoComplete("uss") == None)
        self.assertTrue(trie.autoComplete("ust") == None)
        self.assertTrue(trie.autoComplete("usu") == None)
        self.assertTrue(trie.autoComplete("usv") == None)
        self.assertTrue(trie.autoComplete("usw") == None)
        self.assertTrue(trie.autoComplete("usx") == None)
        self.assertTrue(trie.autoComplete("usy") == None)
        self.assertTrue(trie.autoComplete("usz") == None)
        self.assertTrue(trie.autoComplete("ut") == None)
        self.assertTrue(trie.autoComplete("uta") == None)
        self.assertTrue(trie.autoComplete("utb") == None)
        self.assertTrue(trie.autoComplete("utc") == None)
        self.assertTrue(trie.autoComplete("utd") == None)
        self.assertTrue(trie.autoComplete("ute") == None)
        self.assertTrue(trie.autoComplete("utf") == None)
        self.assertTrue(trie.autoComplete("utg") == None)
        self.assertTrue(trie.autoComplete("uth") == None)
        self.assertTrue(trie.autoComplete("uti") == None)
        self.assertTrue(trie.autoComplete("utj") == None)
        self.assertTrue(trie.autoComplete("utk") == None)
        self.assertTrue(trie.autoComplete("utl") == None)
        self.assertTrue(trie.autoComplete("utm") == None)
        self.assertTrue(trie.autoComplete("utn") == None)
        self.assertTrue(trie.autoComplete("uto") == None)
        self.assertTrue(trie.autoComplete("utp") == None)
        self.assertTrue(trie.autoComplete("utq") == None)
        self.assertTrue(trie.autoComplete("utr") == None)
        self.assertTrue(trie.autoComplete("uts") == None)
        self.assertTrue(trie.autoComplete("utt") == None)
        self.assertTrue(trie.autoComplete("utu") == None)
        self.assertTrue(trie.autoComplete("utv") == None)
        self.assertTrue(trie.autoComplete("utw") == None)
        self.assertTrue(trie.autoComplete("utx") == None)
        self.assertTrue(trie.autoComplete("uty") == None)
        self.assertTrue(trie.autoComplete("utz") == None)
        self.assertTrue(trie.autoComplete("uu") == None)
        self.assertTrue(trie.autoComplete("uua") == None)
        self.assertTrue(trie.autoComplete("uub") == None)
        self.assertTrue(trie.autoComplete("uuc") == None)
        self.assertTrue(trie.autoComplete("uud") == None)
        self.assertTrue(trie.autoComplete("uue") == None)
        self.assertTrue(trie.autoComplete("uuf") == None)
        self.assertTrue(trie.autoComplete("uug") == None)
        self.assertTrue(trie.autoComplete("uuh") == None)
        self.assertTrue(trie.autoComplete("uui") == None)
        self.assertTrue(trie.autoComplete("uuj") == None)
        self.assertTrue(trie.autoComplete("uuk") == None)
        self.assertTrue(trie.autoComplete("uul") == None)
        self.assertTrue(trie.autoComplete("uum") == None)
        self.assertTrue(trie.autoComplete("uun") == None)
        self.assertTrue(trie.autoComplete("uuo") == None)
        self.assertTrue(trie.autoComplete("uup") == None)
        self.assertTrue(trie.autoComplete("uuq") == None)
        self.assertTrue(trie.autoComplete("uur") == None)
        self.assertTrue(trie.autoComplete("uus") == None)
        self.assertTrue(trie.autoComplete("uut") == None)
        self.assertTrue(trie.autoComplete("uuu") == None)
        self.assertTrue(trie.autoComplete("uuv") == None)
        self.assertTrue(trie.autoComplete("uuw") == None)
        self.assertTrue(trie.autoComplete("uux") == None)
        self.assertTrue(trie.autoComplete("uuy") == None)
        self.assertTrue(trie.autoComplete("uuz") == None)
        self.assertTrue(trie.autoComplete("uv") == None)
        self.assertTrue(trie.autoComplete("uva") == None)
        self.assertTrue(trie.autoComplete("uvb") == None)
        self.assertTrue(trie.autoComplete("uvc") == None)
        self.assertTrue(trie.autoComplete("uvd") == None)
        self.assertTrue(trie.autoComplete("uve") == None)
        self.assertTrue(trie.autoComplete("uvf") == None)
        self.assertTrue(trie.autoComplete("uvg") == None)
        self.assertTrue(trie.autoComplete("uvh") == None)
        self.assertTrue(trie.autoComplete("uvi") == None)
        self.assertTrue(trie.autoComplete("uvj") == None)
        self.assertTrue(trie.autoComplete("uvk") == None)
        self.assertTrue(trie.autoComplete("uvl") == None)
        self.assertTrue(trie.autoComplete("uvm") == None)
        self.assertTrue(trie.autoComplete("uvn") == None)
        self.assertTrue(trie.autoComplete("uvo") == None)
        self.assertTrue(trie.autoComplete("uvp") == None)
        self.assertTrue(trie.autoComplete("uvq") == None)
        self.assertTrue(trie.autoComplete("uvr") == None)
        self.assertTrue(trie.autoComplete("uvs") == None)
        self.assertTrue(trie.autoComplete("uvt") == None)
        self.assertTrue(trie.autoComplete("uvu") == None)
        self.assertTrue(trie.autoComplete("uvv") == None)
        self.assertTrue(trie.autoComplete("uvw") == None)
        self.assertTrue(trie.autoComplete("uvx") == None)
        self.assertTrue(trie.autoComplete("uvy") == None)
        self.assertTrue(trie.autoComplete("uvz") == None)
        self.assertTrue(trie.autoComplete("uw") == None)
        self.assertTrue(trie.autoComplete("uwa") == None)
        self.assertTrue(trie.autoComplete("uwb") == None)
        self.assertTrue(trie.autoComplete("uwc") == None)
        self.assertTrue(trie.autoComplete("uwd") == None)
        self.assertTrue(trie.autoComplete("uwe") == None)
        self.assertTrue(trie.autoComplete("uwf") == None)
        self.assertTrue(trie.autoComplete("uwg") == None)
        self.assertTrue(trie.autoComplete("uwh") == None)
        self.assertTrue(trie.autoComplete("uwi") == None)
        self.assertTrue(trie.autoComplete("uwj") == None)
        self.assertTrue(trie.autoComplete("uwk") == None)
        self.assertTrue(trie.autoComplete("uwl") == None)
        self.assertTrue(trie.autoComplete("uwm") == None)
        self.assertTrue(trie.autoComplete("uwn") == None)
        self.assertTrue(trie.autoComplete("uwo") == None)
        self.assertTrue(trie.autoComplete("uwp") == None)
        self.assertTrue(trie.autoComplete("uwq") == None)
        self.assertTrue(trie.autoComplete("uwr") == None)
        self.assertTrue(trie.autoComplete("uws") == None)
        self.assertTrue(trie.autoComplete("uwt") == None)
        self.assertTrue(trie.autoComplete("uwu") == None)
        self.assertTrue(trie.autoComplete("uwv") == None)
        self.assertTrue(trie.autoComplete("uww") == None)
        self.assertTrue(trie.autoComplete("uwx") == None)
        self.assertTrue(trie.autoComplete("uwy") == None)
        self.assertTrue(trie.autoComplete("uwz") == None)
        self.assertTrue(trie.autoComplete("ux") == None)
        self.assertTrue(trie.autoComplete("uxa") == None)
        self.assertTrue(trie.autoComplete("uxb") == None)
        self.assertTrue(trie.autoComplete("uxc") == None)
        self.assertTrue(trie.autoComplete("uxd") == None)
        self.assertTrue(trie.autoComplete("uxe") == None)
        self.assertTrue(trie.autoComplete("uxf") == None)
        self.assertTrue(trie.autoComplete("uxg") == None)
        self.assertTrue(trie.autoComplete("uxh") == None)
        self.assertTrue(trie.autoComplete("uxi") == None)
        self.assertTrue(trie.autoComplete("uxj") == None)
        self.assertTrue(trie.autoComplete("uxk") == None)
        self.assertTrue(trie.autoComplete("uxl") == None)
        self.assertTrue(trie.autoComplete("uxm") == None)
        self.assertTrue(trie.autoComplete("uxn") == None)
        self.assertTrue(trie.autoComplete("uxo") == None)
        self.assertTrue(trie.autoComplete("uxp") == None)
        self.assertTrue(trie.autoComplete("uxq") == None)
        self.assertTrue(trie.autoComplete("uxr") == None)
        self.assertTrue(trie.autoComplete("uxs") == None)
        self.assertTrue(trie.autoComplete("uxt") == None)
        self.assertTrue(trie.autoComplete("uxu") == None)
        self.assertTrue(trie.autoComplete("uxv") == None)
        self.assertTrue(trie.autoComplete("uxw") == None)
        self.assertTrue(trie.autoComplete("uxx") == None)
        self.assertTrue(trie.autoComplete("uxy") == None)
        self.assertTrue(trie.autoComplete("uxz") == None)
        self.assertTrue(trie.autoComplete("uy") == None)
        self.assertTrue(trie.autoComplete("uya") == None)
        self.assertTrue(trie.autoComplete("uyb") == None)
        self.assertTrue(trie.autoComplete("uyc") == None)
        self.assertTrue(trie.autoComplete("uyd") == None)
        self.assertTrue(trie.autoComplete("uye") == None)
        self.assertTrue(trie.autoComplete("uyf") == None)
        self.assertTrue(trie.autoComplete("uyg") == None)
        self.assertTrue(trie.autoComplete("uyh") == None)
        self.assertTrue(trie.autoComplete("uyi") == None)
        self.assertTrue(trie.autoComplete("uyj") == None)
        self.assertTrue(trie.autoComplete("uyk") == None)
        self.assertTrue(trie.autoComplete("uyl") == None)
        self.assertTrue(trie.autoComplete("uym") == None)
        self.assertTrue(trie.autoComplete("uyn") == None)
        self.assertTrue(trie.autoComplete("uyo") == None)
        self.assertTrue(trie.autoComplete("uyp") == None)
        self.assertTrue(trie.autoComplete("uyq") == None)
        self.assertTrue(trie.autoComplete("uyr") == None)
        self.assertTrue(trie.autoComplete("uys") == None)
        self.assertTrue(trie.autoComplete("uyt") == None)
        self.assertTrue(trie.autoComplete("uyu") == None)
        self.assertTrue(trie.autoComplete("uyv") == None)
        self.assertTrue(trie.autoComplete("uyw") == None)
        self.assertTrue(trie.autoComplete("uyx") == None)
        self.assertTrue(trie.autoComplete("uyy") == None)
        self.assertTrue(trie.autoComplete("uyz") == None)
        self.assertTrue(trie.autoComplete("uz") == None)
        self.assertTrue(trie.autoComplete("uza") == None)
        self.assertTrue(trie.autoComplete("uzb") == None)
        self.assertTrue(trie.autoComplete("uzc") == None)
        self.assertTrue(trie.autoComplete("uzd") == None)
        self.assertTrue(trie.autoComplete("uze") == None)
        self.assertTrue(trie.autoComplete("uzf") == None)
        self.assertTrue(trie.autoComplete("uzg") == None)
        self.assertTrue(trie.autoComplete("uzh") == None)
        self.assertTrue(trie.autoComplete("uzi") == None)
        self.assertTrue(trie.autoComplete("uzj") == None)
        self.assertTrue(trie.autoComplete("uzk") == None)
        self.assertTrue(trie.autoComplete("uzl") == None)
        self.assertTrue(trie.autoComplete("uzm") == None)
        self.assertTrue(trie.autoComplete("uzn") == None)
        self.assertTrue(trie.autoComplete("uzo") == None)
        self.assertTrue(trie.autoComplete("uzp") == None)
        self.assertTrue(trie.autoComplete("uzq") == None)
        self.assertTrue(trie.autoComplete("uzr") == None)
        self.assertTrue(trie.autoComplete("uzs") == None)
        self.assertTrue(trie.autoComplete("uzt") == None)
        self.assertTrue(trie.autoComplete("uzu") == None)
        self.assertTrue(trie.autoComplete("uzv") == None)
        self.assertTrue(trie.autoComplete("uzw") == None)
        self.assertTrue(trie.autoComplete("uzx") == None)
        self.assertTrue(trie.autoComplete("uzy") == None)
        self.assertTrue(trie.autoComplete("uzz") == None)
        self.assertTrue(trie.autoComplete("v") == "vice")
        self.assertTrue(trie.autoComplete("va") == "vacancies")
        self.assertTrue(trie.autoComplete("vaa") == None)
        self.assertTrue(trie.autoComplete("vab") == None)
        self.assertTrue(trie.autoComplete("vac") == "vacancies")
        self.assertTrue(trie.autoComplete("vaca") == "vacancies")
        self.assertTrue(trie.autoComplete("vacan") == "vacancies")
        self.assertTrue(trie.autoComplete("vacanc") == "vacancies")
        self.assertTrue(trie.autoComplete("vacanci") == "vacancies")
        self.assertTrue(trie.autoComplete("vacancie") == "vacancies")
        self.assertTrue(trie.autoComplete("vacancies") == "vacancies")
        self.assertTrue(trie.autoComplete("vacancy") == "vacancy")
        self.assertTrue(trie.autoComplete("vacat") == "vacated")
        self.assertTrue(trie.autoComplete("vacate") == "vacated")
        self.assertTrue(trie.autoComplete("vacated") == "vacated")
        self.assertTrue(trie.autoComplete("vad") == None)
        self.assertTrue(trie.autoComplete("vae") == None)
        self.assertTrue(trie.autoComplete("vaf") == None)
        self.assertTrue(trie.autoComplete("vag") == None)
        self.assertTrue(trie.autoComplete("vah") == None)
        self.assertTrue(trie.autoComplete("vai") == None)
        self.assertTrue(trie.autoComplete("vaj") == None)
        self.assertTrue(trie.autoComplete("vak") == None)
        self.assertTrue(trie.autoComplete("val") == "valid")
        self.assertTrue(trie.autoComplete("vali") == "valid")
        self.assertTrue(trie.autoComplete("valid") == "valid")
        self.assertTrue(trie.autoComplete("validi") == "validity")
        self.assertTrue(trie.autoComplete("validit") == "validity")
        self.assertTrue(trie.autoComplete("validity") == "validity")
        self.assertTrue(trie.autoComplete("valu") == "value")
        self.assertTrue(trie.autoComplete("value") == "value")
        self.assertTrue(trie.autoComplete("vam") == None)
        self.assertTrue(trie.autoComplete("van") == None)
        self.assertTrue(trie.autoComplete("vao") == None)
        self.assertTrue(trie.autoComplete("vap") == None)
        self.assertTrue(trie.autoComplete("vaq") == None)
        self.assertTrue(trie.autoComplete("var") == "varying")
        self.assertTrue(trie.autoComplete("vary") == "varying")
        self.assertTrue(trie.autoComplete("varyi") == "varying")
        self.assertTrue(trie.autoComplete("varyin") == "varying")
        self.assertTrue(trie.autoComplete("varying") == "varying")
        self.assertTrue(trie.autoComplete("vas") == None)
        self.assertTrue(trie.autoComplete("vat") == None)
        self.assertTrue(trie.autoComplete("vau") == None)
        self.assertTrue(trie.autoComplete("vav") == None)
        self.assertTrue(trie.autoComplete("vaw") == None)
        self.assertTrue(trie.autoComplete("vax") == None)
        self.assertTrue(trie.autoComplete("vay") == None)
        self.assertTrue(trie.autoComplete("vaz") == None)
        self.assertTrue(trie.autoComplete("vb") == None)
        self.assertTrue(trie.autoComplete("vba") == None)
        self.assertTrue(trie.autoComplete("vbb") == None)
        self.assertTrue(trie.autoComplete("vbc") == None)
        self.assertTrue(trie.autoComplete("vbd") == None)
        self.assertTrue(trie.autoComplete("vbe") == None)
        self.assertTrue(trie.autoComplete("vbf") == None)
        self.assertTrue(trie.autoComplete("vbg") == None)
        self.assertTrue(trie.autoComplete("vbh") == None)
        self.assertTrue(trie.autoComplete("vbi") == None)
        self.assertTrue(trie.autoComplete("vbj") == None)
        self.assertTrue(trie.autoComplete("vbk") == None)
        self.assertTrue(trie.autoComplete("vbl") == None)
        self.assertTrue(trie.autoComplete("vbm") == None)
        self.assertTrue(trie.autoComplete("vbn") == None)
        self.assertTrue(trie.autoComplete("vbo") == None)
        self.assertTrue(trie.autoComplete("vbp") == None)
        self.assertTrue(trie.autoComplete("vbq") == None)
        self.assertTrue(trie.autoComplete("vbr") == None)
        self.assertTrue(trie.autoComplete("vbs") == None)
        self.assertTrue(trie.autoComplete("vbt") == None)
        self.assertTrue(trie.autoComplete("vbu") == None)
        self.assertTrue(trie.autoComplete("vbv") == None)
        self.assertTrue(trie.autoComplete("vbw") == None)
        self.assertTrue(trie.autoComplete("vbx") == None)
        self.assertTrue(trie.autoComplete("vby") == None)
        self.assertTrue(trie.autoComplete("vbz") == None)
        self.assertTrue(trie.autoComplete("vc") == None)
        self.assertTrue(trie.autoComplete("vca") == None)
        self.assertTrue(trie.autoComplete("vcb") == None)
        self.assertTrue(trie.autoComplete("vcc") == None)
        self.assertTrue(trie.autoComplete("vcd") == None)
        self.assertTrue(trie.autoComplete("vce") == None)
        self.assertTrue(trie.autoComplete("vcf") == None)
        self.assertTrue(trie.autoComplete("vcg") == None)
        self.assertTrue(trie.autoComplete("vch") == None)
        self.assertTrue(trie.autoComplete("vci") == None)
        self.assertTrue(trie.autoComplete("vcj") == None)
        self.assertTrue(trie.autoComplete("vck") == None)
        self.assertTrue(trie.autoComplete("vcl") == None)
        self.assertTrue(trie.autoComplete("vcm") == None)
        self.assertTrue(trie.autoComplete("vcn") == None)
        self.assertTrue(trie.autoComplete("vco") == None)
        self.assertTrue(trie.autoComplete("vcp") == None)
        self.assertTrue(trie.autoComplete("vcq") == None)
        self.assertTrue(trie.autoComplete("vcr") == None)
        self.assertTrue(trie.autoComplete("vcs") == None)
        self.assertTrue(trie.autoComplete("vct") == None)
        self.assertTrue(trie.autoComplete("vcu") == None)
        self.assertTrue(trie.autoComplete("vcv") == None)
        self.assertTrue(trie.autoComplete("vcw") == None)
        self.assertTrue(trie.autoComplete("vcx") == None)
        self.assertTrue(trie.autoComplete("vcy") == None)
        self.assertTrue(trie.autoComplete("vcz") == None)
        self.assertTrue(trie.autoComplete("vd") == None)
        self.assertTrue(trie.autoComplete("vda") == None)
        self.assertTrue(trie.autoComplete("vdb") == None)
        self.assertTrue(trie.autoComplete("vdc") == None)
        self.assertTrue(trie.autoComplete("vdd") == None)
        self.assertTrue(trie.autoComplete("vde") == None)
        self.assertTrue(trie.autoComplete("vdf") == None)
        self.assertTrue(trie.autoComplete("vdg") == None)
        self.assertTrue(trie.autoComplete("vdh") == None)
        self.assertTrue(trie.autoComplete("vdi") == None)
        self.assertTrue(trie.autoComplete("vdj") == None)
        self.assertTrue(trie.autoComplete("vdk") == None)
        self.assertTrue(trie.autoComplete("vdl") == None)
        self.assertTrue(trie.autoComplete("vdm") == None)
        self.assertTrue(trie.autoComplete("vdn") == None)
        self.assertTrue(trie.autoComplete("vdo") == None)
        self.assertTrue(trie.autoComplete("vdp") == None)
        self.assertTrue(trie.autoComplete("vdq") == None)
        self.assertTrue(trie.autoComplete("vdr") == None)
        self.assertTrue(trie.autoComplete("vds") == None)
        self.assertTrue(trie.autoComplete("vdt") == None)
        self.assertTrue(trie.autoComplete("vdu") == None)
        self.assertTrue(trie.autoComplete("vdv") == None)
        self.assertTrue(trie.autoComplete("vdw") == None)
        self.assertTrue(trie.autoComplete("vdx") == None)
        self.assertTrue(trie.autoComplete("vdy") == None)
        self.assertTrue(trie.autoComplete("vdz") == None)
        self.assertTrue(trie.autoComplete("ve") == "vested")
        self.assertTrue(trie.autoComplete("vea") == None)
        self.assertTrue(trie.autoComplete("veb") == None)
        self.assertTrue(trie.autoComplete("vec") == None)
        self.assertTrue(trie.autoComplete("ved") == None)
        self.assertTrue(trie.autoComplete("vee") == None)
        self.assertTrue(trie.autoComplete("vef") == None)
        self.assertTrue(trie.autoComplete("veg") == None)
        self.assertTrue(trie.autoComplete("veh") == None)
        self.assertTrue(trie.autoComplete("vei") == None)
        self.assertTrue(trie.autoComplete("vej") == None)
        self.assertTrue(trie.autoComplete("vek") == None)
        self.assertTrue(trie.autoComplete("vel") == None)
        self.assertTrue(trie.autoComplete("vem") == None)
        self.assertTrue(trie.autoComplete("ven") == None)
        self.assertTrue(trie.autoComplete("veo") == None)
        self.assertTrue(trie.autoComplete("vep") == None)
        self.assertTrue(trie.autoComplete("veq") == None)
        self.assertTrue(trie.autoComplete("ver") == None)
        self.assertTrue(trie.autoComplete("ves") == "vested")
        self.assertTrue(trie.autoComplete("vess") == "vessels")
        self.assertTrue(trie.autoComplete("vesse") == "vessels")
        self.assertTrue(trie.autoComplete("vessel") == "vessels")
        self.assertTrue(trie.autoComplete("vessels") == "vessels")
        self.assertTrue(trie.autoComplete("vest") == "vested")
        self.assertTrue(trie.autoComplete("veste") == "vested")
        self.assertTrue(trie.autoComplete("vested") == "vested")
        self.assertTrue(trie.autoComplete("vet") == None)
        self.assertTrue(trie.autoComplete("veu") == None)
        self.assertTrue(trie.autoComplete("vev") == None)
        self.assertTrue(trie.autoComplete("vew") == None)
        self.assertTrue(trie.autoComplete("vex") == None)
        self.assertTrue(trie.autoComplete("vey") == None)
        self.assertTrue(trie.autoComplete("vez") == None)
        self.assertTrue(trie.autoComplete("vf") == None)
        self.assertTrue(trie.autoComplete("vfa") == None)
        self.assertTrue(trie.autoComplete("vfb") == None)
        self.assertTrue(trie.autoComplete("vfc") == None)
        self.assertTrue(trie.autoComplete("vfd") == None)
        self.assertTrue(trie.autoComplete("vfe") == None)
        self.assertTrue(trie.autoComplete("vff") == None)
        self.assertTrue(trie.autoComplete("vfg") == None)
        self.assertTrue(trie.autoComplete("vfh") == None)
        self.assertTrue(trie.autoComplete("vfi") == None)
        self.assertTrue(trie.autoComplete("vfj") == None)
        self.assertTrue(trie.autoComplete("vfk") == None)
        self.assertTrue(trie.autoComplete("vfl") == None)
        self.assertTrue(trie.autoComplete("vfm") == None)
        self.assertTrue(trie.autoComplete("vfn") == None)
        self.assertTrue(trie.autoComplete("vfo") == None)
        self.assertTrue(trie.autoComplete("vfp") == None)
        self.assertTrue(trie.autoComplete("vfq") == None)
        self.assertTrue(trie.autoComplete("vfr") == None)
        self.assertTrue(trie.autoComplete("vfs") == None)
        self.assertTrue(trie.autoComplete("vft") == None)
        self.assertTrue(trie.autoComplete("vfu") == None)
        self.assertTrue(trie.autoComplete("vfv") == None)
        self.assertTrue(trie.autoComplete("vfw") == None)
        self.assertTrue(trie.autoComplete("vfx") == None)
        self.assertTrue(trie.autoComplete("vfy") == None)
        self.assertTrue(trie.autoComplete("vfz") == None)
        self.assertTrue(trie.autoComplete("vg") == None)
        self.assertTrue(trie.autoComplete("vga") == None)
        self.assertTrue(trie.autoComplete("vgb") == None)
        self.assertTrue(trie.autoComplete("vgc") == None)
        self.assertTrue(trie.autoComplete("vgd") == None)
        self.assertTrue(trie.autoComplete("vge") == None)
        self.assertTrue(trie.autoComplete("vgf") == None)
        self.assertTrue(trie.autoComplete("vgg") == None)
        self.assertTrue(trie.autoComplete("vgh") == None)
        self.assertTrue(trie.autoComplete("vgi") == None)
        self.assertTrue(trie.autoComplete("vgj") == None)
        self.assertTrue(trie.autoComplete("vgk") == None)
        self.assertTrue(trie.autoComplete("vgl") == None)
        self.assertTrue(trie.autoComplete("vgm") == None)
        self.assertTrue(trie.autoComplete("vgn") == None)
        self.assertTrue(trie.autoComplete("vgo") == None)
        self.assertTrue(trie.autoComplete("vgp") == None)
        self.assertTrue(trie.autoComplete("vgq") == None)
        self.assertTrue(trie.autoComplete("vgr") == None)
        self.assertTrue(trie.autoComplete("vgs") == None)
        self.assertTrue(trie.autoComplete("vgt") == None)
        self.assertTrue(trie.autoComplete("vgu") == None)
        self.assertTrue(trie.autoComplete("vgv") == None)
        self.assertTrue(trie.autoComplete("vgw") == None)
        self.assertTrue(trie.autoComplete("vgx") == None)
        self.assertTrue(trie.autoComplete("vgy") == None)
        self.assertTrue(trie.autoComplete("vgz") == None)
        self.assertTrue(trie.autoComplete("vh") == None)
        self.assertTrue(trie.autoComplete("vha") == None)
        self.assertTrue(trie.autoComplete("vhb") == None)
        self.assertTrue(trie.autoComplete("vhc") == None)
        self.assertTrue(trie.autoComplete("vhd") == None)
        self.assertTrue(trie.autoComplete("vhe") == None)
        self.assertTrue(trie.autoComplete("vhf") == None)
        self.assertTrue(trie.autoComplete("vhg") == None)
        self.assertTrue(trie.autoComplete("vhh") == None)
        self.assertTrue(trie.autoComplete("vhi") == None)
        self.assertTrue(trie.autoComplete("vhj") == None)
        self.assertTrue(trie.autoComplete("vhk") == None)
        self.assertTrue(trie.autoComplete("vhl") == None)
        self.assertTrue(trie.autoComplete("vhm") == None)
        self.assertTrue(trie.autoComplete("vhn") == None)
        self.assertTrue(trie.autoComplete("vho") == None)
        self.assertTrue(trie.autoComplete("vhp") == None)
        self.assertTrue(trie.autoComplete("vhq") == None)
        self.assertTrue(trie.autoComplete("vhr") == None)
        self.assertTrue(trie.autoComplete("vhs") == None)
        self.assertTrue(trie.autoComplete("vht") == None)
        self.assertTrue(trie.autoComplete("vhu") == None)
        self.assertTrue(trie.autoComplete("vhv") == None)
        self.assertTrue(trie.autoComplete("vhw") == None)
        self.assertTrue(trie.autoComplete("vhx") == None)
        self.assertTrue(trie.autoComplete("vhy") == None)
        self.assertTrue(trie.autoComplete("vhz") == None)
        self.assertTrue(trie.autoComplete("vi") == "vice")
        self.assertTrue(trie.autoComplete("via") == None)
        self.assertTrue(trie.autoComplete("vib") == None)
        self.assertTrue(trie.autoComplete("vic") == "vice")
        self.assertTrue(trie.autoComplete("vice") == "vice")
        self.assertTrue(trie.autoComplete("vid") == None)
        self.assertTrue(trie.autoComplete("vie") == None)
        self.assertTrue(trie.autoComplete("vif") == None)
        self.assertTrue(trie.autoComplete("vig") == None)
        self.assertTrue(trie.autoComplete("vih") == None)
        self.assertTrue(trie.autoComplete("vii") == None)
        self.assertTrue(trie.autoComplete("vij") == None)
        self.assertTrue(trie.autoComplete("vik") == None)
        self.assertTrue(trie.autoComplete("vil") == None)
        self.assertTrue(trie.autoComplete("vim") == None)
        self.assertTrue(trie.autoComplete("vin") == None)
        self.assertTrue(trie.autoComplete("vio") == "violated")
        self.assertTrue(trie.autoComplete("viol") == "violated")
        self.assertTrue(trie.autoComplete("viola") == "violated")
        self.assertTrue(trie.autoComplete("violat") == "violated")
        self.assertTrue(trie.autoComplete("violate") == "violated")
        self.assertTrue(trie.autoComplete("violated") == "violated")
        self.assertTrue(trie.autoComplete("violati") == "violation")
        self.assertTrue(trie.autoComplete("violatio") == "violation")
        self.assertTrue(trie.autoComplete("violation") == "violation")
        self.assertTrue(trie.autoComplete("viole") == "violence")
        self.assertTrue(trie.autoComplete("violen") == "violence")
        self.assertTrue(trie.autoComplete("violenc") == "violence")
        self.assertTrue(trie.autoComplete("violence") == "violence")
        self.assertTrue(trie.autoComplete("vip") == None)
        self.assertTrue(trie.autoComplete("viq") == None)
        self.assertTrue(trie.autoComplete("vir") == "virginia")
        self.assertTrue(trie.autoComplete("virg") == "virginia")
        self.assertTrue(trie.autoComplete("virgi") == "virginia")
        self.assertTrue(trie.autoComplete("virgin") == "virginia")
        self.assertTrue(trie.autoComplete("virgini") == "virginia")
        self.assertTrue(trie.autoComplete("virginia") == "virginia")
        self.assertTrue(trie.autoComplete("vis") == None)
        self.assertTrue(trie.autoComplete("vit") == None)
        self.assertTrue(trie.autoComplete("viu") == None)
        self.assertTrue(trie.autoComplete("viv") == None)
        self.assertTrue(trie.autoComplete("viw") == None)
        self.assertTrue(trie.autoComplete("vix") == None)
        self.assertTrue(trie.autoComplete("viy") == None)
        self.assertTrue(trie.autoComplete("viz") == None)
        self.assertTrue(trie.autoComplete("vj") == None)
        self.assertTrue(trie.autoComplete("vja") == None)
        self.assertTrue(trie.autoComplete("vjb") == None)
        self.assertTrue(trie.autoComplete("vjc") == None)
        self.assertTrue(trie.autoComplete("vjd") == None)
        self.assertTrue(trie.autoComplete("vje") == None)
        self.assertTrue(trie.autoComplete("vjf") == None)
        self.assertTrue(trie.autoComplete("vjg") == None)
        self.assertTrue(trie.autoComplete("vjh") == None)
        self.assertTrue(trie.autoComplete("vji") == None)
        self.assertTrue(trie.autoComplete("vjj") == None)
        self.assertTrue(trie.autoComplete("vjk") == None)
        self.assertTrue(trie.autoComplete("vjl") == None)
        self.assertTrue(trie.autoComplete("vjm") == None)
        self.assertTrue(trie.autoComplete("vjn") == None)
        self.assertTrue(trie.autoComplete("vjo") == None)
        self.assertTrue(trie.autoComplete("vjp") == None)
        self.assertTrue(trie.autoComplete("vjq") == None)
        self.assertTrue(trie.autoComplete("vjr") == None)
        self.assertTrue(trie.autoComplete("vjs") == None)
        self.assertTrue(trie.autoComplete("vjt") == None)
        self.assertTrue(trie.autoComplete("vju") == None)
        self.assertTrue(trie.autoComplete("vjv") == None)
        self.assertTrue(trie.autoComplete("vjw") == None)
        self.assertTrue(trie.autoComplete("vjx") == None)
        self.assertTrue(trie.autoComplete("vjy") == None)
        self.assertTrue(trie.autoComplete("vjz") == None)
        self.assertTrue(trie.autoComplete("vk") == None)
        self.assertTrue(trie.autoComplete("vka") == None)
        self.assertTrue(trie.autoComplete("vkb") == None)
        self.assertTrue(trie.autoComplete("vkc") == None)
        self.assertTrue(trie.autoComplete("vkd") == None)
        self.assertTrue(trie.autoComplete("vke") == None)
        self.assertTrue(trie.autoComplete("vkf") == None)
        self.assertTrue(trie.autoComplete("vkg") == None)
        self.assertTrue(trie.autoComplete("vkh") == None)
        self.assertTrue(trie.autoComplete("vki") == None)
        self.assertTrue(trie.autoComplete("vkj") == None)
        self.assertTrue(trie.autoComplete("vkk") == None)
        self.assertTrue(trie.autoComplete("vkl") == None)
        self.assertTrue(trie.autoComplete("vkm") == None)
        self.assertTrue(trie.autoComplete("vkn") == None)
        self.assertTrue(trie.autoComplete("vko") == None)
        self.assertTrue(trie.autoComplete("vkp") == None)
        self.assertTrue(trie.autoComplete("vkq") == None)
        self.assertTrue(trie.autoComplete("vkr") == None)
        self.assertTrue(trie.autoComplete("vks") == None)
        self.assertTrue(trie.autoComplete("vkt") == None)
        self.assertTrue(trie.autoComplete("vku") == None)
        self.assertTrue(trie.autoComplete("vkv") == None)
        self.assertTrue(trie.autoComplete("vkw") == None)
        self.assertTrue(trie.autoComplete("vkx") == None)
        self.assertTrue(trie.autoComplete("vky") == None)
        self.assertTrue(trie.autoComplete("vkz") == None)
        self.assertTrue(trie.autoComplete("vl") == None)
        self.assertTrue(trie.autoComplete("vla") == None)
        self.assertTrue(trie.autoComplete("vlb") == None)
        self.assertTrue(trie.autoComplete("vlc") == None)
        self.assertTrue(trie.autoComplete("vld") == None)
        self.assertTrue(trie.autoComplete("vle") == None)
        self.assertTrue(trie.autoComplete("vlf") == None)
        self.assertTrue(trie.autoComplete("vlg") == None)
        self.assertTrue(trie.autoComplete("vlh") == None)
        self.assertTrue(trie.autoComplete("vli") == None)
        self.assertTrue(trie.autoComplete("vlj") == None)
        self.assertTrue(trie.autoComplete("vlk") == None)
        self.assertTrue(trie.autoComplete("vll") == None)
        self.assertTrue(trie.autoComplete("vlm") == None)
        self.assertTrue(trie.autoComplete("vln") == None)
        self.assertTrue(trie.autoComplete("vlo") == None)
        self.assertTrue(trie.autoComplete("vlp") == None)
        self.assertTrue(trie.autoComplete("vlq") == None)
        self.assertTrue(trie.autoComplete("vlr") == None)
        self.assertTrue(trie.autoComplete("vls") == None)
        self.assertTrue(trie.autoComplete("vlt") == None)
        self.assertTrue(trie.autoComplete("vlu") == None)
        self.assertTrue(trie.autoComplete("vlv") == None)
        self.assertTrue(trie.autoComplete("vlw") == None)
        self.assertTrue(trie.autoComplete("vlx") == None)
        self.assertTrue(trie.autoComplete("vly") == None)
        self.assertTrue(trie.autoComplete("vlz") == None)
        self.assertTrue(trie.autoComplete("vm") == None)
        self.assertTrue(trie.autoComplete("vma") == None)
        self.assertTrue(trie.autoComplete("vmb") == None)
        self.assertTrue(trie.autoComplete("vmc") == None)
        self.assertTrue(trie.autoComplete("vmd") == None)
        self.assertTrue(trie.autoComplete("vme") == None)
        self.assertTrue(trie.autoComplete("vmf") == None)
        self.assertTrue(trie.autoComplete("vmg") == None)
        self.assertTrue(trie.autoComplete("vmh") == None)
        self.assertTrue(trie.autoComplete("vmi") == None)
        self.assertTrue(trie.autoComplete("vmj") == None)
        self.assertTrue(trie.autoComplete("vmk") == None)
        self.assertTrue(trie.autoComplete("vml") == None)
        self.assertTrue(trie.autoComplete("vmm") == None)
        self.assertTrue(trie.autoComplete("vmn") == None)
        self.assertTrue(trie.autoComplete("vmo") == None)
        self.assertTrue(trie.autoComplete("vmp") == None)
        self.assertTrue(trie.autoComplete("vmq") == None)
        self.assertTrue(trie.autoComplete("vmr") == None)
        self.assertTrue(trie.autoComplete("vms") == None)
        self.assertTrue(trie.autoComplete("vmt") == None)
        self.assertTrue(trie.autoComplete("vmu") == None)
        self.assertTrue(trie.autoComplete("vmv") == None)
        self.assertTrue(trie.autoComplete("vmw") == None)
        self.assertTrue(trie.autoComplete("vmx") == None)
        self.assertTrue(trie.autoComplete("vmy") == None)
        self.assertTrue(trie.autoComplete("vmz") == None)
        self.assertTrue(trie.autoComplete("vn") == None)
        self.assertTrue(trie.autoComplete("vna") == None)
        self.assertTrue(trie.autoComplete("vnb") == None)
        self.assertTrue(trie.autoComplete("vnc") == None)
        self.assertTrue(trie.autoComplete("vnd") == None)
        self.assertTrue(trie.autoComplete("vne") == None)
        self.assertTrue(trie.autoComplete("vnf") == None)
        self.assertTrue(trie.autoComplete("vng") == None)
        self.assertTrue(trie.autoComplete("vnh") == None)
        self.assertTrue(trie.autoComplete("vni") == None)
        self.assertTrue(trie.autoComplete("vnj") == None)
        self.assertTrue(trie.autoComplete("vnk") == None)
        self.assertTrue(trie.autoComplete("vnl") == None)
        self.assertTrue(trie.autoComplete("vnm") == None)
        self.assertTrue(trie.autoComplete("vnn") == None)
        self.assertTrue(trie.autoComplete("vno") == None)
        self.assertTrue(trie.autoComplete("vnp") == None)
        self.assertTrue(trie.autoComplete("vnq") == None)
        self.assertTrue(trie.autoComplete("vnr") == None)
        self.assertTrue(trie.autoComplete("vns") == None)
        self.assertTrue(trie.autoComplete("vnt") == None)
        self.assertTrue(trie.autoComplete("vnu") == None)
        self.assertTrue(trie.autoComplete("vnv") == None)
        self.assertTrue(trie.autoComplete("vnw") == None)
        self.assertTrue(trie.autoComplete("vnx") == None)
        self.assertTrue(trie.autoComplete("vny") == None)
        self.assertTrue(trie.autoComplete("vnz") == None)
        self.assertTrue(trie.autoComplete("vo") == "vote")
        self.assertTrue(trie.autoComplete("voa") == None)
        self.assertTrue(trie.autoComplete("vob") == None)
        self.assertTrue(trie.autoComplete("voc") == None)
        self.assertTrue(trie.autoComplete("vod") == None)
        self.assertTrue(trie.autoComplete("voe") == None)
        self.assertTrue(trie.autoComplete("vof") == None)
        self.assertTrue(trie.autoComplete("vog") == None)
        self.assertTrue(trie.autoComplete("voh") == None)
        self.assertTrue(trie.autoComplete("voi") == "void")
        self.assertTrue(trie.autoComplete("void") == "void")
        self.assertTrue(trie.autoComplete("voj") == None)
        self.assertTrue(trie.autoComplete("vok") == None)
        self.assertTrue(trie.autoComplete("vol") == None)
        self.assertTrue(trie.autoComplete("vom") == None)
        self.assertTrue(trie.autoComplete("von") == None)
        self.assertTrue(trie.autoComplete("voo") == None)
        self.assertTrue(trie.autoComplete("vop") == None)
        self.assertTrue(trie.autoComplete("voq") == None)
        self.assertTrue(trie.autoComplete("vor") == None)
        self.assertTrue(trie.autoComplete("vos") == None)
        self.assertTrue(trie.autoComplete("vot") == "vote")
        self.assertTrue(trie.autoComplete("vote") == "vote")
        self.assertTrue(trie.autoComplete("voted") == "voted")
        self.assertTrue(trie.autoComplete("votes") == "votes")
        self.assertTrue(trie.autoComplete("voti") == "voting")
        self.assertTrue(trie.autoComplete("votin") == "voting")
        self.assertTrue(trie.autoComplete("voting") == "voting")
        self.assertTrue(trie.autoComplete("vou") == None)
        self.assertTrue(trie.autoComplete("vov") == None)
        self.assertTrue(trie.autoComplete("vow") == None)
        self.assertTrue(trie.autoComplete("vox") == None)
        self.assertTrue(trie.autoComplete("voy") == None)
        self.assertTrue(trie.autoComplete("voz") == None)
        self.assertTrue(trie.autoComplete("vp") == None)
        self.assertTrue(trie.autoComplete("vpa") == None)
        self.assertTrue(trie.autoComplete("vpb") == None)
        self.assertTrue(trie.autoComplete("vpc") == None)
        self.assertTrue(trie.autoComplete("vpd") == None)
        self.assertTrue(trie.autoComplete("vpe") == None)
        self.assertTrue(trie.autoComplete("vpf") == None)
        self.assertTrue(trie.autoComplete("vpg") == None)
        self.assertTrue(trie.autoComplete("vph") == None)
        self.assertTrue(trie.autoComplete("vpi") == None)
        self.assertTrue(trie.autoComplete("vpj") == None)
        self.assertTrue(trie.autoComplete("vpk") == None)
        self.assertTrue(trie.autoComplete("vpl") == None)
        self.assertTrue(trie.autoComplete("vpm") == None)
        self.assertTrue(trie.autoComplete("vpn") == None)
        self.assertTrue(trie.autoComplete("vpo") == None)
        self.assertTrue(trie.autoComplete("vpp") == None)
        self.assertTrue(trie.autoComplete("vpq") == None)
        self.assertTrue(trie.autoComplete("vpr") == None)
        self.assertTrue(trie.autoComplete("vps") == None)
        self.assertTrue(trie.autoComplete("vpt") == None)
        self.assertTrue(trie.autoComplete("vpu") == None)
        self.assertTrue(trie.autoComplete("vpv") == None)
        self.assertTrue(trie.autoComplete("vpw") == None)
        self.assertTrue(trie.autoComplete("vpx") == None)
        self.assertTrue(trie.autoComplete("vpy") == None)
        self.assertTrue(trie.autoComplete("vpz") == None)
        self.assertTrue(trie.autoComplete("vq") == None)
        self.assertTrue(trie.autoComplete("vqa") == None)
        self.assertTrue(trie.autoComplete("vqb") == None)
        self.assertTrue(trie.autoComplete("vqc") == None)
        self.assertTrue(trie.autoComplete("vqd") == None)
        self.assertTrue(trie.autoComplete("vqe") == None)
        self.assertTrue(trie.autoComplete("vqf") == None)
        self.assertTrue(trie.autoComplete("vqg") == None)
        self.assertTrue(trie.autoComplete("vqh") == None)
        self.assertTrue(trie.autoComplete("vqi") == None)
        self.assertTrue(trie.autoComplete("vqj") == None)
        self.assertTrue(trie.autoComplete("vqk") == None)
        self.assertTrue(trie.autoComplete("vql") == None)
        self.assertTrue(trie.autoComplete("vqm") == None)
        self.assertTrue(trie.autoComplete("vqn") == None)
        self.assertTrue(trie.autoComplete("vqo") == None)
        self.assertTrue(trie.autoComplete("vqp") == None)
        self.assertTrue(trie.autoComplete("vqq") == None)
        self.assertTrue(trie.autoComplete("vqr") == None)
        self.assertTrue(trie.autoComplete("vqs") == None)
        self.assertTrue(trie.autoComplete("vqt") == None)
        self.assertTrue(trie.autoComplete("vqu") == None)
        self.assertTrue(trie.autoComplete("vqv") == None)
        self.assertTrue(trie.autoComplete("vqw") == None)
        self.assertTrue(trie.autoComplete("vqx") == None)
        self.assertTrue(trie.autoComplete("vqy") == None)
        self.assertTrue(trie.autoComplete("vqz") == None)
        self.assertTrue(trie.autoComplete("vr") == None)
        self.assertTrue(trie.autoComplete("vra") == None)
        self.assertTrue(trie.autoComplete("vrb") == None)
        self.assertTrue(trie.autoComplete("vrc") == None)
        self.assertTrue(trie.autoComplete("vrd") == None)
        self.assertTrue(trie.autoComplete("vre") == None)
        self.assertTrue(trie.autoComplete("vrf") == None)
        self.assertTrue(trie.autoComplete("vrg") == None)
        self.assertTrue(trie.autoComplete("vrh") == None)
        self.assertTrue(trie.autoComplete("vri") == None)
        self.assertTrue(trie.autoComplete("vrj") == None)
        self.assertTrue(trie.autoComplete("vrk") == None)
        self.assertTrue(trie.autoComplete("vrl") == None)
        self.assertTrue(trie.autoComplete("vrm") == None)
        self.assertTrue(trie.autoComplete("vrn") == None)
        self.assertTrue(trie.autoComplete("vro") == None)
        self.assertTrue(trie.autoComplete("vrp") == None)
        self.assertTrue(trie.autoComplete("vrq") == None)
        self.assertTrue(trie.autoComplete("vrr") == None)
        self.assertTrue(trie.autoComplete("vrs") == None)
        self.assertTrue(trie.autoComplete("vrt") == None)
        self.assertTrue(trie.autoComplete("vru") == None)
        self.assertTrue(trie.autoComplete("vrv") == None)
        self.assertTrue(trie.autoComplete("vrw") == None)
        self.assertTrue(trie.autoComplete("vrx") == None)
        self.assertTrue(trie.autoComplete("vry") == None)
        self.assertTrue(trie.autoComplete("vrz") == None)
        self.assertTrue(trie.autoComplete("vs") == None)
        self.assertTrue(trie.autoComplete("vsa") == None)
        self.assertTrue(trie.autoComplete("vsb") == None)
        self.assertTrue(trie.autoComplete("vsc") == None)
        self.assertTrue(trie.autoComplete("vsd") == None)
        self.assertTrue(trie.autoComplete("vse") == None)
        self.assertTrue(trie.autoComplete("vsf") == None)
        self.assertTrue(trie.autoComplete("vsg") == None)
        self.assertTrue(trie.autoComplete("vsh") == None)
        self.assertTrue(trie.autoComplete("vsi") == None)
        self.assertTrue(trie.autoComplete("vsj") == None)
        self.assertTrue(trie.autoComplete("vsk") == None)
        self.assertTrue(trie.autoComplete("vsl") == None)
        self.assertTrue(trie.autoComplete("vsm") == None)
        self.assertTrue(trie.autoComplete("vsn") == None)
        self.assertTrue(trie.autoComplete("vso") == None)
        self.assertTrue(trie.autoComplete("vsp") == None)
        self.assertTrue(trie.autoComplete("vsq") == None)
        self.assertTrue(trie.autoComplete("vsr") == None)
        self.assertTrue(trie.autoComplete("vss") == None)
        self.assertTrue(trie.autoComplete("vst") == None)
        self.assertTrue(trie.autoComplete("vsu") == None)
        self.assertTrue(trie.autoComplete("vsv") == None)
        self.assertTrue(trie.autoComplete("vsw") == None)
        self.assertTrue(trie.autoComplete("vsx") == None)
        self.assertTrue(trie.autoComplete("vsy") == None)
        self.assertTrue(trie.autoComplete("vsz") == None)
        self.assertTrue(trie.autoComplete("vt") == None)
        self.assertTrue(trie.autoComplete("vta") == None)
        self.assertTrue(trie.autoComplete("vtb") == None)
        self.assertTrue(trie.autoComplete("vtc") == None)
        self.assertTrue(trie.autoComplete("vtd") == None)
        self.assertTrue(trie.autoComplete("vte") == None)
        self.assertTrue(trie.autoComplete("vtf") == None)
        self.assertTrue(trie.autoComplete("vtg") == None)
        self.assertTrue(trie.autoComplete("vth") == None)
        self.assertTrue(trie.autoComplete("vti") == None)
        self.assertTrue(trie.autoComplete("vtj") == None)
        self.assertTrue(trie.autoComplete("vtk") == None)
        self.assertTrue(trie.autoComplete("vtl") == None)
        self.assertTrue(trie.autoComplete("vtm") == None)
        self.assertTrue(trie.autoComplete("vtn") == None)
        self.assertTrue(trie.autoComplete("vto") == None)
        self.assertTrue(trie.autoComplete("vtp") == None)
        self.assertTrue(trie.autoComplete("vtq") == None)
        self.assertTrue(trie.autoComplete("vtr") == None)
        self.assertTrue(trie.autoComplete("vts") == None)
        self.assertTrue(trie.autoComplete("vtt") == None)
        self.assertTrue(trie.autoComplete("vtu") == None)
        self.assertTrue(trie.autoComplete("vtv") == None)
        self.assertTrue(trie.autoComplete("vtw") == None)
        self.assertTrue(trie.autoComplete("vtx") == None)
        self.assertTrue(trie.autoComplete("vty") == None)
        self.assertTrue(trie.autoComplete("vtz") == None)
        self.assertTrue(trie.autoComplete("vu") == None)
        self.assertTrue(trie.autoComplete("vua") == None)
        self.assertTrue(trie.autoComplete("vub") == None)
        self.assertTrue(trie.autoComplete("vuc") == None)
        self.assertTrue(trie.autoComplete("vud") == None)
        self.assertTrue(trie.autoComplete("vue") == None)
        self.assertTrue(trie.autoComplete("vuf") == None)
        self.assertTrue(trie.autoComplete("vug") == None)
        self.assertTrue(trie.autoComplete("vuh") == None)
        self.assertTrue(trie.autoComplete("vui") == None)
        self.assertTrue(trie.autoComplete("vuj") == None)
        self.assertTrue(trie.autoComplete("vuk") == None)
        self.assertTrue(trie.autoComplete("vul") == None)
        self.assertTrue(trie.autoComplete("vum") == None)
        self.assertTrue(trie.autoComplete("vun") == None)
        self.assertTrue(trie.autoComplete("vuo") == None)
        self.assertTrue(trie.autoComplete("vup") == None)
        self.assertTrue(trie.autoComplete("vuq") == None)
        self.assertTrue(trie.autoComplete("vur") == None)
        self.assertTrue(trie.autoComplete("vus") == None)
        self.assertTrue(trie.autoComplete("vut") == None)
        self.assertTrue(trie.autoComplete("vuu") == None)
        self.assertTrue(trie.autoComplete("vuv") == None)
        self.assertTrue(trie.autoComplete("vuw") == None)
        self.assertTrue(trie.autoComplete("vux") == None)
        self.assertTrue(trie.autoComplete("vuy") == None)
        self.assertTrue(trie.autoComplete("vuz") == None)
        self.assertTrue(trie.autoComplete("vv") == None)
        self.assertTrue(trie.autoComplete("vva") == None)
        self.assertTrue(trie.autoComplete("vvb") == None)
        self.assertTrue(trie.autoComplete("vvc") == None)
        self.assertTrue(trie.autoComplete("vvd") == None)
        self.assertTrue(trie.autoComplete("vve") == None)
        self.assertTrue(trie.autoComplete("vvf") == None)
        self.assertTrue(trie.autoComplete("vvg") == None)
        self.assertTrue(trie.autoComplete("vvh") == None)
        self.assertTrue(trie.autoComplete("vvi") == None)
        self.assertTrue(trie.autoComplete("vvj") == None)
        self.assertTrue(trie.autoComplete("vvk") == None)
        self.assertTrue(trie.autoComplete("vvl") == None)
        self.assertTrue(trie.autoComplete("vvm") == None)
        self.assertTrue(trie.autoComplete("vvn") == None)
        self.assertTrue(trie.autoComplete("vvo") == None)
        self.assertTrue(trie.autoComplete("vvp") == None)
        self.assertTrue(trie.autoComplete("vvq") == None)
        self.assertTrue(trie.autoComplete("vvr") == None)
        self.assertTrue(trie.autoComplete("vvs") == None)
        self.assertTrue(trie.autoComplete("vvt") == None)
        self.assertTrue(trie.autoComplete("vvu") == None)
        self.assertTrue(trie.autoComplete("vvv") == None)
        self.assertTrue(trie.autoComplete("vvw") == None)
        self.assertTrue(trie.autoComplete("vvx") == None)
        self.assertTrue(trie.autoComplete("vvy") == None)
        self.assertTrue(trie.autoComplete("vvz") == None)
        self.assertTrue(trie.autoComplete("vw") == None)
        self.assertTrue(trie.autoComplete("vwa") == None)
        self.assertTrue(trie.autoComplete("vwb") == None)
        self.assertTrue(trie.autoComplete("vwc") == None)
        self.assertTrue(trie.autoComplete("vwd") == None)
        self.assertTrue(trie.autoComplete("vwe") == None)
        self.assertTrue(trie.autoComplete("vwf") == None)
        self.assertTrue(trie.autoComplete("vwg") == None)
        self.assertTrue(trie.autoComplete("vwh") == None)
        self.assertTrue(trie.autoComplete("vwi") == None)
        self.assertTrue(trie.autoComplete("vwj") == None)
        self.assertTrue(trie.autoComplete("vwk") == None)
        self.assertTrue(trie.autoComplete("vwl") == None)
        self.assertTrue(trie.autoComplete("vwm") == None)
        self.assertTrue(trie.autoComplete("vwn") == None)
        self.assertTrue(trie.autoComplete("vwo") == None)
        self.assertTrue(trie.autoComplete("vwp") == None)
        self.assertTrue(trie.autoComplete("vwq") == None)
        self.assertTrue(trie.autoComplete("vwr") == None)
        self.assertTrue(trie.autoComplete("vws") == None)
        self.assertTrue(trie.autoComplete("vwt") == None)
        self.assertTrue(trie.autoComplete("vwu") == None)
        self.assertTrue(trie.autoComplete("vwv") == None)
        self.assertTrue(trie.autoComplete("vww") == None)
        self.assertTrue(trie.autoComplete("vwx") == None)
        self.assertTrue(trie.autoComplete("vwy") == None)
        self.assertTrue(trie.autoComplete("vwz") == None)
        self.assertTrue(trie.autoComplete("vx") == None)
        self.assertTrue(trie.autoComplete("vxa") == None)
        self.assertTrue(trie.autoComplete("vxb") == None)
        self.assertTrue(trie.autoComplete("vxc") == None)
        self.assertTrue(trie.autoComplete("vxd") == None)
        self.assertTrue(trie.autoComplete("vxe") == None)
        self.assertTrue(trie.autoComplete("vxf") == None)
        self.assertTrue(trie.autoComplete("vxg") == None)
        self.assertTrue(trie.autoComplete("vxh") == None)
        self.assertTrue(trie.autoComplete("vxi") == None)
        self.assertTrue(trie.autoComplete("vxj") == None)
        self.assertTrue(trie.autoComplete("vxk") == None)
        self.assertTrue(trie.autoComplete("vxl") == None)
        self.assertTrue(trie.autoComplete("vxm") == None)
        self.assertTrue(trie.autoComplete("vxn") == None)
        self.assertTrue(trie.autoComplete("vxo") == None)
        self.assertTrue(trie.autoComplete("vxp") == None)
        self.assertTrue(trie.autoComplete("vxq") == None)
        self.assertTrue(trie.autoComplete("vxr") == None)
        self.assertTrue(trie.autoComplete("vxs") == None)
        self.assertTrue(trie.autoComplete("vxt") == None)
        self.assertTrue(trie.autoComplete("vxu") == None)
        self.assertTrue(trie.autoComplete("vxv") == None)
        self.assertTrue(trie.autoComplete("vxw") == None)
        self.assertTrue(trie.autoComplete("vxx") == None)
        self.assertTrue(trie.autoComplete("vxy") == None)
        self.assertTrue(trie.autoComplete("vxz") == None)
        self.assertTrue(trie.autoComplete("vy") == None)
        self.assertTrue(trie.autoComplete("vya") == None)
        self.assertTrue(trie.autoComplete("vyb") == None)
        self.assertTrue(trie.autoComplete("vyc") == None)
        self.assertTrue(trie.autoComplete("vyd") == None)
        self.assertTrue(trie.autoComplete("vye") == None)
        self.assertTrue(trie.autoComplete("vyf") == None)
        self.assertTrue(trie.autoComplete("vyg") == None)
        self.assertTrue(trie.autoComplete("vyh") == None)
        self.assertTrue(trie.autoComplete("vyi") == None)
        self.assertTrue(trie.autoComplete("vyj") == None)
        self.assertTrue(trie.autoComplete("vyk") == None)
        self.assertTrue(trie.autoComplete("vyl") == None)
        self.assertTrue(trie.autoComplete("vym") == None)
        self.assertTrue(trie.autoComplete("vyn") == None)
        self.assertTrue(trie.autoComplete("vyo") == None)
        self.assertTrue(trie.autoComplete("vyp") == None)
        self.assertTrue(trie.autoComplete("vyq") == None)
        self.assertTrue(trie.autoComplete("vyr") == None)
        self.assertTrue(trie.autoComplete("vys") == None)
        self.assertTrue(trie.autoComplete("vyt") == None)
        self.assertTrue(trie.autoComplete("vyu") == None)
        self.assertTrue(trie.autoComplete("vyv") == None)
        self.assertTrue(trie.autoComplete("vyw") == None)
        self.assertTrue(trie.autoComplete("vyx") == None)
        self.assertTrue(trie.autoComplete("vyy") == None)
        self.assertTrue(trie.autoComplete("vyz") == None)
        self.assertTrue(trie.autoComplete("vz") == None)
        self.assertTrue(trie.autoComplete("vza") == None)
        self.assertTrue(trie.autoComplete("vzb") == None)
        self.assertTrue(trie.autoComplete("vzc") == None)
        self.assertTrue(trie.autoComplete("vzd") == None)
        self.assertTrue(trie.autoComplete("vze") == None)
        self.assertTrue(trie.autoComplete("vzf") == None)
        self.assertTrue(trie.autoComplete("vzg") == None)
        self.assertTrue(trie.autoComplete("vzh") == None)
        self.assertTrue(trie.autoComplete("vzi") == None)
        self.assertTrue(trie.autoComplete("vzj") == None)
        self.assertTrue(trie.autoComplete("vzk") == None)
        self.assertTrue(trie.autoComplete("vzl") == None)
        self.assertTrue(trie.autoComplete("vzm") == None)
        self.assertTrue(trie.autoComplete("vzn") == None)
        self.assertTrue(trie.autoComplete("vzo") == None)
        self.assertTrue(trie.autoComplete("vzp") == None)
        self.assertTrue(trie.autoComplete("vzq") == None)
        self.assertTrue(trie.autoComplete("vzr") == None)
        self.assertTrue(trie.autoComplete("vzs") == None)
        self.assertTrue(trie.autoComplete("vzt") == None)
        self.assertTrue(trie.autoComplete("vzu") == None)
        self.assertTrue(trie.autoComplete("vzv") == None)
        self.assertTrue(trie.autoComplete("vzw") == None)
        self.assertTrue(trie.autoComplete("vzx") == None)
        self.assertTrue(trie.autoComplete("vzy") == None)
        self.assertTrue(trie.autoComplete("vzz") == None)
        self.assertTrue(trie.autoComplete("w") == "which")
        self.assertTrue(trie.autoComplete("wa") == "war")
        self.assertTrue(trie.autoComplete("waa") == None)
        self.assertTrue(trie.autoComplete("wab") == None)
        self.assertTrue(trie.autoComplete("wac") == None)
        self.assertTrue(trie.autoComplete("wad") == None)
        self.assertTrue(trie.autoComplete("wae") == None)
        self.assertTrue(trie.autoComplete("waf") == None)
        self.assertTrue(trie.autoComplete("wag") == None)
        self.assertTrue(trie.autoComplete("wah") == None)
        self.assertTrue(trie.autoComplete("wai") == None)
        self.assertTrue(trie.autoComplete("waj") == None)
        self.assertTrue(trie.autoComplete("wak") == None)
        self.assertTrue(trie.autoComplete("wal") == None)
        self.assertTrue(trie.autoComplete("wam") == None)
        self.assertTrue(trie.autoComplete("wan") == None)
        self.assertTrue(trie.autoComplete("wao") == None)
        self.assertTrue(trie.autoComplete("wap") == None)
        self.assertTrue(trie.autoComplete("waq") == None)
        self.assertTrue(trie.autoComplete("war") == "war")
        self.assertTrue(trie.autoComplete("warr") == "warrants")
        self.assertTrue(trie.autoComplete("warra") == "warrants")
        self.assertTrue(trie.autoComplete("warran") == "warrants")
        self.assertTrue(trie.autoComplete("warrant") == "warrants")
        self.assertTrue(trie.autoComplete("warrants") == "warrants")
        self.assertTrue(trie.autoComplete("was") == "was")
        self.assertTrue(trie.autoComplete("wat") == "water")
        self.assertTrue(trie.autoComplete("wate") == "water")
        self.assertTrue(trie.autoComplete("water") == "water")
        self.assertTrue(trie.autoComplete("wau") == None)
        self.assertTrue(trie.autoComplete("wav") == None)
        self.assertTrue(trie.autoComplete("waw") == None)
        self.assertTrue(trie.autoComplete("wax") == None)
        self.assertTrue(trie.autoComplete("way") == "way")
        self.assertTrue(trie.autoComplete("waz") == None)
        self.assertTrue(trie.autoComplete("wb") == None)
        self.assertTrue(trie.autoComplete("wba") == None)
        self.assertTrue(trie.autoComplete("wbb") == None)
        self.assertTrue(trie.autoComplete("wbc") == None)
        self.assertTrue(trie.autoComplete("wbd") == None)
        self.assertTrue(trie.autoComplete("wbe") == None)
        self.assertTrue(trie.autoComplete("wbf") == None)
        self.assertTrue(trie.autoComplete("wbg") == None)
        self.assertTrue(trie.autoComplete("wbh") == None)
        self.assertTrue(trie.autoComplete("wbi") == None)
        self.assertTrue(trie.autoComplete("wbj") == None)
        self.assertTrue(trie.autoComplete("wbk") == None)
        self.assertTrue(trie.autoComplete("wbl") == None)
        self.assertTrue(trie.autoComplete("wbm") == None)
        self.assertTrue(trie.autoComplete("wbn") == None)
        self.assertTrue(trie.autoComplete("wbo") == None)
        self.assertTrue(trie.autoComplete("wbp") == None)
        self.assertTrue(trie.autoComplete("wbq") == None)
        self.assertTrue(trie.autoComplete("wbr") == None)
        self.assertTrue(trie.autoComplete("wbs") == None)
        self.assertTrue(trie.autoComplete("wbt") == None)
        self.assertTrue(trie.autoComplete("wbu") == None)
        self.assertTrue(trie.autoComplete("wbv") == None)
        self.assertTrue(trie.autoComplete("wbw") == None)
        self.assertTrue(trie.autoComplete("wbx") == None)
        self.assertTrue(trie.autoComplete("wby") == None)
        self.assertTrue(trie.autoComplete("wbz") == None)
        self.assertTrue(trie.autoComplete("wc") == None)
        self.assertTrue(trie.autoComplete("wca") == None)
        self.assertTrue(trie.autoComplete("wcb") == None)
        self.assertTrue(trie.autoComplete("wcc") == None)
        self.assertTrue(trie.autoComplete("wcd") == None)
        self.assertTrue(trie.autoComplete("wce") == None)
        self.assertTrue(trie.autoComplete("wcf") == None)
        self.assertTrue(trie.autoComplete("wcg") == None)
        self.assertTrue(trie.autoComplete("wch") == None)
        self.assertTrue(trie.autoComplete("wci") == None)
        self.assertTrue(trie.autoComplete("wcj") == None)
        self.assertTrue(trie.autoComplete("wck") == None)
        self.assertTrue(trie.autoComplete("wcl") == None)
        self.assertTrue(trie.autoComplete("wcm") == None)
        self.assertTrue(trie.autoComplete("wcn") == None)
        self.assertTrue(trie.autoComplete("wco") == None)
        self.assertTrue(trie.autoComplete("wcp") == None)
        self.assertTrue(trie.autoComplete("wcq") == None)
        self.assertTrue(trie.autoComplete("wcr") == None)
        self.assertTrue(trie.autoComplete("wcs") == None)
        self.assertTrue(trie.autoComplete("wct") == None)
        self.assertTrue(trie.autoComplete("wcu") == None)
        self.assertTrue(trie.autoComplete("wcv") == None)
        self.assertTrue(trie.autoComplete("wcw") == None)
        self.assertTrue(trie.autoComplete("wcx") == None)
        self.assertTrue(trie.autoComplete("wcy") == None)
        self.assertTrue(trie.autoComplete("wcz") == None)
        self.assertTrue(trie.autoComplete("wd") == None)
        self.assertTrue(trie.autoComplete("wda") == None)
        self.assertTrue(trie.autoComplete("wdb") == None)
        self.assertTrue(trie.autoComplete("wdc") == None)
        self.assertTrue(trie.autoComplete("wdd") == None)
        self.assertTrue(trie.autoComplete("wde") == None)
        self.assertTrue(trie.autoComplete("wdf") == None)
        self.assertTrue(trie.autoComplete("wdg") == None)
        self.assertTrue(trie.autoComplete("wdh") == None)
        self.assertTrue(trie.autoComplete("wdi") == None)
        self.assertTrue(trie.autoComplete("wdj") == None)
        self.assertTrue(trie.autoComplete("wdk") == None)
        self.assertTrue(trie.autoComplete("wdl") == None)
        self.assertTrue(trie.autoComplete("wdm") == None)
        self.assertTrue(trie.autoComplete("wdn") == None)
        self.assertTrue(trie.autoComplete("wdo") == None)
        self.assertTrue(trie.autoComplete("wdp") == None)
        self.assertTrue(trie.autoComplete("wdq") == None)
        self.assertTrue(trie.autoComplete("wdr") == None)
        self.assertTrue(trie.autoComplete("wds") == None)
        self.assertTrue(trie.autoComplete("wdt") == None)
        self.assertTrue(trie.autoComplete("wdu") == None)
        self.assertTrue(trie.autoComplete("wdv") == None)
        self.assertTrue(trie.autoComplete("wdw") == None)
        self.assertTrue(trie.autoComplete("wdx") == None)
        self.assertTrue(trie.autoComplete("wdy") == None)
        self.assertTrue(trie.autoComplete("wdz") == None)
        self.assertTrue(trie.autoComplete("we") == "welfare")
        self.assertTrue(trie.autoComplete("wea") == None)
        self.assertTrue(trie.autoComplete("web") == None)
        self.assertTrue(trie.autoComplete("wec") == None)
        self.assertTrue(trie.autoComplete("wed") == None)
        self.assertTrue(trie.autoComplete("wee") == None)
        self.assertTrue(trie.autoComplete("wef") == None)
        self.assertTrue(trie.autoComplete("weg") == None)
        self.assertTrue(trie.autoComplete("weh") == None)
        self.assertTrue(trie.autoComplete("wei") == "weights")
        self.assertTrue(trie.autoComplete("weig") == "weights")
        self.assertTrue(trie.autoComplete("weigh") == "weights")
        self.assertTrue(trie.autoComplete("weight") == "weights")
        self.assertTrue(trie.autoComplete("weights") == "weights")
        self.assertTrue(trie.autoComplete("wej") == None)
        self.assertTrue(trie.autoComplete("wek") == None)
        self.assertTrue(trie.autoComplete("wel") == "welfare")
        self.assertTrue(trie.autoComplete("welf") == "welfare")
        self.assertTrue(trie.autoComplete("welfa") == "welfare")
        self.assertTrue(trie.autoComplete("welfar") == "welfare")
        self.assertTrue(trie.autoComplete("welfare") == "welfare")
        self.assertTrue(trie.autoComplete("well") == "well")
        self.assertTrue(trie.autoComplete("wem") == None)
        self.assertTrue(trie.autoComplete("wen") == None)
        self.assertTrue(trie.autoComplete("weo") == None)
        self.assertTrue(trie.autoComplete("wep") == None)
        self.assertTrue(trie.autoComplete("weq") == None)
        self.assertTrue(trie.autoComplete("wer") == "were")
        self.assertTrue(trie.autoComplete("were") == "were")
        self.assertTrue(trie.autoComplete("wes") == None)
        self.assertTrue(trie.autoComplete("wet") == None)
        self.assertTrue(trie.autoComplete("weu") == None)
        self.assertTrue(trie.autoComplete("wev") == None)
        self.assertTrue(trie.autoComplete("wew") == None)
        self.assertTrue(trie.autoComplete("wex") == None)
        self.assertTrue(trie.autoComplete("wey") == None)
        self.assertTrue(trie.autoComplete("wez") == None)
        self.assertTrue(trie.autoComplete("wf") == None)
        self.assertTrue(trie.autoComplete("wfa") == None)
        self.assertTrue(trie.autoComplete("wfb") == None)
        self.assertTrue(trie.autoComplete("wfc") == None)
        self.assertTrue(trie.autoComplete("wfd") == None)
        self.assertTrue(trie.autoComplete("wfe") == None)
        self.assertTrue(trie.autoComplete("wff") == None)
        self.assertTrue(trie.autoComplete("wfg") == None)
        self.assertTrue(trie.autoComplete("wfh") == None)
        self.assertTrue(trie.autoComplete("wfi") == None)
        self.assertTrue(trie.autoComplete("wfj") == None)
        self.assertTrue(trie.autoComplete("wfk") == None)
        self.assertTrue(trie.autoComplete("wfl") == None)
        self.assertTrue(trie.autoComplete("wfm") == None)
        self.assertTrue(trie.autoComplete("wfn") == None)
        self.assertTrue(trie.autoComplete("wfo") == None)
        self.assertTrue(trie.autoComplete("wfp") == None)
        self.assertTrue(trie.autoComplete("wfq") == None)
        self.assertTrue(trie.autoComplete("wfr") == None)
        self.assertTrue(trie.autoComplete("wfs") == None)
        self.assertTrue(trie.autoComplete("wft") == None)
        self.assertTrue(trie.autoComplete("wfu") == None)
        self.assertTrue(trie.autoComplete("wfv") == None)
        self.assertTrue(trie.autoComplete("wfw") == None)
        self.assertTrue(trie.autoComplete("wfx") == None)
        self.assertTrue(trie.autoComplete("wfy") == None)
        self.assertTrue(trie.autoComplete("wfz") == None)
        self.assertTrue(trie.autoComplete("wg") == None)
        self.assertTrue(trie.autoComplete("wga") == None)
        self.assertTrue(trie.autoComplete("wgb") == None)
        self.assertTrue(trie.autoComplete("wgc") == None)
        self.assertTrue(trie.autoComplete("wgd") == None)
        self.assertTrue(trie.autoComplete("wge") == None)
        self.assertTrue(trie.autoComplete("wgf") == None)
        self.assertTrue(trie.autoComplete("wgg") == None)
        self.assertTrue(trie.autoComplete("wgh") == None)
        self.assertTrue(trie.autoComplete("wgi") == None)
        self.assertTrue(trie.autoComplete("wgj") == None)
        self.assertTrue(trie.autoComplete("wgk") == None)
        self.assertTrue(trie.autoComplete("wgl") == None)
        self.assertTrue(trie.autoComplete("wgm") == None)
        self.assertTrue(trie.autoComplete("wgn") == None)
        self.assertTrue(trie.autoComplete("wgo") == None)
        self.assertTrue(trie.autoComplete("wgp") == None)
        self.assertTrue(trie.autoComplete("wgq") == None)
        self.assertTrue(trie.autoComplete("wgr") == None)
        self.assertTrue(trie.autoComplete("wgs") == None)
        self.assertTrue(trie.autoComplete("wgt") == None)
        self.assertTrue(trie.autoComplete("wgu") == None)
        self.assertTrue(trie.autoComplete("wgv") == None)
        self.assertTrue(trie.autoComplete("wgw") == None)
        self.assertTrue(trie.autoComplete("wgx") == None)
        self.assertTrue(trie.autoComplete("wgy") == None)
        self.assertTrue(trie.autoComplete("wgz") == None)
        self.assertTrue(trie.autoComplete("wh") == "which")
        self.assertTrue(trie.autoComplete("wha") == "what")
        self.assertTrue(trie.autoComplete("what") == "what")
        self.assertTrue(trie.autoComplete("whate") == "whatever")
        self.assertTrue(trie.autoComplete("whatev") == "whatever")
        self.assertTrue(trie.autoComplete("whateve") == "whatever")
        self.assertTrue(trie.autoComplete("whatever") == "whatever")
        self.assertTrue(trie.autoComplete("whats") == "whatsoever")
        self.assertTrue(trie.autoComplete("whatso") == "whatsoever")
        self.assertTrue(trie.autoComplete("whatsoe") == "whatsoever")
        self.assertTrue(trie.autoComplete("whatsoev") == "whatsoever")
        self.assertTrue(trie.autoComplete("whatsoeve") == "whatsoever")
        self.assertTrue(trie.autoComplete("whatsoever") == "whatsoever")
        self.assertTrue(trie.autoComplete("whb") == None)
        self.assertTrue(trie.autoComplete("whc") == None)
        self.assertTrue(trie.autoComplete("whd") == None)
        self.assertTrue(trie.autoComplete("whe") == "when")
        self.assertTrue(trie.autoComplete("when") == "when")
        self.assertTrue(trie.autoComplete("whene") == "whenever")
        self.assertTrue(trie.autoComplete("whenev") == "whenever")
        self.assertTrue(trie.autoComplete("wheneve") == "whenever")
        self.assertTrue(trie.autoComplete("whenever") == "whenever")
        self.assertTrue(trie.autoComplete("wher") == "wherein")
        self.assertTrue(trie.autoComplete("where") == "wherein")
        self.assertTrue(trie.autoComplete("wherei") == "wherein")
        self.assertTrue(trie.autoComplete("wherein") == "wherein")
        self.assertTrue(trie.autoComplete("whereo") == "whereof")
        self.assertTrue(trie.autoComplete("whereof") == "whereof")
        self.assertTrue(trie.autoComplete("whf") == None)
        self.assertTrue(trie.autoComplete("whg") == None)
        self.assertTrue(trie.autoComplete("whh") == None)
        self.assertTrue(trie.autoComplete("whi") == "which")
        self.assertTrue(trie.autoComplete("whic") == "which")
        self.assertTrue(trie.autoComplete("which") == "which")
        self.assertTrue(trie.autoComplete("whj") == None)
        self.assertTrue(trie.autoComplete("whk") == None)
        self.assertTrue(trie.autoComplete("whl") == None)
        self.assertTrue(trie.autoComplete("whm") == None)
        self.assertTrue(trie.autoComplete("whn") == None)
        self.assertTrue(trie.autoComplete("who") == "who")
        self.assertTrue(trie.autoComplete("whol") == "whole")
        self.assertTrue(trie.autoComplete("whole") == "whole")
        self.assertTrue(trie.autoComplete("whom") == "whom")
        self.assertTrue(trie.autoComplete("whos") == "whose")
        self.assertTrue(trie.autoComplete("whose") == "whose")
        self.assertTrue(trie.autoComplete("whp") == None)
        self.assertTrue(trie.autoComplete("whq") == None)
        self.assertTrue(trie.autoComplete("whr") == None)
        self.assertTrue(trie.autoComplete("whs") == None)
        self.assertTrue(trie.autoComplete("wht") == None)
        self.assertTrue(trie.autoComplete("whu") == None)
        self.assertTrue(trie.autoComplete("whv") == None)
        self.assertTrue(trie.autoComplete("whw") == None)
        self.assertTrue(trie.autoComplete("whx") == None)
        self.assertTrue(trie.autoComplete("why") == None)
        self.assertTrue(trie.autoComplete("whz") == None)
        self.assertTrue(trie.autoComplete("wi") == "within")
        self.assertTrue(trie.autoComplete("wia") == None)
        self.assertTrue(trie.autoComplete("wib") == None)
        self.assertTrue(trie.autoComplete("wic") == None)
        self.assertTrue(trie.autoComplete("wid") == None)
        self.assertTrue(trie.autoComplete("wie") == None)
        self.assertTrue(trie.autoComplete("wif") == None)
        self.assertTrue(trie.autoComplete("wig") == None)
        self.assertTrue(trie.autoComplete("wih") == None)
        self.assertTrue(trie.autoComplete("wii") == None)
        self.assertTrue(trie.autoComplete("wij") == None)
        self.assertTrue(trie.autoComplete("wik") == None)
        self.assertTrue(trie.autoComplete("wil") == "will")
        self.assertTrue(trie.autoComplete("will") == "will")
        self.assertTrue(trie.autoComplete("wim") == None)
        self.assertTrue(trie.autoComplete("win") == None)
        self.assertTrue(trie.autoComplete("wio") == None)
        self.assertTrue(trie.autoComplete("wip") == None)
        self.assertTrue(trie.autoComplete("wiq") == None)
        self.assertTrue(trie.autoComplete("wir") == None)
        self.assertTrue(trie.autoComplete("wis") == None)
        self.assertTrue(trie.autoComplete("wit") == "within")
        self.assertTrue(trie.autoComplete("with") == "within")
        self.assertTrue(trie.autoComplete("withi") == "within")
        self.assertTrue(trie.autoComplete("within") == "within")
        self.assertTrue(trie.autoComplete("witho") == "without")
        self.assertTrue(trie.autoComplete("withou") == "without")
        self.assertTrue(trie.autoComplete("without") == "without")
        self.assertTrue(trie.autoComplete("witn") == "witnesses")
        self.assertTrue(trie.autoComplete("witne") == "witnesses")
        self.assertTrue(trie.autoComplete("witnes") == "witnesses")
        self.assertTrue(trie.autoComplete("witness") == "witnesses")
        self.assertTrue(trie.autoComplete("witnesse") == "witnesses")
        self.assertTrue(trie.autoComplete("witnesses") == "witnesses")
        self.assertTrue(trie.autoComplete("wiu") == None)
        self.assertTrue(trie.autoComplete("wiv") == None)
        self.assertTrue(trie.autoComplete("wiw") == None)
        self.assertTrue(trie.autoComplete("wix") == None)
        self.assertTrue(trie.autoComplete("wiy") == None)
        self.assertTrue(trie.autoComplete("wiz") == None)
        self.assertTrue(trie.autoComplete("wj") == None)
        self.assertTrue(trie.autoComplete("wja") == None)
        self.assertTrue(trie.autoComplete("wjb") == None)
        self.assertTrue(trie.autoComplete("wjc") == None)
        self.assertTrue(trie.autoComplete("wjd") == None)
        self.assertTrue(trie.autoComplete("wje") == None)
        self.assertTrue(trie.autoComplete("wjf") == None)
        self.assertTrue(trie.autoComplete("wjg") == None)
        self.assertTrue(trie.autoComplete("wjh") == None)
        self.assertTrue(trie.autoComplete("wji") == None)
        self.assertTrue(trie.autoComplete("wjj") == None)
        self.assertTrue(trie.autoComplete("wjk") == None)
        self.assertTrue(trie.autoComplete("wjl") == None)
        self.assertTrue(trie.autoComplete("wjm") == None)
        self.assertTrue(trie.autoComplete("wjn") == None)
        self.assertTrue(trie.autoComplete("wjo") == None)
        self.assertTrue(trie.autoComplete("wjp") == None)
        self.assertTrue(trie.autoComplete("wjq") == None)
        self.assertTrue(trie.autoComplete("wjr") == None)
        self.assertTrue(trie.autoComplete("wjs") == None)
        self.assertTrue(trie.autoComplete("wjt") == None)
        self.assertTrue(trie.autoComplete("wju") == None)
        self.assertTrue(trie.autoComplete("wjv") == None)
        self.assertTrue(trie.autoComplete("wjw") == None)
        self.assertTrue(trie.autoComplete("wjx") == None)
        self.assertTrue(trie.autoComplete("wjy") == None)
        self.assertTrue(trie.autoComplete("wjz") == None)
        self.assertTrue(trie.autoComplete("wk") == None)
        self.assertTrue(trie.autoComplete("wka") == None)
        self.assertTrue(trie.autoComplete("wkb") == None)
        self.assertTrue(trie.autoComplete("wkc") == None)
        self.assertTrue(trie.autoComplete("wkd") == None)
        self.assertTrue(trie.autoComplete("wke") == None)
        self.assertTrue(trie.autoComplete("wkf") == None)
        self.assertTrue(trie.autoComplete("wkg") == None)
        self.assertTrue(trie.autoComplete("wkh") == None)
        self.assertTrue(trie.autoComplete("wki") == None)
        self.assertTrue(trie.autoComplete("wkj") == None)
        self.assertTrue(trie.autoComplete("wkk") == None)
        self.assertTrue(trie.autoComplete("wkl") == None)
        self.assertTrue(trie.autoComplete("wkm") == None)
        self.assertTrue(trie.autoComplete("wkn") == None)
        self.assertTrue(trie.autoComplete("wko") == None)
        self.assertTrue(trie.autoComplete("wkp") == None)
        self.assertTrue(trie.autoComplete("wkq") == None)
        self.assertTrue(trie.autoComplete("wkr") == None)
        self.assertTrue(trie.autoComplete("wks") == None)
        self.assertTrue(trie.autoComplete("wkt") == None)
        self.assertTrue(trie.autoComplete("wku") == None)
        self.assertTrue(trie.autoComplete("wkv") == None)
        self.assertTrue(trie.autoComplete("wkw") == None)
        self.assertTrue(trie.autoComplete("wkx") == None)
        self.assertTrue(trie.autoComplete("wky") == None)
        self.assertTrue(trie.autoComplete("wkz") == None)
        self.assertTrue(trie.autoComplete("wl") == None)
        self.assertTrue(trie.autoComplete("wla") == None)
        self.assertTrue(trie.autoComplete("wlb") == None)
        self.assertTrue(trie.autoComplete("wlc") == None)
        self.assertTrue(trie.autoComplete("wld") == None)
        self.assertTrue(trie.autoComplete("wle") == None)
        self.assertTrue(trie.autoComplete("wlf") == None)
        self.assertTrue(trie.autoComplete("wlg") == None)
        self.assertTrue(trie.autoComplete("wlh") == None)
        self.assertTrue(trie.autoComplete("wli") == None)
        self.assertTrue(trie.autoComplete("wlj") == None)
        self.assertTrue(trie.autoComplete("wlk") == None)
        self.assertTrue(trie.autoComplete("wll") == None)
        self.assertTrue(trie.autoComplete("wlm") == None)
        self.assertTrue(trie.autoComplete("wln") == None)
        self.assertTrue(trie.autoComplete("wlo") == None)
        self.assertTrue(trie.autoComplete("wlp") == None)
        self.assertTrue(trie.autoComplete("wlq") == None)
        self.assertTrue(trie.autoComplete("wlr") == None)
        self.assertTrue(trie.autoComplete("wls") == None)
        self.assertTrue(trie.autoComplete("wlt") == None)
        self.assertTrue(trie.autoComplete("wlu") == None)
        self.assertTrue(trie.autoComplete("wlv") == None)
        self.assertTrue(trie.autoComplete("wlw") == None)
        self.assertTrue(trie.autoComplete("wlx") == None)
        self.assertTrue(trie.autoComplete("wly") == None)
        self.assertTrue(trie.autoComplete("wlz") == None)
        self.assertTrue(trie.autoComplete("wm") == None)
        self.assertTrue(trie.autoComplete("wma") == None)
        self.assertTrue(trie.autoComplete("wmb") == None)
        self.assertTrue(trie.autoComplete("wmc") == None)
        self.assertTrue(trie.autoComplete("wmd") == None)
        self.assertTrue(trie.autoComplete("wme") == None)
        self.assertTrue(trie.autoComplete("wmf") == None)
        self.assertTrue(trie.autoComplete("wmg") == None)
        self.assertTrue(trie.autoComplete("wmh") == None)
        self.assertTrue(trie.autoComplete("wmi") == None)
        self.assertTrue(trie.autoComplete("wmj") == None)
        self.assertTrue(trie.autoComplete("wmk") == None)
        self.assertTrue(trie.autoComplete("wml") == None)
        self.assertTrue(trie.autoComplete("wmm") == None)
        self.assertTrue(trie.autoComplete("wmn") == None)
        self.assertTrue(trie.autoComplete("wmo") == None)
        self.assertTrue(trie.autoComplete("wmp") == None)
        self.assertTrue(trie.autoComplete("wmq") == None)
        self.assertTrue(trie.autoComplete("wmr") == None)
        self.assertTrue(trie.autoComplete("wms") == None)
        self.assertTrue(trie.autoComplete("wmt") == None)
        self.assertTrue(trie.autoComplete("wmu") == None)
        self.assertTrue(trie.autoComplete("wmv") == None)
        self.assertTrue(trie.autoComplete("wmw") == None)
        self.assertTrue(trie.autoComplete("wmx") == None)
        self.assertTrue(trie.autoComplete("wmy") == None)
        self.assertTrue(trie.autoComplete("wmz") == None)
        self.assertTrue(trie.autoComplete("wn") == None)
        self.assertTrue(trie.autoComplete("wna") == None)
        self.assertTrue(trie.autoComplete("wnb") == None)
        self.assertTrue(trie.autoComplete("wnc") == None)
        self.assertTrue(trie.autoComplete("wnd") == None)
        self.assertTrue(trie.autoComplete("wne") == None)
        self.assertTrue(trie.autoComplete("wnf") == None)
        self.assertTrue(trie.autoComplete("wng") == None)
        self.assertTrue(trie.autoComplete("wnh") == None)
        self.assertTrue(trie.autoComplete("wni") == None)
        self.assertTrue(trie.autoComplete("wnj") == None)
        self.assertTrue(trie.autoComplete("wnk") == None)
        self.assertTrue(trie.autoComplete("wnl") == None)
        self.assertTrue(trie.autoComplete("wnm") == None)
        self.assertTrue(trie.autoComplete("wnn") == None)
        self.assertTrue(trie.autoComplete("wno") == None)
        self.assertTrue(trie.autoComplete("wnp") == None)
        self.assertTrue(trie.autoComplete("wnq") == None)
        self.assertTrue(trie.autoComplete("wnr") == None)
        self.assertTrue(trie.autoComplete("wns") == None)
        self.assertTrue(trie.autoComplete("wnt") == None)
        self.assertTrue(trie.autoComplete("wnu") == None)
        self.assertTrue(trie.autoComplete("wnv") == None)
        self.assertTrue(trie.autoComplete("wnw") == None)
        self.assertTrue(trie.autoComplete("wnx") == None)
        self.assertTrue(trie.autoComplete("wny") == None)
        self.assertTrue(trie.autoComplete("wnz") == None)
        self.assertTrue(trie.autoComplete("wo") == "would")
        self.assertTrue(trie.autoComplete("woa") == None)
        self.assertTrue(trie.autoComplete("wob") == None)
        self.assertTrue(trie.autoComplete("woc") == None)
        self.assertTrue(trie.autoComplete("wod") == None)
        self.assertTrue(trie.autoComplete("woe") == None)
        self.assertTrue(trie.autoComplete("wof") == None)
        self.assertTrue(trie.autoComplete("wog") == None)
        self.assertTrue(trie.autoComplete("woh") == None)
        self.assertTrue(trie.autoComplete("woi") == None)
        self.assertTrue(trie.autoComplete("woj") == None)
        self.assertTrue(trie.autoComplete("wok") == None)
        self.assertTrue(trie.autoComplete("wol") == None)
        self.assertTrue(trie.autoComplete("wom") == None)
        self.assertTrue(trie.autoComplete("won") == None)
        self.assertTrue(trie.autoComplete("woo") == None)
        self.assertTrue(trie.autoComplete("wop") == None)
        self.assertTrue(trie.autoComplete("woq") == None)
        self.assertTrue(trie.autoComplete("wor") == "work")
        self.assertTrue(trie.autoComplete("work") == "work")
        self.assertTrue(trie.autoComplete("wos") == None)
        self.assertTrue(trie.autoComplete("wot") == None)
        self.assertTrue(trie.autoComplete("wou") == "would")
        self.assertTrue(trie.autoComplete("woul") == "would")
        self.assertTrue(trie.autoComplete("would") == "would")
        self.assertTrue(trie.autoComplete("wov") == None)
        self.assertTrue(trie.autoComplete("wow") == None)
        self.assertTrue(trie.autoComplete("wox") == None)
        self.assertTrue(trie.autoComplete("woy") == None)
        self.assertTrue(trie.autoComplete("woz") == None)
        self.assertTrue(trie.autoComplete("wp") == None)
        self.assertTrue(trie.autoComplete("wpa") == None)
        self.assertTrue(trie.autoComplete("wpb") == None)
        self.assertTrue(trie.autoComplete("wpc") == None)
        self.assertTrue(trie.autoComplete("wpd") == None)
        self.assertTrue(trie.autoComplete("wpe") == None)
        self.assertTrue(trie.autoComplete("wpf") == None)
        self.assertTrue(trie.autoComplete("wpg") == None)
        self.assertTrue(trie.autoComplete("wph") == None)
        self.assertTrue(trie.autoComplete("wpi") == None)
        self.assertTrue(trie.autoComplete("wpj") == None)
        self.assertTrue(trie.autoComplete("wpk") == None)
        self.assertTrue(trie.autoComplete("wpl") == None)
        self.assertTrue(trie.autoComplete("wpm") == None)
        self.assertTrue(trie.autoComplete("wpn") == None)
        self.assertTrue(trie.autoComplete("wpo") == None)
        self.assertTrue(trie.autoComplete("wpp") == None)
        self.assertTrue(trie.autoComplete("wpq") == None)
        self.assertTrue(trie.autoComplete("wpr") == None)
        self.assertTrue(trie.autoComplete("wps") == None)
        self.assertTrue(trie.autoComplete("wpt") == None)
        self.assertTrue(trie.autoComplete("wpu") == None)
        self.assertTrue(trie.autoComplete("wpv") == None)
        self.assertTrue(trie.autoComplete("wpw") == None)
        self.assertTrue(trie.autoComplete("wpx") == None)
        self.assertTrue(trie.autoComplete("wpy") == None)
        self.assertTrue(trie.autoComplete("wpz") == None)
        self.assertTrue(trie.autoComplete("wq") == None)
        self.assertTrue(trie.autoComplete("wqa") == None)
        self.assertTrue(trie.autoComplete("wqb") == None)
        self.assertTrue(trie.autoComplete("wqc") == None)
        self.assertTrue(trie.autoComplete("wqd") == None)
        self.assertTrue(trie.autoComplete("wqe") == None)
        self.assertTrue(trie.autoComplete("wqf") == None)
        self.assertTrue(trie.autoComplete("wqg") == None)
        self.assertTrue(trie.autoComplete("wqh") == None)
        self.assertTrue(trie.autoComplete("wqi") == None)
        self.assertTrue(trie.autoComplete("wqj") == None)
        self.assertTrue(trie.autoComplete("wqk") == None)
        self.assertTrue(trie.autoComplete("wql") == None)
        self.assertTrue(trie.autoComplete("wqm") == None)
        self.assertTrue(trie.autoComplete("wqn") == None)
        self.assertTrue(trie.autoComplete("wqo") == None)
        self.assertTrue(trie.autoComplete("wqp") == None)
        self.assertTrue(trie.autoComplete("wqq") == None)
        self.assertTrue(trie.autoComplete("wqr") == None)
        self.assertTrue(trie.autoComplete("wqs") == None)
        self.assertTrue(trie.autoComplete("wqt") == None)
        self.assertTrue(trie.autoComplete("wqu") == None)
        self.assertTrue(trie.autoComplete("wqv") == None)
        self.assertTrue(trie.autoComplete("wqw") == None)
        self.assertTrue(trie.autoComplete("wqx") == None)
        self.assertTrue(trie.autoComplete("wqy") == None)
        self.assertTrue(trie.autoComplete("wqz") == None)
        self.assertTrue(trie.autoComplete("wr") == "written")
        self.assertTrue(trie.autoComplete("wra") == None)
        self.assertTrue(trie.autoComplete("wrb") == None)
        self.assertTrue(trie.autoComplete("wrc") == None)
        self.assertTrue(trie.autoComplete("wrd") == None)
        self.assertTrue(trie.autoComplete("wre") == None)
        self.assertTrue(trie.autoComplete("wrf") == None)
        self.assertTrue(trie.autoComplete("wrg") == None)
        self.assertTrue(trie.autoComplete("wrh") == None)
        self.assertTrue(trie.autoComplete("wri") == "written")
        self.assertTrue(trie.autoComplete("writ") == "written")
        self.assertTrue(trie.autoComplete("writi") == "writing")
        self.assertTrue(trie.autoComplete("writin") == "writing")
        self.assertTrue(trie.autoComplete("writing") == "writing")
        self.assertTrue(trie.autoComplete("writings") == "writings")
        self.assertTrue(trie.autoComplete("writs") == "writs")
        self.assertTrue(trie.autoComplete("writt") == "written")
        self.assertTrue(trie.autoComplete("writte") == "written")
        self.assertTrue(trie.autoComplete("written") == "written")
        self.assertTrue(trie.autoComplete("wrj") == None)
        self.assertTrue(trie.autoComplete("wrk") == None)
        self.assertTrue(trie.autoComplete("wrl") == None)
        self.assertTrue(trie.autoComplete("wrm") == None)
        self.assertTrue(trie.autoComplete("wrn") == None)
        self.assertTrue(trie.autoComplete("wro") == None)
        self.assertTrue(trie.autoComplete("wrp") == None)
        self.assertTrue(trie.autoComplete("wrq") == None)
        self.assertTrue(trie.autoComplete("wrr") == None)
        self.assertTrue(trie.autoComplete("wrs") == None)
        self.assertTrue(trie.autoComplete("wrt") == None)
        self.assertTrue(trie.autoComplete("wru") == None)
        self.assertTrue(trie.autoComplete("wrv") == None)
        self.assertTrue(trie.autoComplete("wrw") == None)
        self.assertTrue(trie.autoComplete("wrx") == None)
        self.assertTrue(trie.autoComplete("wry") == None)
        self.assertTrue(trie.autoComplete("wrz") == None)
        self.assertTrue(trie.autoComplete("ws") == None)
        self.assertTrue(trie.autoComplete("wsa") == None)
        self.assertTrue(trie.autoComplete("wsb") == None)
        self.assertTrue(trie.autoComplete("wsc") == None)
        self.assertTrue(trie.autoComplete("wsd") == None)
        self.assertTrue(trie.autoComplete("wse") == None)
        self.assertTrue(trie.autoComplete("wsf") == None)
        self.assertTrue(trie.autoComplete("wsg") == None)
        self.assertTrue(trie.autoComplete("wsh") == None)
        self.assertTrue(trie.autoComplete("wsi") == None)
        self.assertTrue(trie.autoComplete("wsj") == None)
        self.assertTrue(trie.autoComplete("wsk") == None)
        self.assertTrue(trie.autoComplete("wsl") == None)
        self.assertTrue(trie.autoComplete("wsm") == None)
        self.assertTrue(trie.autoComplete("wsn") == None)
        self.assertTrue(trie.autoComplete("wso") == None)
        self.assertTrue(trie.autoComplete("wsp") == None)
        self.assertTrue(trie.autoComplete("wsq") == None)
        self.assertTrue(trie.autoComplete("wsr") == None)
        self.assertTrue(trie.autoComplete("wss") == None)
        self.assertTrue(trie.autoComplete("wst") == None)
        self.assertTrue(trie.autoComplete("wsu") == None)
        self.assertTrue(trie.autoComplete("wsv") == None)
        self.assertTrue(trie.autoComplete("wsw") == None)
        self.assertTrue(trie.autoComplete("wsx") == None)
        self.assertTrue(trie.autoComplete("wsy") == None)
        self.assertTrue(trie.autoComplete("wsz") == None)
        self.assertTrue(trie.autoComplete("wt") == None)
        self.assertTrue(trie.autoComplete("wta") == None)
        self.assertTrue(trie.autoComplete("wtb") == None)
        self.assertTrue(trie.autoComplete("wtc") == None)
        self.assertTrue(trie.autoComplete("wtd") == None)
        self.assertTrue(trie.autoComplete("wte") == None)
        self.assertTrue(trie.autoComplete("wtf") == None)
        self.assertTrue(trie.autoComplete("wtg") == None)
        self.assertTrue(trie.autoComplete("wth") == None)
        self.assertTrue(trie.autoComplete("wti") == None)
        self.assertTrue(trie.autoComplete("wtj") == None)
        self.assertTrue(trie.autoComplete("wtk") == None)
        self.assertTrue(trie.autoComplete("wtl") == None)
        self.assertTrue(trie.autoComplete("wtm") == None)
        self.assertTrue(trie.autoComplete("wtn") == None)
        self.assertTrue(trie.autoComplete("wto") == None)
        self.assertTrue(trie.autoComplete("wtp") == None)
        self.assertTrue(trie.autoComplete("wtq") == None)
        self.assertTrue(trie.autoComplete("wtr") == None)
        self.assertTrue(trie.autoComplete("wts") == None)
        self.assertTrue(trie.autoComplete("wtt") == None)
        self.assertTrue(trie.autoComplete("wtu") == None)
        self.assertTrue(trie.autoComplete("wtv") == None)
        self.assertTrue(trie.autoComplete("wtw") == None)
        self.assertTrue(trie.autoComplete("wtx") == None)
        self.assertTrue(trie.autoComplete("wty") == None)
        self.assertTrue(trie.autoComplete("wtz") == None)
        self.assertTrue(trie.autoComplete("wu") == None)
        self.assertTrue(trie.autoComplete("wua") == None)
        self.assertTrue(trie.autoComplete("wub") == None)
        self.assertTrue(trie.autoComplete("wuc") == None)
        self.assertTrue(trie.autoComplete("wud") == None)
        self.assertTrue(trie.autoComplete("wue") == None)
        self.assertTrue(trie.autoComplete("wuf") == None)
        self.assertTrue(trie.autoComplete("wug") == None)
        self.assertTrue(trie.autoComplete("wuh") == None)
        self.assertTrue(trie.autoComplete("wui") == None)
        self.assertTrue(trie.autoComplete("wuj") == None)
        self.assertTrue(trie.autoComplete("wuk") == None)
        self.assertTrue(trie.autoComplete("wul") == None)
        self.assertTrue(trie.autoComplete("wum") == None)
        self.assertTrue(trie.autoComplete("wun") == None)
        self.assertTrue(trie.autoComplete("wuo") == None)
        self.assertTrue(trie.autoComplete("wup") == None)
        self.assertTrue(trie.autoComplete("wuq") == None)
        self.assertTrue(trie.autoComplete("wur") == None)
        self.assertTrue(trie.autoComplete("wus") == None)
        self.assertTrue(trie.autoComplete("wut") == None)
        self.assertTrue(trie.autoComplete("wuu") == None)
        self.assertTrue(trie.autoComplete("wuv") == None)
        self.assertTrue(trie.autoComplete("wuw") == None)
        self.assertTrue(trie.autoComplete("wux") == None)
        self.assertTrue(trie.autoComplete("wuy") == None)
        self.assertTrue(trie.autoComplete("wuz") == None)
        self.assertTrue(trie.autoComplete("wv") == None)
        self.assertTrue(trie.autoComplete("wva") == None)
        self.assertTrue(trie.autoComplete("wvb") == None)
        self.assertTrue(trie.autoComplete("wvc") == None)
        self.assertTrue(trie.autoComplete("wvd") == None)
        self.assertTrue(trie.autoComplete("wve") == None)
        self.assertTrue(trie.autoComplete("wvf") == None)
        self.assertTrue(trie.autoComplete("wvg") == None)
        self.assertTrue(trie.autoComplete("wvh") == None)
        self.assertTrue(trie.autoComplete("wvi") == None)
        self.assertTrue(trie.autoComplete("wvj") == None)
        self.assertTrue(trie.autoComplete("wvk") == None)
        self.assertTrue(trie.autoComplete("wvl") == None)
        self.assertTrue(trie.autoComplete("wvm") == None)
        self.assertTrue(trie.autoComplete("wvn") == None)
        self.assertTrue(trie.autoComplete("wvo") == None)
        self.assertTrue(trie.autoComplete("wvp") == None)
        self.assertTrue(trie.autoComplete("wvq") == None)
        self.assertTrue(trie.autoComplete("wvr") == None)
        self.assertTrue(trie.autoComplete("wvs") == None)
        self.assertTrue(trie.autoComplete("wvt") == None)
        self.assertTrue(trie.autoComplete("wvu") == None)
        self.assertTrue(trie.autoComplete("wvv") == None)
        self.assertTrue(trie.autoComplete("wvw") == None)
        self.assertTrue(trie.autoComplete("wvx") == None)
        self.assertTrue(trie.autoComplete("wvy") == None)
        self.assertTrue(trie.autoComplete("wvz") == None)
        self.assertTrue(trie.autoComplete("ww") == None)
        self.assertTrue(trie.autoComplete("wwa") == None)
        self.assertTrue(trie.autoComplete("wwb") == None)
        self.assertTrue(trie.autoComplete("wwc") == None)
        self.assertTrue(trie.autoComplete("wwd") == None)
        self.assertTrue(trie.autoComplete("wwe") == None)
        self.assertTrue(trie.autoComplete("wwf") == None)
        self.assertTrue(trie.autoComplete("wwg") == None)
        self.assertTrue(trie.autoComplete("wwh") == None)
        self.assertTrue(trie.autoComplete("wwi") == None)
        self.assertTrue(trie.autoComplete("wwj") == None)
        self.assertTrue(trie.autoComplete("wwk") == None)
        self.assertTrue(trie.autoComplete("wwl") == None)
        self.assertTrue(trie.autoComplete("wwm") == None)
        self.assertTrue(trie.autoComplete("wwn") == None)
        self.assertTrue(trie.autoComplete("wwo") == None)
        self.assertTrue(trie.autoComplete("wwp") == None)
        self.assertTrue(trie.autoComplete("wwq") == None)
        self.assertTrue(trie.autoComplete("wwr") == None)
        self.assertTrue(trie.autoComplete("wws") == None)
        self.assertTrue(trie.autoComplete("wwt") == None)
        self.assertTrue(trie.autoComplete("wwu") == None)
        self.assertTrue(trie.autoComplete("wwv") == None)
        self.assertTrue(trie.autoComplete("www") == None)
        self.assertTrue(trie.autoComplete("wwx") == None)
        self.assertTrue(trie.autoComplete("wwy") == None)
        self.assertTrue(trie.autoComplete("wwz") == None)
        self.assertTrue(trie.autoComplete("wx") == None)
        self.assertTrue(trie.autoComplete("wxa") == None)
        self.assertTrue(trie.autoComplete("wxb") == None)
        self.assertTrue(trie.autoComplete("wxc") == None)
        self.assertTrue(trie.autoComplete("wxd") == None)
        self.assertTrue(trie.autoComplete("wxe") == None)
        self.assertTrue(trie.autoComplete("wxf") == None)
        self.assertTrue(trie.autoComplete("wxg") == None)
        self.assertTrue(trie.autoComplete("wxh") == None)
        self.assertTrue(trie.autoComplete("wxi") == None)
        self.assertTrue(trie.autoComplete("wxj") == None)
        self.assertTrue(trie.autoComplete("wxk") == None)
        self.assertTrue(trie.autoComplete("wxl") == None)
        self.assertTrue(trie.autoComplete("wxm") == None)
        self.assertTrue(trie.autoComplete("wxn") == None)
        self.assertTrue(trie.autoComplete("wxo") == None)
        self.assertTrue(trie.autoComplete("wxp") == None)
        self.assertTrue(trie.autoComplete("wxq") == None)
        self.assertTrue(trie.autoComplete("wxr") == None)
        self.assertTrue(trie.autoComplete("wxs") == None)
        self.assertTrue(trie.autoComplete("wxt") == None)
        self.assertTrue(trie.autoComplete("wxu") == None)
        self.assertTrue(trie.autoComplete("wxv") == None)
        self.assertTrue(trie.autoComplete("wxw") == None)
        self.assertTrue(trie.autoComplete("wxx") == None)
        self.assertTrue(trie.autoComplete("wxy") == None)
        self.assertTrue(trie.autoComplete("wxz") == None)
        self.assertTrue(trie.autoComplete("wy") == None)
        self.assertTrue(trie.autoComplete("wya") == None)
        self.assertTrue(trie.autoComplete("wyb") == None)
        self.assertTrue(trie.autoComplete("wyc") == None)
        self.assertTrue(trie.autoComplete("wyd") == None)
        self.assertTrue(trie.autoComplete("wye") == None)
        self.assertTrue(trie.autoComplete("wyf") == None)
        self.assertTrue(trie.autoComplete("wyg") == None)
        self.assertTrue(trie.autoComplete("wyh") == None)
        self.assertTrue(trie.autoComplete("wyi") == None)
        self.assertTrue(trie.autoComplete("wyj") == None)
        self.assertTrue(trie.autoComplete("wyk") == None)
        self.assertTrue(trie.autoComplete("wyl") == None)
        self.assertTrue(trie.autoComplete("wym") == None)
        self.assertTrue(trie.autoComplete("wyn") == None)
        self.assertTrue(trie.autoComplete("wyo") == None)
        self.assertTrue(trie.autoComplete("wyp") == None)
        self.assertTrue(trie.autoComplete("wyq") == None)
        self.assertTrue(trie.autoComplete("wyr") == None)
        self.assertTrue(trie.autoComplete("wys") == None)
        self.assertTrue(trie.autoComplete("wyt") == None)
        self.assertTrue(trie.autoComplete("wyu") == None)
        self.assertTrue(trie.autoComplete("wyv") == None)
        self.assertTrue(trie.autoComplete("wyw") == None)
        self.assertTrue(trie.autoComplete("wyx") == None)
        self.assertTrue(trie.autoComplete("wyy") == None)
        self.assertTrue(trie.autoComplete("wyz") == None)
        self.assertTrue(trie.autoComplete("wz") == None)
        self.assertTrue(trie.autoComplete("wza") == None)
        self.assertTrue(trie.autoComplete("wzb") == None)
        self.assertTrue(trie.autoComplete("wzc") == None)
        self.assertTrue(trie.autoComplete("wzd") == None)
        self.assertTrue(trie.autoComplete("wze") == None)
        self.assertTrue(trie.autoComplete("wzf") == None)
        self.assertTrue(trie.autoComplete("wzg") == None)
        self.assertTrue(trie.autoComplete("wzh") == None)
        self.assertTrue(trie.autoComplete("wzi") == None)
        self.assertTrue(trie.autoComplete("wzj") == None)
        self.assertTrue(trie.autoComplete("wzk") == None)
        self.assertTrue(trie.autoComplete("wzl") == None)
        self.assertTrue(trie.autoComplete("wzm") == None)
        self.assertTrue(trie.autoComplete("wzn") == None)
        self.assertTrue(trie.autoComplete("wzo") == None)
        self.assertTrue(trie.autoComplete("wzp") == None)
        self.assertTrue(trie.autoComplete("wzq") == None)
        self.assertTrue(trie.autoComplete("wzr") == None)
        self.assertTrue(trie.autoComplete("wzs") == None)
        self.assertTrue(trie.autoComplete("wzt") == None)
        self.assertTrue(trie.autoComplete("wzu") == None)
        self.assertTrue(trie.autoComplete("wzv") == None)
        self.assertTrue(trie.autoComplete("wzw") == None)
        self.assertTrue(trie.autoComplete("wzx") == None)
        self.assertTrue(trie.autoComplete("wzy") == None)
        self.assertTrue(trie.autoComplete("wzz") == None)
        self.assertTrue(trie.autoComplete("x") == None)
        self.assertTrue(trie.autoComplete("xa") == None)
        self.assertTrue(trie.autoComplete("xaa") == None)
        self.assertTrue(trie.autoComplete("xab") == None)
        self.assertTrue(trie.autoComplete("xac") == None)
        self.assertTrue(trie.autoComplete("xad") == None)
        self.assertTrue(trie.autoComplete("xae") == None)
        self.assertTrue(trie.autoComplete("xaf") == None)
        self.assertTrue(trie.autoComplete("xag") == None)
        self.assertTrue(trie.autoComplete("xah") == None)
        self.assertTrue(trie.autoComplete("xai") == None)
        self.assertTrue(trie.autoComplete("xaj") == None)
        self.assertTrue(trie.autoComplete("xak") == None)
        self.assertTrue(trie.autoComplete("xal") == None)
        self.assertTrue(trie.autoComplete("xam") == None)
        self.assertTrue(trie.autoComplete("xan") == None)
        self.assertTrue(trie.autoComplete("xao") == None)
        self.assertTrue(trie.autoComplete("xap") == None)
        self.assertTrue(trie.autoComplete("xaq") == None)
        self.assertTrue(trie.autoComplete("xar") == None)
        self.assertTrue(trie.autoComplete("xas") == None)
        self.assertTrue(trie.autoComplete("xat") == None)
        self.assertTrue(trie.autoComplete("xau") == None)
        self.assertTrue(trie.autoComplete("xav") == None)
        self.assertTrue(trie.autoComplete("xaw") == None)
        self.assertTrue(trie.autoComplete("xax") == None)
        self.assertTrue(trie.autoComplete("xay") == None)
        self.assertTrue(trie.autoComplete("xaz") == None)
        self.assertTrue(trie.autoComplete("xb") == None)
        self.assertTrue(trie.autoComplete("xba") == None)
        self.assertTrue(trie.autoComplete("xbb") == None)
        self.assertTrue(trie.autoComplete("xbc") == None)
        self.assertTrue(trie.autoComplete("xbd") == None)
        self.assertTrue(trie.autoComplete("xbe") == None)
        self.assertTrue(trie.autoComplete("xbf") == None)
        self.assertTrue(trie.autoComplete("xbg") == None)
        self.assertTrue(trie.autoComplete("xbh") == None)
        self.assertTrue(trie.autoComplete("xbi") == None)
        self.assertTrue(trie.autoComplete("xbj") == None)
        self.assertTrue(trie.autoComplete("xbk") == None)
        self.assertTrue(trie.autoComplete("xbl") == None)
        self.assertTrue(trie.autoComplete("xbm") == None)
        self.assertTrue(trie.autoComplete("xbn") == None)
        self.assertTrue(trie.autoComplete("xbo") == None)
        self.assertTrue(trie.autoComplete("xbp") == None)
        self.assertTrue(trie.autoComplete("xbq") == None)
        self.assertTrue(trie.autoComplete("xbr") == None)
        self.assertTrue(trie.autoComplete("xbs") == None)
        self.assertTrue(trie.autoComplete("xbt") == None)
        self.assertTrue(trie.autoComplete("xbu") == None)
        self.assertTrue(trie.autoComplete("xbv") == None)
        self.assertTrue(trie.autoComplete("xbw") == None)
        self.assertTrue(trie.autoComplete("xbx") == None)
        self.assertTrue(trie.autoComplete("xby") == None)
        self.assertTrue(trie.autoComplete("xbz") == None)
        self.assertTrue(trie.autoComplete("xc") == None)
        self.assertTrue(trie.autoComplete("xca") == None)
        self.assertTrue(trie.autoComplete("xcb") == None)
        self.assertTrue(trie.autoComplete("xcc") == None)
        self.assertTrue(trie.autoComplete("xcd") == None)
        self.assertTrue(trie.autoComplete("xce") == None)
        self.assertTrue(trie.autoComplete("xcf") == None)
        self.assertTrue(trie.autoComplete("xcg") == None)
        self.assertTrue(trie.autoComplete("xch") == None)
        self.assertTrue(trie.autoComplete("xci") == None)
        self.assertTrue(trie.autoComplete("xcj") == None)
        self.assertTrue(trie.autoComplete("xck") == None)
        self.assertTrue(trie.autoComplete("xcl") == None)
        self.assertTrue(trie.autoComplete("xcm") == None)
        self.assertTrue(trie.autoComplete("xcn") == None)
        self.assertTrue(trie.autoComplete("xco") == None)
        self.assertTrue(trie.autoComplete("xcp") == None)
        self.assertTrue(trie.autoComplete("xcq") == None)
        self.assertTrue(trie.autoComplete("xcr") == None)
        self.assertTrue(trie.autoComplete("xcs") == None)
        self.assertTrue(trie.autoComplete("xct") == None)
        self.assertTrue(trie.autoComplete("xcu") == None)
        self.assertTrue(trie.autoComplete("xcv") == None)
        self.assertTrue(trie.autoComplete("xcw") == None)
        self.assertTrue(trie.autoComplete("xcx") == None)
        self.assertTrue(trie.autoComplete("xcy") == None)
        self.assertTrue(trie.autoComplete("xcz") == None)
        self.assertTrue(trie.autoComplete("xd") == None)
        self.assertTrue(trie.autoComplete("xda") == None)
        self.assertTrue(trie.autoComplete("xdb") == None)
        self.assertTrue(trie.autoComplete("xdc") == None)
        self.assertTrue(trie.autoComplete("xdd") == None)
        self.assertTrue(trie.autoComplete("xde") == None)
        self.assertTrue(trie.autoComplete("xdf") == None)
        self.assertTrue(trie.autoComplete("xdg") == None)
        self.assertTrue(trie.autoComplete("xdh") == None)
        self.assertTrue(trie.autoComplete("xdi") == None)
        self.assertTrue(trie.autoComplete("xdj") == None)
        self.assertTrue(trie.autoComplete("xdk") == None)
        self.assertTrue(trie.autoComplete("xdl") == None)
        self.assertTrue(trie.autoComplete("xdm") == None)
        self.assertTrue(trie.autoComplete("xdn") == None)
        self.assertTrue(trie.autoComplete("xdo") == None)
        self.assertTrue(trie.autoComplete("xdp") == None)
        self.assertTrue(trie.autoComplete("xdq") == None)
        self.assertTrue(trie.autoComplete("xdr") == None)
        self.assertTrue(trie.autoComplete("xds") == None)
        self.assertTrue(trie.autoComplete("xdt") == None)
        self.assertTrue(trie.autoComplete("xdu") == None)
        self.assertTrue(trie.autoComplete("xdv") == None)
        self.assertTrue(trie.autoComplete("xdw") == None)
        self.assertTrue(trie.autoComplete("xdx") == None)
        self.assertTrue(trie.autoComplete("xdy") == None)
        self.assertTrue(trie.autoComplete("xdz") == None)
        self.assertTrue(trie.autoComplete("xe") == None)
        self.assertTrue(trie.autoComplete("xea") == None)
        self.assertTrue(trie.autoComplete("xeb") == None)
        self.assertTrue(trie.autoComplete("xec") == None)
        self.assertTrue(trie.autoComplete("xed") == None)
        self.assertTrue(trie.autoComplete("xee") == None)
        self.assertTrue(trie.autoComplete("xef") == None)
        self.assertTrue(trie.autoComplete("xeg") == None)
        self.assertTrue(trie.autoComplete("xeh") == None)
        self.assertTrue(trie.autoComplete("xei") == None)
        self.assertTrue(trie.autoComplete("xej") == None)
        self.assertTrue(trie.autoComplete("xek") == None)
        self.assertTrue(trie.autoComplete("xel") == None)
        self.assertTrue(trie.autoComplete("xem") == None)
        self.assertTrue(trie.autoComplete("xen") == None)
        self.assertTrue(trie.autoComplete("xeo") == None)
        self.assertTrue(trie.autoComplete("xep") == None)
        self.assertTrue(trie.autoComplete("xeq") == None)
        self.assertTrue(trie.autoComplete("xer") == None)
        self.assertTrue(trie.autoComplete("xes") == None)
        self.assertTrue(trie.autoComplete("xet") == None)
        self.assertTrue(trie.autoComplete("xeu") == None)
        self.assertTrue(trie.autoComplete("xev") == None)
        self.assertTrue(trie.autoComplete("xew") == None)
        self.assertTrue(trie.autoComplete("xex") == None)
        self.assertTrue(trie.autoComplete("xey") == None)
        self.assertTrue(trie.autoComplete("xez") == None)
        self.assertTrue(trie.autoComplete("xf") == None)
        self.assertTrue(trie.autoComplete("xfa") == None)
        self.assertTrue(trie.autoComplete("xfb") == None)
        self.assertTrue(trie.autoComplete("xfc") == None)
        self.assertTrue(trie.autoComplete("xfd") == None)
        self.assertTrue(trie.autoComplete("xfe") == None)
        self.assertTrue(trie.autoComplete("xff") == None)
        self.assertTrue(trie.autoComplete("xfg") == None)
        self.assertTrue(trie.autoComplete("xfh") == None)
        self.assertTrue(trie.autoComplete("xfi") == None)
        self.assertTrue(trie.autoComplete("xfj") == None)
        self.assertTrue(trie.autoComplete("xfk") == None)
        self.assertTrue(trie.autoComplete("xfl") == None)
        self.assertTrue(trie.autoComplete("xfm") == None)
        self.assertTrue(trie.autoComplete("xfn") == None)
        self.assertTrue(trie.autoComplete("xfo") == None)
        self.assertTrue(trie.autoComplete("xfp") == None)
        self.assertTrue(trie.autoComplete("xfq") == None)
        self.assertTrue(trie.autoComplete("xfr") == None)
        self.assertTrue(trie.autoComplete("xfs") == None)
        self.assertTrue(trie.autoComplete("xft") == None)
        self.assertTrue(trie.autoComplete("xfu") == None)
        self.assertTrue(trie.autoComplete("xfv") == None)
        self.assertTrue(trie.autoComplete("xfw") == None)
        self.assertTrue(trie.autoComplete("xfx") == None)
        self.assertTrue(trie.autoComplete("xfy") == None)
        self.assertTrue(trie.autoComplete("xfz") == None)
        self.assertTrue(trie.autoComplete("xg") == None)
        self.assertTrue(trie.autoComplete("xga") == None)
        self.assertTrue(trie.autoComplete("xgb") == None)
        self.assertTrue(trie.autoComplete("xgc") == None)
        self.assertTrue(trie.autoComplete("xgd") == None)
        self.assertTrue(trie.autoComplete("xge") == None)
        self.assertTrue(trie.autoComplete("xgf") == None)
        self.assertTrue(trie.autoComplete("xgg") == None)
        self.assertTrue(trie.autoComplete("xgh") == None)
        self.assertTrue(trie.autoComplete("xgi") == None)
        self.assertTrue(trie.autoComplete("xgj") == None)
        self.assertTrue(trie.autoComplete("xgk") == None)
        self.assertTrue(trie.autoComplete("xgl") == None)
        self.assertTrue(trie.autoComplete("xgm") == None)
        self.assertTrue(trie.autoComplete("xgn") == None)
        self.assertTrue(trie.autoComplete("xgo") == None)
        self.assertTrue(trie.autoComplete("xgp") == None)
        self.assertTrue(trie.autoComplete("xgq") == None)
        self.assertTrue(trie.autoComplete("xgr") == None)
        self.assertTrue(trie.autoComplete("xgs") == None)
        self.assertTrue(trie.autoComplete("xgt") == None)
        self.assertTrue(trie.autoComplete("xgu") == None)
        self.assertTrue(trie.autoComplete("xgv") == None)
        self.assertTrue(trie.autoComplete("xgw") == None)
        self.assertTrue(trie.autoComplete("xgx") == None)
        self.assertTrue(trie.autoComplete("xgy") == None)
        self.assertTrue(trie.autoComplete("xgz") == None)
        self.assertTrue(trie.autoComplete("xh") == None)
        self.assertTrue(trie.autoComplete("xha") == None)
        self.assertTrue(trie.autoComplete("xhb") == None)
        self.assertTrue(trie.autoComplete("xhc") == None)
        self.assertTrue(trie.autoComplete("xhd") == None)
        self.assertTrue(trie.autoComplete("xhe") == None)
        self.assertTrue(trie.autoComplete("xhf") == None)
        self.assertTrue(trie.autoComplete("xhg") == None)
        self.assertTrue(trie.autoComplete("xhh") == None)
        self.assertTrue(trie.autoComplete("xhi") == None)
        self.assertTrue(trie.autoComplete("xhj") == None)
        self.assertTrue(trie.autoComplete("xhk") == None)
        self.assertTrue(trie.autoComplete("xhl") == None)
        self.assertTrue(trie.autoComplete("xhm") == None)
        self.assertTrue(trie.autoComplete("xhn") == None)
        self.assertTrue(trie.autoComplete("xho") == None)
        self.assertTrue(trie.autoComplete("xhp") == None)
        self.assertTrue(trie.autoComplete("xhq") == None)
        self.assertTrue(trie.autoComplete("xhr") == None)
        self.assertTrue(trie.autoComplete("xhs") == None)
        self.assertTrue(trie.autoComplete("xht") == None)
        self.assertTrue(trie.autoComplete("xhu") == None)
        self.assertTrue(trie.autoComplete("xhv") == None)
        self.assertTrue(trie.autoComplete("xhw") == None)
        self.assertTrue(trie.autoComplete("xhx") == None)
        self.assertTrue(trie.autoComplete("xhy") == None)
        self.assertTrue(trie.autoComplete("xhz") == None)
        self.assertTrue(trie.autoComplete("xi") == None)
        self.assertTrue(trie.autoComplete("xia") == None)
        self.assertTrue(trie.autoComplete("xib") == None)
        self.assertTrue(trie.autoComplete("xic") == None)
        self.assertTrue(trie.autoComplete("xid") == None)
        self.assertTrue(trie.autoComplete("xie") == None)
        self.assertTrue(trie.autoComplete("xif") == None)
        self.assertTrue(trie.autoComplete("xig") == None)
        self.assertTrue(trie.autoComplete("xih") == None)
        self.assertTrue(trie.autoComplete("xii") == None)
        self.assertTrue(trie.autoComplete("xij") == None)
        self.assertTrue(trie.autoComplete("xik") == None)
        self.assertTrue(trie.autoComplete("xil") == None)
        self.assertTrue(trie.autoComplete("xim") == None)
        self.assertTrue(trie.autoComplete("xin") == None)
        self.assertTrue(trie.autoComplete("xio") == None)
        self.assertTrue(trie.autoComplete("xip") == None)
        self.assertTrue(trie.autoComplete("xiq") == None)
        self.assertTrue(trie.autoComplete("xir") == None)
        self.assertTrue(trie.autoComplete("xis") == None)
        self.assertTrue(trie.autoComplete("xit") == None)
        self.assertTrue(trie.autoComplete("xiu") == None)
        self.assertTrue(trie.autoComplete("xiv") == None)
        self.assertTrue(trie.autoComplete("xiw") == None)
        self.assertTrue(trie.autoComplete("xix") == None)
        self.assertTrue(trie.autoComplete("xiy") == None)
        self.assertTrue(trie.autoComplete("xiz") == None)
        self.assertTrue(trie.autoComplete("xj") == None)
        self.assertTrue(trie.autoComplete("xja") == None)
        self.assertTrue(trie.autoComplete("xjb") == None)
        self.assertTrue(trie.autoComplete("xjc") == None)
        self.assertTrue(trie.autoComplete("xjd") == None)
        self.assertTrue(trie.autoComplete("xje") == None)
        self.assertTrue(trie.autoComplete("xjf") == None)
        self.assertTrue(trie.autoComplete("xjg") == None)
        self.assertTrue(trie.autoComplete("xjh") == None)
        self.assertTrue(trie.autoComplete("xji") == None)
        self.assertTrue(trie.autoComplete("xjj") == None)
        self.assertTrue(trie.autoComplete("xjk") == None)
        self.assertTrue(trie.autoComplete("xjl") == None)
        self.assertTrue(trie.autoComplete("xjm") == None)
        self.assertTrue(trie.autoComplete("xjn") == None)
        self.assertTrue(trie.autoComplete("xjo") == None)
        self.assertTrue(trie.autoComplete("xjp") == None)
        self.assertTrue(trie.autoComplete("xjq") == None)
        self.assertTrue(trie.autoComplete("xjr") == None)
        self.assertTrue(trie.autoComplete("xjs") == None)
        self.assertTrue(trie.autoComplete("xjt") == None)
        self.assertTrue(trie.autoComplete("xju") == None)
        self.assertTrue(trie.autoComplete("xjv") == None)
        self.assertTrue(trie.autoComplete("xjw") == None)
        self.assertTrue(trie.autoComplete("xjx") == None)
        self.assertTrue(trie.autoComplete("xjy") == None)
        self.assertTrue(trie.autoComplete("xjz") == None)
        self.assertTrue(trie.autoComplete("xk") == None)
        self.assertTrue(trie.autoComplete("xka") == None)
        self.assertTrue(trie.autoComplete("xkb") == None)
        self.assertTrue(trie.autoComplete("xkc") == None)
        self.assertTrue(trie.autoComplete("xkd") == None)
        self.assertTrue(trie.autoComplete("xke") == None)
        self.assertTrue(trie.autoComplete("xkf") == None)
        self.assertTrue(trie.autoComplete("xkg") == None)
        self.assertTrue(trie.autoComplete("xkh") == None)
        self.assertTrue(trie.autoComplete("xki") == None)
        self.assertTrue(trie.autoComplete("xkj") == None)
        self.assertTrue(trie.autoComplete("xkk") == None)
        self.assertTrue(trie.autoComplete("xkl") == None)
        self.assertTrue(trie.autoComplete("xkm") == None)
        self.assertTrue(trie.autoComplete("xkn") == None)
        self.assertTrue(trie.autoComplete("xko") == None)
        self.assertTrue(trie.autoComplete("xkp") == None)
        self.assertTrue(trie.autoComplete("xkq") == None)
        self.assertTrue(trie.autoComplete("xkr") == None)
        self.assertTrue(trie.autoComplete("xks") == None)
        self.assertTrue(trie.autoComplete("xkt") == None)
        self.assertTrue(trie.autoComplete("xku") == None)
        self.assertTrue(trie.autoComplete("xkv") == None)
        self.assertTrue(trie.autoComplete("xkw") == None)
        self.assertTrue(trie.autoComplete("xkx") == None)
        self.assertTrue(trie.autoComplete("xky") == None)
        self.assertTrue(trie.autoComplete("xkz") == None)
        self.assertTrue(trie.autoComplete("xl") == None)
        self.assertTrue(trie.autoComplete("xla") == None)
        self.assertTrue(trie.autoComplete("xlb") == None)
        self.assertTrue(trie.autoComplete("xlc") == None)
        self.assertTrue(trie.autoComplete("xld") == None)
        self.assertTrue(trie.autoComplete("xle") == None)
        self.assertTrue(trie.autoComplete("xlf") == None)
        self.assertTrue(trie.autoComplete("xlg") == None)
        self.assertTrue(trie.autoComplete("xlh") == None)
        self.assertTrue(trie.autoComplete("xli") == None)
        self.assertTrue(trie.autoComplete("xlj") == None)
        self.assertTrue(trie.autoComplete("xlk") == None)
        self.assertTrue(trie.autoComplete("xll") == None)
        self.assertTrue(trie.autoComplete("xlm") == None)
        self.assertTrue(trie.autoComplete("xln") == None)
        self.assertTrue(trie.autoComplete("xlo") == None)
        self.assertTrue(trie.autoComplete("xlp") == None)
        self.assertTrue(trie.autoComplete("xlq") == None)
        self.assertTrue(trie.autoComplete("xlr") == None)
        self.assertTrue(trie.autoComplete("xls") == None)
        self.assertTrue(trie.autoComplete("xlt") == None)
        self.assertTrue(trie.autoComplete("xlu") == None)
        self.assertTrue(trie.autoComplete("xlv") == None)
        self.assertTrue(trie.autoComplete("xlw") == None)
        self.assertTrue(trie.autoComplete("xlx") == None)
        self.assertTrue(trie.autoComplete("xly") == None)
        self.assertTrue(trie.autoComplete("xlz") == None)
        self.assertTrue(trie.autoComplete("xm") == None)
        self.assertTrue(trie.autoComplete("xma") == None)
        self.assertTrue(trie.autoComplete("xmb") == None)
        self.assertTrue(trie.autoComplete("xmc") == None)
        self.assertTrue(trie.autoComplete("xmd") == None)
        self.assertTrue(trie.autoComplete("xme") == None)
        self.assertTrue(trie.autoComplete("xmf") == None)
        self.assertTrue(trie.autoComplete("xmg") == None)
        self.assertTrue(trie.autoComplete("xmh") == None)
        self.assertTrue(trie.autoComplete("xmi") == None)
        self.assertTrue(trie.autoComplete("xmj") == None)
        self.assertTrue(trie.autoComplete("xmk") == None)
        self.assertTrue(trie.autoComplete("xml") == None)
        self.assertTrue(trie.autoComplete("xmm") == None)
        self.assertTrue(trie.autoComplete("xmn") == None)
        self.assertTrue(trie.autoComplete("xmo") == None)
        self.assertTrue(trie.autoComplete("xmp") == None)
        self.assertTrue(trie.autoComplete("xmq") == None)
        self.assertTrue(trie.autoComplete("xmr") == None)
        self.assertTrue(trie.autoComplete("xms") == None)
        self.assertTrue(trie.autoComplete("xmt") == None)
        self.assertTrue(trie.autoComplete("xmu") == None)
        self.assertTrue(trie.autoComplete("xmv") == None)
        self.assertTrue(trie.autoComplete("xmw") == None)
        self.assertTrue(trie.autoComplete("xmx") == None)
        self.assertTrue(trie.autoComplete("xmy") == None)
        self.assertTrue(trie.autoComplete("xmz") == None)
        self.assertTrue(trie.autoComplete("xn") == None)
        self.assertTrue(trie.autoComplete("xna") == None)
        self.assertTrue(trie.autoComplete("xnb") == None)
        self.assertTrue(trie.autoComplete("xnc") == None)
        self.assertTrue(trie.autoComplete("xnd") == None)
        self.assertTrue(trie.autoComplete("xne") == None)
        self.assertTrue(trie.autoComplete("xnf") == None)
        self.assertTrue(trie.autoComplete("xng") == None)
        self.assertTrue(trie.autoComplete("xnh") == None)
        self.assertTrue(trie.autoComplete("xni") == None)
        self.assertTrue(trie.autoComplete("xnj") == None)
        self.assertTrue(trie.autoComplete("xnk") == None)
        self.assertTrue(trie.autoComplete("xnl") == None)
        self.assertTrue(trie.autoComplete("xnm") == None)
        self.assertTrue(trie.autoComplete("xnn") == None)
        self.assertTrue(trie.autoComplete("xno") == None)
        self.assertTrue(trie.autoComplete("xnp") == None)
        self.assertTrue(trie.autoComplete("xnq") == None)
        self.assertTrue(trie.autoComplete("xnr") == None)
        self.assertTrue(trie.autoComplete("xns") == None)
        self.assertTrue(trie.autoComplete("xnt") == None)
        self.assertTrue(trie.autoComplete("xnu") == None)
        self.assertTrue(trie.autoComplete("xnv") == None)
        self.assertTrue(trie.autoComplete("xnw") == None)
        self.assertTrue(trie.autoComplete("xnx") == None)
        self.assertTrue(trie.autoComplete("xny") == None)
        self.assertTrue(trie.autoComplete("xnz") == None)
        self.assertTrue(trie.autoComplete("xo") == None)
        self.assertTrue(trie.autoComplete("xoa") == None)
        self.assertTrue(trie.autoComplete("xob") == None)
        self.assertTrue(trie.autoComplete("xoc") == None)
        self.assertTrue(trie.autoComplete("xod") == None)
        self.assertTrue(trie.autoComplete("xoe") == None)
        self.assertTrue(trie.autoComplete("xof") == None)
        self.assertTrue(trie.autoComplete("xog") == None)
        self.assertTrue(trie.autoComplete("xoh") == None)
        self.assertTrue(trie.autoComplete("xoi") == None)
        self.assertTrue(trie.autoComplete("xoj") == None)
        self.assertTrue(trie.autoComplete("xok") == None)
        self.assertTrue(trie.autoComplete("xol") == None)
        self.assertTrue(trie.autoComplete("xom") == None)
        self.assertTrue(trie.autoComplete("xon") == None)
        self.assertTrue(trie.autoComplete("xoo") == None)
        self.assertTrue(trie.autoComplete("xop") == None)
        self.assertTrue(trie.autoComplete("xoq") == None)
        self.assertTrue(trie.autoComplete("xor") == None)
        self.assertTrue(trie.autoComplete("xos") == None)
        self.assertTrue(trie.autoComplete("xot") == None)
        self.assertTrue(trie.autoComplete("xou") == None)
        self.assertTrue(trie.autoComplete("xov") == None)
        self.assertTrue(trie.autoComplete("xow") == None)
        self.assertTrue(trie.autoComplete("xox") == None)
        self.assertTrue(trie.autoComplete("xoy") == None)
        self.assertTrue(trie.autoComplete("xoz") == None)
        self.assertTrue(trie.autoComplete("xp") == None)
        self.assertTrue(trie.autoComplete("xpa") == None)
        self.assertTrue(trie.autoComplete("xpb") == None)
        self.assertTrue(trie.autoComplete("xpc") == None)
        self.assertTrue(trie.autoComplete("xpd") == None)
        self.assertTrue(trie.autoComplete("xpe") == None)
        self.assertTrue(trie.autoComplete("xpf") == None)
        self.assertTrue(trie.autoComplete("xpg") == None)
        self.assertTrue(trie.autoComplete("xph") == None)
        self.assertTrue(trie.autoComplete("xpi") == None)
        self.assertTrue(trie.autoComplete("xpj") == None)
        self.assertTrue(trie.autoComplete("xpk") == None)
        self.assertTrue(trie.autoComplete("xpl") == None)
        self.assertTrue(trie.autoComplete("xpm") == None)
        self.assertTrue(trie.autoComplete("xpn") == None)
        self.assertTrue(trie.autoComplete("xpo") == None)
        self.assertTrue(trie.autoComplete("xpp") == None)
        self.assertTrue(trie.autoComplete("xpq") == None)
        self.assertTrue(trie.autoComplete("xpr") == None)
        self.assertTrue(trie.autoComplete("xps") == None)
        self.assertTrue(trie.autoComplete("xpt") == None)
        self.assertTrue(trie.autoComplete("xpu") == None)
        self.assertTrue(trie.autoComplete("xpv") == None)
        self.assertTrue(trie.autoComplete("xpw") == None)
        self.assertTrue(trie.autoComplete("xpx") == None)
        self.assertTrue(trie.autoComplete("xpy") == None)
        self.assertTrue(trie.autoComplete("xpz") == None)
        self.assertTrue(trie.autoComplete("xq") == None)
        self.assertTrue(trie.autoComplete("xqa") == None)
        self.assertTrue(trie.autoComplete("xqb") == None)
        self.assertTrue(trie.autoComplete("xqc") == None)
        self.assertTrue(trie.autoComplete("xqd") == None)
        self.assertTrue(trie.autoComplete("xqe") == None)
        self.assertTrue(trie.autoComplete("xqf") == None)
        self.assertTrue(trie.autoComplete("xqg") == None)
        self.assertTrue(trie.autoComplete("xqh") == None)
        self.assertTrue(trie.autoComplete("xqi") == None)
        self.assertTrue(trie.autoComplete("xqj") == None)
        self.assertTrue(trie.autoComplete("xqk") == None)
        self.assertTrue(trie.autoComplete("xql") == None)
        self.assertTrue(trie.autoComplete("xqm") == None)
        self.assertTrue(trie.autoComplete("xqn") == None)
        self.assertTrue(trie.autoComplete("xqo") == None)
        self.assertTrue(trie.autoComplete("xqp") == None)
        self.assertTrue(trie.autoComplete("xqq") == None)
        self.assertTrue(trie.autoComplete("xqr") == None)
        self.assertTrue(trie.autoComplete("xqs") == None)
        self.assertTrue(trie.autoComplete("xqt") == None)
        self.assertTrue(trie.autoComplete("xqu") == None)
        self.assertTrue(trie.autoComplete("xqv") == None)
        self.assertTrue(trie.autoComplete("xqw") == None)
        self.assertTrue(trie.autoComplete("xqx") == None)
        self.assertTrue(trie.autoComplete("xqy") == None)
        self.assertTrue(trie.autoComplete("xqz") == None)
        self.assertTrue(trie.autoComplete("xr") == None)
        self.assertTrue(trie.autoComplete("xra") == None)
        self.assertTrue(trie.autoComplete("xrb") == None)
        self.assertTrue(trie.autoComplete("xrc") == None)
        self.assertTrue(trie.autoComplete("xrd") == None)
        self.assertTrue(trie.autoComplete("xre") == None)
        self.assertTrue(trie.autoComplete("xrf") == None)
        self.assertTrue(trie.autoComplete("xrg") == None)
        self.assertTrue(trie.autoComplete("xrh") == None)
        self.assertTrue(trie.autoComplete("xri") == None)
        self.assertTrue(trie.autoComplete("xrj") == None)
        self.assertTrue(trie.autoComplete("xrk") == None)
        self.assertTrue(trie.autoComplete("xrl") == None)
        self.assertTrue(trie.autoComplete("xrm") == None)
        self.assertTrue(trie.autoComplete("xrn") == None)
        self.assertTrue(trie.autoComplete("xro") == None)
        self.assertTrue(trie.autoComplete("xrp") == None)
        self.assertTrue(trie.autoComplete("xrq") == None)
        self.assertTrue(trie.autoComplete("xrr") == None)
        self.assertTrue(trie.autoComplete("xrs") == None)
        self.assertTrue(trie.autoComplete("xrt") == None)
        self.assertTrue(trie.autoComplete("xru") == None)
        self.assertTrue(trie.autoComplete("xrv") == None)
        self.assertTrue(trie.autoComplete("xrw") == None)
        self.assertTrue(trie.autoComplete("xrx") == None)
        self.assertTrue(trie.autoComplete("xry") == None)
        self.assertTrue(trie.autoComplete("xrz") == None)
        self.assertTrue(trie.autoComplete("xs") == None)
        self.assertTrue(trie.autoComplete("xsa") == None)
        self.assertTrue(trie.autoComplete("xsb") == None)
        self.assertTrue(trie.autoComplete("xsc") == None)
        self.assertTrue(trie.autoComplete("xsd") == None)
        self.assertTrue(trie.autoComplete("xse") == None)
        self.assertTrue(trie.autoComplete("xsf") == None)
        self.assertTrue(trie.autoComplete("xsg") == None)
        self.assertTrue(trie.autoComplete("xsh") == None)
        self.assertTrue(trie.autoComplete("xsi") == None)
        self.assertTrue(trie.autoComplete("xsj") == None)
        self.assertTrue(trie.autoComplete("xsk") == None)
        self.assertTrue(trie.autoComplete("xsl") == None)
        self.assertTrue(trie.autoComplete("xsm") == None)
        self.assertTrue(trie.autoComplete("xsn") == None)
        self.assertTrue(trie.autoComplete("xso") == None)
        self.assertTrue(trie.autoComplete("xsp") == None)
        self.assertTrue(trie.autoComplete("xsq") == None)
        self.assertTrue(trie.autoComplete("xsr") == None)
        self.assertTrue(trie.autoComplete("xss") == None)
        self.assertTrue(trie.autoComplete("xst") == None)
        self.assertTrue(trie.autoComplete("xsu") == None)
        self.assertTrue(trie.autoComplete("xsv") == None)
        self.assertTrue(trie.autoComplete("xsw") == None)
        self.assertTrue(trie.autoComplete("xsx") == None)
        self.assertTrue(trie.autoComplete("xsy") == None)
        self.assertTrue(trie.autoComplete("xsz") == None)
        self.assertTrue(trie.autoComplete("xt") == None)
        self.assertTrue(trie.autoComplete("xta") == None)
        self.assertTrue(trie.autoComplete("xtb") == None)
        self.assertTrue(trie.autoComplete("xtc") == None)
        self.assertTrue(trie.autoComplete("xtd") == None)
        self.assertTrue(trie.autoComplete("xte") == None)
        self.assertTrue(trie.autoComplete("xtf") == None)
        self.assertTrue(trie.autoComplete("xtg") == None)
        self.assertTrue(trie.autoComplete("xth") == None)
        self.assertTrue(trie.autoComplete("xti") == None)
        self.assertTrue(trie.autoComplete("xtj") == None)
        self.assertTrue(trie.autoComplete("xtk") == None)
        self.assertTrue(trie.autoComplete("xtl") == None)
        self.assertTrue(trie.autoComplete("xtm") == None)
        self.assertTrue(trie.autoComplete("xtn") == None)
        self.assertTrue(trie.autoComplete("xto") == None)
        self.assertTrue(trie.autoComplete("xtp") == None)
        self.assertTrue(trie.autoComplete("xtq") == None)
        self.assertTrue(trie.autoComplete("xtr") == None)
        self.assertTrue(trie.autoComplete("xts") == None)
        self.assertTrue(trie.autoComplete("xtt") == None)
        self.assertTrue(trie.autoComplete("xtu") == None)
        self.assertTrue(trie.autoComplete("xtv") == None)
        self.assertTrue(trie.autoComplete("xtw") == None)
        self.assertTrue(trie.autoComplete("xtx") == None)
        self.assertTrue(trie.autoComplete("xty") == None)
        self.assertTrue(trie.autoComplete("xtz") == None)
        self.assertTrue(trie.autoComplete("xu") == None)
        self.assertTrue(trie.autoComplete("xua") == None)
        self.assertTrue(trie.autoComplete("xub") == None)
        self.assertTrue(trie.autoComplete("xuc") == None)
        self.assertTrue(trie.autoComplete("xud") == None)
        self.assertTrue(trie.autoComplete("xue") == None)
        self.assertTrue(trie.autoComplete("xuf") == None)
        self.assertTrue(trie.autoComplete("xug") == None)
        self.assertTrue(trie.autoComplete("xuh") == None)
        self.assertTrue(trie.autoComplete("xui") == None)
        self.assertTrue(trie.autoComplete("xuj") == None)
        self.assertTrue(trie.autoComplete("xuk") == None)
        self.assertTrue(trie.autoComplete("xul") == None)
        self.assertTrue(trie.autoComplete("xum") == None)
        self.assertTrue(trie.autoComplete("xun") == None)
        self.assertTrue(trie.autoComplete("xuo") == None)
        self.assertTrue(trie.autoComplete("xup") == None)
        self.assertTrue(trie.autoComplete("xuq") == None)
        self.assertTrue(trie.autoComplete("xur") == None)
        self.assertTrue(trie.autoComplete("xus") == None)
        self.assertTrue(trie.autoComplete("xut") == None)
        self.assertTrue(trie.autoComplete("xuu") == None)
        self.assertTrue(trie.autoComplete("xuv") == None)
        self.assertTrue(trie.autoComplete("xuw") == None)
        self.assertTrue(trie.autoComplete("xux") == None)
        self.assertTrue(trie.autoComplete("xuy") == None)
        self.assertTrue(trie.autoComplete("xuz") == None)
        self.assertTrue(trie.autoComplete("xv") == None)
        self.assertTrue(trie.autoComplete("xva") == None)
        self.assertTrue(trie.autoComplete("xvb") == None)
        self.assertTrue(trie.autoComplete("xvc") == None)
        self.assertTrue(trie.autoComplete("xvd") == None)
        self.assertTrue(trie.autoComplete("xve") == None)
        self.assertTrue(trie.autoComplete("xvf") == None)
        self.assertTrue(trie.autoComplete("xvg") == None)
        self.assertTrue(trie.autoComplete("xvh") == None)
        self.assertTrue(trie.autoComplete("xvi") == None)
        self.assertTrue(trie.autoComplete("xvj") == None)
        self.assertTrue(trie.autoComplete("xvk") == None)
        self.assertTrue(trie.autoComplete("xvl") == None)
        self.assertTrue(trie.autoComplete("xvm") == None)
        self.assertTrue(trie.autoComplete("xvn") == None)
        self.assertTrue(trie.autoComplete("xvo") == None)
        self.assertTrue(trie.autoComplete("xvp") == None)
        self.assertTrue(trie.autoComplete("xvq") == None)
        self.assertTrue(trie.autoComplete("xvr") == None)
        self.assertTrue(trie.autoComplete("xvs") == None)
        self.assertTrue(trie.autoComplete("xvt") == None)
        self.assertTrue(trie.autoComplete("xvu") == None)
        self.assertTrue(trie.autoComplete("xvv") == None)
        self.assertTrue(trie.autoComplete("xvw") == None)
        self.assertTrue(trie.autoComplete("xvx") == None)
        self.assertTrue(trie.autoComplete("xvy") == None)
        self.assertTrue(trie.autoComplete("xvz") == None)
        self.assertTrue(trie.autoComplete("xw") == None)
        self.assertTrue(trie.autoComplete("xwa") == None)
        self.assertTrue(trie.autoComplete("xwb") == None)
        self.assertTrue(trie.autoComplete("xwc") == None)
        self.assertTrue(trie.autoComplete("xwd") == None)
        self.assertTrue(trie.autoComplete("xwe") == None)
        self.assertTrue(trie.autoComplete("xwf") == None)
        self.assertTrue(trie.autoComplete("xwg") == None)
        self.assertTrue(trie.autoComplete("xwh") == None)
        self.assertTrue(trie.autoComplete("xwi") == None)
        self.assertTrue(trie.autoComplete("xwj") == None)
        self.assertTrue(trie.autoComplete("xwk") == None)
        self.assertTrue(trie.autoComplete("xwl") == None)
        self.assertTrue(trie.autoComplete("xwm") == None)
        self.assertTrue(trie.autoComplete("xwn") == None)
        self.assertTrue(trie.autoComplete("xwo") == None)
        self.assertTrue(trie.autoComplete("xwp") == None)
        self.assertTrue(trie.autoComplete("xwq") == None)
        self.assertTrue(trie.autoComplete("xwr") == None)
        self.assertTrue(trie.autoComplete("xws") == None)
        self.assertTrue(trie.autoComplete("xwt") == None)
        self.assertTrue(trie.autoComplete("xwu") == None)
        self.assertTrue(trie.autoComplete("xwv") == None)
        self.assertTrue(trie.autoComplete("xww") == None)
        self.assertTrue(trie.autoComplete("xwx") == None)
        self.assertTrue(trie.autoComplete("xwy") == None)
        self.assertTrue(trie.autoComplete("xwz") == None)
        self.assertTrue(trie.autoComplete("xx") == None)
        self.assertTrue(trie.autoComplete("xxa") == None)
        self.assertTrue(trie.autoComplete("xxb") == None)
        self.assertTrue(trie.autoComplete("xxc") == None)
        self.assertTrue(trie.autoComplete("xxd") == None)
        self.assertTrue(trie.autoComplete("xxe") == None)
        self.assertTrue(trie.autoComplete("xxf") == None)
        self.assertTrue(trie.autoComplete("xxg") == None)
        self.assertTrue(trie.autoComplete("xxh") == None)
        self.assertTrue(trie.autoComplete("xxi") == None)
        self.assertTrue(trie.autoComplete("xxj") == None)
        self.assertTrue(trie.autoComplete("xxk") == None)
        self.assertTrue(trie.autoComplete("xxl") == None)
        self.assertTrue(trie.autoComplete("xxm") == None)
        self.assertTrue(trie.autoComplete("xxn") == None)
        self.assertTrue(trie.autoComplete("xxo") == None)
        self.assertTrue(trie.autoComplete("xxp") == None)
        self.assertTrue(trie.autoComplete("xxq") == None)
        self.assertTrue(trie.autoComplete("xxr") == None)
        self.assertTrue(trie.autoComplete("xxs") == None)
        self.assertTrue(trie.autoComplete("xxt") == None)
        self.assertTrue(trie.autoComplete("xxu") == None)
        self.assertTrue(trie.autoComplete("xxv") == None)
        self.assertTrue(trie.autoComplete("xxw") == None)
        self.assertTrue(trie.autoComplete("xxx") == None)
        self.assertTrue(trie.autoComplete("xxy") == None)
        self.assertTrue(trie.autoComplete("xxz") == None)
        self.assertTrue(trie.autoComplete("xy") == None)
        self.assertTrue(trie.autoComplete("xya") == None)
        self.assertTrue(trie.autoComplete("xyb") == None)
        self.assertTrue(trie.autoComplete("xyc") == None)
        self.assertTrue(trie.autoComplete("xyd") == None)
        self.assertTrue(trie.autoComplete("xye") == None)
        self.assertTrue(trie.autoComplete("xyf") == None)
        self.assertTrue(trie.autoComplete("xyg") == None)
        self.assertTrue(trie.autoComplete("xyh") == None)
        self.assertTrue(trie.autoComplete("xyi") == None)
        self.assertTrue(trie.autoComplete("xyj") == None)
        self.assertTrue(trie.autoComplete("xyk") == None)
        self.assertTrue(trie.autoComplete("xyl") == None)
        self.assertTrue(trie.autoComplete("xym") == None)
        self.assertTrue(trie.autoComplete("xyn") == None)
        self.assertTrue(trie.autoComplete("xyo") == None)
        self.assertTrue(trie.autoComplete("xyp") == None)
        self.assertTrue(trie.autoComplete("xyq") == None)
        self.assertTrue(trie.autoComplete("xyr") == None)
        self.assertTrue(trie.autoComplete("xys") == None)
        self.assertTrue(trie.autoComplete("xyt") == None)
        self.assertTrue(trie.autoComplete("xyu") == None)
        self.assertTrue(trie.autoComplete("xyv") == None)
        self.assertTrue(trie.autoComplete("xyw") == None)
        self.assertTrue(trie.autoComplete("xyx") == None)
        self.assertTrue(trie.autoComplete("xyy") == None)
        self.assertTrue(trie.autoComplete("xyz") == None)
        self.assertTrue(trie.autoComplete("xz") == None)
        self.assertTrue(trie.autoComplete("xza") == None)
        self.assertTrue(trie.autoComplete("xzb") == None)
        self.assertTrue(trie.autoComplete("xzc") == None)
        self.assertTrue(trie.autoComplete("xzd") == None)
        self.assertTrue(trie.autoComplete("xze") == None)
        self.assertTrue(trie.autoComplete("xzf") == None)
        self.assertTrue(trie.autoComplete("xzg") == None)
        self.assertTrue(trie.autoComplete("xzh") == None)
        self.assertTrue(trie.autoComplete("xzi") == None)
        self.assertTrue(trie.autoComplete("xzj") == None)
        self.assertTrue(trie.autoComplete("xzk") == None)
        self.assertTrue(trie.autoComplete("xzl") == None)
        self.assertTrue(trie.autoComplete("xzm") == None)
        self.assertTrue(trie.autoComplete("xzn") == None)
        self.assertTrue(trie.autoComplete("xzo") == None)
        self.assertTrue(trie.autoComplete("xzp") == None)
        self.assertTrue(trie.autoComplete("xzq") == None)
        self.assertTrue(trie.autoComplete("xzr") == None)
        self.assertTrue(trie.autoComplete("xzs") == None)
        self.assertTrue(trie.autoComplete("xzt") == None)
        self.assertTrue(trie.autoComplete("xzu") == None)
        self.assertTrue(trie.autoComplete("xzv") == None)
        self.assertTrue(trie.autoComplete("xzw") == None)
        self.assertTrue(trie.autoComplete("xzx") == None)
        self.assertTrue(trie.autoComplete("xzy") == None)
        self.assertTrue(trie.autoComplete("xzz") == None)
        self.assertTrue(trie.autoComplete("y") == "years")
        self.assertTrue(trie.autoComplete("ya") == "yards")
        self.assertTrue(trie.autoComplete("yaa") == None)
        self.assertTrue(trie.autoComplete("yab") == None)
        self.assertTrue(trie.autoComplete("yac") == None)
        self.assertTrue(trie.autoComplete("yad") == None)
        self.assertTrue(trie.autoComplete("yae") == None)
        self.assertTrue(trie.autoComplete("yaf") == None)
        self.assertTrue(trie.autoComplete("yag") == None)
        self.assertTrue(trie.autoComplete("yah") == None)
        self.assertTrue(trie.autoComplete("yai") == None)
        self.assertTrue(trie.autoComplete("yaj") == None)
        self.assertTrue(trie.autoComplete("yak") == None)
        self.assertTrue(trie.autoComplete("yal") == None)
        self.assertTrue(trie.autoComplete("yam") == None)
        self.assertTrue(trie.autoComplete("yan") == None)
        self.assertTrue(trie.autoComplete("yao") == None)
        self.assertTrue(trie.autoComplete("yap") == None)
        self.assertTrue(trie.autoComplete("yaq") == None)
        self.assertTrue(trie.autoComplete("yar") == "yards")
        self.assertTrue(trie.autoComplete("yard") == "yards")
        self.assertTrue(trie.autoComplete("yards") == "yards")
        self.assertTrue(trie.autoComplete("yas") == None)
        self.assertTrue(trie.autoComplete("yat") == None)
        self.assertTrue(trie.autoComplete("yau") == None)
        self.assertTrue(trie.autoComplete("yav") == None)
        self.assertTrue(trie.autoComplete("yaw") == None)
        self.assertTrue(trie.autoComplete("yax") == None)
        self.assertTrue(trie.autoComplete("yay") == None)
        self.assertTrue(trie.autoComplete("yaz") == None)
        self.assertTrue(trie.autoComplete("yb") == None)
        self.assertTrue(trie.autoComplete("yba") == None)
        self.assertTrue(trie.autoComplete("ybb") == None)
        self.assertTrue(trie.autoComplete("ybc") == None)
        self.assertTrue(trie.autoComplete("ybd") == None)
        self.assertTrue(trie.autoComplete("ybe") == None)
        self.assertTrue(trie.autoComplete("ybf") == None)
        self.assertTrue(trie.autoComplete("ybg") == None)
        self.assertTrue(trie.autoComplete("ybh") == None)
        self.assertTrue(trie.autoComplete("ybi") == None)
        self.assertTrue(trie.autoComplete("ybj") == None)
        self.assertTrue(trie.autoComplete("ybk") == None)
        self.assertTrue(trie.autoComplete("ybl") == None)
        self.assertTrue(trie.autoComplete("ybm") == None)
        self.assertTrue(trie.autoComplete("ybn") == None)
        self.assertTrue(trie.autoComplete("ybo") == None)
        self.assertTrue(trie.autoComplete("ybp") == None)
        self.assertTrue(trie.autoComplete("ybq") == None)
        self.assertTrue(trie.autoComplete("ybr") == None)
        self.assertTrue(trie.autoComplete("ybs") == None)
        self.assertTrue(trie.autoComplete("ybt") == None)
        self.assertTrue(trie.autoComplete("ybu") == None)
        self.assertTrue(trie.autoComplete("ybv") == None)
        self.assertTrue(trie.autoComplete("ybw") == None)
        self.assertTrue(trie.autoComplete("ybx") == None)
        self.assertTrue(trie.autoComplete("yby") == None)
        self.assertTrue(trie.autoComplete("ybz") == None)
        self.assertTrue(trie.autoComplete("yc") == None)
        self.assertTrue(trie.autoComplete("yca") == None)
        self.assertTrue(trie.autoComplete("ycb") == None)
        self.assertTrue(trie.autoComplete("ycc") == None)
        self.assertTrue(trie.autoComplete("ycd") == None)
        self.assertTrue(trie.autoComplete("yce") == None)
        self.assertTrue(trie.autoComplete("ycf") == None)
        self.assertTrue(trie.autoComplete("ycg") == None)
        self.assertTrue(trie.autoComplete("ych") == None)
        self.assertTrue(trie.autoComplete("yci") == None)
        self.assertTrue(trie.autoComplete("ycj") == None)
        self.assertTrue(trie.autoComplete("yck") == None)
        self.assertTrue(trie.autoComplete("ycl") == None)
        self.assertTrue(trie.autoComplete("ycm") == None)
        self.assertTrue(trie.autoComplete("ycn") == None)
        self.assertTrue(trie.autoComplete("yco") == None)
        self.assertTrue(trie.autoComplete("ycp") == None)
        self.assertTrue(trie.autoComplete("ycq") == None)
        self.assertTrue(trie.autoComplete("ycr") == None)
        self.assertTrue(trie.autoComplete("ycs") == None)
        self.assertTrue(trie.autoComplete("yct") == None)
        self.assertTrue(trie.autoComplete("ycu") == None)
        self.assertTrue(trie.autoComplete("ycv") == None)
        self.assertTrue(trie.autoComplete("ycw") == None)
        self.assertTrue(trie.autoComplete("ycx") == None)
        self.assertTrue(trie.autoComplete("ycy") == None)
        self.assertTrue(trie.autoComplete("ycz") == None)
        self.assertTrue(trie.autoComplete("yd") == None)
        self.assertTrue(trie.autoComplete("yda") == None)
        self.assertTrue(trie.autoComplete("ydb") == None)
        self.assertTrue(trie.autoComplete("ydc") == None)
        self.assertTrue(trie.autoComplete("ydd") == None)
        self.assertTrue(trie.autoComplete("yde") == None)
        self.assertTrue(trie.autoComplete("ydf") == None)
        self.assertTrue(trie.autoComplete("ydg") == None)
        self.assertTrue(trie.autoComplete("ydh") == None)
        self.assertTrue(trie.autoComplete("ydi") == None)
        self.assertTrue(trie.autoComplete("ydj") == None)
        self.assertTrue(trie.autoComplete("ydk") == None)
        self.assertTrue(trie.autoComplete("ydl") == None)
        self.assertTrue(trie.autoComplete("ydm") == None)
        self.assertTrue(trie.autoComplete("ydn") == None)
        self.assertTrue(trie.autoComplete("ydo") == None)
        self.assertTrue(trie.autoComplete("ydp") == None)
        self.assertTrue(trie.autoComplete("ydq") == None)
        self.assertTrue(trie.autoComplete("ydr") == None)
        self.assertTrue(trie.autoComplete("yds") == None)
        self.assertTrue(trie.autoComplete("ydt") == None)
        self.assertTrue(trie.autoComplete("ydu") == None)
        self.assertTrue(trie.autoComplete("ydv") == None)
        self.assertTrue(trie.autoComplete("ydw") == None)
        self.assertTrue(trie.autoComplete("ydx") == None)
        self.assertTrue(trie.autoComplete("ydy") == None)
        self.assertTrue(trie.autoComplete("ydz") == None)
        self.assertTrue(trie.autoComplete("ye") == "years")
        self.assertTrue(trie.autoComplete("yea") == "years")
        self.assertTrue(trie.autoComplete("year") == "years")
        self.assertTrue(trie.autoComplete("years") == "years")
        self.assertTrue(trie.autoComplete("yeas") == "yeas")
        self.assertTrue(trie.autoComplete("yeb") == None)
        self.assertTrue(trie.autoComplete("yec") == None)
        self.assertTrue(trie.autoComplete("yed") == None)
        self.assertTrue(trie.autoComplete("yee") == None)
        self.assertTrue(trie.autoComplete("yef") == None)
        self.assertTrue(trie.autoComplete("yeg") == None)
        self.assertTrue(trie.autoComplete("yeh") == None)
        self.assertTrue(trie.autoComplete("yei") == None)
        self.assertTrue(trie.autoComplete("yej") == None)
        self.assertTrue(trie.autoComplete("yek") == None)
        self.assertTrue(trie.autoComplete("yel") == None)
        self.assertTrue(trie.autoComplete("yem") == None)
        self.assertTrue(trie.autoComplete("yen") == None)
        self.assertTrue(trie.autoComplete("yeo") == None)
        self.assertTrue(trie.autoComplete("yep") == None)
        self.assertTrue(trie.autoComplete("yeq") == None)
        self.assertTrue(trie.autoComplete("yer") == None)
        self.assertTrue(trie.autoComplete("yes") == None)
        self.assertTrue(trie.autoComplete("yet") == None)
        self.assertTrue(trie.autoComplete("yeu") == None)
        self.assertTrue(trie.autoComplete("yev") == None)
        self.assertTrue(trie.autoComplete("yew") == None)
        self.assertTrue(trie.autoComplete("yex") == None)
        self.assertTrue(trie.autoComplete("yey") == None)
        self.assertTrue(trie.autoComplete("yez") == None)
        self.assertTrue(trie.autoComplete("yf") == None)
        self.assertTrue(trie.autoComplete("yfa") == None)
        self.assertTrue(trie.autoComplete("yfb") == None)
        self.assertTrue(trie.autoComplete("yfc") == None)
        self.assertTrue(trie.autoComplete("yfd") == None)
        self.assertTrue(trie.autoComplete("yfe") == None)
        self.assertTrue(trie.autoComplete("yff") == None)
        self.assertTrue(trie.autoComplete("yfg") == None)
        self.assertTrue(trie.autoComplete("yfh") == None)
        self.assertTrue(trie.autoComplete("yfi") == None)
        self.assertTrue(trie.autoComplete("yfj") == None)
        self.assertTrue(trie.autoComplete("yfk") == None)
        self.assertTrue(trie.autoComplete("yfl") == None)
        self.assertTrue(trie.autoComplete("yfm") == None)
        self.assertTrue(trie.autoComplete("yfn") == None)
        self.assertTrue(trie.autoComplete("yfo") == None)
        self.assertTrue(trie.autoComplete("yfp") == None)
        self.assertTrue(trie.autoComplete("yfq") == None)
        self.assertTrue(trie.autoComplete("yfr") == None)
        self.assertTrue(trie.autoComplete("yfs") == None)
        self.assertTrue(trie.autoComplete("yft") == None)
        self.assertTrue(trie.autoComplete("yfu") == None)
        self.assertTrue(trie.autoComplete("yfv") == None)
        self.assertTrue(trie.autoComplete("yfw") == None)
        self.assertTrue(trie.autoComplete("yfx") == None)
        self.assertTrue(trie.autoComplete("yfy") == None)
        self.assertTrue(trie.autoComplete("yfz") == None)
        self.assertTrue(trie.autoComplete("yg") == None)
        self.assertTrue(trie.autoComplete("yga") == None)
        self.assertTrue(trie.autoComplete("ygb") == None)
        self.assertTrue(trie.autoComplete("ygc") == None)
        self.assertTrue(trie.autoComplete("ygd") == None)
        self.assertTrue(trie.autoComplete("yge") == None)
        self.assertTrue(trie.autoComplete("ygf") == None)
        self.assertTrue(trie.autoComplete("ygg") == None)
        self.assertTrue(trie.autoComplete("ygh") == None)
        self.assertTrue(trie.autoComplete("ygi") == None)
        self.assertTrue(trie.autoComplete("ygj") == None)
        self.assertTrue(trie.autoComplete("ygk") == None)
        self.assertTrue(trie.autoComplete("ygl") == None)
        self.assertTrue(trie.autoComplete("ygm") == None)
        self.assertTrue(trie.autoComplete("ygn") == None)
        self.assertTrue(trie.autoComplete("ygo") == None)
        self.assertTrue(trie.autoComplete("ygp") == None)
        self.assertTrue(trie.autoComplete("ygq") == None)
        self.assertTrue(trie.autoComplete("ygr") == None)
        self.assertTrue(trie.autoComplete("ygs") == None)
        self.assertTrue(trie.autoComplete("ygt") == None)
        self.assertTrue(trie.autoComplete("ygu") == None)
        self.assertTrue(trie.autoComplete("ygv") == None)
        self.assertTrue(trie.autoComplete("ygw") == None)
        self.assertTrue(trie.autoComplete("ygx") == None)
        self.assertTrue(trie.autoComplete("ygy") == None)
        self.assertTrue(trie.autoComplete("ygz") == None)
        self.assertTrue(trie.autoComplete("yh") == None)
        self.assertTrue(trie.autoComplete("yha") == None)
        self.assertTrue(trie.autoComplete("yhb") == None)
        self.assertTrue(trie.autoComplete("yhc") == None)
        self.assertTrue(trie.autoComplete("yhd") == None)
        self.assertTrue(trie.autoComplete("yhe") == None)
        self.assertTrue(trie.autoComplete("yhf") == None)
        self.assertTrue(trie.autoComplete("yhg") == None)
        self.assertTrue(trie.autoComplete("yhh") == None)
        self.assertTrue(trie.autoComplete("yhi") == None)
        self.assertTrue(trie.autoComplete("yhj") == None)
        self.assertTrue(trie.autoComplete("yhk") == None)
        self.assertTrue(trie.autoComplete("yhl") == None)
        self.assertTrue(trie.autoComplete("yhm") == None)
        self.assertTrue(trie.autoComplete("yhn") == None)
        self.assertTrue(trie.autoComplete("yho") == None)
        self.assertTrue(trie.autoComplete("yhp") == None)
        self.assertTrue(trie.autoComplete("yhq") == None)
        self.assertTrue(trie.autoComplete("yhr") == None)
        self.assertTrue(trie.autoComplete("yhs") == None)
        self.assertTrue(trie.autoComplete("yht") == None)
        self.assertTrue(trie.autoComplete("yhu") == None)
        self.assertTrue(trie.autoComplete("yhv") == None)
        self.assertTrue(trie.autoComplete("yhw") == None)
        self.assertTrue(trie.autoComplete("yhx") == None)
        self.assertTrue(trie.autoComplete("yhy") == None)
        self.assertTrue(trie.autoComplete("yhz") == None)
        self.assertTrue(trie.autoComplete("yi") == None)
        self.assertTrue(trie.autoComplete("yia") == None)
        self.assertTrue(trie.autoComplete("yib") == None)
        self.assertTrue(trie.autoComplete("yic") == None)
        self.assertTrue(trie.autoComplete("yid") == None)
        self.assertTrue(trie.autoComplete("yie") == None)
        self.assertTrue(trie.autoComplete("yif") == None)
        self.assertTrue(trie.autoComplete("yig") == None)
        self.assertTrue(trie.autoComplete("yih") == None)
        self.assertTrue(trie.autoComplete("yii") == None)
        self.assertTrue(trie.autoComplete("yij") == None)
        self.assertTrue(trie.autoComplete("yik") == None)
        self.assertTrue(trie.autoComplete("yil") == None)
        self.assertTrue(trie.autoComplete("yim") == None)
        self.assertTrue(trie.autoComplete("yin") == None)
        self.assertTrue(trie.autoComplete("yio") == None)
        self.assertTrue(trie.autoComplete("yip") == None)
        self.assertTrue(trie.autoComplete("yiq") == None)
        self.assertTrue(trie.autoComplete("yir") == None)
        self.assertTrue(trie.autoComplete("yis") == None)
        self.assertTrue(trie.autoComplete("yit") == None)
        self.assertTrue(trie.autoComplete("yiu") == None)
        self.assertTrue(trie.autoComplete("yiv") == None)
        self.assertTrue(trie.autoComplete("yiw") == None)
        self.assertTrue(trie.autoComplete("yix") == None)
        self.assertTrue(trie.autoComplete("yiy") == None)
        self.assertTrue(trie.autoComplete("yiz") == None)
        self.assertTrue(trie.autoComplete("yj") == None)
        self.assertTrue(trie.autoComplete("yja") == None)
        self.assertTrue(trie.autoComplete("yjb") == None)
        self.assertTrue(trie.autoComplete("yjc") == None)
        self.assertTrue(trie.autoComplete("yjd") == None)
        self.assertTrue(trie.autoComplete("yje") == None)
        self.assertTrue(trie.autoComplete("yjf") == None)
        self.assertTrue(trie.autoComplete("yjg") == None)
        self.assertTrue(trie.autoComplete("yjh") == None)
        self.assertTrue(trie.autoComplete("yji") == None)
        self.assertTrue(trie.autoComplete("yjj") == None)
        self.assertTrue(trie.autoComplete("yjk") == None)
        self.assertTrue(trie.autoComplete("yjl") == None)
        self.assertTrue(trie.autoComplete("yjm") == None)
        self.assertTrue(trie.autoComplete("yjn") == None)
        self.assertTrue(trie.autoComplete("yjo") == None)
        self.assertTrue(trie.autoComplete("yjp") == None)
        self.assertTrue(trie.autoComplete("yjq") == None)
        self.assertTrue(trie.autoComplete("yjr") == None)
        self.assertTrue(trie.autoComplete("yjs") == None)
        self.assertTrue(trie.autoComplete("yjt") == None)
        self.assertTrue(trie.autoComplete("yju") == None)
        self.assertTrue(trie.autoComplete("yjv") == None)
        self.assertTrue(trie.autoComplete("yjw") == None)
        self.assertTrue(trie.autoComplete("yjx") == None)
        self.assertTrue(trie.autoComplete("yjy") == None)
        self.assertTrue(trie.autoComplete("yjz") == None)
        self.assertTrue(trie.autoComplete("yk") == None)
        self.assertTrue(trie.autoComplete("yka") == None)
        self.assertTrue(trie.autoComplete("ykb") == None)
        self.assertTrue(trie.autoComplete("ykc") == None)
        self.assertTrue(trie.autoComplete("ykd") == None)
        self.assertTrue(trie.autoComplete("yke") == None)
        self.assertTrue(trie.autoComplete("ykf") == None)
        self.assertTrue(trie.autoComplete("ykg") == None)
        self.assertTrue(trie.autoComplete("ykh") == None)
        self.assertTrue(trie.autoComplete("yki") == None)
        self.assertTrue(trie.autoComplete("ykj") == None)
        self.assertTrue(trie.autoComplete("ykk") == None)
        self.assertTrue(trie.autoComplete("ykl") == None)
        self.assertTrue(trie.autoComplete("ykm") == None)
        self.assertTrue(trie.autoComplete("ykn") == None)
        self.assertTrue(trie.autoComplete("yko") == None)
        self.assertTrue(trie.autoComplete("ykp") == None)
        self.assertTrue(trie.autoComplete("ykq") == None)
        self.assertTrue(trie.autoComplete("ykr") == None)
        self.assertTrue(trie.autoComplete("yks") == None)
        self.assertTrue(trie.autoComplete("ykt") == None)
        self.assertTrue(trie.autoComplete("yku") == None)
        self.assertTrue(trie.autoComplete("ykv") == None)
        self.assertTrue(trie.autoComplete("ykw") == None)
        self.assertTrue(trie.autoComplete("ykx") == None)
        self.assertTrue(trie.autoComplete("yky") == None)
        self.assertTrue(trie.autoComplete("ykz") == None)
        self.assertTrue(trie.autoComplete("yl") == None)
        self.assertTrue(trie.autoComplete("yla") == None)
        self.assertTrue(trie.autoComplete("ylb") == None)
        self.assertTrue(trie.autoComplete("ylc") == None)
        self.assertTrue(trie.autoComplete("yld") == None)
        self.assertTrue(trie.autoComplete("yle") == None)
        self.assertTrue(trie.autoComplete("ylf") == None)
        self.assertTrue(trie.autoComplete("ylg") == None)
        self.assertTrue(trie.autoComplete("ylh") == None)
        self.assertTrue(trie.autoComplete("yli") == None)
        self.assertTrue(trie.autoComplete("ylj") == None)
        self.assertTrue(trie.autoComplete("ylk") == None)
        self.assertTrue(trie.autoComplete("yll") == None)
        self.assertTrue(trie.autoComplete("ylm") == None)
        self.assertTrue(trie.autoComplete("yln") == None)
        self.assertTrue(trie.autoComplete("ylo") == None)
        self.assertTrue(trie.autoComplete("ylp") == None)
        self.assertTrue(trie.autoComplete("ylq") == None)
        self.assertTrue(trie.autoComplete("ylr") == None)
        self.assertTrue(trie.autoComplete("yls") == None)
        self.assertTrue(trie.autoComplete("ylt") == None)
        self.assertTrue(trie.autoComplete("ylu") == None)
        self.assertTrue(trie.autoComplete("ylv") == None)
        self.assertTrue(trie.autoComplete("ylw") == None)
        self.assertTrue(trie.autoComplete("ylx") == None)
        self.assertTrue(trie.autoComplete("yly") == None)
        self.assertTrue(trie.autoComplete("ylz") == None)
        self.assertTrue(trie.autoComplete("ym") == None)
        self.assertTrue(trie.autoComplete("yma") == None)
        self.assertTrue(trie.autoComplete("ymb") == None)
        self.assertTrue(trie.autoComplete("ymc") == None)
        self.assertTrue(trie.autoComplete("ymd") == None)
        self.assertTrue(trie.autoComplete("yme") == None)
        self.assertTrue(trie.autoComplete("ymf") == None)
        self.assertTrue(trie.autoComplete("ymg") == None)
        self.assertTrue(trie.autoComplete("ymh") == None)
        self.assertTrue(trie.autoComplete("ymi") == None)
        self.assertTrue(trie.autoComplete("ymj") == None)
        self.assertTrue(trie.autoComplete("ymk") == None)
        self.assertTrue(trie.autoComplete("yml") == None)
        self.assertTrue(trie.autoComplete("ymm") == None)
        self.assertTrue(trie.autoComplete("ymn") == None)
        self.assertTrue(trie.autoComplete("ymo") == None)
        self.assertTrue(trie.autoComplete("ymp") == None)
        self.assertTrue(trie.autoComplete("ymq") == None)
        self.assertTrue(trie.autoComplete("ymr") == None)
        self.assertTrue(trie.autoComplete("yms") == None)
        self.assertTrue(trie.autoComplete("ymt") == None)
        self.assertTrue(trie.autoComplete("ymu") == None)
        self.assertTrue(trie.autoComplete("ymv") == None)
        self.assertTrue(trie.autoComplete("ymw") == None)
        self.assertTrue(trie.autoComplete("ymx") == None)
        self.assertTrue(trie.autoComplete("ymy") == None)
        self.assertTrue(trie.autoComplete("ymz") == None)
        self.assertTrue(trie.autoComplete("yn") == None)
        self.assertTrue(trie.autoComplete("yna") == None)
        self.assertTrue(trie.autoComplete("ynb") == None)
        self.assertTrue(trie.autoComplete("ync") == None)
        self.assertTrue(trie.autoComplete("ynd") == None)
        self.assertTrue(trie.autoComplete("yne") == None)
        self.assertTrue(trie.autoComplete("ynf") == None)
        self.assertTrue(trie.autoComplete("yng") == None)
        self.assertTrue(trie.autoComplete("ynh") == None)
        self.assertTrue(trie.autoComplete("yni") == None)
        self.assertTrue(trie.autoComplete("ynj") == None)
        self.assertTrue(trie.autoComplete("ynk") == None)
        self.assertTrue(trie.autoComplete("ynl") == None)
        self.assertTrue(trie.autoComplete("ynm") == None)
        self.assertTrue(trie.autoComplete("ynn") == None)
        self.assertTrue(trie.autoComplete("yno") == None)
        self.assertTrue(trie.autoComplete("ynp") == None)
        self.assertTrue(trie.autoComplete("ynq") == None)
        self.assertTrue(trie.autoComplete("ynr") == None)
        self.assertTrue(trie.autoComplete("yns") == None)
        self.assertTrue(trie.autoComplete("ynt") == None)
        self.assertTrue(trie.autoComplete("ynu") == None)
        self.assertTrue(trie.autoComplete("ynv") == None)
        self.assertTrue(trie.autoComplete("ynw") == None)
        self.assertTrue(trie.autoComplete("ynx") == None)
        self.assertTrue(trie.autoComplete("yny") == None)
        self.assertTrue(trie.autoComplete("ynz") == None)
        self.assertTrue(trie.autoComplete("yo") == "york")
        self.assertTrue(trie.autoComplete("yoa") == None)
        self.assertTrue(trie.autoComplete("yob") == None)
        self.assertTrue(trie.autoComplete("yoc") == None)
        self.assertTrue(trie.autoComplete("yod") == None)
        self.assertTrue(trie.autoComplete("yoe") == None)
        self.assertTrue(trie.autoComplete("yof") == None)
        self.assertTrue(trie.autoComplete("yog") == None)
        self.assertTrue(trie.autoComplete("yoh") == None)
        self.assertTrue(trie.autoComplete("yoi") == None)
        self.assertTrue(trie.autoComplete("yoj") == None)
        self.assertTrue(trie.autoComplete("yok") == None)
        self.assertTrue(trie.autoComplete("yol") == None)
        self.assertTrue(trie.autoComplete("yom") == None)
        self.assertTrue(trie.autoComplete("yon") == None)
        self.assertTrue(trie.autoComplete("yoo") == None)
        self.assertTrue(trie.autoComplete("yop") == None)
        self.assertTrue(trie.autoComplete("yoq") == None)
        self.assertTrue(trie.autoComplete("yor") == "york")
        self.assertTrue(trie.autoComplete("york") == "york")
        self.assertTrue(trie.autoComplete("yos") == None)
        self.assertTrue(trie.autoComplete("yot") == None)
        self.assertTrue(trie.autoComplete("you") == None)
        self.assertTrue(trie.autoComplete("yov") == None)
        self.assertTrue(trie.autoComplete("yow") == None)
        self.assertTrue(trie.autoComplete("yox") == None)
        self.assertTrue(trie.autoComplete("yoy") == None)
        self.assertTrue(trie.autoComplete("yoz") == None)
        self.assertTrue(trie.autoComplete("yp") == None)
        self.assertTrue(trie.autoComplete("ypa") == None)
        self.assertTrue(trie.autoComplete("ypb") == None)
        self.assertTrue(trie.autoComplete("ypc") == None)
        self.assertTrue(trie.autoComplete("ypd") == None)
        self.assertTrue(trie.autoComplete("ype") == None)
        self.assertTrue(trie.autoComplete("ypf") == None)
        self.assertTrue(trie.autoComplete("ypg") == None)
        self.assertTrue(trie.autoComplete("yph") == None)
        self.assertTrue(trie.autoComplete("ypi") == None)
        self.assertTrue(trie.autoComplete("ypj") == None)
        self.assertTrue(trie.autoComplete("ypk") == None)
        self.assertTrue(trie.autoComplete("ypl") == None)
        self.assertTrue(trie.autoComplete("ypm") == None)
        self.assertTrue(trie.autoComplete("ypn") == None)
        self.assertTrue(trie.autoComplete("ypo") == None)
        self.assertTrue(trie.autoComplete("ypp") == None)
        self.assertTrue(trie.autoComplete("ypq") == None)
        self.assertTrue(trie.autoComplete("ypr") == None)
        self.assertTrue(trie.autoComplete("yps") == None)
        self.assertTrue(trie.autoComplete("ypt") == None)
        self.assertTrue(trie.autoComplete("ypu") == None)
        self.assertTrue(trie.autoComplete("ypv") == None)
        self.assertTrue(trie.autoComplete("ypw") == None)
        self.assertTrue(trie.autoComplete("ypx") == None)
        self.assertTrue(trie.autoComplete("ypy") == None)
        self.assertTrue(trie.autoComplete("ypz") == None)
        self.assertTrue(trie.autoComplete("yq") == None)
        self.assertTrue(trie.autoComplete("yqa") == None)
        self.assertTrue(trie.autoComplete("yqb") == None)
        self.assertTrue(trie.autoComplete("yqc") == None)
        self.assertTrue(trie.autoComplete("yqd") == None)
        self.assertTrue(trie.autoComplete("yqe") == None)
        self.assertTrue(trie.autoComplete("yqf") == None)
        self.assertTrue(trie.autoComplete("yqg") == None)
        self.assertTrue(trie.autoComplete("yqh") == None)
        self.assertTrue(trie.autoComplete("yqi") == None)
        self.assertTrue(trie.autoComplete("yqj") == None)
        self.assertTrue(trie.autoComplete("yqk") == None)
        self.assertTrue(trie.autoComplete("yql") == None)
        self.assertTrue(trie.autoComplete("yqm") == None)
        self.assertTrue(trie.autoComplete("yqn") == None)
        self.assertTrue(trie.autoComplete("yqo") == None)
        self.assertTrue(trie.autoComplete("yqp") == None)
        self.assertTrue(trie.autoComplete("yqq") == None)
        self.assertTrue(trie.autoComplete("yqr") == None)
        self.assertTrue(trie.autoComplete("yqs") == None)
        self.assertTrue(trie.autoComplete("yqt") == None)
        self.assertTrue(trie.autoComplete("yqu") == None)
        self.assertTrue(trie.autoComplete("yqv") == None)
        self.assertTrue(trie.autoComplete("yqw") == None)
        self.assertTrue(trie.autoComplete("yqx") == None)
        self.assertTrue(trie.autoComplete("yqy") == None)
        self.assertTrue(trie.autoComplete("yqz") == None)
        self.assertTrue(trie.autoComplete("yr") == None)
        self.assertTrue(trie.autoComplete("yra") == None)
        self.assertTrue(trie.autoComplete("yrb") == None)
        self.assertTrue(trie.autoComplete("yrc") == None)
        self.assertTrue(trie.autoComplete("yrd") == None)
        self.assertTrue(trie.autoComplete("yre") == None)
        self.assertTrue(trie.autoComplete("yrf") == None)
        self.assertTrue(trie.autoComplete("yrg") == None)
        self.assertTrue(trie.autoComplete("yrh") == None)
        self.assertTrue(trie.autoComplete("yri") == None)
        self.assertTrue(trie.autoComplete("yrj") == None)
        self.assertTrue(trie.autoComplete("yrk") == None)
        self.assertTrue(trie.autoComplete("yrl") == None)
        self.assertTrue(trie.autoComplete("yrm") == None)
        self.assertTrue(trie.autoComplete("yrn") == None)
        self.assertTrue(trie.autoComplete("yro") == None)
        self.assertTrue(trie.autoComplete("yrp") == None)
        self.assertTrue(trie.autoComplete("yrq") == None)
        self.assertTrue(trie.autoComplete("yrr") == None)
        self.assertTrue(trie.autoComplete("yrs") == None)
        self.assertTrue(trie.autoComplete("yrt") == None)
        self.assertTrue(trie.autoComplete("yru") == None)
        self.assertTrue(trie.autoComplete("yrv") == None)
        self.assertTrue(trie.autoComplete("yrw") == None)
        self.assertTrue(trie.autoComplete("yrx") == None)
        self.assertTrue(trie.autoComplete("yry") == None)
        self.assertTrue(trie.autoComplete("yrz") == None)
        self.assertTrue(trie.autoComplete("ys") == None)
        self.assertTrue(trie.autoComplete("ysa") == None)
        self.assertTrue(trie.autoComplete("ysb") == None)
        self.assertTrue(trie.autoComplete("ysc") == None)
        self.assertTrue(trie.autoComplete("ysd") == None)
        self.assertTrue(trie.autoComplete("yse") == None)
        self.assertTrue(trie.autoComplete("ysf") == None)
        self.assertTrue(trie.autoComplete("ysg") == None)
        self.assertTrue(trie.autoComplete("ysh") == None)
        self.assertTrue(trie.autoComplete("ysi") == None)
        self.assertTrue(trie.autoComplete("ysj") == None)
        self.assertTrue(trie.autoComplete("ysk") == None)
        self.assertTrue(trie.autoComplete("ysl") == None)
        self.assertTrue(trie.autoComplete("ysm") == None)
        self.assertTrue(trie.autoComplete("ysn") == None)
        self.assertTrue(trie.autoComplete("yso") == None)
        self.assertTrue(trie.autoComplete("ysp") == None)
        self.assertTrue(trie.autoComplete("ysq") == None)
        self.assertTrue(trie.autoComplete("ysr") == None)
        self.assertTrue(trie.autoComplete("yss") == None)
        self.assertTrue(trie.autoComplete("yst") == None)
        self.assertTrue(trie.autoComplete("ysu") == None)
        self.assertTrue(trie.autoComplete("ysv") == None)
        self.assertTrue(trie.autoComplete("ysw") == None)
        self.assertTrue(trie.autoComplete("ysx") == None)
        self.assertTrue(trie.autoComplete("ysy") == None)
        self.assertTrue(trie.autoComplete("ysz") == None)
        self.assertTrue(trie.autoComplete("yt") == None)
        self.assertTrue(trie.autoComplete("yta") == None)
        self.assertTrue(trie.autoComplete("ytb") == None)
        self.assertTrue(trie.autoComplete("ytc") == None)
        self.assertTrue(trie.autoComplete("ytd") == None)
        self.assertTrue(trie.autoComplete("yte") == None)
        self.assertTrue(trie.autoComplete("ytf") == None)
        self.assertTrue(trie.autoComplete("ytg") == None)
        self.assertTrue(trie.autoComplete("yth") == None)
        self.assertTrue(trie.autoComplete("yti") == None)
        self.assertTrue(trie.autoComplete("ytj") == None)
        self.assertTrue(trie.autoComplete("ytk") == None)
        self.assertTrue(trie.autoComplete("ytl") == None)
        self.assertTrue(trie.autoComplete("ytm") == None)
        self.assertTrue(trie.autoComplete("ytn") == None)
        self.assertTrue(trie.autoComplete("yto") == None)
        self.assertTrue(trie.autoComplete("ytp") == None)
        self.assertTrue(trie.autoComplete("ytq") == None)
        self.assertTrue(trie.autoComplete("ytr") == None)
        self.assertTrue(trie.autoComplete("yts") == None)
        self.assertTrue(trie.autoComplete("ytt") == None)
        self.assertTrue(trie.autoComplete("ytu") == None)
        self.assertTrue(trie.autoComplete("ytv") == None)
        self.assertTrue(trie.autoComplete("ytw") == None)
        self.assertTrue(trie.autoComplete("ytx") == None)
        self.assertTrue(trie.autoComplete("yty") == None)
        self.assertTrue(trie.autoComplete("ytz") == None)
        self.assertTrue(trie.autoComplete("yu") == None)
        self.assertTrue(trie.autoComplete("yua") == None)
        self.assertTrue(trie.autoComplete("yub") == None)
        self.assertTrue(trie.autoComplete("yuc") == None)
        self.assertTrue(trie.autoComplete("yud") == None)
        self.assertTrue(trie.autoComplete("yue") == None)
        self.assertTrue(trie.autoComplete("yuf") == None)
        self.assertTrue(trie.autoComplete("yug") == None)
        self.assertTrue(trie.autoComplete("yuh") == None)
        self.assertTrue(trie.autoComplete("yui") == None)
        self.assertTrue(trie.autoComplete("yuj") == None)
        self.assertTrue(trie.autoComplete("yuk") == None)
        self.assertTrue(trie.autoComplete("yul") == None)
        self.assertTrue(trie.autoComplete("yum") == None)
        self.assertTrue(trie.autoComplete("yun") == None)
        self.assertTrue(trie.autoComplete("yuo") == None)
        self.assertTrue(trie.autoComplete("yup") == None)
        self.assertTrue(trie.autoComplete("yuq") == None)
        self.assertTrue(trie.autoComplete("yur") == None)
        self.assertTrue(trie.autoComplete("yus") == None)
        self.assertTrue(trie.autoComplete("yut") == None)
        self.assertTrue(trie.autoComplete("yuu") == None)
        self.assertTrue(trie.autoComplete("yuv") == None)
        self.assertTrue(trie.autoComplete("yuw") == None)
        self.assertTrue(trie.autoComplete("yux") == None)
        self.assertTrue(trie.autoComplete("yuy") == None)
        self.assertTrue(trie.autoComplete("yuz") == None)
        self.assertTrue(trie.autoComplete("yv") == None)
        self.assertTrue(trie.autoComplete("yva") == None)
        self.assertTrue(trie.autoComplete("yvb") == None)
        self.assertTrue(trie.autoComplete("yvc") == None)
        self.assertTrue(trie.autoComplete("yvd") == None)
        self.assertTrue(trie.autoComplete("yve") == None)
        self.assertTrue(trie.autoComplete("yvf") == None)
        self.assertTrue(trie.autoComplete("yvg") == None)
        self.assertTrue(trie.autoComplete("yvh") == None)
        self.assertTrue(trie.autoComplete("yvi") == None)
        self.assertTrue(trie.autoComplete("yvj") == None)
        self.assertTrue(trie.autoComplete("yvk") == None)
        self.assertTrue(trie.autoComplete("yvl") == None)
        self.assertTrue(trie.autoComplete("yvm") == None)
        self.assertTrue(trie.autoComplete("yvn") == None)
        self.assertTrue(trie.autoComplete("yvo") == None)
        self.assertTrue(trie.autoComplete("yvp") == None)
        self.assertTrue(trie.autoComplete("yvq") == None)
        self.assertTrue(trie.autoComplete("yvr") == None)
        self.assertTrue(trie.autoComplete("yvs") == None)
        self.assertTrue(trie.autoComplete("yvt") == None)
        self.assertTrue(trie.autoComplete("yvu") == None)
        self.assertTrue(trie.autoComplete("yvv") == None)
        self.assertTrue(trie.autoComplete("yvw") == None)
        self.assertTrue(trie.autoComplete("yvx") == None)
        self.assertTrue(trie.autoComplete("yvy") == None)
        self.assertTrue(trie.autoComplete("yvz") == None)
        self.assertTrue(trie.autoComplete("yw") == None)
        self.assertTrue(trie.autoComplete("ywa") == None)
        self.assertTrue(trie.autoComplete("ywb") == None)
        self.assertTrue(trie.autoComplete("ywc") == None)
        self.assertTrue(trie.autoComplete("ywd") == None)
        self.assertTrue(trie.autoComplete("ywe") == None)
        self.assertTrue(trie.autoComplete("ywf") == None)
        self.assertTrue(trie.autoComplete("ywg") == None)
        self.assertTrue(trie.autoComplete("ywh") == None)
        self.assertTrue(trie.autoComplete("ywi") == None)
        self.assertTrue(trie.autoComplete("ywj") == None)
        self.assertTrue(trie.autoComplete("ywk") == None)
        self.assertTrue(trie.autoComplete("ywl") == None)
        self.assertTrue(trie.autoComplete("ywm") == None)
        self.assertTrue(trie.autoComplete("ywn") == None)
        self.assertTrue(trie.autoComplete("ywo") == None)
        self.assertTrue(trie.autoComplete("ywp") == None)
        self.assertTrue(trie.autoComplete("ywq") == None)
        self.assertTrue(trie.autoComplete("ywr") == None)
        self.assertTrue(trie.autoComplete("yws") == None)
        self.assertTrue(trie.autoComplete("ywt") == None)
        self.assertTrue(trie.autoComplete("ywu") == None)
        self.assertTrue(trie.autoComplete("ywv") == None)
        self.assertTrue(trie.autoComplete("yww") == None)
        self.assertTrue(trie.autoComplete("ywx") == None)
        self.assertTrue(trie.autoComplete("ywy") == None)
        self.assertTrue(trie.autoComplete("ywz") == None)
        self.assertTrue(trie.autoComplete("yx") == None)
        self.assertTrue(trie.autoComplete("yxa") == None)
        self.assertTrue(trie.autoComplete("yxb") == None)
        self.assertTrue(trie.autoComplete("yxc") == None)
        self.assertTrue(trie.autoComplete("yxd") == None)
        self.assertTrue(trie.autoComplete("yxe") == None)
        self.assertTrue(trie.autoComplete("yxf") == None)
        self.assertTrue(trie.autoComplete("yxg") == None)
        self.assertTrue(trie.autoComplete("yxh") == None)
        self.assertTrue(trie.autoComplete("yxi") == None)
        self.assertTrue(trie.autoComplete("yxj") == None)
        self.assertTrue(trie.autoComplete("yxk") == None)
        self.assertTrue(trie.autoComplete("yxl") == None)
        self.assertTrue(trie.autoComplete("yxm") == None)
        self.assertTrue(trie.autoComplete("yxn") == None)
        self.assertTrue(trie.autoComplete("yxo") == None)
        self.assertTrue(trie.autoComplete("yxp") == None)
        self.assertTrue(trie.autoComplete("yxq") == None)
        self.assertTrue(trie.autoComplete("yxr") == None)
        self.assertTrue(trie.autoComplete("yxs") == None)
        self.assertTrue(trie.autoComplete("yxt") == None)
        self.assertTrue(trie.autoComplete("yxu") == None)
        self.assertTrue(trie.autoComplete("yxv") == None)
        self.assertTrue(trie.autoComplete("yxw") == None)
        self.assertTrue(trie.autoComplete("yxx") == None)
        self.assertTrue(trie.autoComplete("yxy") == None)
        self.assertTrue(trie.autoComplete("yxz") == None)
        self.assertTrue(trie.autoComplete("yy") == None)
        self.assertTrue(trie.autoComplete("yya") == None)
        self.assertTrue(trie.autoComplete("yyb") == None)
        self.assertTrue(trie.autoComplete("yyc") == None)
        self.assertTrue(trie.autoComplete("yyd") == None)
        self.assertTrue(trie.autoComplete("yye") == None)
        self.assertTrue(trie.autoComplete("yyf") == None)
        self.assertTrue(trie.autoComplete("yyg") == None)
        self.assertTrue(trie.autoComplete("yyh") == None)
        self.assertTrue(trie.autoComplete("yyi") == None)
        self.assertTrue(trie.autoComplete("yyj") == None)
        self.assertTrue(trie.autoComplete("yyk") == None)
        self.assertTrue(trie.autoComplete("yyl") == None)
        self.assertTrue(trie.autoComplete("yym") == None)
        self.assertTrue(trie.autoComplete("yyn") == None)
        self.assertTrue(trie.autoComplete("yyo") == None)
        self.assertTrue(trie.autoComplete("yyp") == None)
        self.assertTrue(trie.autoComplete("yyq") == None)
        self.assertTrue(trie.autoComplete("yyr") == None)
        self.assertTrue(trie.autoComplete("yys") == None)
        self.assertTrue(trie.autoComplete("yyt") == None)
        self.assertTrue(trie.autoComplete("yyu") == None)
        self.assertTrue(trie.autoComplete("yyv") == None)
        self.assertTrue(trie.autoComplete("yyw") == None)
        self.assertTrue(trie.autoComplete("yyx") == None)
        self.assertTrue(trie.autoComplete("yyy") == None)
        self.assertTrue(trie.autoComplete("yyz") == None)
        self.assertTrue(trie.autoComplete("yz") == None)
        self.assertTrue(trie.autoComplete("yza") == None)
        self.assertTrue(trie.autoComplete("yzb") == None)
        self.assertTrue(trie.autoComplete("yzc") == None)
        self.assertTrue(trie.autoComplete("yzd") == None)
        self.assertTrue(trie.autoComplete("yze") == None)
        self.assertTrue(trie.autoComplete("yzf") == None)
        self.assertTrue(trie.autoComplete("yzg") == None)
        self.assertTrue(trie.autoComplete("yzh") == None)
        self.assertTrue(trie.autoComplete("yzi") == None)
        self.assertTrue(trie.autoComplete("yzj") == None)
        self.assertTrue(trie.autoComplete("yzk") == None)
        self.assertTrue(trie.autoComplete("yzl") == None)
        self.assertTrue(trie.autoComplete("yzm") == None)
        self.assertTrue(trie.autoComplete("yzn") == None)
        self.assertTrue(trie.autoComplete("yzo") == None)
        self.assertTrue(trie.autoComplete("yzp") == None)
        self.assertTrue(trie.autoComplete("yzq") == None)
        self.assertTrue(trie.autoComplete("yzr") == None)
        self.assertTrue(trie.autoComplete("yzs") == None)
        self.assertTrue(trie.autoComplete("yzt") == None)
        self.assertTrue(trie.autoComplete("yzu") == None)
        self.assertTrue(trie.autoComplete("yzv") == None)
        self.assertTrue(trie.autoComplete("yzw") == None)
        self.assertTrue(trie.autoComplete("yzx") == None)
        self.assertTrue(trie.autoComplete("yzy") == None)
        self.assertTrue(trie.autoComplete("yzz") == None)
        self.assertTrue(trie.autoComplete("z") == None)
        self.assertTrue(trie.autoComplete("za") == None)
        self.assertTrue(trie.autoComplete("zaa") == None)
        self.assertTrue(trie.autoComplete("zab") == None)
        self.assertTrue(trie.autoComplete("zac") == None)
        self.assertTrue(trie.autoComplete("zad") == None)
        self.assertTrue(trie.autoComplete("zae") == None)
        self.assertTrue(trie.autoComplete("zaf") == None)
        self.assertTrue(trie.autoComplete("zag") == None)
        self.assertTrue(trie.autoComplete("zah") == None)
        self.assertTrue(trie.autoComplete("zai") == None)
        self.assertTrue(trie.autoComplete("zaj") == None)
        self.assertTrue(trie.autoComplete("zak") == None)
        self.assertTrue(trie.autoComplete("zal") == None)
        self.assertTrue(trie.autoComplete("zam") == None)
        self.assertTrue(trie.autoComplete("zan") == None)
        self.assertTrue(trie.autoComplete("zao") == None)
        self.assertTrue(trie.autoComplete("zap") == None)
        self.assertTrue(trie.autoComplete("zaq") == None)
        self.assertTrue(trie.autoComplete("zar") == None)
        self.assertTrue(trie.autoComplete("zas") == None)
        self.assertTrue(trie.autoComplete("zat") == None)
        self.assertTrue(trie.autoComplete("zau") == None)
        self.assertTrue(trie.autoComplete("zav") == None)
        self.assertTrue(trie.autoComplete("zaw") == None)
        self.assertTrue(trie.autoComplete("zax") == None)
        self.assertTrue(trie.autoComplete("zay") == None)
        self.assertTrue(trie.autoComplete("zaz") == None)
        self.assertTrue(trie.autoComplete("zb") == None)
        self.assertTrue(trie.autoComplete("zba") == None)
        self.assertTrue(trie.autoComplete("zbb") == None)
        self.assertTrue(trie.autoComplete("zbc") == None)
        self.assertTrue(trie.autoComplete("zbd") == None)
        self.assertTrue(trie.autoComplete("zbe") == None)
        self.assertTrue(trie.autoComplete("zbf") == None)
        self.assertTrue(trie.autoComplete("zbg") == None)
        self.assertTrue(trie.autoComplete("zbh") == None)
        self.assertTrue(trie.autoComplete("zbi") == None)
        self.assertTrue(trie.autoComplete("zbj") == None)
        self.assertTrue(trie.autoComplete("zbk") == None)
        self.assertTrue(trie.autoComplete("zbl") == None)
        self.assertTrue(trie.autoComplete("zbm") == None)
        self.assertTrue(trie.autoComplete("zbn") == None)
        self.assertTrue(trie.autoComplete("zbo") == None)
        self.assertTrue(trie.autoComplete("zbp") == None)
        self.assertTrue(trie.autoComplete("zbq") == None)
        self.assertTrue(trie.autoComplete("zbr") == None)
        self.assertTrue(trie.autoComplete("zbs") == None)
        self.assertTrue(trie.autoComplete("zbt") == None)
        self.assertTrue(trie.autoComplete("zbu") == None)
        self.assertTrue(trie.autoComplete("zbv") == None)
        self.assertTrue(trie.autoComplete("zbw") == None)
        self.assertTrue(trie.autoComplete("zbx") == None)
        self.assertTrue(trie.autoComplete("zby") == None)
        self.assertTrue(trie.autoComplete("zbz") == None)
        self.assertTrue(trie.autoComplete("zc") == None)
        self.assertTrue(trie.autoComplete("zca") == None)
        self.assertTrue(trie.autoComplete("zcb") == None)
        self.assertTrue(trie.autoComplete("zcc") == None)
        self.assertTrue(trie.autoComplete("zcd") == None)
        self.assertTrue(trie.autoComplete("zce") == None)
        self.assertTrue(trie.autoComplete("zcf") == None)
        self.assertTrue(trie.autoComplete("zcg") == None)
        self.assertTrue(trie.autoComplete("zch") == None)
        self.assertTrue(trie.autoComplete("zci") == None)
        self.assertTrue(trie.autoComplete("zcj") == None)
        self.assertTrue(trie.autoComplete("zck") == None)
        self.assertTrue(trie.autoComplete("zcl") == None)
        self.assertTrue(trie.autoComplete("zcm") == None)
        self.assertTrue(trie.autoComplete("zcn") == None)
        self.assertTrue(trie.autoComplete("zco") == None)
        self.assertTrue(trie.autoComplete("zcp") == None)
        self.assertTrue(trie.autoComplete("zcq") == None)
        self.assertTrue(trie.autoComplete("zcr") == None)
        self.assertTrue(trie.autoComplete("zcs") == None)
        self.assertTrue(trie.autoComplete("zct") == None)
        self.assertTrue(trie.autoComplete("zcu") == None)
        self.assertTrue(trie.autoComplete("zcv") == None)
        self.assertTrue(trie.autoComplete("zcw") == None)
        self.assertTrue(trie.autoComplete("zcx") == None)
        self.assertTrue(trie.autoComplete("zcy") == None)
        self.assertTrue(trie.autoComplete("zcz") == None)
        self.assertTrue(trie.autoComplete("zd") == None)
        self.assertTrue(trie.autoComplete("zda") == None)
        self.assertTrue(trie.autoComplete("zdb") == None)
        self.assertTrue(trie.autoComplete("zdc") == None)
        self.assertTrue(trie.autoComplete("zdd") == None)
        self.assertTrue(trie.autoComplete("zde") == None)
        self.assertTrue(trie.autoComplete("zdf") == None)
        self.assertTrue(trie.autoComplete("zdg") == None)
        self.assertTrue(trie.autoComplete("zdh") == None)
        self.assertTrue(trie.autoComplete("zdi") == None)
        self.assertTrue(trie.autoComplete("zdj") == None)
        self.assertTrue(trie.autoComplete("zdk") == None)
        self.assertTrue(trie.autoComplete("zdl") == None)
        self.assertTrue(trie.autoComplete("zdm") == None)
        self.assertTrue(trie.autoComplete("zdn") == None)
        self.assertTrue(trie.autoComplete("zdo") == None)
        self.assertTrue(trie.autoComplete("zdp") == None)
        self.assertTrue(trie.autoComplete("zdq") == None)
        self.assertTrue(trie.autoComplete("zdr") == None)
        self.assertTrue(trie.autoComplete("zds") == None)
        self.assertTrue(trie.autoComplete("zdt") == None)
        self.assertTrue(trie.autoComplete("zdu") == None)
        self.assertTrue(trie.autoComplete("zdv") == None)
        self.assertTrue(trie.autoComplete("zdw") == None)
        self.assertTrue(trie.autoComplete("zdx") == None)
        self.assertTrue(trie.autoComplete("zdy") == None)
        self.assertTrue(trie.autoComplete("zdz") == None)
        self.assertTrue(trie.autoComplete("ze") == None)
        self.assertTrue(trie.autoComplete("zea") == None)
        self.assertTrue(trie.autoComplete("zeb") == None)
        self.assertTrue(trie.autoComplete("zec") == None)
        self.assertTrue(trie.autoComplete("zed") == None)
        self.assertTrue(trie.autoComplete("zee") == None)
        self.assertTrue(trie.autoComplete("zef") == None)
        self.assertTrue(trie.autoComplete("zeg") == None)
        self.assertTrue(trie.autoComplete("zeh") == None)
        self.assertTrue(trie.autoComplete("zei") == None)
        self.assertTrue(trie.autoComplete("zej") == None)
        self.assertTrue(trie.autoComplete("zek") == None)
        self.assertTrue(trie.autoComplete("zel") == None)
        self.assertTrue(trie.autoComplete("zem") == None)
        self.assertTrue(trie.autoComplete("zen") == None)
        self.assertTrue(trie.autoComplete("zeo") == None)
        self.assertTrue(trie.autoComplete("zep") == None)
        self.assertTrue(trie.autoComplete("zeq") == None)
        self.assertTrue(trie.autoComplete("zer") == None)
        self.assertTrue(trie.autoComplete("zes") == None)
        self.assertTrue(trie.autoComplete("zet") == None)
        self.assertTrue(trie.autoComplete("zeu") == None)
        self.assertTrue(trie.autoComplete("zev") == None)
        self.assertTrue(trie.autoComplete("zew") == None)
        self.assertTrue(trie.autoComplete("zex") == None)
        self.assertTrue(trie.autoComplete("zey") == None)
        self.assertTrue(trie.autoComplete("zez") == None)
        self.assertTrue(trie.autoComplete("zf") == None)
        self.assertTrue(trie.autoComplete("zfa") == None)
        self.assertTrue(trie.autoComplete("zfb") == None)
        self.assertTrue(trie.autoComplete("zfc") == None)
        self.assertTrue(trie.autoComplete("zfd") == None)
        self.assertTrue(trie.autoComplete("zfe") == None)
        self.assertTrue(trie.autoComplete("zff") == None)
        self.assertTrue(trie.autoComplete("zfg") == None)
        self.assertTrue(trie.autoComplete("zfh") == None)
        self.assertTrue(trie.autoComplete("zfi") == None)
        self.assertTrue(trie.autoComplete("zfj") == None)
        self.assertTrue(trie.autoComplete("zfk") == None)
        self.assertTrue(trie.autoComplete("zfl") == None)
        self.assertTrue(trie.autoComplete("zfm") == None)
        self.assertTrue(trie.autoComplete("zfn") == None)
        self.assertTrue(trie.autoComplete("zfo") == None)
        self.assertTrue(trie.autoComplete("zfp") == None)
        self.assertTrue(trie.autoComplete("zfq") == None)
        self.assertTrue(trie.autoComplete("zfr") == None)
        self.assertTrue(trie.autoComplete("zfs") == None)
        self.assertTrue(trie.autoComplete("zft") == None)
        self.assertTrue(trie.autoComplete("zfu") == None)
        self.assertTrue(trie.autoComplete("zfv") == None)
        self.assertTrue(trie.autoComplete("zfw") == None)
        self.assertTrue(trie.autoComplete("zfx") == None)
        self.assertTrue(trie.autoComplete("zfy") == None)
        self.assertTrue(trie.autoComplete("zfz") == None)
        self.assertTrue(trie.autoComplete("zg") == None)
        self.assertTrue(trie.autoComplete("zga") == None)
        self.assertTrue(trie.autoComplete("zgb") == None)
        self.assertTrue(trie.autoComplete("zgc") == None)
        self.assertTrue(trie.autoComplete("zgd") == None)
        self.assertTrue(trie.autoComplete("zge") == None)
        self.assertTrue(trie.autoComplete("zgf") == None)
        self.assertTrue(trie.autoComplete("zgg") == None)
        self.assertTrue(trie.autoComplete("zgh") == None)
        self.assertTrue(trie.autoComplete("zgi") == None)
        self.assertTrue(trie.autoComplete("zgj") == None)
        self.assertTrue(trie.autoComplete("zgk") == None)
        self.assertTrue(trie.autoComplete("zgl") == None)
        self.assertTrue(trie.autoComplete("zgm") == None)
        self.assertTrue(trie.autoComplete("zgn") == None)
        self.assertTrue(trie.autoComplete("zgo") == None)
        self.assertTrue(trie.autoComplete("zgp") == None)
        self.assertTrue(trie.autoComplete("zgq") == None)
        self.assertTrue(trie.autoComplete("zgr") == None)
        self.assertTrue(trie.autoComplete("zgs") == None)
        self.assertTrue(trie.autoComplete("zgt") == None)
        self.assertTrue(trie.autoComplete("zgu") == None)
        self.assertTrue(trie.autoComplete("zgv") == None)
        self.assertTrue(trie.autoComplete("zgw") == None)
        self.assertTrue(trie.autoComplete("zgx") == None)
        self.assertTrue(trie.autoComplete("zgy") == None)
        self.assertTrue(trie.autoComplete("zgz") == None)
        self.assertTrue(trie.autoComplete("zh") == None)
        self.assertTrue(trie.autoComplete("zha") == None)
        self.assertTrue(trie.autoComplete("zhb") == None)
        self.assertTrue(trie.autoComplete("zhc") == None)
        self.assertTrue(trie.autoComplete("zhd") == None)
        self.assertTrue(trie.autoComplete("zhe") == None)
        self.assertTrue(trie.autoComplete("zhf") == None)
        self.assertTrue(trie.autoComplete("zhg") == None)
        self.assertTrue(trie.autoComplete("zhh") == None)
        self.assertTrue(trie.autoComplete("zhi") == None)
        self.assertTrue(trie.autoComplete("zhj") == None)
        self.assertTrue(trie.autoComplete("zhk") == None)
        self.assertTrue(trie.autoComplete("zhl") == None)
        self.assertTrue(trie.autoComplete("zhm") == None)
        self.assertTrue(trie.autoComplete("zhn") == None)
        self.assertTrue(trie.autoComplete("zho") == None)
        self.assertTrue(trie.autoComplete("zhp") == None)
        self.assertTrue(trie.autoComplete("zhq") == None)
        self.assertTrue(trie.autoComplete("zhr") == None)
        self.assertTrue(trie.autoComplete("zhs") == None)
        self.assertTrue(trie.autoComplete("zht") == None)
        self.assertTrue(trie.autoComplete("zhu") == None)
        self.assertTrue(trie.autoComplete("zhv") == None)
        self.assertTrue(trie.autoComplete("zhw") == None)
        self.assertTrue(trie.autoComplete("zhx") == None)
        self.assertTrue(trie.autoComplete("zhy") == None)
        self.assertTrue(trie.autoComplete("zhz") == None)
        self.assertTrue(trie.autoComplete("zi") == None)
        self.assertTrue(trie.autoComplete("zia") == None)
        self.assertTrue(trie.autoComplete("zib") == None)
        self.assertTrue(trie.autoComplete("zic") == None)
        self.assertTrue(trie.autoComplete("zid") == None)
        self.assertTrue(trie.autoComplete("zie") == None)
        self.assertTrue(trie.autoComplete("zif") == None)
        self.assertTrue(trie.autoComplete("zig") == None)
        self.assertTrue(trie.autoComplete("zih") == None)
        self.assertTrue(trie.autoComplete("zii") == None)
        self.assertTrue(trie.autoComplete("zij") == None)
        self.assertTrue(trie.autoComplete("zik") == None)
        self.assertTrue(trie.autoComplete("zil") == None)
        self.assertTrue(trie.autoComplete("zim") == None)
        self.assertTrue(trie.autoComplete("zin") == None)
        self.assertTrue(trie.autoComplete("zio") == None)
        self.assertTrue(trie.autoComplete("zip") == None)
        self.assertTrue(trie.autoComplete("ziq") == None)
        self.assertTrue(trie.autoComplete("zir") == None)
        self.assertTrue(trie.autoComplete("zis") == None)
        self.assertTrue(trie.autoComplete("zit") == None)
        self.assertTrue(trie.autoComplete("ziu") == None)
        self.assertTrue(trie.autoComplete("ziv") == None)
        self.assertTrue(trie.autoComplete("ziw") == None)
        self.assertTrue(trie.autoComplete("zix") == None)
        self.assertTrue(trie.autoComplete("ziy") == None)
        self.assertTrue(trie.autoComplete("ziz") == None)
        self.assertTrue(trie.autoComplete("zj") == None)
        self.assertTrue(trie.autoComplete("zja") == None)
        self.assertTrue(trie.autoComplete("zjb") == None)
        self.assertTrue(trie.autoComplete("zjc") == None)
        self.assertTrue(trie.autoComplete("zjd") == None)
        self.assertTrue(trie.autoComplete("zje") == None)
        self.assertTrue(trie.autoComplete("zjf") == None)
        self.assertTrue(trie.autoComplete("zjg") == None)
        self.assertTrue(trie.autoComplete("zjh") == None)
        self.assertTrue(trie.autoComplete("zji") == None)
        self.assertTrue(trie.autoComplete("zjj") == None)
        self.assertTrue(trie.autoComplete("zjk") == None)
        self.assertTrue(trie.autoComplete("zjl") == None)
        self.assertTrue(trie.autoComplete("zjm") == None)
        self.assertTrue(trie.autoComplete("zjn") == None)
        self.assertTrue(trie.autoComplete("zjo") == None)
        self.assertTrue(trie.autoComplete("zjp") == None)
        self.assertTrue(trie.autoComplete("zjq") == None)
        self.assertTrue(trie.autoComplete("zjr") == None)
        self.assertTrue(trie.autoComplete("zjs") == None)
        self.assertTrue(trie.autoComplete("zjt") == None)
        self.assertTrue(trie.autoComplete("zju") == None)
        self.assertTrue(trie.autoComplete("zjv") == None)
        self.assertTrue(trie.autoComplete("zjw") == None)
        self.assertTrue(trie.autoComplete("zjx") == None)
        self.assertTrue(trie.autoComplete("zjy") == None)
        self.assertTrue(trie.autoComplete("zjz") == None)
        self.assertTrue(trie.autoComplete("zk") == None)
        self.assertTrue(trie.autoComplete("zka") == None)
        self.assertTrue(trie.autoComplete("zkb") == None)
        self.assertTrue(trie.autoComplete("zkc") == None)
        self.assertTrue(trie.autoComplete("zkd") == None)
        self.assertTrue(trie.autoComplete("zke") == None)
        self.assertTrue(trie.autoComplete("zkf") == None)
        self.assertTrue(trie.autoComplete("zkg") == None)
        self.assertTrue(trie.autoComplete("zkh") == None)
        self.assertTrue(trie.autoComplete("zki") == None)
        self.assertTrue(trie.autoComplete("zkj") == None)
        self.assertTrue(trie.autoComplete("zkk") == None)
        self.assertTrue(trie.autoComplete("zkl") == None)
        self.assertTrue(trie.autoComplete("zkm") == None)
        self.assertTrue(trie.autoComplete("zkn") == None)
        self.assertTrue(trie.autoComplete("zko") == None)
        self.assertTrue(trie.autoComplete("zkp") == None)
        self.assertTrue(trie.autoComplete("zkq") == None)
        self.assertTrue(trie.autoComplete("zkr") == None)
        self.assertTrue(trie.autoComplete("zks") == None)
        self.assertTrue(trie.autoComplete("zkt") == None)
        self.assertTrue(trie.autoComplete("zku") == None)
        self.assertTrue(trie.autoComplete("zkv") == None)
        self.assertTrue(trie.autoComplete("zkw") == None)
        self.assertTrue(trie.autoComplete("zkx") == None)
        self.assertTrue(trie.autoComplete("zky") == None)
        self.assertTrue(trie.autoComplete("zkz") == None)
        self.assertTrue(trie.autoComplete("zl") == None)
        self.assertTrue(trie.autoComplete("zla") == None)
        self.assertTrue(trie.autoComplete("zlb") == None)
        self.assertTrue(trie.autoComplete("zlc") == None)
        self.assertTrue(trie.autoComplete("zld") == None)
        self.assertTrue(trie.autoComplete("zle") == None)
        self.assertTrue(trie.autoComplete("zlf") == None)
        self.assertTrue(trie.autoComplete("zlg") == None)
        self.assertTrue(trie.autoComplete("zlh") == None)
        self.assertTrue(trie.autoComplete("zli") == None)
        self.assertTrue(trie.autoComplete("zlj") == None)
        self.assertTrue(trie.autoComplete("zlk") == None)
        self.assertTrue(trie.autoComplete("zll") == None)
        self.assertTrue(trie.autoComplete("zlm") == None)
        self.assertTrue(trie.autoComplete("zln") == None)
        self.assertTrue(trie.autoComplete("zlo") == None)
        self.assertTrue(trie.autoComplete("zlp") == None)
        self.assertTrue(trie.autoComplete("zlq") == None)
        self.assertTrue(trie.autoComplete("zlr") == None)
        self.assertTrue(trie.autoComplete("zls") == None)
        self.assertTrue(trie.autoComplete("zlt") == None)
        self.assertTrue(trie.autoComplete("zlu") == None)
        self.assertTrue(trie.autoComplete("zlv") == None)
        self.assertTrue(trie.autoComplete("zlw") == None)
        self.assertTrue(trie.autoComplete("zlx") == None)
        self.assertTrue(trie.autoComplete("zly") == None)
        self.assertTrue(trie.autoComplete("zlz") == None)
        self.assertTrue(trie.autoComplete("zm") == None)
        self.assertTrue(trie.autoComplete("zma") == None)
        self.assertTrue(trie.autoComplete("zmb") == None)
        self.assertTrue(trie.autoComplete("zmc") == None)
        self.assertTrue(trie.autoComplete("zmd") == None)
        self.assertTrue(trie.autoComplete("zme") == None)
        self.assertTrue(trie.autoComplete("zmf") == None)
        self.assertTrue(trie.autoComplete("zmg") == None)
        self.assertTrue(trie.autoComplete("zmh") == None)
        self.assertTrue(trie.autoComplete("zmi") == None)
        self.assertTrue(trie.autoComplete("zmj") == None)
        self.assertTrue(trie.autoComplete("zmk") == None)
        self.assertTrue(trie.autoComplete("zml") == None)
        self.assertTrue(trie.autoComplete("zmm") == None)
        self.assertTrue(trie.autoComplete("zmn") == None)
        self.assertTrue(trie.autoComplete("zmo") == None)
        self.assertTrue(trie.autoComplete("zmp") == None)
        self.assertTrue(trie.autoComplete("zmq") == None)
        self.assertTrue(trie.autoComplete("zmr") == None)
        self.assertTrue(trie.autoComplete("zms") == None)
        self.assertTrue(trie.autoComplete("zmt") == None)
        self.assertTrue(trie.autoComplete("zmu") == None)
        self.assertTrue(trie.autoComplete("zmv") == None)
        self.assertTrue(trie.autoComplete("zmw") == None)
        self.assertTrue(trie.autoComplete("zmx") == None)
        self.assertTrue(trie.autoComplete("zmy") == None)
        self.assertTrue(trie.autoComplete("zmz") == None)
        self.assertTrue(trie.autoComplete("zn") == None)
        self.assertTrue(trie.autoComplete("zna") == None)
        self.assertTrue(trie.autoComplete("znb") == None)
        self.assertTrue(trie.autoComplete("znc") == None)
        self.assertTrue(trie.autoComplete("znd") == None)
        self.assertTrue(trie.autoComplete("zne") == None)
        self.assertTrue(trie.autoComplete("znf") == None)
        self.assertTrue(trie.autoComplete("zng") == None)
        self.assertTrue(trie.autoComplete("znh") == None)
        self.assertTrue(trie.autoComplete("zni") == None)
        self.assertTrue(trie.autoComplete("znj") == None)
        self.assertTrue(trie.autoComplete("znk") == None)
        self.assertTrue(trie.autoComplete("znl") == None)
        self.assertTrue(trie.autoComplete("znm") == None)
        self.assertTrue(trie.autoComplete("znn") == None)
        self.assertTrue(trie.autoComplete("zno") == None)
        self.assertTrue(trie.autoComplete("znp") == None)
        self.assertTrue(trie.autoComplete("znq") == None)
        self.assertTrue(trie.autoComplete("znr") == None)
        self.assertTrue(trie.autoComplete("zns") == None)
        self.assertTrue(trie.autoComplete("znt") == None)
        self.assertTrue(trie.autoComplete("znu") == None)
        self.assertTrue(trie.autoComplete("znv") == None)
        self.assertTrue(trie.autoComplete("znw") == None)
        self.assertTrue(trie.autoComplete("znx") == None)
        self.assertTrue(trie.autoComplete("zny") == None)
        self.assertTrue(trie.autoComplete("znz") == None)
        self.assertTrue(trie.autoComplete("zo") == None)
        self.assertTrue(trie.autoComplete("zoa") == None)
        self.assertTrue(trie.autoComplete("zob") == None)
        self.assertTrue(trie.autoComplete("zoc") == None)
        self.assertTrue(trie.autoComplete("zod") == None)
        self.assertTrue(trie.autoComplete("zoe") == None)
        self.assertTrue(trie.autoComplete("zof") == None)
        self.assertTrue(trie.autoComplete("zog") == None)
        self.assertTrue(trie.autoComplete("zoh") == None)
        self.assertTrue(trie.autoComplete("zoi") == None)
        self.assertTrue(trie.autoComplete("zoj") == None)
        self.assertTrue(trie.autoComplete("zok") == None)
        self.assertTrue(trie.autoComplete("zol") == None)
        self.assertTrue(trie.autoComplete("zom") == None)
        self.assertTrue(trie.autoComplete("zon") == None)
        self.assertTrue(trie.autoComplete("zoo") == None)
        self.assertTrue(trie.autoComplete("zop") == None)
        self.assertTrue(trie.autoComplete("zoq") == None)
        self.assertTrue(trie.autoComplete("zor") == None)
        self.assertTrue(trie.autoComplete("zos") == None)
        self.assertTrue(trie.autoComplete("zot") == None)
        self.assertTrue(trie.autoComplete("zou") == None)
        self.assertTrue(trie.autoComplete("zov") == None)
        self.assertTrue(trie.autoComplete("zow") == None)
        self.assertTrue(trie.autoComplete("zox") == None)
        self.assertTrue(trie.autoComplete("zoy") == None)
        self.assertTrue(trie.autoComplete("zoz") == None)
        self.assertTrue(trie.autoComplete("zp") == None)
        self.assertTrue(trie.autoComplete("zpa") == None)
        self.assertTrue(trie.autoComplete("zpb") == None)
        self.assertTrue(trie.autoComplete("zpc") == None)
        self.assertTrue(trie.autoComplete("zpd") == None)
        self.assertTrue(trie.autoComplete("zpe") == None)
        self.assertTrue(trie.autoComplete("zpf") == None)
        self.assertTrue(trie.autoComplete("zpg") == None)
        self.assertTrue(trie.autoComplete("zph") == None)
        self.assertTrue(trie.autoComplete("zpi") == None)
        self.assertTrue(trie.autoComplete("zpj") == None)
        self.assertTrue(trie.autoComplete("zpk") == None)
        self.assertTrue(trie.autoComplete("zpl") == None)
        self.assertTrue(trie.autoComplete("zpm") == None)
        self.assertTrue(trie.autoComplete("zpn") == None)
        self.assertTrue(trie.autoComplete("zpo") == None)
        self.assertTrue(trie.autoComplete("zpp") == None)
        self.assertTrue(trie.autoComplete("zpq") == None)
        self.assertTrue(trie.autoComplete("zpr") == None)
        self.assertTrue(trie.autoComplete("zps") == None)
        self.assertTrue(trie.autoComplete("zpt") == None)
        self.assertTrue(trie.autoComplete("zpu") == None)
        self.assertTrue(trie.autoComplete("zpv") == None)
        self.assertTrue(trie.autoComplete("zpw") == None)
        self.assertTrue(trie.autoComplete("zpx") == None)
        self.assertTrue(trie.autoComplete("zpy") == None)
        self.assertTrue(trie.autoComplete("zpz") == None)
        self.assertTrue(trie.autoComplete("zq") == None)
        self.assertTrue(trie.autoComplete("zqa") == None)
        self.assertTrue(trie.autoComplete("zqb") == None)
        self.assertTrue(trie.autoComplete("zqc") == None)
        self.assertTrue(trie.autoComplete("zqd") == None)
        self.assertTrue(trie.autoComplete("zqe") == None)
        self.assertTrue(trie.autoComplete("zqf") == None)
        self.assertTrue(trie.autoComplete("zqg") == None)
        self.assertTrue(trie.autoComplete("zqh") == None)
        self.assertTrue(trie.autoComplete("zqi") == None)
        self.assertTrue(trie.autoComplete("zqj") == None)
        self.assertTrue(trie.autoComplete("zqk") == None)
        self.assertTrue(trie.autoComplete("zql") == None)
        self.assertTrue(trie.autoComplete("zqm") == None)
        self.assertTrue(trie.autoComplete("zqn") == None)
        self.assertTrue(trie.autoComplete("zqo") == None)
        self.assertTrue(trie.autoComplete("zqp") == None)
        self.assertTrue(trie.autoComplete("zqq") == None)
        self.assertTrue(trie.autoComplete("zqr") == None)
        self.assertTrue(trie.autoComplete("zqs") == None)
        self.assertTrue(trie.autoComplete("zqt") == None)
        self.assertTrue(trie.autoComplete("zqu") == None)
        self.assertTrue(trie.autoComplete("zqv") == None)
        self.assertTrue(trie.autoComplete("zqw") == None)
        self.assertTrue(trie.autoComplete("zqx") == None)
        self.assertTrue(trie.autoComplete("zqy") == None)
        self.assertTrue(trie.autoComplete("zqz") == None)
        self.assertTrue(trie.autoComplete("zr") == None)
        self.assertTrue(trie.autoComplete("zra") == None)
        self.assertTrue(trie.autoComplete("zrb") == None)
        self.assertTrue(trie.autoComplete("zrc") == None)
        self.assertTrue(trie.autoComplete("zrd") == None)
        self.assertTrue(trie.autoComplete("zre") == None)
        self.assertTrue(trie.autoComplete("zrf") == None)
        self.assertTrue(trie.autoComplete("zrg") == None)
        self.assertTrue(trie.autoComplete("zrh") == None)
        self.assertTrue(trie.autoComplete("zri") == None)
        self.assertTrue(trie.autoComplete("zrj") == None)
        self.assertTrue(trie.autoComplete("zrk") == None)
        self.assertTrue(trie.autoComplete("zrl") == None)
        self.assertTrue(trie.autoComplete("zrm") == None)
        self.assertTrue(trie.autoComplete("zrn") == None)
        self.assertTrue(trie.autoComplete("zro") == None)
        self.assertTrue(trie.autoComplete("zrp") == None)
        self.assertTrue(trie.autoComplete("zrq") == None)
        self.assertTrue(trie.autoComplete("zrr") == None)
        self.assertTrue(trie.autoComplete("zrs") == None)
        self.assertTrue(trie.autoComplete("zrt") == None)
        self.assertTrue(trie.autoComplete("zru") == None)
        self.assertTrue(trie.autoComplete("zrv") == None)
        self.assertTrue(trie.autoComplete("zrw") == None)
        self.assertTrue(trie.autoComplete("zrx") == None)
        self.assertTrue(trie.autoComplete("zry") == None)
        self.assertTrue(trie.autoComplete("zrz") == None)
        self.assertTrue(trie.autoComplete("zs") == None)
        self.assertTrue(trie.autoComplete("zsa") == None)
        self.assertTrue(trie.autoComplete("zsb") == None)
        self.assertTrue(trie.autoComplete("zsc") == None)
        self.assertTrue(trie.autoComplete("zsd") == None)
        self.assertTrue(trie.autoComplete("zse") == None)
        self.assertTrue(trie.autoComplete("zsf") == None)
        self.assertTrue(trie.autoComplete("zsg") == None)
        self.assertTrue(trie.autoComplete("zsh") == None)
        self.assertTrue(trie.autoComplete("zsi") == None)
        self.assertTrue(trie.autoComplete("zsj") == None)
        self.assertTrue(trie.autoComplete("zsk") == None)
        self.assertTrue(trie.autoComplete("zsl") == None)
        self.assertTrue(trie.autoComplete("zsm") == None)
        self.assertTrue(trie.autoComplete("zsn") == None)
        self.assertTrue(trie.autoComplete("zso") == None)
        self.assertTrue(trie.autoComplete("zsp") == None)
        self.assertTrue(trie.autoComplete("zsq") == None)
        self.assertTrue(trie.autoComplete("zsr") == None)
        self.assertTrue(trie.autoComplete("zss") == None)
        self.assertTrue(trie.autoComplete("zst") == None)
        self.assertTrue(trie.autoComplete("zsu") == None)
        self.assertTrue(trie.autoComplete("zsv") == None)
        self.assertTrue(trie.autoComplete("zsw") == None)
        self.assertTrue(trie.autoComplete("zsx") == None)
        self.assertTrue(trie.autoComplete("zsy") == None)
        self.assertTrue(trie.autoComplete("zsz") == None)
        self.assertTrue(trie.autoComplete("zt") == None)
        self.assertTrue(trie.autoComplete("zta") == None)
        self.assertTrue(trie.autoComplete("ztb") == None)
        self.assertTrue(trie.autoComplete("ztc") == None)
        self.assertTrue(trie.autoComplete("ztd") == None)
        self.assertTrue(trie.autoComplete("zte") == None)
        self.assertTrue(trie.autoComplete("ztf") == None)
        self.assertTrue(trie.autoComplete("ztg") == None)
        self.assertTrue(trie.autoComplete("zth") == None)
        self.assertTrue(trie.autoComplete("zti") == None)
        self.assertTrue(trie.autoComplete("ztj") == None)
        self.assertTrue(trie.autoComplete("ztk") == None)
        self.assertTrue(trie.autoComplete("ztl") == None)
        self.assertTrue(trie.autoComplete("ztm") == None)
        self.assertTrue(trie.autoComplete("ztn") == None)
        self.assertTrue(trie.autoComplete("zto") == None)
        self.assertTrue(trie.autoComplete("ztp") == None)
        self.assertTrue(trie.autoComplete("ztq") == None)
        self.assertTrue(trie.autoComplete("ztr") == None)
        self.assertTrue(trie.autoComplete("zts") == None)
        self.assertTrue(trie.autoComplete("ztt") == None)
        self.assertTrue(trie.autoComplete("ztu") == None)
        self.assertTrue(trie.autoComplete("ztv") == None)
        self.assertTrue(trie.autoComplete("ztw") == None)
        self.assertTrue(trie.autoComplete("ztx") == None)
        self.assertTrue(trie.autoComplete("zty") == None)
        self.assertTrue(trie.autoComplete("ztz") == None)
        self.assertTrue(trie.autoComplete("zu") == None)
        self.assertTrue(trie.autoComplete("zua") == None)
        self.assertTrue(trie.autoComplete("zub") == None)
        self.assertTrue(trie.autoComplete("zuc") == None)
        self.assertTrue(trie.autoComplete("zud") == None)
        self.assertTrue(trie.autoComplete("zue") == None)
        self.assertTrue(trie.autoComplete("zuf") == None)
        self.assertTrue(trie.autoComplete("zug") == None)
        self.assertTrue(trie.autoComplete("zuh") == None)
        self.assertTrue(trie.autoComplete("zui") == None)
        self.assertTrue(trie.autoComplete("zuj") == None)
        self.assertTrue(trie.autoComplete("zuk") == None)
        self.assertTrue(trie.autoComplete("zul") == None)
        self.assertTrue(trie.autoComplete("zum") == None)
        self.assertTrue(trie.autoComplete("zun") == None)
        self.assertTrue(trie.autoComplete("zuo") == None)
        self.assertTrue(trie.autoComplete("zup") == None)
        self.assertTrue(trie.autoComplete("zuq") == None)
        self.assertTrue(trie.autoComplete("zur") == None)
        self.assertTrue(trie.autoComplete("zus") == None)
        self.assertTrue(trie.autoComplete("zut") == None)
        self.assertTrue(trie.autoComplete("zuu") == None)
        self.assertTrue(trie.autoComplete("zuv") == None)
        self.assertTrue(trie.autoComplete("zuw") == None)
        self.assertTrue(trie.autoComplete("zux") == None)
        self.assertTrue(trie.autoComplete("zuy") == None)
        self.assertTrue(trie.autoComplete("zuz") == None)
        self.assertTrue(trie.autoComplete("zv") == None)
        self.assertTrue(trie.autoComplete("zva") == None)
        self.assertTrue(trie.autoComplete("zvb") == None)
        self.assertTrue(trie.autoComplete("zvc") == None)
        self.assertTrue(trie.autoComplete("zvd") == None)
        self.assertTrue(trie.autoComplete("zve") == None)
        self.assertTrue(trie.autoComplete("zvf") == None)
        self.assertTrue(trie.autoComplete("zvg") == None)
        self.assertTrue(trie.autoComplete("zvh") == None)
        self.assertTrue(trie.autoComplete("zvi") == None)
        self.assertTrue(trie.autoComplete("zvj") == None)
        self.assertTrue(trie.autoComplete("zvk") == None)
        self.assertTrue(trie.autoComplete("zvl") == None)
        self.assertTrue(trie.autoComplete("zvm") == None)
        self.assertTrue(trie.autoComplete("zvn") == None)
        self.assertTrue(trie.autoComplete("zvo") == None)
        self.assertTrue(trie.autoComplete("zvp") == None)
        self.assertTrue(trie.autoComplete("zvq") == None)
        self.assertTrue(trie.autoComplete("zvr") == None)
        self.assertTrue(trie.autoComplete("zvs") == None)
        self.assertTrue(trie.autoComplete("zvt") == None)
        self.assertTrue(trie.autoComplete("zvu") == None)
        self.assertTrue(trie.autoComplete("zvv") == None)
        self.assertTrue(trie.autoComplete("zvw") == None)
        self.assertTrue(trie.autoComplete("zvx") == None)
        self.assertTrue(trie.autoComplete("zvy") == None)
        self.assertTrue(trie.autoComplete("zvz") == None)
        self.assertTrue(trie.autoComplete("zw") == None)
        self.assertTrue(trie.autoComplete("zwa") == None)
        self.assertTrue(trie.autoComplete("zwb") == None)
        self.assertTrue(trie.autoComplete("zwc") == None)
        self.assertTrue(trie.autoComplete("zwd") == None)
        self.assertTrue(trie.autoComplete("zwe") == None)
        self.assertTrue(trie.autoComplete("zwf") == None)
        self.assertTrue(trie.autoComplete("zwg") == None)
        self.assertTrue(trie.autoComplete("zwh") == None)
        self.assertTrue(trie.autoComplete("zwi") == None)
        self.assertTrue(trie.autoComplete("zwj") == None)
        self.assertTrue(trie.autoComplete("zwk") == None)
        self.assertTrue(trie.autoComplete("zwl") == None)
        self.assertTrue(trie.autoComplete("zwm") == None)
        self.assertTrue(trie.autoComplete("zwn") == None)
        self.assertTrue(trie.autoComplete("zwo") == None)
        self.assertTrue(trie.autoComplete("zwp") == None)
        self.assertTrue(trie.autoComplete("zwq") == None)
        self.assertTrue(trie.autoComplete("zwr") == None)
        self.assertTrue(trie.autoComplete("zws") == None)
        self.assertTrue(trie.autoComplete("zwt") == None)
        self.assertTrue(trie.autoComplete("zwu") == None)
        self.assertTrue(trie.autoComplete("zwv") == None)
        self.assertTrue(trie.autoComplete("zww") == None)
        self.assertTrue(trie.autoComplete("zwx") == None)
        self.assertTrue(trie.autoComplete("zwy") == None)
        self.assertTrue(trie.autoComplete("zwz") == None)
        self.assertTrue(trie.autoComplete("zx") == None)
        self.assertTrue(trie.autoComplete("zxa") == None)
        self.assertTrue(trie.autoComplete("zxb") == None)
        self.assertTrue(trie.autoComplete("zxc") == None)
        self.assertTrue(trie.autoComplete("zxd") == None)
        self.assertTrue(trie.autoComplete("zxe") == None)
        self.assertTrue(trie.autoComplete("zxf") == None)
        self.assertTrue(trie.autoComplete("zxg") == None)
        self.assertTrue(trie.autoComplete("zxh") == None)
        self.assertTrue(trie.autoComplete("zxi") == None)
        self.assertTrue(trie.autoComplete("zxj") == None)
        self.assertTrue(trie.autoComplete("zxk") == None)
        self.assertTrue(trie.autoComplete("zxl") == None)
        self.assertTrue(trie.autoComplete("zxm") == None)
        self.assertTrue(trie.autoComplete("zxn") == None)
        self.assertTrue(trie.autoComplete("zxo") == None)
        self.assertTrue(trie.autoComplete("zxp") == None)
        self.assertTrue(trie.autoComplete("zxq") == None)
        self.assertTrue(trie.autoComplete("zxr") == None)
        self.assertTrue(trie.autoComplete("zxs") == None)
        self.assertTrue(trie.autoComplete("zxt") == None)
        self.assertTrue(trie.autoComplete("zxu") == None)
        self.assertTrue(trie.autoComplete("zxv") == None)
        self.assertTrue(trie.autoComplete("zxw") == None)
        self.assertTrue(trie.autoComplete("zxx") == None)
        self.assertTrue(trie.autoComplete("zxy") == None)
        self.assertTrue(trie.autoComplete("zxz") == None)
        self.assertTrue(trie.autoComplete("zy") == None)
        self.assertTrue(trie.autoComplete("zya") == None)
        self.assertTrue(trie.autoComplete("zyb") == None)
        self.assertTrue(trie.autoComplete("zyc") == None)
        self.assertTrue(trie.autoComplete("zyd") == None)
        self.assertTrue(trie.autoComplete("zye") == None)
        self.assertTrue(trie.autoComplete("zyf") == None)
        self.assertTrue(trie.autoComplete("zyg") == None)
        self.assertTrue(trie.autoComplete("zyh") == None)
        self.assertTrue(trie.autoComplete("zyi") == None)
        self.assertTrue(trie.autoComplete("zyj") == None)
        self.assertTrue(trie.autoComplete("zyk") == None)
        self.assertTrue(trie.autoComplete("zyl") == None)
        self.assertTrue(trie.autoComplete("zym") == None)
        self.assertTrue(trie.autoComplete("zyn") == None)
        self.assertTrue(trie.autoComplete("zyo") == None)
        self.assertTrue(trie.autoComplete("zyp") == None)
        self.assertTrue(trie.autoComplete("zyq") == None)
        self.assertTrue(trie.autoComplete("zyr") == None)
        self.assertTrue(trie.autoComplete("zys") == None)
        self.assertTrue(trie.autoComplete("zyt") == None)
        self.assertTrue(trie.autoComplete("zyu") == None)
        self.assertTrue(trie.autoComplete("zyv") == None)
        self.assertTrue(trie.autoComplete("zyw") == None)
        self.assertTrue(trie.autoComplete("zyx") == None)
        self.assertTrue(trie.autoComplete("zyy") == None)
        self.assertTrue(trie.autoComplete("zyz") == None)
        self.assertTrue(trie.autoComplete("zz") == None)
        self.assertTrue(trie.autoComplete("zza") == None)
        self.assertTrue(trie.autoComplete("zzb") == None)
        self.assertTrue(trie.autoComplete("zzc") == None)
        self.assertTrue(trie.autoComplete("zzd") == None)
        self.assertTrue(trie.autoComplete("zze") == None)
        self.assertTrue(trie.autoComplete("zzf") == None)
        self.assertTrue(trie.autoComplete("zzg") == None)
        self.assertTrue(trie.autoComplete("zzh") == None)
        self.assertTrue(trie.autoComplete("zzi") == None)
        self.assertTrue(trie.autoComplete("zzj") == None)
        self.assertTrue(trie.autoComplete("zzk") == None)
        self.assertTrue(trie.autoComplete("zzl") == None)
        self.assertTrue(trie.autoComplete("zzm") == None)
        self.assertTrue(trie.autoComplete("zzn") == None)
        self.assertTrue(trie.autoComplete("zzo") == None)
        self.assertTrue(trie.autoComplete("zzp") == None)
        self.assertTrue(trie.autoComplete("zzq") == None)
        self.assertTrue(trie.autoComplete("zzr") == None)
        self.assertTrue(trie.autoComplete("zzs") == None)
        self.assertTrue(trie.autoComplete("zzt") == None)
        self.assertTrue(trie.autoComplete("zzu") == None)
        self.assertTrue(trie.autoComplete("zzv") == None)
        self.assertTrue(trie.autoComplete("zzw") == None)
        self.assertTrue(trie.autoComplete("zzx") == None)
        self.assertTrue(trie.autoComplete("zzy") == None)
        self.assertTrue(trie.autoComplete("zzz") == None)

if __name__ == "__main__":
    unittest.main()